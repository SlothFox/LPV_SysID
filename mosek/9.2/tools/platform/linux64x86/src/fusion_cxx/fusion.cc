#include "monty.h"
#include "fusion_p.h"

template<typename T> struct _checked_ptr_1
{
  T * ptr;
  size_t sz;
  _checked_ptr_1<T>(T * ptr, size_t sz) : ptr(ptr), sz(sz) {}
  T & operator[](ptrdiff_t i) { assert(i >= 0 && i < sz); return ptr[i]; }
  const T & operator[](ptrdiff_t i) const { assert(i >= 0 && i < sz); return ptr[i]; }
  void update(T * ptr_, size_t sz_) { ptr = ptr_; sz = sz_; }
};

template<typename T> struct _checked_ptr_2
{
  T * ptr;
  size_t sz0, sz1;
  _checked_ptr_2<T>(T * ptr, size_t sz0, size_t sz1) : ptr(ptr), sz0(sz0),sz1(sz1) {}
  T & operator()(ptrdiff_t i0, ptrdiff_t i1) { assert(i0 >= 0 && i0 < sz0 && i1 >= 0 && i1 < sz1); return ptr[i0 * sz1 + i1]; }
  const T & operator()(ptrdiff_t i0, ptrdiff_t i1) const { assert(i0 >= 0 && i0 < sz0 && i1 >= 0 && i1 < sz1); return ptr[i0 * sz1 + i1]; }
  void update(T * ptr_, size_t sz0_, size_t sz1_) { ptr = ptr_; sz0 = sz0_; sz1 = sz1_; }
};

// See http://www.cplusplus.com/articles/DE18T05o/
//                 A      && ( (       B      && B1 && B2      ) || (      C      &&   C1 &&   C2  ) )
// A a and b a have different signs
// B, B1, B2 a and b are both non-negative, r is less than both a and b
// C, C1, C2 a and b are both negative, r is greater than both a and b

struct InternalNumericOverflow {};

template<typename T>
static inline T checked_add(T a, T b, bool & overflow) {
  int r = a+b;
  overflow = ((a ^ b) >= 0) && ( (( (a & b) >= 0) && r < a && r < b) || ( ((a & b) < 0) && a < r && b < r) );
  return r;
}

template<typename T>
static inline T safe_add_(T a, T b) {
  bool overflow;
  T r = checked_add(a,b,overflow);
  if (overflow)
    throw InternalNumericOverflow();
  else
    return r;
}

static inline           int safe_add(int a, int b) { return safe_add_<long long int>(a,b); }
static inline long long int safe_add(long long int a, long long int b) { return safe_add_<long long int>(a,b); }
static inline long long int safe_add(int a, long long int b) { return safe_add_<long long int>(a,b); }
static inline long long int safe_add(long long int a, int b) { return safe_add_<long long int>(a,b); }

template<typename T>
static inline T checked_mul(T a, T b, bool & overflow) {
  T r = a * b;
  overflow = b != 0 && (((a ^ b) >= 0 && a > std::numeric_limits<T>::max() / b) || ((a ^ b) < 0 && a < std::numeric_limits<T>::min() / b));
  return r;
}

template<typename T>
static inline T safe_mul_(T a, T b) {
  bool overflow;
  T r = checked_mul(a,b,overflow);
  if (overflow)
    throw InternalNumericOverflow();
  else
    return r;
}

static inline           int safe_mul(int a, int b) { return safe_mul_<long long int>(a,b); }
static inline long long int safe_mul(long long int a, long long int b) { return safe_mul_<long long int>(a,b); }
static inline long long int safe_mul(int a, long long int b) { return safe_mul_<long long int>(a,b); }
static inline long long int safe_mul(long long int a, int b) { return safe_mul_<long long int>(a,b); }

std::ostream & mosek::fusion::operator<<(std::ostream & os,mosek::fusion::StatusKey val){switch (val){case StatusKey::Unknown: os << "StatusKey::Unknown"; break;case StatusKey::Basic: os << "StatusKey::Basic"; break;case StatusKey::SuperBasic: os << "StatusKey::SuperBasic"; break;case StatusKey::OnBound: os << "StatusKey::OnBound"; break;case StatusKey::Infinity: os << "StatusKey::Infinity"; break;default: os << "StatusKey.<invalid>"; break;}return os;}std::ostream & mosek::fusion::operator<<(std::ostream & os,mosek::fusion::SolutionType val){switch (val){case SolutionType::Default: os << "SolutionType::Default"; break;case SolutionType::Basic: os << "SolutionType::Basic"; break;case SolutionType::Interior: os << "SolutionType::Interior"; break;case SolutionType::Integer: os << "SolutionType::Integer"; break;default: os << "SolutionType.<invalid>"; break;}return os;}std::ostream & mosek::fusion::operator<<(std::ostream & os,mosek::fusion::ProblemStatus val){switch (val){case ProblemStatus::Unknown: os << "ProblemStatus::Unknown"; break;case ProblemStatus::PrimalAndDualFeasible: os << "ProblemStatus::PrimalAndDualFeasible"; break;case ProblemStatus::PrimalFeasible: os << "ProblemStatus::PrimalFeasible"; break;case ProblemStatus::DualFeasible: os << "ProblemStatus::DualFeasible"; break;case ProblemStatus::PrimalInfeasible: os << "ProblemStatus::PrimalInfeasible"; break;case ProblemStatus::DualInfeasible: os << "ProblemStatus::DualInfeasible"; break;case ProblemStatus::PrimalAndDualInfeasible: os << "ProblemStatus::PrimalAndDualInfeasible"; break;case ProblemStatus::IllPosed: os << "ProblemStatus::IllPosed"; break;case ProblemStatus::PrimalInfeasibleOrUnbounded: os << "ProblemStatus::PrimalInfeasibleOrUnbounded"; break;default: os << "ProblemStatus.<invalid>"; break;}return os;}std::ostream & mosek::fusion::operator<<(std::ostream & os,mosek::fusion::AccSolutionStatus val){switch (val){case AccSolutionStatus::Anything: os << "AccSolutionStatus::Anything"; break;case AccSolutionStatus::Optimal: os << "AccSolutionStatus::Optimal"; break;case AccSolutionStatus::Feasible: os << "AccSolutionStatus::Feasible"; break;case AccSolutionStatus::Certificate: os << "AccSolutionStatus::Certificate"; break;default: os << "AccSolutionStatus.<invalid>"; break;}return os;}std::ostream & mosek::fusion::operator<<(std::ostream & os,mosek::fusion::SolutionStatus val){switch (val){case SolutionStatus::Undefined: os << "SolutionStatus::Undefined"; break;case SolutionStatus::Unknown: os << "SolutionStatus::Unknown"; break;case SolutionStatus::Optimal: os << "SolutionStatus::Optimal"; break;case SolutionStatus::Feasible: os << "SolutionStatus::Feasible"; break;case SolutionStatus::Certificate: os << "SolutionStatus::Certificate"; break;case SolutionStatus::IllposedCert: os << "SolutionStatus::IllposedCert"; break;default: os << "SolutionStatus.<invalid>"; break;}return os;}std::ostream & mosek::fusion::operator<<(std::ostream & os,mosek::fusion::ObjectiveSense val){switch (val){case ObjectiveSense::Undefined: os << "ObjectiveSense::Undefined"; break;case ObjectiveSense::Minimize: os << "ObjectiveSense::Minimize"; break;case ObjectiveSense::Maximize: os << "ObjectiveSense::Maximize"; break;default: os << "ObjectiveSense.<invalid>"; break;}return os;}std::ostream & mosek::fusion::operator<<(std::ostream & os,mosek::fusion::QConeKey val){switch (val){case QConeKey::InQCone: os << "QConeKey::InQCone"; break;case QConeKey::InRotatedQCone: os << "QConeKey::InRotatedQCone"; break;case QConeKey::InPExpCone: os << "QConeKey::InPExpCone"; break;case QConeKey::InPPowCone: os << "QConeKey::InPPowCone"; break;case QConeKey::InDExpCone: os << "QConeKey::InDExpCone"; break;case QConeKey::InDPowCone: os << "QConeKey::InDPowCone"; break;default: os << "QConeKey.<invalid>"; break;}return os;}std::ostream & mosek::fusion::operator<<(std::ostream & os,mosek::fusion::PSDKey val){switch (val){case PSDKey::IsSymPSD: os << "PSDKey::IsSymPSD"; break;case PSDKey::IsTrilPSD: os << "PSDKey::IsTrilPSD"; break;default: os << "PSDKey.<invalid>"; break;}return os;}std::ostream & mosek::fusion::operator<<(std::ostream & os,mosek::fusion::RelationKey val){switch (val){case RelationKey::EqualsTo: os << "RelationKey::EqualsTo"; break;case RelationKey::LessThan: os << "RelationKey::LessThan"; break;case RelationKey::GreaterThan: os << "RelationKey::GreaterThan"; break;case RelationKey::IsFree: os << "RelationKey::IsFree"; break;case RelationKey::InRange: os << "RelationKey::InRange"; break;default: os << "RelationKey.<invalid>"; break;}return os;}mosek::fusion::Sort::Sort(mosek::fusion::p_Sort *_impl) : _impl(_impl) { /*std::cout << "Sort() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::Sort::~Sort() { delete _impl; _impl = nullptr; }mosek::fusion::p_Sort::p_Sort  (::mosek::fusion::Sort * _pubthis) :     _pubthis(_pubthis){}void mosek::fusion::Sort::argTransposeSort  ( std::shared_ptr< monty::ndarray< long long,1 > > _157,    std::shared_ptr< monty::ndarray< long long,1 > > _158,    int _159,    int _160,    int _161,    std::shared_ptr< monty::ndarray< long long,1 > > _162) { mosek::fusion::p_Sort::argTransposeSort(_157,_158,_159,_160,_161,_162); }void mosek::fusion::p_Sort::argTransposeSort(std::shared_ptr< monty::ndarray< long long,1 > > _157,std::shared_ptr< monty::ndarray< long long,1 > > _158,int _159,int _160,int _161,std::shared_ptr< monty::ndarray< long long,1 > > _162){
  _checked_ptr_1<long long> _ptr__157(_157 ? _157->raw() : nullptr, _157 ? _157->size(0) : 0);
  _checked_ptr_1<long long> _ptr__158(_158 ? _158->raw() : nullptr, _158 ? _158->size(0) : 0);
  _checked_ptr_1<long long> _ptr__162(_162 ? _162->raw() : nullptr, _162 ? _162->size(0) : 0);
  int _8629 = (int)0;
  int _8630 = safe_add( safe_mul( _159,_161 ),(int)1 );
  for (int _163 = _8629; _163 < _8630; ++_163)
  {
    {
      _ptr__158[_163] = (int)0;
    }
  }
  int _8631 = (int)0;
  int _8632 = (int)((_162)->size(0));
  for (int _164 = _8631; _164 < _8632; ++_164)
  {
    {
      ++ _ptr__158[safe_add( safe_add( safe_mul( (_ptr__162[_ptr__157[_164]] / safe_mul( _160,_161 )),_161 ),(_ptr__162[_ptr__157[_164]] % _161) ),(int)1 )];
    }
  }
  int _8633 = (int)0;
  int _8634 = safe_mul( _159,_161 );
  for (int _165 = _8633; _165 < _8634; ++_165)
  {
    {
      _ptr__158[safe_add( _165,(int)1 )] = safe_add( _ptr__158[safe_add( _165,(int)1 )],_ptr__158[_165] );
    }
  }
  std::vector<long long> _8635;
  for (int _167 = (int)0, _8636 = (int)((_157)->size(0)); _167 < _8636 ; ++_167)
  {
    _8635.push_back(_ptr__157[_167]);
  }
  auto _8637 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_8635.size()),_8635.begin(),_8635.end()));
  std::shared_ptr< monty::ndarray< long long,1 > > _166 = _8637;
  _checked_ptr_1<long long> _ptr__166(_166 ? _166->raw() : nullptr,_166 ? _166->size(0) : 0);
  long long _8638 = (long long)0;
  long long _8639 = (long long)((_162)->size(0));
  for (long long _168 = _8638; _168 < _8639; ++_168)
  {
    {
      long long _169 = safe_add( safe_mul( (_ptr__162[_ptr__166[_168]] / safe_mul( _160,_161 )),_161 ),(_ptr__162[_ptr__166[_168]] % _161) );
      _ptr__157[_ptr__158[_169]] = _ptr__166[_168];
      ++ _ptr__158[_169];
    }
  }
}
void mosek::fusion::Sort::argsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _170,    std::shared_ptr< monty::ndarray< long long,1 > > _171) { mosek::fusion::p_Sort::argsort(_170,_171); }void mosek::fusion::p_Sort::argsort(std::shared_ptr< monty::ndarray< long long,1 > > _170,std::shared_ptr< monty::ndarray< long long,1 > > _171){
  _checked_ptr_1<long long> _ptr__170(_170 ? _170->raw() : nullptr, _170 ? _170->size(0) : 0);
  _checked_ptr_1<long long> _ptr__171(_171 ? _171->raw() : nullptr, _171 ? _171->size(0) : 0);
  ::mosek::fusion::p_Sort::argsort(_170,_171,(long long)((int)0),(long long)((int)((_170)->size(0))),false);
}
void mosek::fusion::Sort::argsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _172,    std::shared_ptr< monty::ndarray< int,1 > > _173) { mosek::fusion::p_Sort::argsort(_172,_173); }void mosek::fusion::p_Sort::argsort(std::shared_ptr< monty::ndarray< long long,1 > > _172,std::shared_ptr< monty::ndarray< int,1 > > _173){
  _checked_ptr_1<long long> _ptr__172(_172 ? _172->raw() : nullptr, _172 ? _172->size(0) : 0);
  _checked_ptr_1<int> _ptr__173(_173 ? _173->raw() : nullptr, _173 ? _173->size(0) : 0);
  ::mosek::fusion::p_Sort::argsort(_172,_173,(long long)((int)0),(long long)((int)((_172)->size(0))),false);
}
void mosek::fusion::Sort::argsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _174,    std::shared_ptr< monty::ndarray< long long,1 > > _175,    std::shared_ptr< monty::ndarray< long long,1 > > _176) { mosek::fusion::p_Sort::argsort(_174,_175,_176); }void mosek::fusion::p_Sort::argsort(std::shared_ptr< monty::ndarray< long long,1 > > _174,std::shared_ptr< monty::ndarray< long long,1 > > _175,std::shared_ptr< monty::ndarray< long long,1 > > _176){
  _checked_ptr_1<long long> _ptr__174(_174 ? _174->raw() : nullptr, _174 ? _174->size(0) : 0);
  _checked_ptr_1<long long> _ptr__175(_175 ? _175->raw() : nullptr, _175 ? _175->size(0) : 0);
  _checked_ptr_1<long long> _ptr__176(_176 ? _176->raw() : nullptr, _176 ? _176->size(0) : 0);
  ::mosek::fusion::p_Sort::argsort(_174,_175,_176,(long long)((int)0),(long long)((int)((_174)->size(0))),false);
}
void mosek::fusion::Sort::argsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _177,    std::shared_ptr< monty::ndarray< int,1 > > _178,    std::shared_ptr< monty::ndarray< int,1 > > _179) { mosek::fusion::p_Sort::argsort(_177,_178,_179); }void mosek::fusion::p_Sort::argsort(std::shared_ptr< monty::ndarray< long long,1 > > _177,std::shared_ptr< monty::ndarray< int,1 > > _178,std::shared_ptr< monty::ndarray< int,1 > > _179){
  _checked_ptr_1<long long> _ptr__177(_177 ? _177->raw() : nullptr, _177 ? _177->size(0) : 0);
  _checked_ptr_1<int> _ptr__178(_178 ? _178->raw() : nullptr, _178 ? _178->size(0) : 0);
  _checked_ptr_1<int> _ptr__179(_179 ? _179->raw() : nullptr, _179 ? _179->size(0) : 0);
  ::mosek::fusion::p_Sort::argsort(_177,_178,_179,(long long)((int)0),(long long)((int)((_177)->size(0))),false);
}
void mosek::fusion::Sort::argsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _180,    std::shared_ptr< monty::ndarray< long long,1 > > _181,    long long _182,    long long _183) { mosek::fusion::p_Sort::argsort(_180,_181,_182,_183); }void mosek::fusion::p_Sort::argsort(std::shared_ptr< monty::ndarray< long long,1 > > _180,std::shared_ptr< monty::ndarray< long long,1 > > _181,long long _182,long long _183){
  _checked_ptr_1<long long> _ptr__180(_180 ? _180->raw() : nullptr, _180 ? _180->size(0) : 0);
  _checked_ptr_1<long long> _ptr__181(_181 ? _181->raw() : nullptr, _181 ? _181->size(0) : 0);
  ::mosek::fusion::p_Sort::argsort(_180,_181,_182,_183,false);
}
void mosek::fusion::Sort::argsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _184,    std::shared_ptr< monty::ndarray< int,1 > > _185,    long long _186,    long long _187) { mosek::fusion::p_Sort::argsort(_184,_185,_186,_187); }void mosek::fusion::p_Sort::argsort(std::shared_ptr< monty::ndarray< long long,1 > > _184,std::shared_ptr< monty::ndarray< int,1 > > _185,long long _186,long long _187){
  _checked_ptr_1<long long> _ptr__184(_184 ? _184->raw() : nullptr, _184 ? _184->size(0) : 0);
  _checked_ptr_1<int> _ptr__185(_185 ? _185->raw() : nullptr, _185 ? _185->size(0) : 0);
  ::mosek::fusion::p_Sort::argsort(_184,_185,_186,_187,false);
}
void mosek::fusion::Sort::argsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _188,    std::shared_ptr< monty::ndarray< long long,1 > > _189,    std::shared_ptr< monty::ndarray< long long,1 > > _190,    long long _191,    long long _192) { mosek::fusion::p_Sort::argsort(_188,_189,_190,_191,_192); }void mosek::fusion::p_Sort::argsort(std::shared_ptr< monty::ndarray< long long,1 > > _188,std::shared_ptr< monty::ndarray< long long,1 > > _189,std::shared_ptr< monty::ndarray< long long,1 > > _190,long long _191,long long _192){
  _checked_ptr_1<long long> _ptr__188(_188 ? _188->raw() : nullptr, _188 ? _188->size(0) : 0);
  _checked_ptr_1<long long> _ptr__189(_189 ? _189->raw() : nullptr, _189 ? _189->size(0) : 0);
  _checked_ptr_1<long long> _ptr__190(_190 ? _190->raw() : nullptr, _190 ? _190->size(0) : 0);
  ::mosek::fusion::p_Sort::argsort(_188,_189,_190,_191,_192,false);
}
void mosek::fusion::Sort::argsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _193,    std::shared_ptr< monty::ndarray< int,1 > > _194,    std::shared_ptr< monty::ndarray< int,1 > > _195,    long long _196,    long long _197) { mosek::fusion::p_Sort::argsort(_193,_194,_195,_196,_197); }void mosek::fusion::p_Sort::argsort(std::shared_ptr< monty::ndarray< long long,1 > > _193,std::shared_ptr< monty::ndarray< int,1 > > _194,std::shared_ptr< monty::ndarray< int,1 > > _195,long long _196,long long _197){
  _checked_ptr_1<long long> _ptr__193(_193 ? _193->raw() : nullptr, _193 ? _193->size(0) : 0);
  _checked_ptr_1<int> _ptr__194(_194 ? _194->raw() : nullptr, _194 ? _194->size(0) : 0);
  _checked_ptr_1<int> _ptr__195(_195 ? _195->raw() : nullptr, _195 ? _195->size(0) : 0);
  ::mosek::fusion::p_Sort::argsort(_193,_194,_195,_196,_197,false);
}
void mosek::fusion::Sort::argsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _198,    std::shared_ptr< monty::ndarray< long long,1 > > _199,    long long _200,    long long _201,    bool _202) { mosek::fusion::p_Sort::argsort(_198,_199,_200,_201,_202); }void mosek::fusion::p_Sort::argsort(std::shared_ptr< monty::ndarray< long long,1 > > _198,std::shared_ptr< monty::ndarray< long long,1 > > _199,long long _200,long long _201,bool _202){
  _checked_ptr_1<long long> _ptr__198(_198 ? _198->raw() : nullptr, _198 ? _198->size(0) : 0);
  _checked_ptr_1<long long> _ptr__199(_199 ? _199->raw() : nullptr, _199 ? _199->size(0) : 0);
  if (((!_202) || ((_201 - _200) < (int)16)))
  {
    {
      ::mosek::fusion::Utils::Tools::argsort(_198,_199,_200,_201);
    }
  }
  else if((!::mosek::fusion::p_Sort::issorted(_198,_199,_200,_201,_202)))
  {
    {
      std::shared_ptr< monty::ndarray< long long,1 > > _203 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)4)));
      _checked_ptr_1<long long> _ptr__203(_203 ? _203->raw() : nullptr,_203 ? _203->size(0) : 0);
      int _204 = (int)2;
      ::mosek::fusion::p_Sort::getminmax(_198,_199,nullptr,_200,_201,_203);
      if (((_ptr__203[(int)1] - _ptr__203[(int)0]) < safe_mul( _204,(_201 - _200) )))
      {
        {
          ::mosek::fusion::p_Sort::argbucketsort(_198,_199,_200,_201,_ptr__203[(int)0],_ptr__203[(int)1]);
        }
      }
      else
      {
        {
          ::mosek::fusion::Utils::Tools::argsort(_198,_199,_200,_201);
        }
      }
    }
  }
  {}
}
void mosek::fusion::Sort::argsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _205,    std::shared_ptr< monty::ndarray< int,1 > > _206,    long long _207,    long long _208,    bool _209) { mosek::fusion::p_Sort::argsort(_205,_206,_207,_208,_209); }void mosek::fusion::p_Sort::argsort(std::shared_ptr< monty::ndarray< long long,1 > > _205,std::shared_ptr< monty::ndarray< int,1 > > _206,long long _207,long long _208,bool _209){
  _checked_ptr_1<long long> _ptr__205(_205 ? _205->raw() : nullptr, _205 ? _205->size(0) : 0);
  _checked_ptr_1<int> _ptr__206(_206 ? _206->raw() : nullptr, _206 ? _206->size(0) : 0);
  if (((!_209) || ((_208 - _207) < (int)16)))
  {
    {
      ::mosek::fusion::Utils::Tools::argsort(_205,_206,_207,_208);
    }
  }
  else if((!::mosek::fusion::p_Sort::issorted(_205,_206,_207,_208,_209)))
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _210 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)4)));
      _checked_ptr_1<int> _ptr__210(_210 ? _210->raw() : nullptr,_210 ? _210->size(0) : 0);
      int _211 = (int)2;
      ::mosek::fusion::p_Sort::getminmax(_205,_206,nullptr,_207,_208,_210);
      if (((_ptr__210[(int)1] - _ptr__210[(int)0]) < safe_mul( _211,(_208 - _207) )))
      {
        {
          ::mosek::fusion::p_Sort::argbucketsort(_205,_206,_207,_208,_ptr__210[(int)0],_ptr__210[(int)1]);
        }
      }
      else
      {
        {
          ::mosek::fusion::Utils::Tools::argsort(_205,_206,_207,_208);
        }
      }
    }
  }
  {}
}
void mosek::fusion::Sort::argsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _212,    std::shared_ptr< monty::ndarray< long long,1 > > _213,    std::shared_ptr< monty::ndarray< long long,1 > > _214,    long long _215,    long long _216,    bool _217) { mosek::fusion::p_Sort::argsort(_212,_213,_214,_215,_216,_217); }void mosek::fusion::p_Sort::argsort(std::shared_ptr< monty::ndarray< long long,1 > > _212,std::shared_ptr< monty::ndarray< long long,1 > > _213,std::shared_ptr< monty::ndarray< long long,1 > > _214,long long _215,long long _216,bool _217){
  _checked_ptr_1<long long> _ptr__212(_212 ? _212->raw() : nullptr, _212 ? _212->size(0) : 0);
  _checked_ptr_1<long long> _ptr__213(_213 ? _213->raw() : nullptr, _213 ? _213->size(0) : 0);
  _checked_ptr_1<long long> _ptr__214(_214 ? _214->raw() : nullptr, _214 ? _214->size(0) : 0);
  if (((!_217) || ((_216 - _215) < (int)16)))
  {
    {
      ::mosek::fusion::Utils::Tools::argsort(_212,_213,_214,_215,_216);
    }
  }
  else if((!::mosek::fusion::p_Sort::issorted(_212,_213,_214,_215,_216,_217)))
  {
    {
      std::shared_ptr< monty::ndarray< long long,1 > > _218 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)4)));
      _checked_ptr_1<long long> _ptr__218(_218 ? _218->raw() : nullptr,_218 ? _218->size(0) : 0);
      int _219 = (int)2;
      ::mosek::fusion::p_Sort::getminmax(_212,_213,_214,_215,_216,_218);
      if ((((_ptr__218[(int)1] - _ptr__218[(int)0]) < safe_mul( _219,(_216 - _215) )) && ((_ptr__218[(int)3] - _ptr__218[(int)2]) < safe_mul( _219,(_216 - _215) ))))
      {
        {
          ::mosek::fusion::p_Sort::argbucketsort(_212,_214,_215,_216,_ptr__218[(int)2],_ptr__218[(int)3]);
          ::mosek::fusion::p_Sort::argbucketsort(_212,_213,_215,_216,_ptr__218[(int)0],_ptr__218[(int)1]);
        }
      }
      else
      {
        {
          ::mosek::fusion::Utils::Tools::argsort(_212,_213,_214,_215,_216);
        }
      }
    }
  }
  {}
}
void mosek::fusion::Sort::argsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _220,    std::shared_ptr< monty::ndarray< int,1 > > _221,    std::shared_ptr< monty::ndarray< int,1 > > _222,    long long _223,    long long _224,    bool _225) { mosek::fusion::p_Sort::argsort(_220,_221,_222,_223,_224,_225); }void mosek::fusion::p_Sort::argsort(std::shared_ptr< monty::ndarray< long long,1 > > _220,std::shared_ptr< monty::ndarray< int,1 > > _221,std::shared_ptr< monty::ndarray< int,1 > > _222,long long _223,long long _224,bool _225){
  _checked_ptr_1<long long> _ptr__220(_220 ? _220->raw() : nullptr, _220 ? _220->size(0) : 0);
  _checked_ptr_1<int> _ptr__221(_221 ? _221->raw() : nullptr, _221 ? _221->size(0) : 0);
  _checked_ptr_1<int> _ptr__222(_222 ? _222->raw() : nullptr, _222 ? _222->size(0) : 0);
  if (((!_225) || ((_224 - _223) < (int)16)))
  {
    {
      ::mosek::fusion::Utils::Tools::argsort(_220,_221,_222,_223,_224);
    }
  }
  else if((!::mosek::fusion::p_Sort::issorted(_220,_221,_222,_223,_224,_225)))
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _226 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)4)));
      _checked_ptr_1<int> _ptr__226(_226 ? _226->raw() : nullptr,_226 ? _226->size(0) : 0);
      int _227 = (int)2;
      ::mosek::fusion::p_Sort::getminmax(_220,_221,_222,_223,_224,_226);
      if ((((_ptr__226[(int)1] - _ptr__226[(int)0]) < safe_mul( _227,(_224 - _223) )) && ((_ptr__226[(int)3] - _ptr__226[(int)2]) < safe_mul( _227,(_224 - _223) ))))
      {
        {
          ::mosek::fusion::p_Sort::argbucketsort(_220,_222,_223,_224,_ptr__226[(int)2],_ptr__226[(int)3]);
          ::mosek::fusion::p_Sort::argbucketsort(_220,_221,_223,_224,_ptr__226[(int)0],_ptr__226[(int)1]);
        }
      }
      else
      {
        {
          ::mosek::fusion::Utils::Tools::argsort(_220,_221,_222,_223,_224);
        }
      }
    }
  }
  {}
}
void mosek::fusion::Sort::argbucketsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _228,    std::shared_ptr< monty::ndarray< long long,1 > > _229,    long long _230,    long long _231,    long long _232,    long long _233) { mosek::fusion::p_Sort::argbucketsort(_228,_229,_230,_231,_232,_233); }void mosek::fusion::p_Sort::argbucketsort(std::shared_ptr< monty::ndarray< long long,1 > > _228,std::shared_ptr< monty::ndarray< long long,1 > > _229,long long _230,long long _231,long long _232,long long _233){
  _checked_ptr_1<long long> _ptr__228(_228 ? _228->raw() : nullptr, _228 ? _228->size(0) : 0);
  _checked_ptr_1<long long> _ptr__229(_229 ? _229->raw() : nullptr, _229 ? _229->size(0) : 0);
  ::mosek::fusion::Utils::Tools::bucketsort(_228,_230,_231,_229,_232,_233);
}
void mosek::fusion::Sort::argbucketsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _234,    std::shared_ptr< monty::ndarray< int,1 > > _235,    long long _236,    long long _237,    int _238,    int _239) { mosek::fusion::p_Sort::argbucketsort(_234,_235,_236,_237,_238,_239); }void mosek::fusion::p_Sort::argbucketsort(std::shared_ptr< monty::ndarray< long long,1 > > _234,std::shared_ptr< monty::ndarray< int,1 > > _235,long long _236,long long _237,int _238,int _239){
  _checked_ptr_1<long long> _ptr__234(_234 ? _234->raw() : nullptr, _234 ? _234->size(0) : 0);
  _checked_ptr_1<int> _ptr__235(_235 ? _235->raw() : nullptr, _235 ? _235->size(0) : 0);
  ::mosek::fusion::Utils::Tools::bucketsort(_234,_236,_237,_235,_238,_239);
}
void mosek::fusion::Sort::getminmax  ( std::shared_ptr< monty::ndarray< long long,1 > > _240,    std::shared_ptr< monty::ndarray< long long,1 > > _241,    std::shared_ptr< monty::ndarray< long long,1 > > _242,    long long _243,    long long _244,    std::shared_ptr< monty::ndarray< long long,1 > > _245) { mosek::fusion::p_Sort::getminmax(_240,_241,_242,_243,_244,_245); }void mosek::fusion::p_Sort::getminmax(std::shared_ptr< monty::ndarray< long long,1 > > _240,std::shared_ptr< monty::ndarray< long long,1 > > _241,std::shared_ptr< monty::ndarray< long long,1 > > _242,long long _243,long long _244,std::shared_ptr< monty::ndarray< long long,1 > > _245){
  _checked_ptr_1<long long> _ptr__240(_240 ? _240->raw() : nullptr, _240 ? _240->size(0) : 0);
  _checked_ptr_1<long long> _ptr__241(_241 ? _241->raw() : nullptr, _241 ? _241->size(0) : 0);
  _checked_ptr_1<long long> _ptr__242(_242 ? _242->raw() : nullptr, _242 ? _242->size(0) : 0);
  _checked_ptr_1<long long> _ptr__245(_245 ? _245->raw() : nullptr, _245 ? _245->size(0) : 0);
  _ptr__245[(int)0] = _ptr__241[_ptr__240[_243]];
  _ptr__245[(int)1] = _ptr__241[_ptr__240[_243]];
  long long _8640 = safe_add( _243,(int)1 );
  long long _8641 = _244;
  for (long long _246 = _8640; _246 < _8641; ++_246)
  {
    {
      if ((_ptr__245[(int)0] > _ptr__241[_ptr__240[_246]]))
      {
        {
          _ptr__245[(int)0] = _ptr__241[_ptr__240[_246]];
        }
      }
      {}
      if ((_ptr__245[(int)1] < _ptr__241[_ptr__240[_246]]))
      {
        {
          _ptr__245[(int)1] = _ptr__241[_ptr__240[_246]];
        }
      }
      {}
    }
  }
  if ((NULL != _242.get()))
  {
    {
      _ptr__245[(int)2] = _ptr__242[_ptr__240[_243]];
      _ptr__245[(int)3] = _ptr__242[_ptr__240[_243]];
      long long _8642 = safe_add( _243,(int)1 );
      long long _8643 = _244;
      for (long long _247 = _8642; _247 < _8643; ++_247)
      {
        {
          if ((_ptr__245[(int)2] > _ptr__242[_ptr__240[_247]]))
          {
            {
              _ptr__245[(int)2] = _ptr__242[_ptr__240[_247]];
            }
          }
          {}
          if ((_ptr__245[(int)3] < _ptr__242[_ptr__240[_247]]))
          {
            {
              _ptr__245[(int)3] = _ptr__242[_ptr__240[_247]];
            }
          }
          {}
        }
      }
    }
  }
  {}
}
void mosek::fusion::Sort::getminmax  ( std::shared_ptr< monty::ndarray< long long,1 > > _248,    std::shared_ptr< monty::ndarray< int,1 > > _249,    std::shared_ptr< monty::ndarray< int,1 > > _250,    long long _251,    long long _252,    std::shared_ptr< monty::ndarray< int,1 > > _253) { mosek::fusion::p_Sort::getminmax(_248,_249,_250,_251,_252,_253); }void mosek::fusion::p_Sort::getminmax(std::shared_ptr< monty::ndarray< long long,1 > > _248,std::shared_ptr< monty::ndarray< int,1 > > _249,std::shared_ptr< monty::ndarray< int,1 > > _250,long long _251,long long _252,std::shared_ptr< monty::ndarray< int,1 > > _253){
  _checked_ptr_1<long long> _ptr__248(_248 ? _248->raw() : nullptr, _248 ? _248->size(0) : 0);
  _checked_ptr_1<int> _ptr__249(_249 ? _249->raw() : nullptr, _249 ? _249->size(0) : 0);
  _checked_ptr_1<int> _ptr__250(_250 ? _250->raw() : nullptr, _250 ? _250->size(0) : 0);
  _checked_ptr_1<int> _ptr__253(_253 ? _253->raw() : nullptr, _253 ? _253->size(0) : 0);
  _ptr__253[(int)0] = _ptr__249[_ptr__248[_251]];
  _ptr__253[(int)1] = _ptr__249[_ptr__248[_251]];
  long long _8644 = safe_add( _251,(int)1 );
  long long _8645 = _252;
  for (long long _254 = _8644; _254 < _8645; ++_254)
  {
    {
      if ((_ptr__253[(int)0] > _ptr__249[_ptr__248[_254]]))
      {
        {
          _ptr__253[(int)0] = _ptr__249[_ptr__248[_254]];
        }
      }
      {}
      if ((_ptr__253[(int)1] < _ptr__249[_ptr__248[_254]]))
      {
        {
          _ptr__253[(int)1] = _ptr__249[_ptr__248[_254]];
        }
      }
      {}
    }
  }
  if ((NULL != _250.get()))
  {
    {
      _ptr__253[(int)2] = _ptr__250[_ptr__248[_251]];
      _ptr__253[(int)3] = _ptr__250[_ptr__248[_251]];
      long long _8646 = safe_add( _251,(int)1 );
      long long _8647 = _252;
      for (long long _255 = _8646; _255 < _8647; ++_255)
      {
        {
          if ((_ptr__253[(int)2] > _ptr__250[_ptr__248[_255]]))
          {
            {
              _ptr__253[(int)2] = _ptr__250[_ptr__248[_255]];
            }
          }
          {}
          if ((_ptr__253[(int)3] < _ptr__250[_ptr__248[_255]]))
          {
            {
              _ptr__253[(int)3] = _ptr__250[_ptr__248[_255]];
            }
          }
          {}
        }
      }
    }
  }
  {}
}
bool mosek::fusion::Sort::issorted  ( std::shared_ptr< monty::ndarray< long long,1 > > _256,    std::shared_ptr< monty::ndarray< long long,1 > > _257,    long long _258,    long long _259,    bool _260) { return mosek::fusion::p_Sort::issorted(_256,_257,_258,_259,_260); }bool mosek::fusion::p_Sort::issorted(std::shared_ptr< monty::ndarray< long long,1 > > _256,std::shared_ptr< monty::ndarray< long long,1 > > _257,long long _258,long long _259,bool _260){
  _checked_ptr_1<long long> _ptr__256(_256 ? _256->raw() : nullptr, _256 ? _256->size(0) : 0);
  _checked_ptr_1<long long> _ptr__257(_257 ? _257->raw() : nullptr, _257 ? _257->size(0) : 0);
  long long _8648 = _258;
  long long _8649 = (_259 - (int)1);
  for (long long _261 = _8648; _261 < _8649; ++_261)
  {
    {
      if ((_ptr__257[_ptr__256[_261]] > _ptr__257[_ptr__256[safe_add( _261,(int)1 )]]))
      {
        {
          return false;
        }
      }
      {}
    }
  }
  return true;
}
bool mosek::fusion::Sort::issorted  ( std::shared_ptr< monty::ndarray< long long,1 > > _262,    std::shared_ptr< monty::ndarray< int,1 > > _263,    long long _264,    long long _265,    bool _266) { return mosek::fusion::p_Sort::issorted(_262,_263,_264,_265,_266); }bool mosek::fusion::p_Sort::issorted(std::shared_ptr< monty::ndarray< long long,1 > > _262,std::shared_ptr< monty::ndarray< int,1 > > _263,long long _264,long long _265,bool _266){
  _checked_ptr_1<long long> _ptr__262(_262 ? _262->raw() : nullptr, _262 ? _262->size(0) : 0);
  _checked_ptr_1<int> _ptr__263(_263 ? _263->raw() : nullptr, _263 ? _263->size(0) : 0);
  long long _8650 = _264;
  long long _8651 = (_265 - (int)1);
  for (long long _267 = _8650; _267 < _8651; ++_267)
  {
    {
      if ((_ptr__263[_ptr__262[_267]] > _ptr__263[_ptr__262[safe_add( _267,(int)1 )]]))
      {
        {
          return false;
        }
      }
      {}
    }
  }
  return true;
}
bool mosek::fusion::Sort::issorted  ( std::shared_ptr< monty::ndarray< long long,1 > > _268,    std::shared_ptr< monty::ndarray< long long,1 > > _269,    std::shared_ptr< monty::ndarray< long long,1 > > _270,    long long _271,    long long _272,    bool _273) { return mosek::fusion::p_Sort::issorted(_268,_269,_270,_271,_272,_273); }bool mosek::fusion::p_Sort::issorted(std::shared_ptr< monty::ndarray< long long,1 > > _268,std::shared_ptr< monty::ndarray< long long,1 > > _269,std::shared_ptr< monty::ndarray< long long,1 > > _270,long long _271,long long _272,bool _273){
  _checked_ptr_1<long long> _ptr__268(_268 ? _268->raw() : nullptr, _268 ? _268->size(0) : 0);
  _checked_ptr_1<long long> _ptr__269(_269 ? _269->raw() : nullptr, _269 ? _269->size(0) : 0);
  _checked_ptr_1<long long> _ptr__270(_270 ? _270->raw() : nullptr, _270 ? _270->size(0) : 0);
  long long _8652 = _271;
  long long _8653 = (_272 - (int)1);
  for (long long _274 = _8652; _274 < _8653; ++_274)
  {
    {
      if (((_ptr__269[_ptr__268[_274]] > _ptr__269[_ptr__268[safe_add( _274,(int)1 )]]) || ((_ptr__269[_ptr__268[safe_add( _274,(int)1 )]] == _ptr__269[_ptr__268[_274]]) && (_ptr__270[_ptr__268[_274]] > _ptr__270[_ptr__268[safe_add( _274,(int)1 )]]))))
      {
        {
          return false;
        }
      }
      {}
    }
  }
  return true;
}
bool mosek::fusion::Sort::issorted  ( std::shared_ptr< monty::ndarray< long long,1 > > _275,    std::shared_ptr< monty::ndarray< int,1 > > _276,    std::shared_ptr< monty::ndarray< int,1 > > _277,    long long _278,    long long _279,    bool _280) { return mosek::fusion::p_Sort::issorted(_275,_276,_277,_278,_279,_280); }bool mosek::fusion::p_Sort::issorted(std::shared_ptr< monty::ndarray< long long,1 > > _275,std::shared_ptr< monty::ndarray< int,1 > > _276,std::shared_ptr< monty::ndarray< int,1 > > _277,long long _278,long long _279,bool _280){
  _checked_ptr_1<long long> _ptr__275(_275 ? _275->raw() : nullptr, _275 ? _275->size(0) : 0);
  _checked_ptr_1<int> _ptr__276(_276 ? _276->raw() : nullptr, _276 ? _276->size(0) : 0);
  _checked_ptr_1<int> _ptr__277(_277 ? _277->raw() : nullptr, _277 ? _277->size(0) : 0);
  long long _8654 = _278;
  long long _8655 = (_279 - (int)1);
  for (long long _281 = _8654; _281 < _8655; ++_281)
  {
    {
      if (((_ptr__276[_ptr__275[_281]] > _ptr__276[_ptr__275[safe_add( _281,(int)1 )]]) || ((_ptr__276[_ptr__275[_281]] == _ptr__276[_ptr__275[safe_add( _281,(int)1 )]]) && (_ptr__277[_ptr__275[_281]] > _ptr__277[_ptr__275[safe_add( _281,(int)1 )]]))))
      {
        {
          return false;
        }
      }
      {}
    }
  }
  return true;
}
void mosek::fusion::p_Sort::destroy(){}void mosek::fusion::Sort::destroy() { mosek::fusion::p_Sort::_get_impl(this)->destroy(); }mosek::fusion::IndexCounter::IndexCounter(mosek::fusion::p_IndexCounter *_impl) : _impl(_impl) { /*std::cout << "IndexCounter() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::IndexCounter::~IndexCounter() { delete _impl; _impl = nullptr; }mosek::fusion::p_IndexCounter::p_IndexCounter  (::mosek::fusion::IndexCounter * _pubthis) :     _pubthis(_pubthis){}mosek::fusion::IndexCounter::t mosek::fusion::p_IndexCounter::_new_IndexCounter  (std::shared_ptr< monty::ndarray< int,1 > > _282){ return new mosek::fusion::IndexCounter(_282); }mosek::fusion::IndexCounter::IndexCounter  (std::shared_ptr< monty::ndarray< int,1 > > _282) :    IndexCounter(new mosek::fusion::p_IndexCounter(this)){ mosek::fusion::p_IndexCounter::_get_impl(this)->_initialize(_282); }void mosek::fusion::p_IndexCounter::_initialize  (std::shared_ptr< monty::ndarray< int,1 > > _282){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__282(_282 ? _282->raw() : nullptr, _282 ? _282->size(0) : 0);
    n = (int)((_282)->size(0));
    ii = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(n)));
    st = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(n)));
    start = (long long)0;
    strides = ::mosek::fusion::p_Set::strides(_282);
    std::vector<int> _8656;
    for (int _283 = (int)0, _8657 = (int)((_282)->size(0)); _283 < _8657 ; ++_283)
    {
      _8656.push_back(_ptr__282[_283]);
    }
    auto _8658 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8656.size()),_8656.begin(),_8656.end()));
    dims = _8658;
  }
}mosek::fusion::IndexCounter::t mosek::fusion::p_IndexCounter::_new_IndexCounter  (long long _284,    std::shared_ptr< monty::ndarray< int,1 > > _285,    std::shared_ptr< monty::ndarray< int,1 > > _286){ return new mosek::fusion::IndexCounter(_284,_285,_286); }mosek::fusion::IndexCounter::IndexCounter  (long long _284,    std::shared_ptr< monty::ndarray< int,1 > > _285,    std::shared_ptr< monty::ndarray< int,1 > > _286) :    IndexCounter(new mosek::fusion::p_IndexCounter(this)){ mosek::fusion::p_IndexCounter::_get_impl(this)->_initialize(_284,_285,_286); }void mosek::fusion::p_IndexCounter::_initialize  (long long _284,    std::shared_ptr< monty::ndarray< int,1 > > _285,    std::shared_ptr< monty::ndarray< int,1 > > _286){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__285(_285 ? _285->raw() : nullptr, _285 ? _285->size(0) : 0);
    _checked_ptr_1<int> _ptr__286(_286 ? _286->raw() : nullptr, _286 ? _286->size(0) : 0);
    int _287 = (int)((_286)->size(0));
    n = (int)((_285)->size(0));
    ii = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(n)));
    st = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(n)));
    int _8659 = (int)0;
    int _8660 = n;
    for (int _288 = _8659; _288 < _8660; ++_288)
    {
      {
        ((*st)(_288)) = _284;
      }
    }
    strides = ::mosek::fusion::p_Set::strides(_286);
    dims = _285;
    start = _284;
  }
}mosek::fusion::IndexCounter::t mosek::fusion::p_IndexCounter::_new_IndexCounter  (long long _289,    std::shared_ptr< monty::ndarray< int,1 > > _290,    std::shared_ptr< monty::ndarray< long long,1 > > _291){ return new mosek::fusion::IndexCounter(_289,_290,_291); }mosek::fusion::IndexCounter::IndexCounter  (long long _289,    std::shared_ptr< monty::ndarray< int,1 > > _290,    std::shared_ptr< monty::ndarray< long long,1 > > _291) :    IndexCounter(new mosek::fusion::p_IndexCounter(this)){ mosek::fusion::p_IndexCounter::_get_impl(this)->_initialize(_289,_290,_291); }void mosek::fusion::p_IndexCounter::_initialize  (long long _289,    std::shared_ptr< monty::ndarray< int,1 > > _290,    std::shared_ptr< monty::ndarray< long long,1 > > _291){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__290(_290 ? _290->raw() : nullptr, _290 ? _290->size(0) : 0);
    _checked_ptr_1<long long> _ptr__291(_291 ? _291->raw() : nullptr, _291 ? _291->size(0) : 0);
    n = (int)((_290)->size(0));
    ii = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(n)));
    st = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(n)));
    int _8661 = (int)0;
    int _8662 = n;
    for (int _292 = _8661; _292 < _8662; ++_292)
    {
      {
        ((*st)(_292)) = _289;
      }
    }
    strides = _291;
    dims = _290;
    start = _289;
  }
}bool mosek::fusion::IndexCounter :: atEnd() { return mosek::fusion::p_IndexCounter::_get_impl(this)->atEnd(); }bool mosek::fusion::p_IndexCounter::atEnd(){
  return (((*ii)((n - (int)1))) >= ((*dims)((n - (int)1))));
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::IndexCounter :: getIndex() { return mosek::fusion::p_IndexCounter::_get_impl(this)->getIndex(); }std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_IndexCounter::getIndex(){
  return ii;
}
long long mosek::fusion::IndexCounter :: next() { return mosek::fusion::p_IndexCounter::_get_impl(this)->next(); }long long mosek::fusion::p_IndexCounter::next(){
  long long _293 = _pubthis->get();
  _pubthis->inc();
  return _293;
}
long long mosek::fusion::IndexCounter :: get() { return mosek::fusion::p_IndexCounter::_get_impl(this)->get(); }long long mosek::fusion::p_IndexCounter::get(){
  return ((*st)((int)0));
}
void mosek::fusion::IndexCounter :: inc() { mosek::fusion::p_IndexCounter::_get_impl(this)->inc(); }void mosek::fusion::p_IndexCounter::inc(){
  ++ ((*ii)((int)0));
  ((*st)((int)0)) = safe_add( ((*st)((int)0)),((*strides)((n - (int)1))) );
  int _294;
  {
    _294 = (int)0;
    for(;((_294 < (n - (int)1)) && (((*ii)(_294)) == ((*dims)(((n - _294) - (int)1)))));++ _294)
    {
      {
        ((*ii)(_294)) = (int)0;
        ++ ((*ii)(safe_add( _294,(int)1 )));
        ((*st)(safe_add( _294,(int)1 ))) = safe_add( ((*st)(safe_add( _294,(int)1 ))),((*strides)(((n - _294) - (int)2))) );
      }
    }
  }
  int _8663 = (int)0;
  int _8664 = _294;
  for (int _295 = _8663; _295 < _8664; ++_295)
  {
    {
      ((*st)(_295)) = ((*st)(_294));
    }
  }
}
void mosek::fusion::IndexCounter :: reset() { mosek::fusion::p_IndexCounter::_get_impl(this)->reset(); }void mosek::fusion::p_IndexCounter::reset(){
  st = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(n)));
  int _8665 = (int)0;
  int _8666 = n;
  for (int _296 = _8665; _296 < _8666; ++_296)
  {
    {
      ((*st)(_296)) = start;
    }
  }
}
void mosek::fusion::p_IndexCounter::destroy(){dims.reset();strides.reset();st.reset();ii.reset();}void mosek::fusion::IndexCounter::destroy() { mosek::fusion::p_IndexCounter::_get_impl(this)->destroy(); }mosek::fusion::CommonTools::CommonTools(mosek::fusion::p_CommonTools *_impl) : _impl(_impl) { /*std::cout << "CommonTools() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::CommonTools::~CommonTools() { delete _impl; _impl = nullptr; }mosek::fusion::p_CommonTools::p_CommonTools  (::mosek::fusion::CommonTools * _pubthis) :     _pubthis(_pubthis){}std::shared_ptr< monty::ndarray< long long,1 > > mosek::fusion::CommonTools::resize  ( std::shared_ptr< monty::ndarray< long long,1 > > _297,    int _298) { return mosek::fusion::p_CommonTools::resize(_297,_298); }std::shared_ptr< monty::ndarray< long long,1 > > mosek::fusion::p_CommonTools::resize(std::shared_ptr< monty::ndarray< long long,1 > > _297,int _298){
  _checked_ptr_1<long long> _ptr__297(_297 ? _297->raw() : nullptr, _297 ? _297->size(0) : 0);
  if ((_298 == (int)((_297)->size(0))))
  {
    {
      return _297;
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< long long,1 > > _299 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_298)));
      _checked_ptr_1<long long> _ptr__299(_299 ? _299->raw() : nullptr,_299 ? _299->size(0) : 0);
      if ((_298 > (int)((_297)->size(0))))
      {
        {
          ::mosek::fusion::Utils::Tools::arraycopy(_297,(int)0,_299,(int)0,(int)((_297)->size(0)));
        }
      }
      else
      {
        {
          ::mosek::fusion::Utils::Tools::arraycopy(_297,(int)0,_299,(int)0,_298);
        }
      }
      return _299;
    }
  }
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::CommonTools::resize  ( std::shared_ptr< monty::ndarray< int,1 > > _300,    int _301) { return mosek::fusion::p_CommonTools::resize(_300,_301); }std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_CommonTools::resize(std::shared_ptr< monty::ndarray< int,1 > > _300,int _301){
  _checked_ptr_1<int> _ptr__300(_300 ? _300->raw() : nullptr, _300 ? _300->size(0) : 0);
  if ((_301 == (int)((_300)->size(0))))
  {
    {
      return _300;
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _302 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_301)));
      _checked_ptr_1<int> _ptr__302(_302 ? _302->raw() : nullptr,_302 ? _302->size(0) : 0);
      if ((_301 > (int)((_300)->size(0))))
      {
        {
          ::mosek::fusion::Utils::Tools::arraycopy(_300,(int)0,_302,(int)0,(int)((_300)->size(0)));
        }
      }
      else
      {
        {
          ::mosek::fusion::Utils::Tools::arraycopy(_300,(int)0,_302,(int)0,_301);
        }
      }
      return _302;
    }
  }
}
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::CommonTools::resize  ( std::shared_ptr< monty::ndarray< double,1 > > _303,    int _304) { return mosek::fusion::p_CommonTools::resize(_303,_304); }std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_CommonTools::resize(std::shared_ptr< monty::ndarray< double,1 > > _303,int _304){
  _checked_ptr_1<double> _ptr__303(_303 ? _303->raw() : nullptr, _303 ? _303->size(0) : 0);
  if ((_304 == (int)((_303)->size(0))))
  {
    {
      return _303;
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< double,1 > > _305 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_304)));
      _checked_ptr_1<double> _ptr__305(_305 ? _305->raw() : nullptr,_305 ? _305->size(0) : 0);
      if ((_304 > (int)((_303)->size(0))))
      {
        {
          ::mosek::fusion::Utils::Tools::arraycopy(_303,(int)0,_305,(int)0,(int)((_303)->size(0)));
        }
      }
      else
      {
        {
          ::mosek::fusion::Utils::Tools::arraycopy(_303,(int)0,_305,(int)0,_304);
        }
      }
      return _305;
    }
  }
}
int mosek::fusion::CommonTools::binarySearch  ( std::shared_ptr< monty::ndarray< int,1 > > _306,    int _307) { return mosek::fusion::p_CommonTools::binarySearch(_306,_307); }int mosek::fusion::p_CommonTools::binarySearch(std::shared_ptr< monty::ndarray< int,1 > > _306,int _307){
  _checked_ptr_1<int> _ptr__306(_306 ? _306->raw() : nullptr, _306 ? _306->size(0) : 0);
  int _308 = (int)0;
  int _309 = (int)((_306)->size(0));
  if ((_ptr__306[_308] == _307))
  {
    {
      return _308;
    }
  }
  else if((_ptr__306[(_309 - (int)1)] == _307))
  {
    {
      return (_309 - (int)1);
    }
  }
  {}
  while ( (_308 < (_309 - (int)1)) )
  {
    {
      int _310 = ((_309 - _308) / (int)2);
      if ((_307 < _ptr__306[_310]))
      {
        {
          _308 = safe_add( _310,(int)1 );
        }
      }
      else if((_307 > _ptr__306[_310]))
      {
        {
          _309 = _310;
        }
      }
      else
      {
        {
          return _310;
        }
      }
    }
  }
  return (-(int)1);
}
int mosek::fusion::CommonTools::binarySearch  ( std::shared_ptr< monty::ndarray< long long,1 > > _311,    long long _312) { return mosek::fusion::p_CommonTools::binarySearch(_311,_312); }int mosek::fusion::p_CommonTools::binarySearch(std::shared_ptr< monty::ndarray< long long,1 > > _311,long long _312){
  _checked_ptr_1<long long> _ptr__311(_311 ? _311->raw() : nullptr, _311 ? _311->size(0) : 0);
  int _313 = ::mosek::fusion::p_CommonTools::binarySearchL(_311,_312);
  if (((_313 < (int)((_311)->size(0))) && (_ptr__311[_313] == _312)))
  {
    {
      return _313;
    }
  }
  else
  {
    {
      return (-(int)1);
    }
  }
}
int mosek::fusion::CommonTools::binarySearchR  ( std::shared_ptr< monty::ndarray< long long,1 > > _314,    long long _315) { return mosek::fusion::p_CommonTools::binarySearchR(_314,_315); }int mosek::fusion::p_CommonTools::binarySearchR(std::shared_ptr< monty::ndarray< long long,1 > > _314,long long _315){
  _checked_ptr_1<long long> _ptr__314(_314 ? _314->raw() : nullptr, _314 ? _314->size(0) : 0);
  int _316 = (int)0;
  int _317 = (int)((_314)->size(0));
  if ((_ptr__314[_316] > _315))
  {
    {
      return _316;
    }
  }
  {}
  while ( (_316 < (_317 - (int)1)) )
  {
    {
      int _318 = (safe_add( _317,_316 ) / (int)2);
      if ((_315 >= _ptr__314[_318]))
      {
        {
          _316 = _318;
        }
      }
      else
      {
        {
          _317 = _318;
        }
      }
    }
  }
  return _317;
}
int mosek::fusion::CommonTools::binarySearchL  ( std::shared_ptr< monty::ndarray< long long,1 > > _319,    long long _320) { return mosek::fusion::p_CommonTools::binarySearchL(_319,_320); }int mosek::fusion::p_CommonTools::binarySearchL(std::shared_ptr< monty::ndarray< long long,1 > > _319,long long _320){
  _checked_ptr_1<long long> _ptr__319(_319 ? _319->raw() : nullptr, _319 ? _319->size(0) : 0);
  int _321 = (int)0;
  int _322 = (int)((_319)->size(0));
  if ((_320 <= _ptr__319[_321]))
  {
    {
      return _321;
    }
  }
  {}
  while ( (_321 < (_322 - (int)1)) )
  {
    {
      int _323 = (safe_add( _322,_321 ) / (int)2);
      if ((_ptr__319[_323] < _320))
      {
        {
          _321 = _323;
        }
      }
      else
      {
        {
          _322 = _323;
        }
      }
    }
  }
  return _322;
}
void mosek::fusion::CommonTools::ndIncr  ( std::shared_ptr< monty::ndarray< int,1 > > _324,    std::shared_ptr< monty::ndarray< int,1 > > _325,    std::shared_ptr< monty::ndarray< int,1 > > _326) { mosek::fusion::p_CommonTools::ndIncr(_324,_325,_326); }void mosek::fusion::p_CommonTools::ndIncr(std::shared_ptr< monty::ndarray< int,1 > > _324,std::shared_ptr< monty::ndarray< int,1 > > _325,std::shared_ptr< monty::ndarray< int,1 > > _326){
  _checked_ptr_1<int> _ptr__324(_324 ? _324->raw() : nullptr, _324 ? _324->size(0) : 0);
  _checked_ptr_1<int> _ptr__325(_325 ? _325->raw() : nullptr, _325 ? _325->size(0) : 0);
  _checked_ptr_1<int> _ptr__326(_326 ? _326->raw() : nullptr, _326 ? _326->size(0) : 0);
  int _327 = ((int)((_324)->size(0)) - (int)1);
  ++ _ptr__324[_327];
  while ( ((_327 > (int)0) && (_ptr__324[_327] >= _ptr__326[_327])) )
  {
    {
      _ptr__324[_327] = _ptr__325[_327];
      ++ _ptr__324[(_327 - (int)1)];
    }
  }
}
void mosek::fusion::CommonTools::transposeTriplets  ( std::shared_ptr< monty::ndarray< int,1 > > _328,    std::shared_ptr< monty::ndarray< int,1 > > _329,    std::shared_ptr< monty::ndarray< double,1 > > _330,    std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< long long,1 > >,1 > > _331,    std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< long long,1 > >,1 > > _332,    std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > _333,    long long _334,    int _335,    int _336) { mosek::fusion::p_CommonTools::transposeTriplets(_328,_329,_330,_331,_332,_333,_334,_335,_336); }void mosek::fusion::p_CommonTools::transposeTriplets(std::shared_ptr< monty::ndarray< int,1 > > _328,std::shared_ptr< monty::ndarray< int,1 > > _329,std::shared_ptr< monty::ndarray< double,1 > > _330,std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< long long,1 > >,1 > > _331,std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< long long,1 > >,1 > > _332,std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > _333,long long _334,int _335,int _336){
  _checked_ptr_1<int> _ptr__328(_328 ? _328->raw() : nullptr, _328 ? _328->size(0) : 0);
  _checked_ptr_1<int> _ptr__329(_329 ? _329->raw() : nullptr, _329 ? _329->size(0) : 0);
  _checked_ptr_1<double> _ptr__330(_330 ? _330->raw() : nullptr, _330 ? _330->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _337 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_add( _335,(int)2 ))));
  _checked_ptr_1<long long> _ptr__337(_337 ? _337->raw() : nullptr,_337 ? _337->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _338 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_add( _336,(int)2 ))));
  _checked_ptr_1<long long> _ptr__338(_338 ? _338->raw() : nullptr,_338 ? _338->size(0) : 0);
  {
    long long _339 = (long long)0;
    for(;(_339 < _334);++ _339)
    {
      {
        _ptr__338[safe_add( _ptr__329[_339],(int)2 )] = safe_add( _ptr__338[safe_add( _ptr__329[_339],(int)2 )],(int)1 );
        _ptr__337[safe_add( _ptr__328[_339],(int)2 )] = safe_add( _ptr__337[safe_add( _ptr__328[_339],(int)2 )],(int)1 );
      }
    }
  }
  {
    int _340 = (int)1;
    for(;(_340 < _335);++ _340)
    {
      {
        _ptr__337[safe_add( _340,(int)1 )] = safe_add( _ptr__337[safe_add( _340,(int)1 )],_ptr__337[_340] );
      }
    }
  }
  {
    int _341 = (int)1;
    for(;(_341 < _336);++ _341)
    {
      {
        _ptr__338[safe_add( _341,(int)1 )] = safe_add( _ptr__338[safe_add( _341,(int)1 )],_ptr__338[_341] );
      }
    }
  }
  std::shared_ptr< monty::ndarray< long long,1 > > _342 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_334)));
  _checked_ptr_1<long long> _ptr__342(_342 ? _342->raw() : nullptr,_342 ? _342->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _343 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_334)));
  _checked_ptr_1<long long> _ptr__343(_343 ? _343->raw() : nullptr,_343 ? _343->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _344 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_334)));
  _checked_ptr_1<double> _ptr__344(_344 ? _344->raw() : nullptr,_344 ? _344->size(0) : 0);
  int _8667 = (int)0;
  int _8668 = _335;
  for (int _345 = _8667; _345 < _8668; ++_345)
  {
    {
      {
        long long _346 = _ptr__337[_345];
        for(;(_346 < _ptr__337[safe_add( _345,(int)1 )]);++ _346)
        {
          {
            int _347 = _ptr__329[_346];
            long long _348 = _ptr__338[_347];
            _ptr__342[_348] = _345;
            _ptr__343[_348] = _347;
            _ptr__344[_348] = _ptr__330[_346];
            _ptr__338[_347] = safe_add( _348,(int)1 );
          }
        }
      }
    }
  }
  ((*_331)((int)0)) = _343;
  ((*_332)((int)0)) = _342;
  ((*_333)((int)0)) = _344;
}
void mosek::fusion::CommonTools::transposeTriplets  ( std::shared_ptr< monty::ndarray< int,1 > > _349,    std::shared_ptr< monty::ndarray< int,1 > > _350,    std::shared_ptr< monty::ndarray< double,1 > > _351,    std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > > _352,    std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > > _353,    std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > _354,    long long _355,    int _356,    int _357) { mosek::fusion::p_CommonTools::transposeTriplets(_349,_350,_351,_352,_353,_354,_355,_356,_357); }void mosek::fusion::p_CommonTools::transposeTriplets(std::shared_ptr< monty::ndarray< int,1 > > _349,std::shared_ptr< monty::ndarray< int,1 > > _350,std::shared_ptr< monty::ndarray< double,1 > > _351,std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > > _352,std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > > _353,std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > _354,long long _355,int _356,int _357){
  _checked_ptr_1<int> _ptr__349(_349 ? _349->raw() : nullptr, _349 ? _349->size(0) : 0);
  _checked_ptr_1<int> _ptr__350(_350 ? _350->raw() : nullptr, _350 ? _350->size(0) : 0);
  _checked_ptr_1<double> _ptr__351(_351 ? _351->raw() : nullptr, _351 ? _351->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _358 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_add( _356,(int)2 ))));
  _checked_ptr_1<long long> _ptr__358(_358 ? _358->raw() : nullptr,_358 ? _358->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _359 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_add( _357,(int)2 ))));
  _checked_ptr_1<long long> _ptr__359(_359 ? _359->raw() : nullptr,_359 ? _359->size(0) : 0);
  {
    long long _360 = (long long)0;
    for(;(_360 < _355);++ _360)
    {
      {
        _ptr__359[safe_add( _ptr__350[_360],(int)2 )] = safe_add( _ptr__359[safe_add( _ptr__350[_360],(int)2 )],(int)1 );
        _ptr__358[safe_add( _ptr__349[_360],(int)2 )] = safe_add( _ptr__358[safe_add( _ptr__349[_360],(int)2 )],(int)1 );
      }
    }
  }
  {
    int _361 = (int)1;
    for(;(_361 < _356);++ _361)
    {
      {
        _ptr__358[safe_add( _361,(int)1 )] = safe_add( _ptr__358[safe_add( _361,(int)1 )],_ptr__358[_361] );
      }
    }
  }
  {
    int _362 = (int)1;
    for(;(_362 < _357);++ _362)
    {
      {
        _ptr__359[safe_add( _362,(int)1 )] = safe_add( _ptr__359[safe_add( _362,(int)1 )],_ptr__359[_362] );
      }
    }
  }
  std::shared_ptr< monty::ndarray< int,1 > > _363 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_355)));
  _checked_ptr_1<int> _ptr__363(_363 ? _363->raw() : nullptr,_363 ? _363->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _364 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_355)));
  _checked_ptr_1<int> _ptr__364(_364 ? _364->raw() : nullptr,_364 ? _364->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _365 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_355)));
  _checked_ptr_1<double> _ptr__365(_365 ? _365->raw() : nullptr,_365 ? _365->size(0) : 0);
  {
    int _366 = (int)0;
    for(;(_366 < _356);++ _366)
    {
      {
        long long _8669 = _ptr__358[_366];
        long long _8670 = _ptr__358[safe_add( _366,(int)1 )];
        for (long long _367 = _8669; _367 < _8670; ++_367)
        {
          {
            int _368 = _ptr__350[_367];
            long long _369 = _ptr__359[_368];
            _ptr__363[_369] = _366;
            _ptr__364[_369] = _368;
            _ptr__365[_369] = _ptr__351[_367];
            _ptr__359[_368] = safe_add( _369,(int)1 );
          }
        }
      }
    }
  }
  ((*_352)((int)0)) = _364;
  ((*_353)((int)0)) = _363;
  ((*_354)((int)0)) = _365;
}
void mosek::fusion::CommonTools::tripletSort  ( std::shared_ptr< monty::ndarray< int,1 > > _370,    std::shared_ptr< monty::ndarray< int,1 > > _371,    std::shared_ptr< monty::ndarray< double,1 > > _372,    std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > > _373,    std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > > _374,    std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > _375,    long long _376,    int _377,    int _378) { mosek::fusion::p_CommonTools::tripletSort(_370,_371,_372,_373,_374,_375,_376,_377,_378); }void mosek::fusion::p_CommonTools::tripletSort(std::shared_ptr< monty::ndarray< int,1 > > _370,std::shared_ptr< monty::ndarray< int,1 > > _371,std::shared_ptr< monty::ndarray< double,1 > > _372,std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > > _373,std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > > _374,std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > _375,long long _376,int _377,int _378){
  _checked_ptr_1<int> _ptr__370(_370 ? _370->raw() : nullptr, _370 ? _370->size(0) : 0);
  _checked_ptr_1<int> _ptr__371(_371 ? _371->raw() : nullptr, _371 ? _371->size(0) : 0);
  _checked_ptr_1<double> _ptr__372(_372 ? _372->raw() : nullptr, _372 ? _372->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _379 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_376)));
  _checked_ptr_1<int> _ptr__379(_379 ? _379->raw() : nullptr,_379 ? _379->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _380 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_add( _378,(int)2 ))));
  _checked_ptr_1<long long> _ptr__380(_380 ? _380->raw() : nullptr,_380 ? _380->size(0) : 0);
  long long _8671 = (long long)0;
  long long _8672 = _376;
  for (long long _381 = _8671; _381 < _8672; ++_381)
  {
    {
      _ptr__380[safe_add( _ptr__371[_381],(int)2 )] = safe_add( _ptr__380[safe_add( _ptr__371[_381],(int)2 )],(int)1 );
    }
  }
  int _8673 = (int)1;
  int _8674 = _378;
  for (int _382 = _8673; _382 < _8674; ++_382)
  {
    {
      _ptr__380[safe_add( _382,(int)1 )] = safe_add( _ptr__380[safe_add( _382,(int)1 )],_ptr__380[_382] );
    }
  }
  int _8675 = (int)0;
  int _8676 = (int)_376;
  for (int _383 = _8675; _383 < _8676; ++_383)
  {
    {
      int _384 = _ptr__371[_383];
      _ptr__379[_ptr__380[safe_add( _384,(int)1 )]] = _383;
      _ptr__380[safe_add( _384,(int)1 )] = safe_add( _ptr__380[safe_add( _384,(int)1 )],(int)1 );
    }
  }
  std::shared_ptr< monty::ndarray< long long,1 > > _385 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_add( _377,(int)2 ))));
  _checked_ptr_1<long long> _ptr__385(_385 ? _385->raw() : nullptr,_385 ? _385->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _386 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_376)));
  _checked_ptr_1<int> _ptr__386(_386 ? _386->raw() : nullptr,_386 ? _386->size(0) : 0);
  {
    int _387 = (int)0;
    for(;(_387 < _376);++ _387)
    {
      {
        _ptr__385[safe_add( _ptr__370[_387],(int)2 )] = safe_add( _ptr__385[safe_add( _ptr__370[_387],(int)2 )],(int)1 );
      }
    }
  }
  {
    int _388 = (int)1;
    for(;(_388 < _377);++ _388)
    {
      {
        _ptr__385[safe_add( _388,(int)1 )] = safe_add( _ptr__385[safe_add( _388,(int)1 )],_ptr__385[_388] );
      }
    }
  }
  {
    int _389 = (int)0;
    for(;(_389 < _378);++ _389)
    {
      {
        {
          long long _390 = _ptr__380[_389];
          for(;(_390 < _ptr__380[safe_add( _389,(int)1 )]);++ _390)
          {
            {
              int _391 = _ptr__370[_ptr__379[_390]];
              _ptr__386[_ptr__385[safe_add( _391,(int)1 )]] = _ptr__379[_390];
              _ptr__385[safe_add( _391,(int)1 )] = safe_add( _ptr__385[safe_add( _391,(int)1 )],(int)1 );
            }
          }
        }
      }
    }
  }
  int _392 = (int)1;
  {
    int _393 = _ptr__370[_ptr__386[(int)0]];
    int _394 = _ptr__371[_ptr__386[(int)0]];
    {
      int _395 = (int)1;
      for(;(_395 < _376);++ _395)
      {
        {
          int _396 = _ptr__386[_395];
          if (((_393 != _ptr__370[_396]) || (_394 != _ptr__371[_396])))
          {
            {
              _393 = _ptr__370[_396];
              _394 = _ptr__371[_396];
              ++ _392;
            }
          }
          {}
        }
      }
    }
  }
  std::shared_ptr< monty::ndarray< int,1 > > _397 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_392)));
  _checked_ptr_1<int> _ptr__397(_397 ? _397->raw() : nullptr,_397 ? _397->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _398 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_392)));
  _checked_ptr_1<int> _ptr__398(_398 ? _398->raw() : nullptr,_398 ? _398->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _399 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_392)));
  _checked_ptr_1<double> _ptr__399(_399 ? _399->raw() : nullptr,_399 ? _399->size(0) : 0);
  {
    int _400 = _ptr__386[(int)0];
    _ptr__397[(int)0] = _ptr__370[_400];
    _ptr__398[(int)0] = _ptr__371[_400];
    _ptr__399[(int)0] = _ptr__372[_400];
  }
  int _401 = (int)1;
  int _8677 = (int)1;
  long long _8678 = _376;
  for (long long _402 = _8677; _402 < _8678; ++_402)
  {
    {
      int _403 = _ptr__386[_402];
      if (((_ptr__397[(_401 - (int)1)] == _ptr__370[_403]) && (_ptr__398[(_401 - (int)1)] == _ptr__371[_403])))
      {
        {
          _ptr__399[(_401 - (int)1)] = (_ptr__399[(_401 - (int)1)] + _ptr__372[_403]);
        }
      }
      else
      {
        {
          _ptr__397[_401] = _ptr__370[_403];
          _ptr__398[_401] = _ptr__371[_403];
          _ptr__399[_401] = _ptr__372[_403];
          ++ _401;
        }
      }
    }
  }
  ((*_373)((int)0)) = _397;
  ((*_374)((int)0)) = _398;
  ((*_375)((int)0)) = _399;
}
void mosek::fusion::CommonTools::argMSort  ( std::shared_ptr< monty::ndarray< int,1 > > _404,    std::shared_ptr< monty::ndarray< int,1 > > _405) { mosek::fusion::p_CommonTools::argMSort(_404,_405); }void mosek::fusion::p_CommonTools::argMSort(std::shared_ptr< monty::ndarray< int,1 > > _404,std::shared_ptr< monty::ndarray< int,1 > > _405){
  _checked_ptr_1<int> _ptr__404(_404 ? _404->raw() : nullptr, _404 ? _404->size(0) : 0);
  _checked_ptr_1<int> _ptr__405(_405 ? _405->raw() : nullptr, _405 ? _405->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _406 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)((_404)->size(0)))));
  _checked_ptr_1<int> _ptr__406(_406 ? _406->raw() : nullptr,_406 ? _406->size(0) : 0);
  bool _407 = false;
  {
    int _408 = (int)1;
    for(;(_408 < (int)((_404)->size(0)));_408 *= (int)2)
    {
      {
        _407 = (!_407);
        int _8679 = (int)0;
        int _8680 = (int)((_404)->size(0));
        int _8681 = safe_mul( _408,(int)2 );
        for (int _409 = _8679; _409 < _8680; _409 += _8681)
        {
          {
            if (_407)
            {
              {
                ::mosek::fusion::p_CommonTools::mergeInto(_404,_406,_405,_409,safe_add( _409,_408 ),safe_add( _409,safe_mul( (int)2,_408 ) ));
              }
            }
            else
            {
              {
                ::mosek::fusion::p_CommonTools::mergeInto(_406,_404,_405,_409,safe_add( _409,_408 ),safe_add( _409,safe_mul( (int)2,_408 ) ));
              }
            }
          }
        }
      }
    }
  }
  if (_407)
  {
    {
      ::mosek::fusion::Utils::Tools::arraycopy(_406,(int)0,_404,(int)0,(int)((_404)->size(0)));
    }
  }
  {}
}
void mosek::fusion::p_CommonTools::mergeInto(std::shared_ptr< monty::ndarray< int,1 > > _410,std::shared_ptr< monty::ndarray< int,1 > > _411,std::shared_ptr< monty::ndarray< int,1 > > _412,int _413,int _414,int _415){
  _checked_ptr_1<int> _ptr__410(_410 ? _410->raw() : nullptr, _410 ? _410->size(0) : 0);
  _checked_ptr_1<int> _ptr__411(_411 ? _411->raw() : nullptr, _411 ? _411->size(0) : 0);
  _checked_ptr_1<int> _ptr__412(_412 ? _412->raw() : nullptr, _412 ? _412->size(0) : 0);
  int _8682;
  bool _8683 = (_415 > (int)((_410)->size(0)));
  if (_8683)
  {
    _8682 = (int)((_410)->size(0));
  }
  else
  {
    _8682 = _415;
  }
  int _416 = _8682;
  int _8684;
  bool _8685 = (_414 > _416);
  if (_8685)
  {
    _8684 = _416;
  }
  else
  {
    _8684 = _414;
  }
  int _417 = _8684;
  if ((_417 == _416))
  {
    {
      ::mosek::fusion::Utils::Tools::arraycopy(_410,_413,_411,_413,(_417 - _413));
    }
  }
  else
  {
    {
      int _418 = _413;
      int _419 = _417;
      int _420;
      {
        _420 = _413;
        for(;((_418 < _417) && (_419 < _416));++ _420)
        {
          {
            if ((_ptr__412[_ptr__410[_418]] < _ptr__412[_ptr__410[_419]]))
            {
              {
                _ptr__411[_420] = _ptr__410[_418];
                ++ _418;
              }
            }
            else
            {
              {
                _ptr__411[_420] = _ptr__410[_419];
                ++ _419;
              }
            }
          }
        }
      }
      while ( (_418 < _417) )
      {
        {
          _ptr__411[_420] = _ptr__410[_418];
          ++ _418;
          ++ _420;
        }
      }
      while ( (_419 < _416) )
      {
        {
          _ptr__411[_420] = _ptr__410[_419];
          ++ _419;
          ++ _420;
        }
      }
    }
  }
}
void mosek::fusion::CommonTools::argQsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _421,    std::shared_ptr< monty::ndarray< long long,1 > > _422,    std::shared_ptr< monty::ndarray< long long,1 > > _423,    long long _424,    long long _425) { mosek::fusion::p_CommonTools::argQsort(_421,_422,_423,_424,_425); }void mosek::fusion::p_CommonTools::argQsort(std::shared_ptr< monty::ndarray< long long,1 > > _421,std::shared_ptr< monty::ndarray< long long,1 > > _422,std::shared_ptr< monty::ndarray< long long,1 > > _423,long long _424,long long _425){
  _checked_ptr_1<long long> _ptr__421(_421 ? _421->raw() : nullptr, _421 ? _421->size(0) : 0);
  _checked_ptr_1<long long> _ptr__422(_422 ? _422->raw() : nullptr, _422 ? _422->size(0) : 0);
  _checked_ptr_1<long long> _ptr__423(_423 ? _423->raw() : nullptr, _423 ? _423->size(0) : 0);
  if ((NULL == _423.get()))
  {
    {
      ::mosek::fusion::Utils::Tools::argsort(_421,_422,_424,_425);
    }
  }
  else
  {
    {
      ::mosek::fusion::Utils::Tools::argsort(_421,_422,_423,_424,_425);
    }
  }
}
void mosek::fusion::CommonTools::argQsort  ( std::shared_ptr< monty::ndarray< long long,1 > > _426,    std::shared_ptr< monty::ndarray< int,1 > > _427,    std::shared_ptr< monty::ndarray< int,1 > > _428,    long long _429,    long long _430) { mosek::fusion::p_CommonTools::argQsort(_426,_427,_428,_429,_430); }void mosek::fusion::p_CommonTools::argQsort(std::shared_ptr< monty::ndarray< long long,1 > > _426,std::shared_ptr< monty::ndarray< int,1 > > _427,std::shared_ptr< monty::ndarray< int,1 > > _428,long long _429,long long _430){
  _checked_ptr_1<long long> _ptr__426(_426 ? _426->raw() : nullptr, _426 ? _426->size(0) : 0);
  _checked_ptr_1<int> _ptr__427(_427 ? _427->raw() : nullptr, _427 ? _427->size(0) : 0);
  _checked_ptr_1<int> _ptr__428(_428 ? _428->raw() : nullptr, _428 ? _428->size(0) : 0);
  if ((NULL == _428.get()))
  {
    {
      ::mosek::fusion::Utils::Tools::argsort(_426,_427,_429,_430);
    }
  }
  else
  {
    {
      ::mosek::fusion::Utils::Tools::argsort(_426,_427,_428,_429,_430);
    }
  }
}
void mosek::fusion::p_CommonTools::destroy(){}void mosek::fusion::CommonTools::destroy() { mosek::fusion::p_CommonTools::_get_impl(this)->destroy(); }mosek::fusion::SolutionStruct::SolutionStruct(mosek::fusion::p_SolutionStruct *_impl) : _impl(_impl) { /*std::cout << "SolutionStruct() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::SolutionStruct::~SolutionStruct() { delete _impl; _impl = nullptr; }mosek::fusion::p_SolutionStruct::p_SolutionStruct  (::mosek::fusion::SolutionStruct * _pubthis) :     _pubthis(_pubthis){}std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::SolutionStruct::get_yx() { return _impl->yx; }
void mosek::fusion::SolutionStruct::set_yx(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->yx = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::SolutionStruct::get_snx() { return _impl->snx; }
void mosek::fusion::SolutionStruct::set_snx(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->snx = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::SolutionStruct::get_sux() { return _impl->sux; }
void mosek::fusion::SolutionStruct::set_sux(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->sux = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::SolutionStruct::get_slx() { return _impl->slx; }
void mosek::fusion::SolutionStruct::set_slx(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->slx = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::SolutionStruct::get_bars() { return _impl->bars; }
void mosek::fusion::SolutionStruct::set_bars(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->bars = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::SolutionStruct::get_barx() { return _impl->barx; }
void mosek::fusion::SolutionStruct::set_barx(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->barx = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::SolutionStruct::get_y() { return _impl->y; }
void mosek::fusion::SolutionStruct::set_y(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->y = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::SolutionStruct::get_suc() { return _impl->suc; }
void mosek::fusion::SolutionStruct::set_suc(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->suc = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::SolutionStruct::get_slc() { return _impl->slc; }
void mosek::fusion::SolutionStruct::set_slc(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->slc = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::SolutionStruct::get_xx() { return _impl->xx; }
void mosek::fusion::SolutionStruct::set_xx(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->xx = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::SolutionStruct::get_xc() { return _impl->xc; }
void mosek::fusion::SolutionStruct::set_xc(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->xc = _val; }
double mosek::fusion::SolutionStruct::get_dobj() { return _impl->dobj; }
void mosek::fusion::SolutionStruct::set_dobj(double _val) { _impl->dobj = _val; }
double mosek::fusion::SolutionStruct::get_pobj() { return _impl->pobj; }
void mosek::fusion::SolutionStruct::set_pobj(double _val) { _impl->pobj = _val; }
mosek::fusion::ProblemStatus mosek::fusion::SolutionStruct::get_probstatus() { return _impl->probstatus; }
void mosek::fusion::SolutionStruct::set_probstatus(mosek::fusion::ProblemStatus _val) { _impl->probstatus = _val; }
mosek::fusion::SolutionStatus mosek::fusion::SolutionStruct::get_dstatus() { return _impl->dstatus; }
void mosek::fusion::SolutionStruct::set_dstatus(mosek::fusion::SolutionStatus _val) { _impl->dstatus = _val; }
mosek::fusion::SolutionStatus mosek::fusion::SolutionStruct::get_pstatus() { return _impl->pstatus; }
void mosek::fusion::SolutionStruct::set_pstatus(mosek::fusion::SolutionStatus _val) { _impl->pstatus = _val; }
int mosek::fusion::SolutionStruct::get_sol_numbarvar() { return _impl->sol_numbarvar; }
void mosek::fusion::SolutionStruct::set_sol_numbarvar(int _val) { _impl->sol_numbarvar = _val; }
int mosek::fusion::SolutionStruct::get_sol_numcone() { return _impl->sol_numcone; }
void mosek::fusion::SolutionStruct::set_sol_numcone(int _val) { _impl->sol_numcone = _val; }
int mosek::fusion::SolutionStruct::get_sol_numvar() { return _impl->sol_numvar; }
void mosek::fusion::SolutionStruct::set_sol_numvar(int _val) { _impl->sol_numvar = _val; }
int mosek::fusion::SolutionStruct::get_sol_numcon() { return _impl->sol_numcon; }
void mosek::fusion::SolutionStruct::set_sol_numcon(int _val) { _impl->sol_numcon = _val; }
mosek::fusion::SolutionStruct::t mosek::fusion::p_SolutionStruct::_new_SolutionStruct  (int _431,    int _432,    int _433,    int _434){ return new mosek::fusion::SolutionStruct(_431,_432,_433,_434); }mosek::fusion::SolutionStruct::SolutionStruct  (int _431,    int _432,    int _433,    int _434) :    SolutionStruct(new mosek::fusion::p_SolutionStruct(this)){ mosek::fusion::p_SolutionStruct::_get_impl(this)->_initialize(_431,_432,_433,_434); }void mosek::fusion::p_SolutionStruct::_initialize  (int _431,    int _432,    int _433,    int _434){monty::rc_reserve __reserve_this(_pubthis);   {
    pobj = 0.0;
    dobj = 0.0;
    pstatus = ::mosek::fusion::SolutionStatus::Unknown;
    dstatus = ::mosek::fusion::SolutionStatus::Unknown;
    probstatus = ::mosek::fusion::ProblemStatus::Unknown;
    sol_numvar = _431;
    sol_numcon = _432;
    sol_numcone = _433;
    sol_numbarvar = _434;
    slx = nullptr;
    sux = nullptr;
    xx = nullptr;
    yx = nullptr;
    slc = nullptr;
    suc = nullptr;
    y = nullptr;
    xc = nullptr;
    snx = nullptr;
    barx = nullptr;
    bars = nullptr;
    if ((_431 > (int)0))
    {
      {
        slx = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_431)));
        sux = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_431)));
        xx = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_431)));
        yx = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_431)));
      }
    }
    {}
    if ((_434 > (int)0))
    {
      {
        barx = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_434)));
        bars = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_434)));
      }
    }
    {}
    if ((_432 > (int)0))
    {
      {
        slc = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_432)));
        suc = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_432)));
        y = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_432)));
        xc = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_432)));
      }
    }
    {}
    if ((_433 > (int)0))
    {
      {
        snx = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_431)));
      }
    }
    {}
  }
}mosek::fusion::SolutionStruct::t mosek::fusion::p_SolutionStruct::_new_SolutionStruct  (monty::rc_ptr< ::mosek::fusion::SolutionStruct > _435){ return new mosek::fusion::SolutionStruct(_435); }mosek::fusion::SolutionStruct::SolutionStruct  (monty::rc_ptr< ::mosek::fusion::SolutionStruct > _435) :    SolutionStruct(new mosek::fusion::p_SolutionStruct(this)){ mosek::fusion::p_SolutionStruct::_get_impl(this)->_initialize(_435); }void mosek::fusion::p_SolutionStruct::_initialize  (monty::rc_ptr< ::mosek::fusion::SolutionStruct > _435){monty::rc_reserve __reserve_this(_pubthis);   {
    sol_numcon = mosek::fusion::p_SolutionStruct::_get_impl(_435)->sol_numcon;
    sol_numvar = mosek::fusion::p_SolutionStruct::_get_impl(_435)->sol_numvar;
    sol_numcone = mosek::fusion::p_SolutionStruct::_get_impl(_435)->sol_numcone;
    sol_numbarvar = mosek::fusion::p_SolutionStruct::_get_impl(_435)->sol_numbarvar;
    pstatus = mosek::fusion::p_SolutionStruct::_get_impl(_435)->pstatus;
    dstatus = mosek::fusion::p_SolutionStruct::_get_impl(_435)->dstatus;
    probstatus = mosek::fusion::p_SolutionStruct::_get_impl(_435)->probstatus;
    pobj = mosek::fusion::p_SolutionStruct::_get_impl(_435)->pobj;
    dobj = mosek::fusion::p_SolutionStruct::_get_impl(_435)->dobj;
    std::shared_ptr< monty::ndarray< double,1 > > _8686;
    bool _8687 = (NULL != mosek::fusion::p_SolutionStruct::_get_impl(_435)->xc.get());
    if (_8687)
    {
      _8686 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_435)->xc);
    }
    else
    {
      _8686 = nullptr;
    }
    xc = _8686;
    std::shared_ptr< monty::ndarray< double,1 > > _8688;
    bool _8689 = (NULL != mosek::fusion::p_SolutionStruct::_get_impl(_435)->xx.get());
    if (_8689)
    {
      _8688 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_435)->xx);
    }
    else
    {
      _8688 = nullptr;
    }
    xx = _8688;
    std::shared_ptr< monty::ndarray< double,1 > > _8690;
    bool _8691 = (NULL != mosek::fusion::p_SolutionStruct::_get_impl(_435)->yx.get());
    if (_8691)
    {
      _8690 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_435)->yx);
    }
    else
    {
      _8690 = nullptr;
    }
    yx = _8690;
    std::shared_ptr< monty::ndarray< double,1 > > _8692;
    bool _8693 = (NULL != mosek::fusion::p_SolutionStruct::_get_impl(_435)->slc.get());
    if (_8693)
    {
      _8692 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_435)->slx);
    }
    else
    {
      _8692 = nullptr;
    }
    slc = _8692;
    std::shared_ptr< monty::ndarray< double,1 > > _8694;
    bool _8695 = (NULL != mosek::fusion::p_SolutionStruct::_get_impl(_435)->suc.get());
    if (_8695)
    {
      _8694 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_435)->sux);
    }
    else
    {
      _8694 = nullptr;
    }
    suc = _8694;
    std::shared_ptr< monty::ndarray< double,1 > > _8696;
    bool _8697 = (NULL != mosek::fusion::p_SolutionStruct::_get_impl(_435)->y.get());
    if (_8697)
    {
      _8696 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_435)->y);
    }
    else
    {
      _8696 = nullptr;
    }
    y = _8696;
    barx = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_435)->barx);
    bars = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_435)->bars);
    std::shared_ptr< monty::ndarray< double,1 > > _8698;
    bool _8699 = (NULL != mosek::fusion::p_SolutionStruct::_get_impl(_435)->slx.get());
    if (_8699)
    {
      _8698 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_435)->slx);
    }
    else
    {
      _8698 = nullptr;
    }
    slx = _8698;
    std::shared_ptr< monty::ndarray< double,1 > > _8700;
    bool _8701 = (NULL != mosek::fusion::p_SolutionStruct::_get_impl(_435)->sux.get());
    if (_8701)
    {
      _8700 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_435)->sux);
    }
    else
    {
      _8700 = nullptr;
    }
    sux = _8700;
    std::shared_ptr< monty::ndarray< double,1 > > _8702;
    bool _8703 = (NULL != mosek::fusion::p_SolutionStruct::_get_impl(_435)->snx.get());
    if (_8703)
    {
      _8702 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_435)->snx);
    }
    else
    {
      _8702 = nullptr;
    }
    snx = _8702;
  }
}monty::rc_ptr< ::mosek::fusion::SolutionStruct > mosek::fusion::SolutionStruct :: __mosek_2fusion_2SolutionStruct__clone() { return mosek::fusion::p_SolutionStruct::_get_impl(this)->__mosek_2fusion_2SolutionStruct__clone(); }monty::rc_ptr< ::mosek::fusion::SolutionStruct > mosek::fusion::SolutionStruct::clone() { return __mosek_2fusion_2SolutionStruct__clone(); }
monty::rc_ptr< ::mosek::fusion::SolutionStruct > mosek::fusion::p_SolutionStruct::__mosek_2fusion_2SolutionStruct__clone(){
  return ::mosek::fusion::p_SolutionStruct::_new_SolutionStruct(::mosek::fusion::SolutionStruct::t(_pubthis));
}
void mosek::fusion::SolutionStruct :: resize(int _436,int _437,int _438,int _439) { mosek::fusion::p_SolutionStruct::_get_impl(this)->resize(_436,_437,_438,_439); }void mosek::fusion::p_SolutionStruct::resize(int _436,int _437,int _438,int _439){
  if ((_439 < (int)0))
  {
    {
    }
  }
  else if((_439 <= sol_numbarvar))
  {
    {
      sol_numbarvar = _439;
    }
  }
  else if((_439 <= (int)((barx)->size(0))))
  {
    {
    }
  }
  else
  {
    {
      int _440;
      if ((safe_mul( sol_numbarvar,(int)2 ) > safe_add( _439,(int)100 )))
      {
        {
          _440 = safe_mul( sol_numbarvar,(int)2 );
        }
      }
      else
      {
        {
          _440 = safe_add( _439,(int)100 );
        }
      }
      barx = ::mosek::fusion::p_CommonTools::resize(barx,_440);
      bars = ::mosek::fusion::p_CommonTools::resize(bars,_440);
      sol_numbarvar = _440;
    }
  }
  if ((_436 < (int)0))
  {
    {
    }
  }
  else if((_436 <= sol_numvar))
  {
    {
      sol_numvar = _436;
    }
  }
  else if((_436 <= (int)((xx)->size(0))))
  {
    {
      int _8704 = sol_numvar;
      int _8705 = _436;
      for (int _441 = _8704; _441 < _8705; ++_441)
      {
        {
          ((*slx)(_441)) = 0.0;
          ((*sux)(_441)) = 0.0;
          ((*xx)(_441)) = 0.0;
          ((*yx)(_441)) = 0.0;
        }
      }
      sol_numvar = _436;
    }
  }
  else
  {
    {
      int _442;
      if ((safe_mul( sol_numvar,(int)2 ) > safe_add( _436,(int)100 )))
      {
        {
          _442 = safe_mul( sol_numvar,(int)2 );
        }
      }
      else
      {
        {
          _442 = safe_add( _436,(int)100 );
        }
      }
      std::shared_ptr< monty::ndarray< double,1 > > _443 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_442)));
      _checked_ptr_1<double> _ptr__443(_443 ? _443->raw() : nullptr,_443 ? _443->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(slx,(int)0,_443,(int)0,(int)((slx)->size(0)));
      slx = _443;
      std::shared_ptr< monty::ndarray< double,1 > > _444 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_442)));
      _checked_ptr_1<double> _ptr__444(_444 ? _444->raw() : nullptr,_444 ? _444->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(sux,(int)0,_444,(int)0,(int)((sux)->size(0)));
      sux = _444;
      std::shared_ptr< monty::ndarray< double,1 > > _445 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_442)));
      _checked_ptr_1<double> _ptr__445(_445 ? _445->raw() : nullptr,_445 ? _445->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(xx,(int)0,_445,(int)0,(int)((xx)->size(0)));
      xx = _445;
      std::shared_ptr< monty::ndarray< double,1 > > _446 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_442)));
      _checked_ptr_1<double> _ptr__446(_446 ? _446->raw() : nullptr,_446 ? _446->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(yx,(int)0,_446,(int)0,(int)((yx)->size(0)));
      yx = _446;
      {
        int _447 = sol_numvar;
        for(;(_447 < _436);++ _447)
        {
          {
            ((*slx)(_447)) = 0.0;
            ((*sux)(_447)) = 0.0;
            ((*xx)(_447)) = 0.0;
          }
        }
      }
      sol_numvar = _436;
    }
  }
  if ((_437 < (int)0))
  {
    {
    }
  }
  else if((_437 <= sol_numcon))
  {
    {
      sol_numcon = _437;
    }
  }
  else if((_437 <= (int)((xx)->size(0))))
  {
    {
      int _8706 = sol_numcon;
      int _8707 = _437;
      for (int _448 = _8706; _448 < _8707; ++_448)
      {
        {
          ((*slc)(_448)) = 0.0;
          ((*suc)(_448)) = 0.0;
          ((*xc)(_448)) = 0.0;
          ((*y)(_448)) = 0.0;
        }
      }
      sol_numcon = _437;
    }
  }
  else
  {
    {
      int _449;
      if ((safe_mul( sol_numcon,(int)2 ) > safe_add( _437,(int)100 )))
      {
        {
          _449 = safe_mul( sol_numcon,(int)2 );
        }
      }
      else
      {
        {
          _449 = safe_add( _437,(int)100 );
        }
      }
      std::shared_ptr< monty::ndarray< double,1 > > _450 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_449)));
      _checked_ptr_1<double> _ptr__450(_450 ? _450->raw() : nullptr,_450 ? _450->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(slc,(int)0,_450,(int)0,(int)((slc)->size(0)));
      slc = _450;
      std::shared_ptr< monty::ndarray< double,1 > > _451 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_449)));
      _checked_ptr_1<double> _ptr__451(_451 ? _451->raw() : nullptr,_451 ? _451->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(suc,(int)0,_451,(int)0,(int)((suc)->size(0)));
      suc = _451;
      std::shared_ptr< monty::ndarray< double,1 > > _452 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_449)));
      _checked_ptr_1<double> _ptr__452(_452 ? _452->raw() : nullptr,_452 ? _452->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(xc,(int)0,_452,(int)0,(int)((xc)->size(0)));
      xc = _452;
      std::shared_ptr< monty::ndarray< double,1 > > _453 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_449)));
      _checked_ptr_1<double> _ptr__453(_453 ? _453->raw() : nullptr,_453 ? _453->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(y,(int)0,_453,(int)0,(int)((y)->size(0)));
      y = _453;
      int _8708 = sol_numcon;
      int _8709 = _437;
      for (int _454 = _8708; _454 < _8709; ++_454)
      {
        {
          ((*slc)(_454)) = 0.0;
          ((*suc)(_454)) = 0.0;
          ((*xc)(_454)) = 0.0;
          ((*y)(_454)) = 0.0;
        }
      }
      sol_numcon = _437;
    }
  }
  if ((_438 < (int)0))
  {
    {
    }
  }
  else if((_438 <= sol_numcone))
  {
    {
      sol_numcone = _438;
    }
  }
  else if((_438 <= (int)((xx)->size(0))))
  {
    {
      int _8710 = sol_numcone;
      int _8711 = _438;
      for (int _455 = _8710; _455 < _8711; ++_455)
      {
        {
          ((*snx)(_455)) = 0.0;
        }
      }
      sol_numcone = _438;
    }
  }
  else
  {
    {
      int _456;
      if ((safe_mul( sol_numcone,(int)2 ) > safe_add( _438,(int)100 )))
      {
        {
          _456 = safe_mul( sol_numcone,(int)2 );
        }
      }
      else
      {
        {
          _456 = safe_add( _438,(int)100 );
        }
      }
      std::shared_ptr< monty::ndarray< double,1 > > _457 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_456)));
      _checked_ptr_1<double> _ptr__457(_457 ? _457->raw() : nullptr,_457 ? _457->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(snx,(int)0,_457,(int)0,(int)((snx)->size(0)));
      snx = _457;
      {
        int _458 = sol_numcone;
        for(;(_458 < _438);++ _458)
        {
          {
            ((*snx)(_458)) = 0.0;
          }
        }
      }
      sol_numcone = _438;
    }
  }
}
bool mosek::fusion::SolutionStruct :: isDualAcceptable(mosek::fusion::AccSolutionStatus _459) { return mosek::fusion::p_SolutionStruct::_get_impl(this)->isDualAcceptable(_459); }bool mosek::fusion::p_SolutionStruct::isDualAcceptable(mosek::fusion::AccSolutionStatus _459){
  return isAcceptable(dstatus,_459);
}
bool mosek::fusion::SolutionStruct :: isPrimalAcceptable(mosek::fusion::AccSolutionStatus _460) { return mosek::fusion::p_SolutionStruct::_get_impl(this)->isPrimalAcceptable(_460); }bool mosek::fusion::p_SolutionStruct::isPrimalAcceptable(mosek::fusion::AccSolutionStatus _460){
  return isAcceptable(pstatus,_460);
}
bool mosek::fusion::p_SolutionStruct::isAcceptable(mosek::fusion::SolutionStatus _461,mosek::fusion::AccSolutionStatus _462){
  if ((_462 == ::mosek::fusion::AccSolutionStatus::Anything))
  {
    {
      return true;
    }
  }
  else if((_462 == ::mosek::fusion::AccSolutionStatus::Optimal))
  {
    {
      return (_461 == ::mosek::fusion::SolutionStatus::Optimal);
    }
  }
  else if((_462 == ::mosek::fusion::AccSolutionStatus::Feasible))
  {
    {
      return ((_461 == ::mosek::fusion::SolutionStatus::Optimal) || (_461 == ::mosek::fusion::SolutionStatus::Feasible));
    }
  }
  else if((_462 == ::mosek::fusion::AccSolutionStatus::Certificate))
  {
    {
      return (_461 == ::mosek::fusion::SolutionStatus::Certificate);
    }
  }
  {}
  return false;
}
void mosek::fusion::p_SolutionStruct::destroy(){yx.reset();snx.reset();sux.reset();slx.reset();bars.reset();barx.reset();y.reset();suc.reset();slc.reset();xx.reset();xc.reset();}void mosek::fusion::SolutionStruct::destroy() { mosek::fusion::p_SolutionStruct::_get_impl(this)->destroy(); }mosek::fusion::ConNZStruct::ConNZStruct(mosek::fusion::p_ConNZStruct *_impl) : _impl(_impl) { /*std::cout << "ConNZStruct() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::ConNZStruct::~ConNZStruct() { delete _impl; _impl = nullptr; }mosek::fusion::p_ConNZStruct::p_ConNZStruct  (::mosek::fusion::ConNZStruct * _pubthis) :     _pubthis(_pubthis){}std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::ConNZStruct::get_barmidx() { return _impl->barmidx; }
void mosek::fusion::ConNZStruct::set_barmidx(std::shared_ptr< monty::ndarray< int,1 > > _val) { _impl->barmidx = _val; }
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::ConNZStruct::get_barsubj() { return _impl->barsubj; }
void mosek::fusion::ConNZStruct::set_barsubj(std::shared_ptr< monty::ndarray< int,1 > > _val) { _impl->barsubj = _val; }
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::ConNZStruct::get_barsubi() { return _impl->barsubi; }
void mosek::fusion::ConNZStruct::set_barsubi(std::shared_ptr< monty::ndarray< int,1 > > _val) { _impl->barsubi = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::ConNZStruct::get_bfix() { return _impl->bfix; }
void mosek::fusion::ConNZStruct::set_bfix(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->bfix = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::ConNZStruct::get_cof() { return _impl->cof; }
void mosek::fusion::ConNZStruct::set_cof(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->cof = _val; }
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::ConNZStruct::get_subj() { return _impl->subj; }
void mosek::fusion::ConNZStruct::set_subj(std::shared_ptr< monty::ndarray< int,1 > > _val) { _impl->subj = _val; }
std::shared_ptr< monty::ndarray< long long,1 > > mosek::fusion::ConNZStruct::get_ptrb() { return _impl->ptrb; }
void mosek::fusion::ConNZStruct::set_ptrb(std::shared_ptr< monty::ndarray< long long,1 > > _val) { _impl->ptrb = _val; }
mosek::fusion::ConNZStruct::t mosek::fusion::p_ConNZStruct::_new_ConNZStruct  (std::shared_ptr< monty::ndarray< long long,1 > > _463,    std::shared_ptr< monty::ndarray< int,1 > > _464,    std::shared_ptr< monty::ndarray< double,1 > > _465,    std::shared_ptr< monty::ndarray< double,1 > > _466,    std::shared_ptr< monty::ndarray< int,1 > > _467,    std::shared_ptr< monty::ndarray< int,1 > > _468,    std::shared_ptr< monty::ndarray< int,1 > > _469){ return new mosek::fusion::ConNZStruct(_463,_464,_465,_466,_467,_468,_469); }mosek::fusion::ConNZStruct::ConNZStruct  (std::shared_ptr< monty::ndarray< long long,1 > > _463,    std::shared_ptr< monty::ndarray< int,1 > > _464,    std::shared_ptr< monty::ndarray< double,1 > > _465,    std::shared_ptr< monty::ndarray< double,1 > > _466,    std::shared_ptr< monty::ndarray< int,1 > > _467,    std::shared_ptr< monty::ndarray< int,1 > > _468,    std::shared_ptr< monty::ndarray< int,1 > > _469) :    ConNZStruct(new mosek::fusion::p_ConNZStruct(this)){ mosek::fusion::p_ConNZStruct::_get_impl(this)->_initialize(_463,_464,_465,_466,_467,_468,_469); }void mosek::fusion::p_ConNZStruct::_initialize  (std::shared_ptr< monty::ndarray< long long,1 > > _463,    std::shared_ptr< monty::ndarray< int,1 > > _464,    std::shared_ptr< monty::ndarray< double,1 > > _465,    std::shared_ptr< monty::ndarray< double,1 > > _466,    std::shared_ptr< monty::ndarray< int,1 > > _467,    std::shared_ptr< monty::ndarray< int,1 > > _468,    std::shared_ptr< monty::ndarray< int,1 > > _469){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<long long> _ptr__463(_463 ? _463->raw() : nullptr, _463 ? _463->size(0) : 0);
    _checked_ptr_1<int> _ptr__464(_464 ? _464->raw() : nullptr, _464 ? _464->size(0) : 0);
    _checked_ptr_1<double> _ptr__465(_465 ? _465->raw() : nullptr, _465 ? _465->size(0) : 0);
    _checked_ptr_1<double> _ptr__466(_466 ? _466->raw() : nullptr, _466 ? _466->size(0) : 0);
    _checked_ptr_1<int> _ptr__467(_467 ? _467->raw() : nullptr, _467 ? _467->size(0) : 0);
    _checked_ptr_1<int> _ptr__468(_468 ? _468->raw() : nullptr, _468 ? _468->size(0) : 0);
    _checked_ptr_1<int> _ptr__469(_469 ? _469->raw() : nullptr, _469 ? _469->size(0) : 0);
    ptrb = _463;
    subj = _464;
    cof = _465;
    bfix = _466;
    barsubi = _467;
    barsubj = _468;
    barmidx = _469;
  }
}void mosek::fusion::p_ConNZStruct::destroy(){barmidx.reset();barsubj.reset();barsubi.reset();bfix.reset();cof.reset();subj.reset();ptrb.reset();}void mosek::fusion::ConNZStruct::destroy() { mosek::fusion::p_ConNZStruct::_get_impl(this)->destroy(); }mosek::fusion::Model::Model(mosek::fusion::p_Model *_impl) : mosek::fusion::BaseModel(_impl) { /*std::cout << "Model()" << this << std::endl; */ }mosek::fusion::Model::~Model() {  /* std::cout << "~Model()" << this << std::endl << std::flush; */ }mosek::fusion::p_Model::p_Model  (::mosek::fusion::Model * _pubthis) :     mosek::fusion::p_BaseModel(_pubthis),    _pubthis(_pubthis){}mosek::fusion::Model::t mosek::fusion::p_Model::_new_Model  (monty::rc_ptr< ::mosek::fusion::Model > _470){ return new mosek::fusion::Model(_470); }mosek::fusion::Model::Model  (monty::rc_ptr< ::mosek::fusion::Model > _470) :    Model(new mosek::fusion::p_Model(this)){ mosek::fusion::p_Model::_get_impl(this)->_initialize(_470); }void mosek::fusion::p_Model::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _470){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseModel::_initialize(_470);
    monty::rc_ptr< ::mosek::fusion::Model > _471 = ::mosek::fusion::Model::t(_pubthis);
    model_name = mosek::fusion::p_Model::_get_impl(_470)->model_name;
    acceptable_sol = mosek::fusion::p_Model::_get_impl(_470)->acceptable_sol;
    solutionptr = mosek::fusion::p_Model::_get_impl(_470)->solutionptr;
    natvarmap_blockid = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_470)->natvarmap_blockid);
    natvarmap_idx = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_470)->natvarmap_idx);
    natvarmap_type = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_470)->natvarmap_type);
    natvarmap = ::mosek::fusion::p_LinkedBlocks::_new_LinkedBlocks(mosek::fusion::p_Model::_get_impl(_470)->natvarmap);
    std::vector<monty::rc_ptr< ::mosek::fusion::ModelVariable >> _8712;
    for (int _472 = (int)0, _8713 = (int)((mosek::fusion::p_Model::_get_impl(_470)->vars)->size(0)); _472 < _8713 ; ++_472)
    {
      monty::rc_ptr< ::mosek::fusion::ModelVariable > _8714;
      bool _8715 = (NULL != ((*mosek::fusion::p_Model::_get_impl(_470)->vars)(_472)).get());
      if (_8715)
      {
        _8714 = mosek::fusion::p_ModelVariable::_get_impl(((*mosek::fusion::p_Model::_get_impl(_470)->vars)(_472)).get())->__mosek_2fusion_2ModelVariable__clone(_471);
      }
      else
      {
        _8714 = nullptr;
      }
      _8712.push_back(_8714);
    }
    auto _8716 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 >(monty::shape(_8712.size()),_8712.begin(),_8712.end()));
    vars = _8716;
    natconemap = ::mosek::fusion::p_LinkedBlocks::_new_LinkedBlocks(mosek::fusion::p_Model::_get_impl(_470)->natconemap);
    natconemap_dim = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_470)->natconemap_dim);
    natbarvar_numbarvarelm = mosek::fusion::p_Model::_get_impl(_470)->natbarvar_numbarvarelm;
    natbarvar_ptr = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_470)->natbarvar_ptr);
    natbarvar_i = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_470)->natbarvar_i);
    natbarvar_j = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_470)->natbarvar_j);
    natbarvar_idx = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_470)->natbarvar_idx);
    natbarvarmap_nblock = mosek::fusion::p_Model::_get_impl(_470)->natbarvarmap_nblock;
    natbarvar_dim = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_470)->natbarvar_dim);
    natbarvarmap_num = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_470)->natbarvarmap_num);
    natbarvarmap_ptr = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_470)->natbarvarmap_ptr);
    std::vector<monty::rc_ptr< ::mosek::fusion::ModelVariable >> _8717;
    for (int _473 = (int)0, _8718 = (int)((mosek::fusion::p_Model::_get_impl(_470)->barvars)->size(0)); _473 < _8718 ; ++_473)
    {
      monty::rc_ptr< ::mosek::fusion::ModelVariable > _8719;
      bool _8720 = (NULL != ((*mosek::fusion::p_Model::_get_impl(_470)->barvars)(_473)).get());
      if (_8720)
      {
        _8719 = mosek::fusion::p_ModelVariable::_get_impl(((*mosek::fusion::p_Model::_get_impl(_470)->barvars)(_473)).get())->__mosek_2fusion_2ModelVariable__clone(_471);
      }
      else
      {
        _8719 = nullptr;
      }
      _8717.push_back(_8719);
    }
    auto _8721 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 >(monty::shape(_8717.size()),_8717.begin(),_8717.end()));
    barvars = _8721;
    var_map = mosek::fusion::p_Model::_get_impl(_470)->var_map->__mosek_2fusion_2Utils_2StringIntMap__clone();
    natconmap_blockid = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_470)->natconmap_blockid);
    natconmap_slackidx = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_470)->natconmap_slackidx);
    natconmap_idx = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_470)->natconmap_idx);
    natconmap_type = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_470)->natconmap_type);
    natconmap = ::mosek::fusion::p_LinkedBlocks::_new_LinkedBlocks(mosek::fusion::p_Model::_get_impl(_470)->natconmap);
    std::vector<monty::rc_ptr< ::mosek::fusion::ModelConstraint >> _8722;
    for (int _474 = (int)0, _8723 = (int)((mosek::fusion::p_Model::_get_impl(_470)->cons)->size(0)); _474 < _8723 ; ++_474)
    {
      monty::rc_ptr< ::mosek::fusion::ModelConstraint > _8724;
      bool _8725 = (NULL != ((*mosek::fusion::p_Model::_get_impl(_470)->cons)(_474)).get());
      if (_8725)
      {
        _8724 = mosek::fusion::p_ModelConstraint::_get_impl(((*mosek::fusion::p_Model::_get_impl(_470)->cons)(_474)).get())->__mosek_2fusion_2ModelConstraint__clone(_471);
      }
      else
      {
        _8724 = nullptr;
      }
      _8722.push_back(_8724);
    }
    auto _8726 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelConstraint >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelConstraint >,1 >(monty::shape(_8722.size()),_8722.begin(),_8722.end()));
    cons = _8726;
    con_map = mosek::fusion::p_Model::_get_impl(_470)->con_map->__mosek_2fusion_2Utils_2StringIntMap__clone();
    numparameter = mosek::fusion::p_Model::_get_impl(_470)->numparameter;
    std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 > > _8727;
    bool _8728 = (NULL == mosek::fusion::p_Model::_get_impl(_470)->parameters.get());
    if (_8728)
    {
      _8727 = nullptr;
    }
    else
    {
      std::vector<monty::rc_ptr< ::mosek::fusion::Parameter >> _8729;
      for (int _475 = (int)0, _8730 = (int)((mosek::fusion::p_Model::_get_impl(_470)->parameters)->size(0)); _475 < _8730 ; ++_475)
      {
        monty::rc_ptr< ::mosek::fusion::Parameter > _8731;
        bool _8732 = (NULL != ((*mosek::fusion::p_Model::_get_impl(_470)->parameters)(_475)).get());
        if (_8732)
        {
          _8731 = ((*mosek::fusion::p_Model::_get_impl(_470)->parameters)(_475))->__mosek_2fusion_2Parameter__clone(_471);
        }
        else
        {
          _8731 = nullptr;
        }
        _8729.push_back(_8731);
      }
      auto _8733 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 >(monty::shape(_8729.size()),_8729.begin(),_8729.end()));
      _8727 = _8733;
    }
    parameters = _8727;
    par_map = mosek::fusion::p_Model::_get_impl(_470)->par_map->__mosek_2fusion_2Utils_2StringIntMap__clone();
    param_num = mosek::fusion::p_Model::_get_impl(_470)->param_num;
    param_value = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_470)->param_value);
    natconmap_codenztop = mosek::fusion::p_Model::_get_impl(_470)->natconmap_codenztop;
    natconmap_codeatomtop = mosek::fusion::p_Model::_get_impl(_470)->natconmap_codeatomtop;
    natconmap_numparameterized = mosek::fusion::p_Model::_get_impl(_470)->natconmap_numparameterized;
    natconmap_coderowptrb = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_470)->natconmap_coderowptrb);
    natconmap_coderowptre = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_470)->natconmap_coderowptre);
    natconmap_codenidx = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_470)->natconmap_codenidx);
    natconmap_codeptr = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_470)->natconmap_codeptr);
    natconmap_code = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_470)->natconmap_code);
    natconmap_cconst = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_470)->natconmap_cconst);
    std::shared_ptr< monty::ndarray< long long,1 > > _8734;
    bool _8735 = (NULL != mosek::fusion::p_Model::_get_impl(_470)->natconmap_objcodenidx.get());
    if (_8735)
    {
      _8734 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_470)->natconmap_objcodenidx);
    }
    else
    {
      _8734 = nullptr;
    }
    natconmap_objcodenidx = _8734;
    std::shared_ptr< monty::ndarray< int,1 > > _8736;
    bool _8737 = (NULL != mosek::fusion::p_Model::_get_impl(_470)->natconmap_objcodeptr.get());
    if (_8737)
    {
      _8736 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_470)->natconmap_objcodeptr);
    }
    else
    {
      _8736 = nullptr;
    }
    natconmap_objcodeptr = _8736;
    std::shared_ptr< monty::ndarray< int,1 > > _8738;
    bool _8739 = (NULL != mosek::fusion::p_Model::_get_impl(_470)->natconmap_objcode.get());
    if (_8739)
    {
      _8738 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_470)->natconmap_objcode);
    }
    else
    {
      _8738 = nullptr;
    }
    natconmap_objcode = _8738;
    std::shared_ptr< monty::ndarray< double,1 > > _8740;
    bool _8741 = (NULL != mosek::fusion::p_Model::_get_impl(_470)->natconmap_objcconst.get());
    if (_8741)
    {
      _8740 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Model::_get_impl(_470)->natconmap_objcconst);
    }
    else
    {
      _8740 = nullptr;
    }
    natconmap_objcconst = _8740;
    initsol_xx = nullptr;
    initsol_xx_flag = nullptr;
    bfixidx = mosek::fusion::p_Model::_get_impl(_470)->bfixidx;
    rs = ::mosek::fusion::p_WorkStack::_new_WorkStack();
    ws = ::mosek::fusion::p_WorkStack::_new_WorkStack();
    xs = ::mosek::fusion::p_WorkStack::_new_WorkStack();
  }
}mosek::fusion::Model::t mosek::fusion::p_Model::_new_Model  (const std::string &  _476){ return new mosek::fusion::Model(_476); }mosek::fusion::Model::Model  (const std::string &  _476) :    Model(new mosek::fusion::p_Model(this)){ mosek::fusion::p_Model::_get_impl(this)->_initialize(_476); }void mosek::fusion::p_Model::_initialize  (const std::string &  _476){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseModel::_initialize(_476,std::string (""));
    model_name = _476;
    acceptable_sol = ::mosek::fusion::AccSolutionStatus::Optimal;
    solutionptr = ::mosek::fusion::SolutionType::Default;
    natvarmap = ::mosek::fusion::p_LinkedBlocks::_new_LinkedBlocks();
    natvarmap_blockid = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)1024)));
    natvarmap_idx = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)1024)));
    natvarmap_type = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)1024)));
    std::vector<monty::rc_ptr< ::mosek::fusion::ModelVariable >> _8742;
    for (int _477 = (int)0, _8743 = (int)1024; _477 < _8743 ; ++_477)
    {
      _8742.push_back(nullptr);
    }
    auto _8744 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 >(monty::shape(_8742.size()),_8742.begin(),_8742.end()));
    vars = _8744;
    natconemap = ::mosek::fusion::p_LinkedBlocks::_new_LinkedBlocks();
    natconemap_dim = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0)));
    barvars = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 >(monty::shape((int)0)));
    natbarvar_ptr = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)0)));
    natbarvar_numbarvarelm = (int)0;
    natbarvar_i = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0)));
    natbarvar_j = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0)));
    natbarvar_idx = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0)));
    natbarvarmap_nblock = (int)0;
    natbarvar_dim = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0)));
    natbarvarmap_num = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0)));
    natbarvarmap_ptr = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)0)});
    barvars = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 >(monty::shape((int)0)));
    var_map = ::mosek::fusion::Utils::p_StringIntMap::_new_StringIntMap();
    initsol_xx = nullptr;
    initsol_xx_flag = nullptr;
    natconmap = ::mosek::fusion::p_LinkedBlocks::_new_LinkedBlocks();
    natconmap_blockid = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)1024)));
    natconmap_slackidx = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)1024)));
    natconmap_idx = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)1024)));
    natconmap_type = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)1024)));
    natconmap_coderowptrb = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)1024)));
    natconmap_coderowptre = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)1024)));
    std::vector<monty::rc_ptr< ::mosek::fusion::ModelConstraint >> _8745;
    for (int _478 = (int)0, _8746 = (int)1024; _478 < _8746 ; ++_478)
    {
      _8745.push_back(nullptr);
    }
    auto _8747 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelConstraint >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelConstraint >,1 >(monty::shape(_8745.size()),_8745.begin(),_8745.end()));
    cons = _8747;
    con_map = ::mosek::fusion::Utils::p_StringIntMap::_new_StringIntMap();
    numparameter = (int)0;
    parameters = nullptr;
    par_map = ::mosek::fusion::Utils::p_StringIntMap::_new_StringIntMap();
    param_num = (int)0;
    param_value = nullptr;
    natconmap_numparameterized = (int)0;
    natconmap_codeatomtop = (int)0;
    natconmap_codenztop = (int)0;
    natconmap_codenidx = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)1024)));
    natconmap_codeptr = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)1024)));
    natconmap_code = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)1024)));
    natconmap_cconst = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)1024)));
    natconmap_objcodenidx = nullptr;
    natconmap_objcodeptr = nullptr;
    natconmap_objcode = nullptr;
    natconmap_objcconst = nullptr;
    bfixidx = natvarmap_alloc((int)1);
    task_var_putboundlist_fx(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(bfixidx)}),std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(1.0)}));
    task_var_name(bfixidx,std::string ("1.0"));
    rs = ::mosek::fusion::p_WorkStack::_new_WorkStack();
    ws = ::mosek::fusion::p_WorkStack::_new_WorkStack();
    xs = ::mosek::fusion::p_WorkStack::_new_WorkStack();
  }
}mosek::fusion::Model::t mosek::fusion::p_Model::_new_Model  (){ return new mosek::fusion::Model(); }mosek::fusion::Model::Model  () :    Model(new mosek::fusion::p_Model(this)){ mosek::fusion::p_Model::_get_impl(this)->_initialize(); }void mosek::fusion::p_Model::_initialize  (){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_Model::_initialize(std::string (""));
  }
}monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::p_Model::__mosek_2fusion_2Model__formstConstr(monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _479,std::shared_ptr< monty::ndarray< int,1 > > _480,std::shared_ptr< monty::ndarray< int,1 > > _481){
  _checked_ptr_1<int> _ptr__480(_480 ? _480->raw() : nullptr, _480 ? _480->size(0) : 0);
  _checked_ptr_1<int> _ptr__481(_481 ? _481->raw() : nullptr, _481 ? _481->size(0) : 0);
  return _479;
}
void mosek::fusion::p_Model::connames(std::shared_ptr< monty::ndarray< int,1 > > _482,const std::string & _483,std::shared_ptr< monty::ndarray< int,1 > > _484,std::shared_ptr< monty::ndarray< long long,1 > > _485){
  _checked_ptr_1<int> _ptr__482(_482 ? _482->raw() : nullptr, _482 ? _482->size(0) : 0);
  _checked_ptr_1<int> _ptr__484(_484 ? _484->raw() : nullptr, _484 ? _484->size(0) : 0);
  _checked_ptr_1<long long> _ptr__485(_485 ? _485->raw() : nullptr, _485 ? _485->size(0) : 0);
  task_format_con_names(_482,_483,_484,_485);
}
void mosek::fusion::p_Model::varnames(std::shared_ptr< monty::ndarray< int,1 > > _486,const std::string & _487,std::shared_ptr< monty::ndarray< int,1 > > _488,std::shared_ptr< monty::ndarray< long long,1 > > _489){
  _checked_ptr_1<int> _ptr__486(_486 ? _486->raw() : nullptr, _486 ? _486->size(0) : 0);
  _checked_ptr_1<int> _ptr__488(_488 ? _488->raw() : nullptr, _488 ? _488->size(0) : 0);
  _checked_ptr_1<long long> _ptr__489(_489 ? _489->raw() : nullptr, _489 ? _489->size(0) : 0);
  task_format_var_names(_486,_487,_488,_489);
}
void mosek::fusion::p_Model::varname(int _490,const std::string & _491){
  task_var_name(_490,_491);
}
void mosek::fusion::p_Model::natbarvarmap_get(int _492,std::shared_ptr< monty::ndarray< int,1 > > _493){
  _checked_ptr_1<int> _ptr__493(_493 ? _493->raw() : nullptr, _493 ? _493->size(0) : 0);
  int _494 = ((*natbarvarmap_ptr)(_492));
  int _495 = ((*natbarvarmap_num)(_492));
  int _8748 = (int)0;
  int _8749 = _495;
  for (int _496 = _8748; _496 < _8749; ++_496)
  {
    {
      _ptr__493[_496] = safe_add( _494,_496 );
    }
  }
}
void mosek::fusion::p_Model::natbarvar_get(int _497,std::shared_ptr< monty::ndarray< long long,1 > > _498){
  _checked_ptr_1<long long> _ptr__498(_498 ? _498->raw() : nullptr, _498 ? _498->size(0) : 0);
  int _499 = ((*natbarvarmap_ptr)(_497));
  int _500 = ((*natbarvarmap_num)(_497));
  int _501 = ((*natbarvar_dim)(((*natbarvarmap_ptr)(_497))));
  int _502 = (safe_mul( safe_mul( _500,_501 ),safe_add( _501,(int)1 ) ) / (int)2);
  long long _503 = ((*natbarvar_ptr)(_499));
  int _8750 = (int)0;
  int _8751 = _502;
  for (int _504 = _8750; _504 < _8751; ++_504)
  {
    {
      _ptr__498[_504] = safe_add( _503,_504 );
    }
  }
}
int mosek::fusion::p_Model::natbarvarmap_alloc(int _505,int _506){
  int _507 = (int)((natbarvar_idx)->size(0));
  int _508 = task_numbarvar();
  int _509 = (safe_mul( _506,safe_add( _506,(int)1 ) ) / (int)2);
  int _510 = safe_mul( _505,_509 );
  if ((safe_add( natbarvar_numbarvarelm,_510 ) >= _507))
  {
    {
      if ((_510 < _507))
      {
        {
          _510 = _507;
        }
      }
      {}
      natbarvar_idx = ::mosek::fusion::p_CommonTools::resize(natbarvar_idx,safe_add( _507,_510 ));
      natbarvar_i = ::mosek::fusion::p_CommonTools::resize(natbarvar_i,safe_add( _507,_510 ));
      natbarvar_j = ::mosek::fusion::p_CommonTools::resize(natbarvar_j,safe_add( _507,_510 ));
    }
  }
  {}
  if ((safe_add( natbarvarmap_nblock,(int)1 ) >= (int)((natbarvarmap_num)->size(0))))
  {
    {
      int _8752;
      bool _8753 = ((int)((natbarvarmap_num)->size(0)) > (int)0);
      if (_8753)
      {
        _8752 = safe_mul( (int)((natbarvarmap_num)->size(0)),(int)2 );
      }
      else
      {
        _8752 = (int)32;
      }
      int _511 = _8752;
      natbarvarmap_num = ::mosek::fusion::p_CommonTools::resize(natbarvarmap_num,_511);
      natbarvarmap_ptr = ::mosek::fusion::p_CommonTools::resize(natbarvarmap_ptr,safe_add( _511,(int)1 ));
      std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 > > _512 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 >(monty::shape(_511)));
      int _8754 = (int)0;
      int _8755 = (int)((barvars)->size(0));
      for (int _513 = _8754; _513 < _8755; ++_513)
      {
        {
          ((*_512)(_513)) = ((*barvars)(_513));
        }
      }
      barvars = _512;
    }
  }
  {}
  if ((safe_add( _508,_505 ) > (int)((natbarvar_dim)->size(0))))
  {
    {
      int _8756;
      bool _8757 = (safe_add( _508,_505 ) < safe_mul( (int)((natbarvar_dim)->size(0)),(int)2 ));
      if (_8757)
      {
        _8756 = safe_mul( (int)((natbarvar_dim)->size(0)),(int)2 );
      }
      else
      {
        _8756 = safe_add( _508,_505 );
      }
      int _514 = _8756;
      natbarvar_dim = ::mosek::fusion::p_CommonTools::resize(natbarvar_dim,_514);
    }
  }
  {}
  if ((safe_add( _508,_505 ) >= (int)((natbarvar_ptr)->size(0))))
  {
    {
      int _8758;
      bool _8759 = (_505 > (int)((natbarvar_ptr)->size(0)));
      if (_8759)
      {
        _8758 = _505;
      }
      else
      {
        _8758 = (int)((natbarvar_ptr)->size(0));
      }
      int _515 = _8758;
      natbarvar_ptr = ::mosek::fusion::p_CommonTools::resize(natbarvar_ptr,safe_add( safe_add( (int)((natbarvar_ptr)->size(0)),_515 ),(int)1 ));
    }
  }
  {}
  int _8760 = (int)0;
  int _8761 = _505;
  for (int _516 = _8760; _516 < _8761; ++_516)
  {
    {
      ((*natbarvar_dim)(safe_add( _508,_516 ))) = _506;
    }
  }
  ((*natbarvarmap_num)(natbarvarmap_nblock)) = _505;
  ((*natbarvarmap_ptr)(safe_add( natbarvarmap_nblock,(int)1 ))) = safe_add( ((*natbarvarmap_ptr)(natbarvarmap_nblock)),_505 );
  int _517 = task_append_barvar(_506,_505);
  int _518 = ((*natbarvarmap_ptr)(natbarvarmap_nblock));
  {
    long long _519 = ((*natbarvar_ptr)(_508));
    int _8762 = (int)0;
    int _8763 = _506;
    for (int _520 = _8762; _520 < _8763; ++_520)
    {
      {
        int _8764 = _520;
        int _8765 = _506;
        for (int _521 = _8764; _521 < _8765; ++_521)
        {
          {
            int _8766 = (int)0;
            int _8767 = _505;
            for (int _522 = _8766; _522 < _8767; ++_522)
            {
              {
                ((*natbarvar_idx)(safe_add( _519,safe_mul( _522,_509 ) ))) = safe_add( _518,_522 );
                ((*natbarvar_i)(safe_add( _519,safe_mul( _522,_509 ) ))) = _521;
                ((*natbarvar_j)(safe_add( _519,safe_mul( _522,_509 ) ))) = _520;
              }
            }
            ++ _519;
          }
        }
      }
    }
    int _8768 = (int)0;
    int _8769 = _505;
    for (int _523 = _8768; _523 < _8769; ++_523)
    {
      {
        ((*natbarvar_ptr)(safe_add( safe_add( _518,_523 ),(int)1 ))) = safe_add( ((*natbarvar_ptr)(safe_add( _518,_523 ))),_509 );
      }
    }
  }
  natbarvarmap_nblock += (int)1;
  natbarvar_numbarvarelm += safe_mul( _505,_509 );
  return (natbarvarmap_nblock - (int)1);
}
int mosek::fusion::p_Model::natvarmap_alloc(int _524){
  int _525 = natvarmap->alloc(_524);
  int _526 = safe_add( natvarmap->maxidx(_525),(int)1 );
  int _527 = natvarmap->capacity();
  int _528 = natvarmap->numblocks();
  if (((int)((natvarmap_idx)->size(0)) < _527))
  {
    {
      int _529 = (int)((natvarmap_idx)->size(0));
      natvarmap_idx = ::mosek::fusion::p_CommonTools::resize(natvarmap_idx,_527);
      int _8770 = _529;
      int _8771 = _527;
      for (int _530 = _8770; _530 < _8771; ++_530)
      {
        {
          ((*natvarmap_idx)(_530)) = (-(int)1);
        }
      }
      natvarmap_blockid = ::mosek::fusion::p_CommonTools::resize(natvarmap_blockid,_527);
    }
  }
  {}
  if (((int)((vars)->size(0)) < _528))
  {
    {
      natvarmap_type = ::mosek::fusion::p_CommonTools::resize(natvarmap_type,_528);
      std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 > > _531 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelVariable >,1 >(monty::shape(_528)));
      int _8772 = (int)0;
      int _8773 = (int)((vars)->size(0));
      for (int _532 = _8772; _532 < _8773; ++_532)
      {
        {
          ((*_531)(_532)) = ((*vars)(_532));
        }
      }
      int _8774 = (int)((vars)->size(0));
      int _8775 = (int)((_531)->size(0));
      for (int _533 = _8774; _533 < _8775; ++_533)
      {
        {
          ((*_531)(_533)) = nullptr;
        }
      }
      vars = _531;
    }
  }
  {}
  if ((task_numvar() < _526))
  {
    {
      task_append_var((_526 - task_numvar()));
    }
  }
  {}
  return _525;
}
void mosek::fusion::p_Model::natconmap_codealloc(int _534,int _535){
  int _536 = safe_add( _534,natconmap_codenztop );
  int _537 = safe_add( _535,natconmap_codeatomtop );
  if ((_536 > (int)((natconmap_codenidx)->size(0))))
  {
    {
      if ((_536 < safe_mul( (int)2,(int)((natconmap_codenidx)->size(0)) )))
      {
        {
          _536 = safe_mul( (int)2,(int)((natconmap_codenidx)->size(0)) );
        }
      }
      {}
      std::shared_ptr< monty::ndarray< long long,1 > > _538 = natconmap_codenidx;
      _checked_ptr_1<long long> _ptr__538(_538 ? _538->raw() : nullptr,_538 ? _538->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _539 = natconmap_codeptr;
      _checked_ptr_1<int> _ptr__539(_539 ? _539->raw() : nullptr,_539 ? _539->size(0) : 0);
      natconmap_codenidx = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_536)));
      ::mosek::fusion::Utils::Tools::arraycopy(_538,(int)0,natconmap_codenidx,(int)0,(int)((_538)->size(0)));
      natconmap_codeptr = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(safe_add( _536,(int)1 ))));
      ::mosek::fusion::Utils::Tools::arraycopy(_539,(int)0,natconmap_codeptr,(int)0,(int)((_539)->size(0)));
    }
  }
  {}
  if ((_537 > (int)((natconmap_code)->size(0))))
  {
    {
      if ((_537 < safe_mul( (int)2,(int)((natconmap_code)->size(0)) )))
      {
        {
          _537 = safe_mul( (int)2,(int)((natconmap_code)->size(0)) );
        }
      }
      {}
      std::shared_ptr< monty::ndarray< int,1 > > _540 = natconmap_code;
      _checked_ptr_1<int> _ptr__540(_540 ? _540->raw() : nullptr,_540 ? _540->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _541 = natconmap_cconst;
      _checked_ptr_1<double> _ptr__541(_541 ? _541->raw() : nullptr,_541 ? _541->size(0) : 0);
      natconmap_code = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_537)));
      ::mosek::fusion::Utils::Tools::arraycopy(_540,(int)0,natconmap_code,(int)0,(int)((_540)->size(0)));
      natconmap_cconst = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(safe_add( _537,(int)1 ))));
      ::mosek::fusion::Utils::Tools::arraycopy(_541,(int)0,natconmap_cconst,(int)0,(int)((_541)->size(0)));
    }
  }
  {}
  natconmap_codenztop += _534;
  natconmap_codeatomtop += _535;
}
int mosek::fusion::p_Model::natconmap_alloc(int _542){
  int _543 = natconmap->alloc(_542);
  int _544 = safe_add( natconmap->maxidx(_543),(int)1 );
  int _545 = natconmap->capacity();
  int _546 = natconmap->numblocks();
  if (((int)((natconmap_idx)->size(0)) < _545))
  {
    {
      int _547 = (int)((natconmap_idx)->size(0));
      natconmap_idx = ::mosek::fusion::p_CommonTools::resize(natconmap_idx,_545);
      int _8776 = _547;
      int _8777 = _545;
      for (int _548 = _8776; _548 < _8777; ++_548)
      {
        {
          ((*natconmap_idx)(_548)) = (-(int)1);
        }
      }
      natconmap_blockid = ::mosek::fusion::p_CommonTools::resize(natconmap_blockid,_545);
      natconmap_slackidx = ::mosek::fusion::p_CommonTools::resize(natconmap_slackidx,_545);
      natconmap_coderowptrb = ::mosek::fusion::p_CommonTools::resize(natconmap_coderowptrb,_545);
      natconmap_coderowptre = ::mosek::fusion::p_CommonTools::resize(natconmap_coderowptre,_545);
    }
  }
  {}
  if (((int)((cons)->size(0)) < _546))
  {
    {
      natconmap_type = ::mosek::fusion::p_CommonTools::resize(natconmap_type,_546);
      std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelConstraint >,1 > > _549 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelConstraint >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::ModelConstraint >,1 >(monty::shape(_546)));
      int _8778 = (int)0;
      int _8779 = (int)((cons)->size(0));
      for (int _550 = _8778; _550 < _8779; ++_550)
      {
        {
          ((*_549)(_550)) = ((*cons)(_550));
        }
      }
      int _8780 = (int)((cons)->size(0));
      int _8781 = _546;
      for (int _551 = _8780; _551 < _8781; ++_551)
      {
        {
          ((*_549)(_551)) = nullptr;
        }
      }
      cons = _549;
    }
  }
  {}
  if ((_544 > task_numcon()))
  {
    {
      task_append_con((_544 - task_numcon()));
    }
  }
  {}
  return _543;
}
int mosek::fusion::p_Model::natconemap_alloc(int _552){
  int _553 = natconemap->alloc(_552);
  int _554 = safe_add( natconemap->maxidx(_553),(int)1 );
  if ((_554 > task_numcone()))
  {
    {
      task_append_zerocones((_554 - task_numcone()));
    }
  }
  {}
  natconemap_dim = ::mosek::fusion::p_CommonTools::resize(natconemap_dim,natconemap->numblocks());
  return _553;
}
void mosek::fusion::p_Model::make_continuous(std::shared_ptr< monty::ndarray< long long,1 > > _555){
  _checked_ptr_1<long long> _ptr__555(_555 ? _555->raw() : nullptr, _555 ? _555->size(0) : 0);
  int _556 = (int)0;
  int _8782 = (int)0;
  int _8783 = (int)((_555)->size(0));
  for (int _557 = _8782; _557 < _8783; ++_557)
  {
    {
      if ((_ptr__555[_557] > (int)0))
      {
        {
          ++ _556;
        }
      }
      {}
    }
  }
  std::shared_ptr< monty::ndarray< int,1 > > _558 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_556)));
  _checked_ptr_1<int> _ptr__558(_558 ? _558->raw() : nullptr,_558 ? _558->size(0) : 0);
  int _559 = (int)0;
  int _8784 = (int)0;
  int _8785 = (int)((_555)->size(0));
  for (int _560 = _8784; _560 < _8785; ++_560)
  {
    {
      if ((_ptr__555[_560] > (int)0))
      {
        {
          _ptr__558[_559] = (int)_ptr__555[_560];
          ++ _559;
        }
      }
      {}
    }
  }
  task_var_putcontlist(_558);
}
void mosek::fusion::p_Model::make_integer(std::shared_ptr< monty::ndarray< long long,1 > > _561){
  _checked_ptr_1<long long> _ptr__561(_561 ? _561->raw() : nullptr, _561 ? _561->size(0) : 0);
  int _562 = (int)0;
  int _8786 = (int)0;
  int _8787 = (int)((_561)->size(0));
  for (int _563 = _8786; _563 < _8787; ++_563)
  {
    {
      if ((_ptr__561[_563] > (int)0))
      {
        {
          ++ _562;
        }
      }
      {}
    }
  }
  std::shared_ptr< monty::ndarray< int,1 > > _564 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_562)));
  _checked_ptr_1<int> _ptr__564(_564 ? _564->raw() : nullptr,_564 ? _564->size(0) : 0);
  int _565 = (int)0;
  int _8788 = (int)0;
  int _8789 = (int)((_561)->size(0));
  for (int _566 = _8788; _566 < _8789; ++_566)
  {
    {
      if ((_ptr__561[_566] > (int)0))
      {
        {
          _ptr__564[_565] = (int)_ptr__561[_566];
          ++ _565;
        }
      }
      {}
    }
  }
  task_var_putintlist(_564);
}
void mosek::fusion::Model::putlicensewait  ( bool _567) { mosek::fusion::p_Model::putlicensewait(_567); }void mosek::fusion::p_Model::putlicensewait(bool _567){
  ::mosek::fusion::p_BaseModel::env_putlicensewait(_567);
}
void mosek::fusion::Model::putlicensepath  ( const std::string & _568) { mosek::fusion::p_Model::putlicensepath(_568); }void mosek::fusion::p_Model::putlicensepath(const std::string & _568){
  ::mosek::fusion::p_BaseModel::env_putlicensepath(_568);
}
void mosek::fusion::Model::putlicensecode  ( std::shared_ptr< monty::ndarray< int,1 > > _569) { mosek::fusion::p_Model::putlicensecode(_569); }void mosek::fusion::p_Model::putlicensecode(std::shared_ptr< monty::ndarray< int,1 > > _569){
  _checked_ptr_1<int> _ptr__569(_569 ? _569->raw() : nullptr, _569 ? _569->size(0) : 0);
  ::mosek::fusion::p_BaseModel::env_putlicensecode(_569);
}
void mosek::fusion::Model :: dispose() { mosek::fusion::p_Model::_get_impl(this)->dispose(); }void mosek::fusion::p_Model::dispose(){
  int _8790 = (int)0;
  int _8791 = (int)((vars)->size(0));
  for (int _570 = _8790; _570 < _8791; ++_570)
  {
    {
      ((*vars)(_570)) = nullptr;
    }
  }
  int _8792 = (int)0;
  int _8793 = (int)((cons)->size(0));
  for (int _571 = _8792; _571 < _8793; ++_571)
  {
    {
      ((*cons)(_571)) = nullptr;
    }
  }
  int _8794 = (int)0;
  int _8795 = (int)((barvars)->size(0));
  for (int _572 = _8794; _572 < _8795; ++_572)
  {
    {
      ((*barvars)(_572)) = nullptr;
    }
  }
  if ((NULL != parameters.get()))
  {
    {
      int _8796 = (int)0;
      int _8797 = (int)((parameters)->size(0));
      for (int _573 = _8796; _573 < _8797; ++_573)
      {
        {
          ((*parameters)(_573)) = nullptr;
        }
      }
    }
  }
  {}
  ::mosek::fusion::p_BaseModel::dispose();
}
void mosek::fusion::p_Model::nativeVarToStr(int _574,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _575){
  if (((_574 < (int)0) || ((_574 >= (int)((natvarmap_idx)->size(0))) || (((*natvarmap_idx)(_574)) < (int)0))))
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Native variable index is invalid"));
    }
  }
  {}
  ((*vars)(((*natvarmap_blockid)(_574))))->elementName((long long)(((*natvarmap_idx)(_574))),_575);
}
MSKtask_t mosek::fusion::Model :: __mosek_2fusion_2Model__getTask() { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__getTask(); }MSKtask_t mosek::fusion::Model::getTask() { return __mosek_2fusion_2Model__getTask(); }
MSKtask_t mosek::fusion::p_Model::__mosek_2fusion_2Model__getTask(){
  return __mosek_2fusion_2BaseModel__task_get();
}
void mosek::fusion::Model :: getConstraintDuals(bool _576,std::shared_ptr< monty::ndarray< int,1 > > _577,std::shared_ptr< monty::ndarray< double,1 > > _578,int _579) { mosek::fusion::p_Model::_get_impl(this)->getConstraintDuals(_576,_577,_578,_579); }void mosek::fusion::p_Model::getConstraintDuals(bool _576,std::shared_ptr< monty::ndarray< int,1 > > _577,std::shared_ptr< monty::ndarray< double,1 > > _578,int _579){
  _checked_ptr_1<int> _ptr__577(_577 ? _577->raw() : nullptr, _577 ? _577->size(0) : 0);
  _checked_ptr_1<double> _ptr__578(_578 ? _578->raw() : nullptr, _578 ? _578->size(0) : 0);
  int _580 = (int)((_577)->size(0));
  std::shared_ptr< monty::ndarray< double,1 > > _581 = getSolution_slx(::mosek::fusion::SolutionType::Default);
  _checked_ptr_1<double> _ptr__581(_581 ? _581->raw() : nullptr,_581 ? _581->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _582 = getSolution_sux(::mosek::fusion::SolutionType::Default);
  _checked_ptr_1<double> _ptr__582(_582 ? _582->raw() : nullptr,_582 ? _582->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _583 = getSolution_bars(::mosek::fusion::SolutionType::Default);
  _checked_ptr_1<double> _ptr__583(_583 ? _583->raw() : nullptr,_583 ? _583->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _584 = getSolution_slc(::mosek::fusion::SolutionType::Default);
  _checked_ptr_1<double> _ptr__584(_584 ? _584->raw() : nullptr,_584 ? _584->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _585 = getSolution_suc(::mosek::fusion::SolutionType::Default);
  _checked_ptr_1<double> _ptr__585(_585 ? _585->raw() : nullptr,_585 ? _585->size(0) : 0);
  int _8798 = (int)0;
  int _8799 = _580;
  for (int _586 = _8798; _586 < _8799; ++_586)
  {
    {
      long long _587 = ((*natconmap_slackidx)(_ptr__577[_586]));
      if ((_587 < (int)0))
      {
        {
          long long _588 = (-safe_add( _587,(int)1 ));
          if (_576)
          {
            {
              _ptr__578[safe_add( _579,_586 )] = _ptr__583[_588];
            }
          }
          else
          {
            {
              _ptr__578[safe_add( _579,_586 )] = (-_ptr__583[_588]);
            }
          }
        }
      }
      else if((_587 > (int)0))
      {
        {
          _ptr__578[safe_add( _579,_586 )] = (_ptr__581[(_587 - (int)1)] - _ptr__582[(_587 - (int)1)]);
        }
      }
      else
      {
        {
          if (_576)
          {
            {
              _ptr__578[safe_add( _579,_586 )] = _ptr__584[_ptr__577[_586]];
            }
          }
          else
          {
            {
              _ptr__578[safe_add( _579,_586 )] = (-_ptr__585[_ptr__577[_586]]);
            }
          }
        }
      }
    }
  }
}
void mosek::fusion::Model :: getConstraintValues(bool _589,std::shared_ptr< monty::ndarray< int,1 > > _590,std::shared_ptr< monty::ndarray< double,1 > > _591,int _592) { mosek::fusion::p_Model::_get_impl(this)->getConstraintValues(_589,_590,_591,_592); }void mosek::fusion::p_Model::getConstraintValues(bool _589,std::shared_ptr< monty::ndarray< int,1 > > _590,std::shared_ptr< monty::ndarray< double,1 > > _591,int _592){
  _checked_ptr_1<int> _ptr__590(_590 ? _590->raw() : nullptr, _590 ? _590->size(0) : 0);
  _checked_ptr_1<double> _ptr__591(_591 ? _591->raw() : nullptr, _591 ? _591->size(0) : 0);
  int _593 = (int)((_590)->size(0));
  std::shared_ptr< monty::ndarray< double,1 > > _8800;
  bool _8801 = _589;
  if (_8801)
  {
    _8800 = getSolution_xx(::mosek::fusion::SolutionType::Default);
  }
  else
  {
    _8800 = getSolution_yx(::mosek::fusion::SolutionType::Default);
  }
  std::shared_ptr< monty::ndarray< double,1 > > _594 = _8800;
  _checked_ptr_1<double> _ptr__594(_594 ? _594->raw() : nullptr,_594 ? _594->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _8802;
  bool _8803 = _589;
  if (_8803)
  {
    _8802 = getSolution_barx(::mosek::fusion::SolutionType::Default);
  }
  else
  {
    _8802 = getSolution_bars(::mosek::fusion::SolutionType::Default);
  }
  std::shared_ptr< monty::ndarray< double,1 > > _595 = _8802;
  _checked_ptr_1<double> _ptr__595(_595 ? _595->raw() : nullptr,_595 ? _595->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _8804;
  bool _8805 = _589;
  if (_8805)
  {
    _8804 = getSolution_xc(::mosek::fusion::SolutionType::Default);
  }
  else
  {
    _8804 = getSolution_y(::mosek::fusion::SolutionType::Default);
  }
  std::shared_ptr< monty::ndarray< double,1 > > _596 = _8804;
  _checked_ptr_1<double> _ptr__596(_596 ? _596->raw() : nullptr,_596 ? _596->size(0) : 0);
  int _8806 = (int)0;
  int _8807 = _593;
  for (int _597 = _8806; _597 < _8807; ++_597)
  {
    {
      long long _598 = ((*natconmap_slackidx)(_ptr__590[_597]));
      if ((_598 < (int)0))
      {
        {
          long long _599 = (-safe_add( _598,(int)1 ));
          _ptr__591[safe_add( _592,_597 )] = _ptr__595[_599];
        }
      }
      else if((_598 > (int)0))
      {
        {
          _ptr__591[safe_add( _592,_597 )] = _ptr__594[(_598 - (int)1)];
        }
      }
      else
      {
        {
          _ptr__591[safe_add( _592,_597 )] = _ptr__596[_ptr__590[_597]];
        }
      }
    }
  }
}
void mosek::fusion::Model :: getVariableDuals(bool _600,std::shared_ptr< monty::ndarray< long long,1 > > _601,std::shared_ptr< monty::ndarray< double,1 > > _602,int _603) { mosek::fusion::p_Model::_get_impl(this)->getVariableDuals(_600,_601,_602,_603); }void mosek::fusion::p_Model::getVariableDuals(bool _600,std::shared_ptr< monty::ndarray< long long,1 > > _601,std::shared_ptr< monty::ndarray< double,1 > > _602,int _603){
  _checked_ptr_1<long long> _ptr__601(_601 ? _601->raw() : nullptr, _601 ? _601->size(0) : 0);
  _checked_ptr_1<double> _ptr__602(_602 ? _602->raw() : nullptr, _602 ? _602->size(0) : 0);
  int _604 = (int)((_601)->size(0));
  if (_600)
  {
    {
      std::shared_ptr< monty::ndarray< double,1 > > _605 = getSolution_slx(::mosek::fusion::SolutionType::Default);
      _checked_ptr_1<double> _ptr__605(_605 ? _605->raw() : nullptr,_605 ? _605->size(0) : 0);
      int _8808 = (int)0;
      int _8809 = _604;
      for (int _606 = _8808; _606 < _8809; ++_606)
      {
        {
          if ((_ptr__601[_606] > (int)0))
          {
            {
              _ptr__602[safe_add( _603,_606 )] = _ptr__605[_ptr__601[_606]];
            }
          }
          else
          {
            {
              _ptr__602[safe_add( _603,_606 )] = (int)0;
            }
          }
        }
      }
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< double,1 > > _607 = getSolution_sux(::mosek::fusion::SolutionType::Default);
      _checked_ptr_1<double> _ptr__607(_607 ? _607->raw() : nullptr,_607 ? _607->size(0) : 0);
      int _8810 = (int)0;
      int _8811 = _604;
      for (int _608 = _8810; _608 < _8811; ++_608)
      {
        {
          if ((_ptr__601[_608] > (int)0))
          {
            {
              _ptr__602[safe_add( _603,_608 )] = (-_ptr__607[_ptr__601[_608]]);
            }
          }
          else
          {
            {
              _ptr__602[safe_add( _603,_608 )] = (int)0;
            }
          }
        }
      }
    }
  }
}
void mosek::fusion::Model :: getVariableValues(bool _609,std::shared_ptr< monty::ndarray< long long,1 > > _610,std::shared_ptr< monty::ndarray< double,1 > > _611,int _612) { mosek::fusion::p_Model::_get_impl(this)->getVariableValues(_609,_610,_611,_612); }void mosek::fusion::p_Model::getVariableValues(bool _609,std::shared_ptr< monty::ndarray< long long,1 > > _610,std::shared_ptr< monty::ndarray< double,1 > > _611,int _612){
  _checked_ptr_1<long long> _ptr__610(_610 ? _610->raw() : nullptr, _610 ? _610->size(0) : 0);
  _checked_ptr_1<double> _ptr__611(_611 ? _611->raw() : nullptr, _611 ? _611->size(0) : 0);
  int _613 = (int)((_610)->size(0));
  std::shared_ptr< monty::ndarray< double,1 > > _8812;
  bool _8813 = _609;
  if (_8813)
  {
    _8812 = getSolution_xx(::mosek::fusion::SolutionType::Default);
  }
  else
  {
    _8812 = getSolution_yx(::mosek::fusion::SolutionType::Default);
  }
  std::shared_ptr< monty::ndarray< double,1 > > _614 = _8812;
  _checked_ptr_1<double> _ptr__614(_614 ? _614->raw() : nullptr,_614 ? _614->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _8814;
  bool _8815 = (natbarvar_numbarvarelm > (int)0);
  if (_8815)
  {
    std::shared_ptr< monty::ndarray< double,1 > > _8816;
    bool _8817 = _609;
    if (_8817)
    {
      _8816 = getSolution_barx(::mosek::fusion::SolutionType::Default);
    }
    else
    {
      _8816 = getSolution_bars(::mosek::fusion::SolutionType::Default);
    }
    _8814 = _8816;
  }
  else
  {
    _8814 = nullptr;
  }
  std::shared_ptr< monty::ndarray< double,1 > > _615 = _8814;
  _checked_ptr_1<double> _ptr__615(_615 ? _615->raw() : nullptr,_615 ? _615->size(0) : 0);
  int _8818 = (int)0;
  int _8819 = _613;
  for (int _616 = _8818; _616 < _8819; ++_616)
  {
    {
      if ((_ptr__610[_616] > (int)0))
      {
        {
          _ptr__611[safe_add( _612,_616 )] = _ptr__614[_ptr__610[_616]];
        }
      }
      else if((_ptr__610[_616] < (int)0))
      {
        {
          long long _617 = (-safe_add( _ptr__610[_616],(int)1 ));
          _ptr__611[safe_add( _612,_616 )] = _ptr__615[_617];
        }
      }
      else
      {
        {
          _ptr__611[safe_add( _612,_616 )] = (int)0;
        }
      }
    }
  }
}
void mosek::fusion::Model :: setVariableValues(bool _618,std::shared_ptr< monty::ndarray< long long,1 > > _619,std::shared_ptr< monty::ndarray< double,1 > > _620) { mosek::fusion::p_Model::_get_impl(this)->setVariableValues(_618,_619,_620); }void mosek::fusion::p_Model::setVariableValues(bool _618,std::shared_ptr< monty::ndarray< long long,1 > > _619,std::shared_ptr< monty::ndarray< double,1 > > _620){
  _checked_ptr_1<long long> _ptr__619(_619 ? _619->raw() : nullptr, _619 ? _619->size(0) : 0);
  _checked_ptr_1<double> _ptr__620(_620 ? _620->raw() : nullptr, _620 ? _620->size(0) : 0);
  if (_618)
  {
    {
      int _621 = (int)0;
      int _8820 = (int)0;
      int _8821 = (int)((_619)->size(0));
      for (int _622 = _8820; _622 < _8821; ++_622)
      {
        {
          if ((_ptr__619[_622] >= (int)0))
          {
            {
              ++ _621;
            }
          }
          {}
        }
      }
      std::shared_ptr< monty::ndarray< int,1 > > _623 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_621)));
      _checked_ptr_1<int> _ptr__623(_623 ? _623->raw() : nullptr,_623 ? _623->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _8822;
      bool _8823 = (_621 == (int)((_619)->size(0)));
      if (_8823)
      {
        _8822 = _620;
      }
      else
      {
        _8822 = _620;
      }
      std::shared_ptr< monty::ndarray< double,1 > > _624 = _8822;
      _checked_ptr_1<double> _ptr__624(_624 ? _624->raw() : nullptr,_624 ? _624->size(0) : 0);
      int _625 = (int)0;
      int _8824 = (int)0;
      int _8825 = (int)((_619)->size(0));
      for (int _626 = _8824; _626 < _8825; ++_626)
      {
        {
          if ((_ptr__619[_626] > (int)0))
          {
            {
              _ptr__623[_625] = (int)_ptr__619[_626];
              ++ _625;
            }
          }
          {}
        }
      }
      setSolution_xx(_623,_624);
    }
  }
  else
  {
    {
    }
  }
}
void mosek::fusion::Model :: flushNames() { mosek::fusion::p_Model::_get_impl(this)->flushNames(); }void mosek::fusion::p_Model::flushNames(){
  int _8826 = (int)0;
  int _8827 = (int)((vars)->size(0));
  for (int _627 = _8826; _627 < _8827; ++_627)
  {
    {
      if ((NULL != ((*vars)(_627)).get()))
      {
        {
          mosek::fusion::p_ModelVariable::_get_impl(((*vars)(_627)).get())->flushNames();
        }
      }
      {}
    }
  }
  int _8828 = (int)0;
  int _8829 = (int)((barvars)->size(0));
  for (int _628 = _8828; _628 < _8829; ++_628)
  {
    {
      if ((NULL != ((*barvars)(_628)).get()))
      {
        {
          mosek::fusion::p_ModelVariable::_get_impl(((*barvars)(_628)).get())->flushNames();
        }
      }
      {}
    }
  }
  int _8830 = (int)0;
  int _8831 = (int)((cons)->size(0));
  for (int _629 = _8830; _629 < _8831; ++_629)
  {
    {
      if ((NULL != ((*cons)(_629)).get()))
      {
        {
          mosek::fusion::p_ModelConstraint::_get_impl(((*cons)(_629)).get())->flushNames();
        }
      }
      {}
    }
  }
}
void mosek::fusion::Model :: writeTaskNoFlush(const std::string & _630) { mosek::fusion::p_Model::_get_impl(this)->writeTaskNoFlush(_630); }void mosek::fusion::p_Model::writeTaskNoFlush(const std::string & _630){
  _pubthis->flushNames();
  task_write(_630);
}
void mosek::fusion::Model :: writeTask(const std::string & _631) { mosek::fusion::p_Model::_get_impl(this)->writeTask(_631); }void mosek::fusion::p_Model::writeTask(const std::string & _631){
  _pubthis->flushNames();
  flush_parameters();
  task_write(_631);
}
long long mosek::fusion::Model :: getSolverLIntInfo(const std::string & _632) { return mosek::fusion::p_Model::_get_impl(this)->getSolverLIntInfo(_632); }long long mosek::fusion::p_Model::getSolverLIntInfo(const std::string & _632){
  return task_get_liinf(_632);
}
int mosek::fusion::Model :: getSolverIntInfo(const std::string & _633) { return mosek::fusion::p_Model::_get_impl(this)->getSolverIntInfo(_633); }int mosek::fusion::p_Model::getSolverIntInfo(const std::string & _633){
  return task_get_iinf(_633);
}
double mosek::fusion::Model :: getSolverDoubleInfo(const std::string & _634) { return mosek::fusion::p_Model::_get_impl(this)->getSolverDoubleInfo(_634); }double mosek::fusion::p_Model::getSolverDoubleInfo(const std::string & _634){
  return task_get_dinf(_634);
}
void mosek::fusion::Model :: setCallbackHandler(mosek::cbhandler_t _635) { mosek::fusion::p_Model::_get_impl(this)->setCallbackHandler(_635); }void mosek::fusion::p_Model::setCallbackHandler(mosek::cbhandler_t _635){
  task_setCallbackHandler(_635);
}
void mosek::fusion::Model :: setDataCallbackHandler(mosek::datacbhandler_t _636) { mosek::fusion::p_Model::_get_impl(this)->setDataCallbackHandler(_636); }void mosek::fusion::p_Model::setDataCallbackHandler(mosek::datacbhandler_t _636){
  task_setDataCallbackHandler(_636);
}
void mosek::fusion::Model :: setLogHandler(mosek::msghandler_t _637) { mosek::fusion::p_Model::_get_impl(this)->setLogHandler(_637); }void mosek::fusion::p_Model::setLogHandler(mosek::msghandler_t _637){
  task_setLogHandler(_637);
}
void mosek::fusion::Model :: setSolverParam(const std::string & _638,double _639) { mosek::fusion::p_Model::_get_impl(this)->setSolverParam(_638,_639); }void mosek::fusion::p_Model::setSolverParam(const std::string & _638,double _639){
  ::mosek::fusion::p_Parameters::setParameter(::mosek::fusion::Model::t(_pubthis),_638,_639);
}
void mosek::fusion::Model :: setSolverParam(const std::string & _640,int _641) { mosek::fusion::p_Model::_get_impl(this)->setSolverParam(_640,_641); }void mosek::fusion::p_Model::setSolverParam(const std::string & _640,int _641){
  ::mosek::fusion::p_Parameters::setParameter(::mosek::fusion::Model::t(_pubthis),_640,_641);
}
void mosek::fusion::Model :: setSolverParam(const std::string & _642,const std::string & _643) { mosek::fusion::p_Model::_get_impl(this)->setSolverParam(_642,_643); }void mosek::fusion::p_Model::setSolverParam(const std::string & _642,const std::string & _643){
  ::mosek::fusion::p_Parameters::setParameter(::mosek::fusion::Model::t(_pubthis),_642,_643);
}
void mosek::fusion::Model :: breakSolver() { mosek::fusion::p_Model::_get_impl(this)->breakSolver(); }void mosek::fusion::p_Model::breakSolver(){
  task_break_solve();
}
void mosek::fusion::Model :: optserverHost(const std::string & _644) { mosek::fusion::p_Model::_get_impl(this)->optserverHost(_644); }void mosek::fusion::p_Model::optserverHost(const std::string & _644){
  task_putoptserver_host(_644);
}
void mosek::fusion::Model :: solve(const std::string & _645,const std::string & _646) { mosek::fusion::p_Model::_get_impl(this)->solve(_645,_646); }void mosek::fusion::p_Model::solve(const std::string & _645,const std::string & _646){
  _pubthis->flushSolutions();
  flush_parameters();
  task_solve(true,_645,_646);
}
void mosek::fusion::Model :: solve() { mosek::fusion::p_Model::_get_impl(this)->solve(); }void mosek::fusion::p_Model::solve(){
  _pubthis->flushSolutions();
  flush_parameters();
  task_solve(false,std::string (""),std::string (""));
}
void mosek::fusion::p_Model::flush_parameters(){
  if ((natconmap_numparameterized > (int)0))
  {
    {
      int _647 = task_numcon();
      std::shared_ptr< monty::ndarray< int,1 > > _648 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(natconmap_numparameterized)));
      _checked_ptr_1<int> _ptr__648(_648 ? _648->raw() : nullptr,_648 ? _648->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _649 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(natconmap_numparameterized)));
      _checked_ptr_1<int> _ptr__649(_649 ? _649->raw() : nullptr,_649 ? _649->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _650 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(natconmap_numparameterized)));
      _checked_ptr_1<double> _ptr__650(_650 ? _650->raw() : nullptr,_650 ? _650->size(0) : 0);
      int _651 = (int)0;
      int _8832 = (int)0;
      int _8833 = _647;
      for (int _652 = _8832; _652 < _8833; ++_652)
      {
        {
          int _653 = (((*natconmap_coderowptre)(_652)) - ((*natconmap_coderowptrb)(_652)));
          if ((_653 > (int)0))
          {
            {
              int _8834 = _651;
              int _8835 = safe_add( _651,_653 );
              for (int _654 = _8834; _654 < _8835; ++_654)
              {
                {
                  _ptr__648[_654] = _652;
                }
              }
              _651 += _653;
            }
          }
          {}
        }
      }
      evaluate_parameterized(xs,_647,natconmap_coderowptrb,natconmap_coderowptre,natconmap_codenidx,natconmap_codeptr,natconmap_code,natconmap_cconst,_649,_650);
      task_putaijlist(_648,_649,_650,(long long)(natconmap_numparameterized));
    }
  }
  {}
  if ((NULL != natconmap_objcodenidx.get()))
  {
    {
      int _655 = (int)((natconmap_objcodenidx)->size(0));
      std::shared_ptr< monty::ndarray< int,1 > > _656 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_655)));
      _checked_ptr_1<int> _ptr__656(_656 ? _656->raw() : nullptr,_656 ? _656->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _657 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_655)));
      _checked_ptr_1<double> _ptr__657(_657 ? _657->raw() : nullptr,_657 ? _657->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _658 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)0)});
      _checked_ptr_1<int> _ptr__658(_658 ? _658->raw() : nullptr,_658 ? _658->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _659 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)((natconmap_objcodenidx)->size(0)))});
      _checked_ptr_1<int> _ptr__659(_659 ? _659->raw() : nullptr,_659 ? _659->size(0) : 0);
      evaluate_parameterized(xs,(int)1,_658,_659,natconmap_objcodenidx,natconmap_objcodeptr,natconmap_objcode,natconmap_objcconst,_656,_657);
      task_putclist(_656,_657);
    }
  }
  {}
}
void mosek::fusion::Model :: flushParameters() { mosek::fusion::p_Model::_get_impl(this)->flushParameters(); }void mosek::fusion::p_Model::flushParameters(){
  flush_parameters();
}
void mosek::fusion::p_Model::evaluate_parameterized(monty::rc_ptr< ::mosek::fusion::WorkStack > _660,int _661,std::shared_ptr< monty::ndarray< int,1 > > _662,std::shared_ptr< monty::ndarray< int,1 > > _663,std::shared_ptr< monty::ndarray< long long,1 > > _664,std::shared_ptr< monty::ndarray< int,1 > > _665,std::shared_ptr< monty::ndarray< int,1 > > _666,std::shared_ptr< monty::ndarray< double,1 > > _667,std::shared_ptr< monty::ndarray< int,1 > > _668,std::shared_ptr< monty::ndarray< double,1 > > _669){
  _checked_ptr_1<int> _ptr__662(_662 ? _662->raw() : nullptr, _662 ? _662->size(0) : 0);
  _checked_ptr_1<int> _ptr__663(_663 ? _663->raw() : nullptr, _663 ? _663->size(0) : 0);
  _checked_ptr_1<long long> _ptr__664(_664 ? _664->raw() : nullptr, _664 ? _664->size(0) : 0);
  _checked_ptr_1<int> _ptr__665(_665 ? _665->raw() : nullptr, _665 ? _665->size(0) : 0);
  _checked_ptr_1<int> _ptr__666(_666 ? _666->raw() : nullptr, _666 ? _666->size(0) : 0);
  _checked_ptr_1<double> _ptr__667(_667 ? _667->raw() : nullptr, _667 ? _667->size(0) : 0);
  _checked_ptr_1<int> _ptr__668(_668 ? _668->raw() : nullptr, _668 ? _668->size(0) : 0);
  _checked_ptr_1<double> _ptr__669(_669 ? _669->raw() : nullptr, _669 ? _669->size(0) : 0);
  int _670 = _660->allocf64((int)((_666)->size(0)));
  int _671 = (int)0;
  std::shared_ptr< monty::ndarray< double,1 > > _672 = mosek::fusion::p_WorkStack::_get_impl(_660)->f64;
  _checked_ptr_1<double> _ptr__672(_672 ? _672->raw() : nullptr,_672 ? _672->size(0) : 0);
  int _673 = (int)0;
  int _8836 = (int)0;
  int _8837 = _661;
  for (int _674 = _8836; _674 < _8837; ++_674)
  {
    {
      int _8838 = _ptr__662[_674];
      int _8839 = _ptr__663[_674];
      for (int _675 = _8838; _675 < _8839; ++_675)
      {
        {
          int _8840 = _ptr__665[_675];
          int _8841 = _ptr__665[safe_add( _675,(int)1 )];
          for (int _676 = _8840; _676 < _8841; ++_676)
          {
            {
              if ((_ptr__666[_676] == 0))
              {
                {
                }
              }
              else
              {
                {
                  if ((_ptr__666[_676] == 1))
                  {
                    {
                      _ptr__672[safe_add( _670,_671 )] = ((*param_value)((int)_ptr__667[_676]));
                      ++ _671;
                    }
                  }
                  else
                  {
                    {
                      if ((_ptr__666[_676] == 2))
                      {
                        {
                          _ptr__672[safe_add( _670,_671 )] = _ptr__667[_676];
                          ++ _671;
                        }
                      }
                      else
                      {
                        {
                          if ((_ptr__666[_676] == 3))
                          {
                            {
                              _ptr__672[(safe_add( _670,_671 ) - (int)2)] += _ptr__672[(safe_add( _670,_671 ) - (int)1)];
                              -- _671;
                            }
                          }
                          else
                          {
                            {
                              if ((_ptr__666[_676] == 4))
                              {
                                {
                                  _ptr__672[(safe_add( _670,_671 ) - (int)1)] = (-_ptr__672[(safe_add( _670,_671 ) - (int)1)]);
                                }
                              }
                              else
                              {
                                {
                                  if ((_ptr__666[_676] == 5))
                                  {
                                    {
                                      _ptr__672[(safe_add( _670,_671 ) - (int)2)] *= _ptr__672[(safe_add( _670,_671 ) - (int)1)];
                                      -- _671;
                                    }
                                  }
                                  else
                                  {
                                    {
                                      if ((_ptr__666[_676] == 6))
                                      {
                                        {
                                          _ptr__672[(safe_add( _670,_671 ) - (int)1)] = (1.0 / _ptr__672[(safe_add( _670,_671 ) - (int)1)]);
                                        }
                                      }
                                      else
                                      {
                                        {
                                          if ((_ptr__666[_676] == 8))
                                          {
                                            {
                                              double _677 = 0.0;
                                              int _8842 = (int)0;
                                              int _8843 = (int)_ptr__667[_676];
                                              for (int _678 = _8842; _678 < _8843; ++_678)
                                              {
                                                {
                                                  _677 += _ptr__672[(safe_add( _670,_671 ) - (int)1)];
                                                  -- _671;
                                                }
                                              }
                                              _ptr__672[safe_add( _670,_671 )] = _677;
                                              ++ _671;
                                            }
                                          }
                                          else
                                          {
                                            {
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          _ptr__668[_673] = (int)_ptr__664[_675];
          _ptr__669[_673] = _ptr__672[_670];
          _671 = (int)0;
          ++ _673;
        }
      }
    }
  }
  _660->popf64((int)((_666)->size(0)));
}
void mosek::fusion::Model :: flushSolutions() { mosek::fusion::p_Model::_get_impl(this)->flushSolutions(); }void mosek::fusion::p_Model::flushSolutions(){
  flush_initsol(::mosek::fusion::SolutionType::Interior);
  flush_initsol(::mosek::fusion::SolutionType::Integer);
  flush_initsol(::mosek::fusion::SolutionType::Basic);
}
void mosek::fusion::p_Model::flush_initsol(mosek::fusion::SolutionType _679){
  if ((NULL != initsol_xx.get()))
  {
    {
      int _680 = task_numvar();
      std::shared_ptr< monty::ndarray< double,1 > > _681 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_680)));
      _checked_ptr_1<double> _ptr__681(_681 ? _681->raw() : nullptr,_681 ? _681->size(0) : 0);
      try
      {
        {
          monty::rc_ptr< ::mosek::fusion::SolutionStruct > _683 = __mosek_2fusion_2Model__get_sol_cache(_679,true);
          if ((NULL != mosek::fusion::p_SolutionStruct::_get_impl(_683)->xx.get()))
          {
            {
              int _8844;
              bool _8845 = ((int)((mosek::fusion::p_SolutionStruct::_get_impl(_683)->xx)->size(0)) <= _680);
              if (_8845)
              {
                _8844 = (int)((mosek::fusion::p_SolutionStruct::_get_impl(_683)->xx)->size(0));
              }
              else
              {
                _8844 = _680;
              }
              ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SolutionStruct::_get_impl(_683)->xx,(int)0,_681,(int)0,_8844);
            }
          }
          {}
        }
      }
      catch (mosek::fusion::SolutionError _682)
      {
        {
        }
      }
      int _8846;
      bool _8847 = ((int)((initsol_xx)->size(0)) <= _680);
      if (_8847)
      {
        _8846 = (int)((initsol_xx)->size(0));
      }
      else
      {
        _8846 = _680;
      }
      int _684 = _8846;
      int _8848 = (int)0;
      int _8849 = _684;
      for (int _685 = _8848; _685 < _8849; ++_685)
      {
        {
          if (((*initsol_xx_flag)(_685)))
          {
            {
              _ptr__681[_685] = ((*initsol_xx)(_685));
            }
          }
          {}
        }
      }
      task_putxx_slice(_679,(int)0,_680,_681);
    }
  }
  {}
}
mosek::fusion::SolutionStatus mosek::fusion::Model :: getDualSolutionStatus() { return mosek::fusion::p_Model::_get_impl(this)->getDualSolutionStatus(); }mosek::fusion::SolutionStatus mosek::fusion::p_Model::getDualSolutionStatus(){
  return _pubthis->getDualSolutionStatus(solutionptr);
}
mosek::fusion::ProblemStatus mosek::fusion::Model :: getProblemStatus() { return mosek::fusion::p_Model::_get_impl(this)->getProblemStatus(); }mosek::fusion::ProblemStatus mosek::fusion::p_Model::getProblemStatus(){
  return _pubthis->getProblemStatus(solutionptr);
}
mosek::fusion::SolutionStatus mosek::fusion::Model :: getPrimalSolutionStatus() { return mosek::fusion::p_Model::_get_impl(this)->getPrimalSolutionStatus(); }mosek::fusion::SolutionStatus mosek::fusion::p_Model::getPrimalSolutionStatus(){
  return _pubthis->getPrimalSolutionStatus(solutionptr);
}
double mosek::fusion::Model :: dualObjValue() { return mosek::fusion::p_Model::_get_impl(this)->dualObjValue(); }double mosek::fusion::p_Model::dualObjValue(){
  return mosek::fusion::p_SolutionStruct::_get_impl(__mosek_2fusion_2Model__get_sol_cache(::mosek::fusion::SolutionType::Default,false))->dobj;
}
double mosek::fusion::Model :: primalObjValue() { return mosek::fusion::p_Model::_get_impl(this)->primalObjValue(); }double mosek::fusion::p_Model::primalObjValue(){
  return mosek::fusion::p_SolutionStruct::_get_impl(__mosek_2fusion_2Model__get_sol_cache(::mosek::fusion::SolutionType::Default,true))->pobj;
}
monty::rc_ptr< ::mosek::fusion::SolutionStruct > mosek::fusion::p_Model::__mosek_2fusion_2Model__get_sol_cache(mosek::fusion::SolutionType _686,bool _687,bool _688){
  monty::rc_ptr< ::mosek::fusion::SolutionStruct > _689 = nullptr;
  mosek::fusion::SolutionType _690 = _686;
  if ((_690 == ::mosek::fusion::SolutionType::Default))
  {
    {
      _690 = solutionptr;
    }
  }
  {}
  if ((_690 == ::mosek::fusion::SolutionType::Default))
  {
    {
      if ((NULL != sol_itg.get()))
      {
        {
          _689 = sol_itg;
        }
      }
      else if((NULL != sol_bas.get()))
      {
        {
          _689 = sol_bas;
        }
      }
      else
      {
        {
          _689 = sol_itr;
        }
      }
    }
  }
  else if((_690 == ::mosek::fusion::SolutionType::Interior))
  {
    {
      _689 = sol_itr;
    }
  }
  else if((_690 == ::mosek::fusion::SolutionType::Basic))
  {
    {
      _689 = sol_bas;
    }
  }
  else if((_690 == ::mosek::fusion::SolutionType::Integer))
  {
    {
      _689 = sol_itg;
    }
  }
  {}
  if ((NULL == _689.get()))
  {
    {
      throw ::mosek::fusion::SolutionError(std::string ("Solution not available"));
    }
  }
  else
  {
    {
      if ((_688 || ((_687 && _689->isPrimalAcceptable(acceptable_sol)) || ((!_687) && _689->isDualAcceptable(acceptable_sol)))))
      {
        {
          return _689;
        }
      }
      else
      {
        {
          monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _691 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
          mosek::fusion::SolutionStatus _692 = mosek::fusion::p_SolutionStruct::_get_impl(_689)->pstatus;
          mosek::fusion::ProblemStatus _693 = mosek::fusion::p_SolutionStruct::_get_impl(_689)->probstatus;
          if ((!_687))
          {
            {
              _692 = mosek::fusion::p_SolutionStruct::_get_impl(_689)->dstatus;
            }
          }
          {}
          _691->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Solution status is "));
          if ((_692 == ::mosek::fusion::SolutionStatus::Undefined))
          {
            {
              _691->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Undefined"));
            }
          }
          else if((_692 == ::mosek::fusion::SolutionStatus::Unknown))
          {
            {
              _691->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Unknown"));
            }
          }
          else if((_692 == ::mosek::fusion::SolutionStatus::Optimal))
          {
            {
              _691->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Optimal"));
            }
          }
          else if((_692 == ::mosek::fusion::SolutionStatus::Feasible))
          {
            {
              _691->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Feasible"));
            }
          }
          else if((_692 == ::mosek::fusion::SolutionStatus::Certificate))
          {
            {
              _691->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Certificate"));
            }
          }
          else if((_692 == ::mosek::fusion::SolutionStatus::IllposedCert))
          {
            {
              _691->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("IllposedCert"));
            }
          }
          {}
          _691->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (" but "));
          if ((acceptable_sol == ::mosek::fusion::AccSolutionStatus::Anything))
          {
            {
              _691->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Anything"));
            }
          }
          else if((acceptable_sol == ::mosek::fusion::AccSolutionStatus::Optimal))
          {
            {
              _691->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Optimal"));
            }
          }
          else if((acceptable_sol == ::mosek::fusion::AccSolutionStatus::Feasible))
          {
            {
              _691->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("at least Feasible"));
            }
          }
          else if((acceptable_sol == ::mosek::fusion::AccSolutionStatus::Certificate))
          {
            {
              _691->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Certificate"));
            }
          }
          {}
          _691->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (" is expected. Reason: Accessing "));
          if ((_689 == sol_itr))
          {
            {
              _691->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("interior-point solution"));
            }
          }
          else if((_689 == sol_bas))
          {
            {
              _691->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("basic solution"));
            }
          }
          else if((_689 == sol_itg))
          {
            {
              _691->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("integer solution"));
            }
          }
          {}
          _691->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (" whose problem status is "));
          if ((_693 == ::mosek::fusion::ProblemStatus::Unknown))
          {
            {
              _691->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Unknown"));
            }
          }
          else if((_693 == ::mosek::fusion::ProblemStatus::PrimalAndDualFeasible))
          {
            {
              _691->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("PrimalAndDualFeasible"));
            }
          }
          else if((_693 == ::mosek::fusion::ProblemStatus::PrimalFeasible))
          {
            {
              _691->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("PrimalFeasible"));
            }
          }
          else if((_693 == ::mosek::fusion::ProblemStatus::DualFeasible))
          {
            {
              _691->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("DualFeasible"));
            }
          }
          else if((_693 == ::mosek::fusion::ProblemStatus::PrimalInfeasible))
          {
            {
              _691->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("PrimalInfeasible"));
            }
          }
          else if((_693 == ::mosek::fusion::ProblemStatus::DualInfeasible))
          {
            {
              _691->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("DualInfeasible"));
            }
          }
          else if((_693 == ::mosek::fusion::ProblemStatus::PrimalAndDualInfeasible))
          {
            {
              _691->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("PrimalAndDualInfeasible"));
            }
          }
          else if((_693 == ::mosek::fusion::ProblemStatus::IllPosed))
          {
            {
              _691->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("IllPosed"));
            }
          }
          else if((_693 == ::mosek::fusion::ProblemStatus::PrimalInfeasibleOrUnbounded))
          {
            {
              _691->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("PrimalInfeasibleOrUnbounded"));
            }
          }
          {}
          _691->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("."));
          throw ::mosek::fusion::SolutionError(_691->toString());
        }
      }
    }
  }
}
monty::rc_ptr< ::mosek::fusion::SolutionStruct > mosek::fusion::p_Model::__mosek_2fusion_2Model__get_sol_cache(mosek::fusion::SolutionType _694,bool _695){
  return __mosek_2fusion_2Model__get_sol_cache(_694,_695,false);
}
void mosek::fusion::p_Model::setSolution_xx(std::shared_ptr< monty::ndarray< int,1 > > _696,std::shared_ptr< monty::ndarray< double,1 > > _697){
  _checked_ptr_1<int> _ptr__696(_696 ? _696->raw() : nullptr, _696 ? _696->size(0) : 0);
  _checked_ptr_1<double> _ptr__697(_697 ? _697->raw() : nullptr, _697 ? _697->size(0) : 0);
  ensure_initsol_xx();
  int _8850 = (int)0;
  int _8851 = (int)((_696)->size(0));
  for (int _698 = _8850; _698 < _8851; ++_698)
  {
    {
      ((*initsol_xx)(_ptr__696[_698])) = _ptr__697[_698];
      ((*initsol_xx_flag)(_ptr__696[_698])) = true;
    }
  }
}
void mosek::fusion::p_Model::ensure_initsol_xx(){
  int _699 = (int)((natvarmap_idx)->size(0));
  if ((NULL == initsol_xx.get()))
  {
    {
      initsol_xx = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_699)));
      std::vector<bool> _8852;
      for (int _700 = (int)0, _8853 = _699; _700 < _8853 ; ++_700)
      {
        _8852.push_back(false);
      }
      auto _8854 = std::shared_ptr< monty::ndarray< bool,1 > >(new monty::ndarray< bool,1 >(monty::shape(_8852.size()),_8852.begin(),_8852.end()));
      initsol_xx_flag = _8854;
    }
  }
  else if(((int)((initsol_xx)->size(0)) < _699))
  {
    {
      std::shared_ptr< monty::ndarray< double,1 > > _701 = initsol_xx;
      _checked_ptr_1<double> _ptr__701(_701 ? _701->raw() : nullptr,_701 ? _701->size(0) : 0);
      std::shared_ptr< monty::ndarray< bool,1 > > _702 = initsol_xx_flag;
      initsol_xx = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_699)));
      initsol_xx_flag = std::shared_ptr< monty::ndarray< bool,1 > >(new monty::ndarray< bool,1 >(monty::shape(_699)));
      ::mosek::fusion::Utils::Tools::arraycopy(_701,(int)0,initsol_xx,(int)0,_699);
      int _8855 = (int)0;
      int _8856 = _699;
      for (int _703 = _8855; _703 < _8856; ++_703)
      {
        {
          ((*initsol_xx_flag)(_703)) = ((*_702)(_703));
        }
      }
    }
  }
  {}
}
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Model::getSolution_bars(mosek::fusion::SolutionType _704){
  return mosek::fusion::p_SolutionStruct::_get_impl(__mosek_2fusion_2Model__get_sol_cache(_704,false))->bars;
}
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Model::getSolution_barx(mosek::fusion::SolutionType _705){
  return mosek::fusion::p_SolutionStruct::_get_impl(__mosek_2fusion_2Model__get_sol_cache(_705,true))->barx;
}
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Model::getSolution_y(mosek::fusion::SolutionType _706){
  return mosek::fusion::p_SolutionStruct::_get_impl(__mosek_2fusion_2Model__get_sol_cache(_706,false))->y;
}
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Model::getSolution_xc(mosek::fusion::SolutionType _707){
  return mosek::fusion::p_SolutionStruct::_get_impl(__mosek_2fusion_2Model__get_sol_cache(_707,true))->xc;
}
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Model::getSolution_snx(mosek::fusion::SolutionType _708){
  return mosek::fusion::p_SolutionStruct::_get_impl(__mosek_2fusion_2Model__get_sol_cache(_708,false))->snx;
}
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Model::getSolution_suc(mosek::fusion::SolutionType _709){
  return mosek::fusion::p_SolutionStruct::_get_impl(__mosek_2fusion_2Model__get_sol_cache(_709,false))->suc;
}
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Model::getSolution_slc(mosek::fusion::SolutionType _710){
  return mosek::fusion::p_SolutionStruct::_get_impl(__mosek_2fusion_2Model__get_sol_cache(_710,false))->slc;
}
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Model::getSolution_sux(mosek::fusion::SolutionType _711){
  return mosek::fusion::p_SolutionStruct::_get_impl(__mosek_2fusion_2Model__get_sol_cache(_711,false))->sux;
}
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Model::getSolution_slx(mosek::fusion::SolutionType _712){
  return mosek::fusion::p_SolutionStruct::_get_impl(__mosek_2fusion_2Model__get_sol_cache(_712,false))->slx;
}
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Model::getSolution_yx(mosek::fusion::SolutionType _713){
  return mosek::fusion::p_SolutionStruct::_get_impl(__mosek_2fusion_2Model__get_sol_cache(_713,false))->yx;
}
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Model::getSolution_xx(mosek::fusion::SolutionType _714){
  return mosek::fusion::p_SolutionStruct::_get_impl(__mosek_2fusion_2Model__get_sol_cache(_714,true))->xx;
}
void mosek::fusion::Model :: selectedSolution(mosek::fusion::SolutionType _715) { mosek::fusion::p_Model::_get_impl(this)->selectedSolution(_715); }void mosek::fusion::p_Model::selectedSolution(mosek::fusion::SolutionType _715){
  solutionptr = _715;
}
mosek::fusion::AccSolutionStatus mosek::fusion::Model :: getAcceptedSolutionStatus() { return mosek::fusion::p_Model::_get_impl(this)->getAcceptedSolutionStatus(); }mosek::fusion::AccSolutionStatus mosek::fusion::p_Model::getAcceptedSolutionStatus(){
  return acceptable_sol;
}
void mosek::fusion::Model :: acceptedSolutionStatus(mosek::fusion::AccSolutionStatus _716) { mosek::fusion::p_Model::_get_impl(this)->acceptedSolutionStatus(_716); }void mosek::fusion::p_Model::acceptedSolutionStatus(mosek::fusion::AccSolutionStatus _716){
  acceptable_sol = _716;
}
mosek::fusion::ProblemStatus mosek::fusion::Model :: getProblemStatus(mosek::fusion::SolutionType _717) { return mosek::fusion::p_Model::_get_impl(this)->getProblemStatus(_717); }mosek::fusion::ProblemStatus mosek::fusion::p_Model::getProblemStatus(mosek::fusion::SolutionType _717){
  monty::rc_ptr< ::mosek::fusion::SolutionStruct > _718 = nullptr;
  if ((_717 == ::mosek::fusion::SolutionType::Default))
  {
    {
      if ((NULL != sol_itg.get()))
      {
        {
          _718 = sol_itg;
        }
      }
      else if((NULL != sol_bas.get()))
      {
        {
          _718 = sol_bas;
        }
      }
      else
      {
        {
          _718 = sol_itr;
        }
      }
    }
  }
  else if((_717 == ::mosek::fusion::SolutionType::Interior))
  {
    {
      _718 = sol_itr;
    }
  }
  else if((_717 == ::mosek::fusion::SolutionType::Basic))
  {
    {
      _718 = sol_bas;
    }
  }
  else if((_717 == ::mosek::fusion::SolutionType::Integer))
  {
    {
      _718 = sol_itg;
    }
  }
  {}
  if ((NULL == _718.get()))
  {
    {
      return ::mosek::fusion::ProblemStatus::Unknown;
    }
  }
  else
  {
    {
      return mosek::fusion::p_SolutionStruct::_get_impl(_718)->probstatus;
    }
  }
}
mosek::fusion::SolutionStatus mosek::fusion::Model :: getDualSolutionStatus(mosek::fusion::SolutionType _719) { return mosek::fusion::p_Model::_get_impl(this)->getDualSolutionStatus(_719); }mosek::fusion::SolutionStatus mosek::fusion::p_Model::getDualSolutionStatus(mosek::fusion::SolutionType _719){
  return getSolutionStatus(_719,false);
}
mosek::fusion::SolutionStatus mosek::fusion::Model :: getPrimalSolutionStatus(mosek::fusion::SolutionType _720) { return mosek::fusion::p_Model::_get_impl(this)->getPrimalSolutionStatus(_720); }mosek::fusion::SolutionStatus mosek::fusion::p_Model::getPrimalSolutionStatus(mosek::fusion::SolutionType _720){
  return getSolutionStatus(_720,true);
}
mosek::fusion::SolutionStatus mosek::fusion::p_Model::getSolutionStatus(mosek::fusion::SolutionType _721,bool _722){
  try
  {
    {
      monty::rc_ptr< ::mosek::fusion::SolutionStruct > _724 = __mosek_2fusion_2Model__get_sol_cache(_721,_722,true);
      if (_722)
      {
        {
          return mosek::fusion::p_SolutionStruct::_get_impl(_724)->pstatus;
        }
      }
      else
      {
        {
          return mosek::fusion::p_SolutionStruct::_get_impl(_724)->dstatus;
        }
      }
    }
  }
  catch (mosek::fusion::SolutionError _723)
  {
    {
      return ::mosek::fusion::SolutionStatus::Undefined;
    }
  }
}
void mosek::fusion::p_Model::update(std::shared_ptr< monty::ndarray< int,1 > > _725,monty::rc_ptr< ::mosek::fusion::Expression > _726){
  _checked_ptr_1<int> _ptr__725(_725 ? _725->raw() : nullptr, _725 ? _725->size(0) : 0);
  ::mosek::fusion::p_ExprDense::_new_ExprDense((::mosek::fusion::p_ExprOptimizeCode::_new_ExprOptimizeCode((::mosek::fusion::p_ExprCompress::_new_ExprCompress(_726)).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>())->eval(ws,rs,xs);
  ws->pop_expr();
  int _727 = mosek::fusion::p_WorkStack::_get_impl(ws)->nd;
  int _728 = mosek::fusion::p_WorkStack::_get_impl(ws)->shape_base;
  int _729 = mosek::fusion::p_WorkStack::_get_impl(ws)->nelem;
  int _730 = mosek::fusion::p_WorkStack::_get_impl(ws)->nnz;
  bool _731 = mosek::fusion::p_WorkStack::_get_impl(ws)->hassp;
  int _732 = mosek::fusion::p_WorkStack::_get_impl(ws)->ncodeatom;
  int _733 = mosek::fusion::p_WorkStack::_get_impl(ws)->ptr_base;
  int _734 = mosek::fusion::p_WorkStack::_get_impl(ws)->sp_base;
  int _735 = mosek::fusion::p_WorkStack::_get_impl(ws)->nidxs_base;
  int _736 = mosek::fusion::p_WorkStack::_get_impl(ws)->cof_base;
  int _737 = mosek::fusion::p_WorkStack::_get_impl(ws)->code_base;
  int _738 = mosek::fusion::p_WorkStack::_get_impl(ws)->codeptr_base;
  int _739 = mosek::fusion::p_WorkStack::_get_impl(ws)->cconst_base;
  std::shared_ptr< monty::ndarray< int,1 > > _740 = mosek::fusion::p_WorkStack::_get_impl(ws)->i32;
  _checked_ptr_1<int> _ptr__740(_740 ? _740->raw() : nullptr,_740 ? _740->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _741 = mosek::fusion::p_WorkStack::_get_impl(ws)->i64;
  _checked_ptr_1<long long> _ptr__741(_741 ? _741->raw() : nullptr,_741 ? _741->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _742 = mosek::fusion::p_WorkStack::_get_impl(ws)->f64;
  _checked_ptr_1<double> _ptr__742(_742 ? _742->raw() : nullptr,_742 ? _742->size(0) : 0);
  int _743 = (int)0;
  int _8857 = (int)0;
  int _8858 = _729;
  for (int _744 = _8857; _744 < _8858; ++_744)
  {
    {
      if ((((*natconmap_slackidx)(_ptr__725[_744])) > (int)0))
      {
        {
          ++ _743;
        }
      }
      {}
    }
  }
  int _745 = _729;
  int _746 = safe_add( _730,_743 );
  std::shared_ptr< monty::ndarray< long long,1 > > _747 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_add( _729,(int)1 ))));
  _checked_ptr_1<long long> _ptr__747(_747 ? _747->raw() : nullptr,_747 ? _747->size(0) : 0);
  int _8859 = (int)0;
  int _8860 = _729;
  for (int _748 = _8859; _748 < _8860; ++_748)
  {
    {
      int _8861 = _ptr__740[safe_add( _733,_748 )];
      int _8862 = _ptr__740[safe_add( safe_add( _733,_748 ),(int)1 )];
      for (int _749 = _8861; _749 < _8862; ++_749)
      {
        {
          if ((_ptr__741[safe_add( _735,_749 )] >= (int)0))
          {
            {
              ++ _ptr__747[safe_add( _748,(int)1 )];
            }
          }
          {}
        }
      }
      if ((((*natconmap_slackidx)(_ptr__725[_748])) > (int)0))
      {
        {
          ++ _ptr__747[safe_add( _748,(int)1 )];
        }
      }
      {}
    }
  }
  int _8863 = (int)0;
  int _8864 = _729;
  for (int _750 = _8863; _750 < _8864; ++_750)
  {
    {
      _ptr__747[safe_add( _750,(int)1 )] += _ptr__747[_750];
    }
  }
  long long _751 = _ptr__747[_729];
  std::shared_ptr< monty::ndarray< int,1 > > _752 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_751)));
  _checked_ptr_1<int> _ptr__752(_752 ? _752->raw() : nullptr,_752 ? _752->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _753 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_751)));
  _checked_ptr_1<double> _ptr__753(_753 ? _753->raw() : nullptr,_753 ? _753->size(0) : 0);
  int _754 = (int)0;
  int _8865 = (int)0;
  int _8866 = _729;
  for (int _755 = _8865; _755 < _8866; ++_755)
  {
    {
      int _8867 = _ptr__740[safe_add( _733,_755 )];
      int _8868 = _ptr__740[safe_add( safe_add( _733,_755 ),(int)1 )];
      for (int _756 = _8867; _756 < _8868; ++_756)
      {
        {
          if ((_ptr__741[safe_add( _735,_756 )] >= (int)0))
          {
            {
              _ptr__752[_754] = (int)_ptr__741[safe_add( _735,_756 )];
              _ptr__753[_754] = _ptr__742[safe_add( _736,_756 )];
              ++ _754;
            }
          }
          {}
        }
      }
      if ((((*natconmap_slackidx)(_ptr__725[_755])) > (int)0))
      {
        {
          _ptr__752[_754] = (int)(((*natconmap_slackidx)(_ptr__725[_755])) - (int)1);
          _ptr__753[_754] = (-1.0);
          ++ _754;
        }
      }
      {}
    }
  }
  task_putarowlist(_725,_747,_752,_753);
  if ((_732 == (int)0))
  {
    {
      int _8869 = (int)0;
      int _8870 = _729;
      for (int _757 = _8869; _757 < _8870; ++_757)
      {
        {
          natconmap_numparameterized -= (((*natconmap_coderowptre)(_ptr__725[_757])) - ((*natconmap_coderowptrb)(_ptr__725[_757])));
          ((*natconmap_coderowptre)(_ptr__725[_757])) = ((*natconmap_coderowptrb)(_ptr__725[_757]));
        }
      }
    }
  }
  else
  {
    {
      bool _758 = true;
      int _759 = (int)0;
      int _760 = (int)0;
      int _8871 = (int)0;
      int _8872 = _729;
      for (int _761 = _8871; _761 < _8872; ++_761)
      {
        {
          int _8873 = _ptr__740[safe_add( _733,_761 )];
          int _8874 = _ptr__740[safe_add( safe_add( _733,_761 ),(int)1 )];
          for (int _762 = _8873; _762 < _8874; ++_762)
          {
            {
              if ((((_ptr__740[safe_add( safe_add( _738,_762 ),(int)1 )] - _ptr__740[safe_add( _738,_762 )]) == (int)1) && ((_ptr__740[safe_add( _737,_ptr__740[safe_add( _738,_762 )] )] == 10) || (_ptr__740[safe_add( _737,_ptr__740[safe_add( _738,_762 )] )] == 2))))
              {
                {
                }
              }
              else
              {
                {
                  ++ _760;
                  _759 += (_ptr__740[safe_add( safe_add( _738,_762 ),(int)1 )] - _ptr__740[safe_add( _738,_762 )]);
                }
              }
            }
          }
        }
      }
      int _763 = natconmap_codenztop;
      int _764 = natconmap_codeatomtop;
      natconmap_codealloc(_760,_759);
      int _765 = _764;
      int _766 = _763;
      int _8875 = (int)0;
      int _8876 = _729;
      for (int _767 = _8875; _767 < _8876; ++_767)
      {
        {
          natconmap_numparameterized -= (((*natconmap_coderowptre)(_ptr__725[_767])) - ((*natconmap_coderowptrb)(_ptr__725[_767])));
          ((*natconmap_coderowptrb)(_ptr__725[_767])) = _766;
          int _8877 = _ptr__740[safe_add( _733,_767 )];
          int _8878 = _ptr__740[safe_add( safe_add( _733,_767 ),(int)1 )];
          for (int _768 = _8877; _768 < _8878; ++_768)
          {
            {
              if ((((_ptr__740[safe_add( safe_add( _738,_768 ),(int)1 )] - _ptr__740[safe_add( _738,_768 )]) == (int)1) && ((_ptr__740[safe_add( _737,_ptr__740[safe_add( _738,_768 )] )] == 10) || (_ptr__740[safe_add( _737,_ptr__740[safe_add( _738,_768 )] )] == 2))))
              {
                {
                }
              }
              else
              {
                {
                  int _8879 = _ptr__740[safe_add( _738,_768 )];
                  int _8880 = _ptr__740[safe_add( safe_add( _738,_768 ),(int)1 )];
                  for (int _769 = _8879; _769 < _8880; ++_769)
                  {
                    {
                      ((*natconmap_code)(_765)) = _ptr__740[safe_add( _737,_769 )];
                      ((*natconmap_cconst)(_765)) = _ptr__742[safe_add( _739,_769 )];
                      ++ _765;
                    }
                  }
                  ((*natconmap_codeptr)(safe_add( _766,(int)1 ))) = _765;
                  ((*natconmap_codenidx)(_766)) = _ptr__741[safe_add( _735,_768 )];
                  _758 = (_ptr__741[safe_add( _735,_768 )] >= (int)0);
                  ++ _766;
                }
              }
            }
          }
          ((*natconmap_coderowptre)(_ptr__725[_767])) = _766;
        }
      }
      natconmap_numparameterized += _760;
      if ((!_758))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Expression contains parameterized SDP non-zero"));
        }
      }
      {}
    }
  }
}
void mosek::fusion::p_Model::update(std::shared_ptr< monty::ndarray< int,1 > > _770,monty::rc_ptr< ::mosek::fusion::Expression > _771,std::shared_ptr< monty::ndarray< int,1 > > _772){
  _checked_ptr_1<int> _ptr__770(_770 ? _770->raw() : nullptr, _770 ? _770->size(0) : 0);
  _checked_ptr_1<int> _ptr__772(_772 ? _772->raw() : nullptr, _772 ? _772->size(0) : 0);
  int _8881 = (int)0;
  int _8882 = (int)((_770)->size(0));
  for (int _773 = _8881; _773 < _8882; ++_773)
  {
    {
      if ((((*natconmap_coderowptrb)(_773)) < ((*natconmap_coderowptre)(_773))))
      {
        {
          throw ::mosek::fusion::UpdateError(std::string ("Cannot update parameterized constraint"));
        }
      }
      {}
    }
  }
  int _774 = safe_mul( (int)((_770)->size(0)),(int)((_772)->size(0)) );
  std::shared_ptr< monty::ndarray< double,1 > > _775 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_774)));
  _checked_ptr_1<double> _ptr__775(_775 ? _775->raw() : nullptr,_775 ? _775->size(0) : 0);
  std::vector<int> _8883;
  for (int _777 = (int)0, _8884 = (int)((_770)->size(0)); _777 < _8884 ; ++_777)
  {
    for (int _778 = (int)0, _8885 = (int)((_772)->size(0)); _778 < _8885 ; ++_778)
    {
      _8883.push_back(_ptr__770[_777]);
    }
  }
  auto _8886 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8883.size()),_8883.begin(),_8883.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _776 = _8886;
  _checked_ptr_1<int> _ptr__776(_776 ? _776->raw() : nullptr,_776 ? _776->size(0) : 0);
  std::vector<int> _8887;
  for (int _780 = (int)0, _8888 = (int)((_770)->size(0)); _780 < _8888 ; ++_780)
  {
    for (int _781 = (int)0, _8889 = (int)((_772)->size(0)); _781 < _8889 ; ++_781)
    {
      _8887.push_back(_ptr__772[_781]);
    }
  }
  auto _8890 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8887.size()),_8887.begin(),_8887.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _779 = _8890;
  _checked_ptr_1<int> _ptr__779(_779 ? _779->raw() : nullptr,_779 ? _779->size(0) : 0);
  ::mosek::fusion::p_ExprDense::_new_ExprDense((::mosek::fusion::p_ExprCompress::_new_ExprCompress(_771)).as<::mosek::fusion::Expression>())->eval(ws,rs,xs);
  ws->pop_expr();
  int _782 = mosek::fusion::p_WorkStack::_get_impl(ws)->nd;
  int _783 = mosek::fusion::p_WorkStack::_get_impl(ws)->nelem;
  int _784 = mosek::fusion::p_WorkStack::_get_impl(ws)->nnz;
  bool _785 = mosek::fusion::p_WorkStack::_get_impl(ws)->hassp;
  int _786 = mosek::fusion::p_WorkStack::_get_impl(ws)->ncodeatom;
  int _787 = mosek::fusion::p_WorkStack::_get_impl(ws)->shape_base;
  int _788 = mosek::fusion::p_WorkStack::_get_impl(ws)->ptr_base;
  int _789 = mosek::fusion::p_WorkStack::_get_impl(ws)->sp_base;
  int _790 = mosek::fusion::p_WorkStack::_get_impl(ws)->nidxs_base;
  int _791 = mosek::fusion::p_WorkStack::_get_impl(ws)->cof_base;
  int _792 = mosek::fusion::p_WorkStack::_get_impl(ws)->code_base;
  int _793 = mosek::fusion::p_WorkStack::_get_impl(ws)->codeptr_base;
  int _794 = mosek::fusion::p_WorkStack::_get_impl(ws)->cconst_base;
  std::shared_ptr< monty::ndarray< int,1 > > _795 = mosek::fusion::p_WorkStack::_get_impl(ws)->i32;
  _checked_ptr_1<int> _ptr__795(_795 ? _795->raw() : nullptr,_795 ? _795->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _796 = mosek::fusion::p_WorkStack::_get_impl(ws)->i64;
  _checked_ptr_1<long long> _ptr__796(_796 ? _796->raw() : nullptr,_796 ? _796->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _797 = mosek::fusion::p_WorkStack::_get_impl(ws)->f64;
  _checked_ptr_1<double> _ptr__797(_797 ? _797->raw() : nullptr,_797 ? _797->size(0) : 0);
  int _798 = (int)0;
  int _8891 = (int)0;
  int _8892 = _783;
  for (int _799 = _8891; _799 < _8892; ++_799)
  {
    {
      int _800 = _ptr__795[safe_add( _788,_799 )];
      int _801 = _ptr__795[safe_add( safe_add( _788,_799 ),(int)1 )];
      int _802 = _800;
      int _803 = (int)0;
      while ( ((_803 < (int)((_772)->size(0))) && (_802 < _801)) )
      {
        {
          if ((_ptr__772[_803] < _ptr__796[safe_add( _790,_802 )]))
          {
            {
              ++ _803;
            }
          }
          else if((_ptr__772[_803] > _ptr__796[safe_add( _790,_802 )]))
          {
            {
              ++ _802;
            }
          }
          else
          {
            {
              _ptr__775[safe_add( _798,_803 )] = _ptr__797[safe_add( _791,_802 )];
              ++ _803;
              ++ _802;
            }
          }
        }
      }
      _798 += (int)((_772)->size(0));
    }
  }
  task_putaijlist(_776,_779,_775,(long long)(_774));
  if ((_786 == (int)0))
  {
    {
      int _8893 = (int)0;
      int _8894 = _783;
      for (int _804 = _8893; _804 < _8894; ++_804)
      {
        {
          natconmap_numparameterized -= (((*natconmap_coderowptre)(_ptr__770[_804])) - ((*natconmap_coderowptrb)(_ptr__770[_804])));
          ((*natconmap_coderowptre)(_ptr__770[_804])) = ((*natconmap_coderowptrb)(_ptr__770[_804]));
        }
      }
    }
  }
  else
  {
    {
      bool _805 = true;
      int _806 = (int)0;
      int _807 = (int)0;
      int _8895 = (int)0;
      int _8896 = _783;
      for (int _808 = _8895; _808 < _8896; ++_808)
      {
        {
          int _8897 = _ptr__795[safe_add( _788,_808 )];
          int _8898 = _ptr__795[safe_add( safe_add( _788,_808 ),(int)1 )];
          for (int _809 = _8897; _809 < _8898; ++_809)
          {
            {
              if ((((_ptr__795[safe_add( safe_add( _793,_809 ),(int)1 )] - _ptr__795[safe_add( _793,_809 )]) == (int)1) && ((_ptr__795[safe_add( _792,_ptr__795[safe_add( _793,_809 )] )] == 10) || (_ptr__795[safe_add( _792,_ptr__795[safe_add( _793,_809 )] )] == 2))))
              {
                {
                }
              }
              else
              {
                {
                  ++ _806;
                  _807 += (_ptr__795[safe_add( safe_add( _793,_809 ),(int)1 )] - _ptr__795[safe_add( _793,_809 )]);
                }
              }
            }
          }
        }
      }
      int _810 = natconmap_codenztop;
      int _811 = natconmap_codeatomtop;
      natconmap_codealloc(_806,_807);
      int _812 = _811;
      int _813 = _810;
      int _8899 = (int)0;
      int _8900 = _783;
      for (int _814 = _8899; _814 < _8900; ++_814)
      {
        {
          natconmap_numparameterized -= (((*natconmap_coderowptre)(_ptr__770[_814])) - ((*natconmap_coderowptrb)(_ptr__770[_814])));
          ((*natconmap_coderowptrb)(_ptr__770[_814])) = _813;
          int _8901 = _ptr__795[safe_add( _788,_814 )];
          int _8902 = _ptr__795[safe_add( safe_add( _788,_814 ),(int)1 )];
          for (int _815 = _8901; _815 < _8902; ++_815)
          {
            {
              if ((((_ptr__795[safe_add( safe_add( _793,_815 ),(int)1 )] - _ptr__795[safe_add( _793,_815 )]) == (int)1) && ((_ptr__795[safe_add( _792,_ptr__795[safe_add( _793,_815 )] )] == 10) || (_ptr__795[safe_add( _792,_ptr__795[safe_add( _793,_815 )] )] == 2))))
              {
                {
                }
              }
              else
              {
                {
                  int _8903 = _ptr__795[safe_add( _793,_815 )];
                  int _8904 = _ptr__795[safe_add( safe_add( _793,_815 ),(int)1 )];
                  for (int _816 = _8903; _816 < _8904; ++_816)
                  {
                    {
                      ((*natconmap_code)(_812)) = _ptr__795[safe_add( _792,_816 )];
                      ((*natconmap_cconst)(_812)) = _ptr__797[safe_add( _794,_816 )];
                      ++ _812;
                    }
                  }
                  ((*natconmap_codeptr)(safe_add( _813,(int)1 ))) = _812;
                  ((*natconmap_codenidx)(_813)) = _ptr__796[safe_add( _790,_815 )];
                  _805 = (_ptr__796[safe_add( _790,_815 )] >= (int)0);
                  ++ _813;
                }
              }
            }
          }
          ((*natconmap_coderowptre)(_ptr__770[_814])) = _813;
        }
      }
      natconmap_numparameterized += _806;
      if ((!_805))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Expression contains parameterized SDP non-zero"));
        }
      }
      {}
    }
  }
}
void mosek::fusion::Model :: updateObjective(monty::rc_ptr< ::mosek::fusion::Expression > _817,monty::rc_ptr< ::mosek::fusion::Variable > _818) { mosek::fusion::p_Model::_get_impl(this)->updateObjective(_817,_818); }void mosek::fusion::p_Model::updateObjective(monty::rc_ptr< ::mosek::fusion::Expression > _817,monty::rc_ptr< ::mosek::fusion::Variable > _818){
  if ((_817->getSize() != (int)1))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid expression size for objective"));
    }
  }
  {}
  if ((NULL != natconmap_objcodenidx.get()))
  {
    {
      throw ::mosek::fusion::UpdateError(std::string ("Cannot update parameterized objective"));
    }
  }
  {}
  int _819 = _818->numInst();
  std::shared_ptr< monty::ndarray< long long,1 > > _820 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_819)));
  _checked_ptr_1<long long> _ptr__820(_820 ? _820->raw() : nullptr,_820 ? _820->size(0) : 0);
  if ((_819 < _818->getSize()))
  {
    {
      std::shared_ptr< monty::ndarray< long long,1 > > _821 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_819)));
      _checked_ptr_1<long long> _ptr__821(_821 ? _821->raw() : nullptr,_821 ? _821->size(0) : 0);
      _818->inst((int)0,_821,(int)0,_820);
    }
  }
  else
  {
    {
      _818->inst((int)0,_820);
    }
  }
  int _8905 = (int)0;
  int _8906 = _819;
  for (int _822 = _8905; _822 < _8906; ++_822)
  {
    {
      if ((_ptr__820[_822] < (int)0))
      {
        {
          throw ::mosek::fusion::UpdateError(std::string ("Updating semidefinite terms is currently not possible"));
        }
      }
      {}
    }
  }
  bool _823 = true;
  int _8907 = (int)0;
  int _8908 = (_819 - (int)1);
  for (int _824 = _8907; _824 < _8908; ++_824)
  {
    {
      _823 = (_823 && (_ptr__820[_824] < _ptr__820[(_824 - (int)1)]));
    }
  }
  std::shared_ptr< monty::ndarray< int,1 > > _825 = nullptr;
  _checked_ptr_1<int> _ptr__825(_825 ? _825->raw() : nullptr,_825 ? _825->size(0) : 0);
  if (_823)
  {
    {
      std::vector<int> _8909;
      for (int _826 = (int)0, _8910 = _819; _826 < _8910 ; ++_826)
      {
        _8909.push_back((int)_ptr__820[_826]);
      }
      auto _8911 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8909.size()),_8909.begin(),_8909.end()));
      _825 = _8911;
      _ptr__825.update(_825 ? _825->raw() : nullptr, _825 ? _825->size(0) : 0);
    }
  }
  else
  {
    {
      std::vector<long long> _8912;
      for (int _828 = (-(int)1), _8913 = _819; _828 < _8913 ; ++_828)
      {
        _8912.push_back(_828);
      }
      auto _8914 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_8912.size()),_8912.begin(),_8912.end()));
      std::shared_ptr< monty::ndarray< long long,1 > > _827 = _8914;
      _checked_ptr_1<long long> _ptr__827(_827 ? _827->raw() : nullptr,_827 ? _827->size(0) : 0);
      ::mosek::fusion::p_CommonTools::argQsort(_827,_820,std::shared_ptr< monty::ndarray< long long,1 > >(nullptr),(long long)((int)0),(long long)(_819));
      std::vector<int> _8915;
      for (int _829 = (int)0, _8916 = _819; _829 < _8916 ; ++_829)
      {
        _8915.push_back((int)_ptr__820[_ptr__827[_829]]);
      }
      auto _8917 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8915.size()),_8915.begin(),_8915.end()));
      _825 = _8917;
      _ptr__825.update(_825 ? _825->raw() : nullptr, _825 ? _825->size(0) : 0);
    }
  }
  int _830 = (int)((_825)->size(0));
  std::shared_ptr< monty::ndarray< double,1 > > _831 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_830)));
  _checked_ptr_1<double> _ptr__831(_831 ? _831->raw() : nullptr,_831 ? _831->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _832 = _825;
  _checked_ptr_1<int> _ptr__832(_832 ? _832->raw() : nullptr,_832 ? _832->size(0) : 0);
  ::mosek::fusion::p_ExprDense::_new_ExprDense((::mosek::fusion::p_ExprCompress::_new_ExprCompress(_817)).as<::mosek::fusion::Expression>())->eval(ws,rs,xs);
  ws->pop_expr();
  {
  }
  int _833 = mosek::fusion::p_WorkStack::_get_impl(ws)->nd;
  int _834 = mosek::fusion::p_WorkStack::_get_impl(ws)->nelem;
  int _835 = mosek::fusion::p_WorkStack::_get_impl(ws)->nnz;
  bool _836 = mosek::fusion::p_WorkStack::_get_impl(ws)->hassp;
  int _837 = mosek::fusion::p_WorkStack::_get_impl(ws)->ncodeatom;
  int _838 = mosek::fusion::p_WorkStack::_get_impl(ws)->shape_base;
  int _839 = mosek::fusion::p_WorkStack::_get_impl(ws)->ptr_base;
  int _840 = mosek::fusion::p_WorkStack::_get_impl(ws)->sp_base;
  int _841 = mosek::fusion::p_WorkStack::_get_impl(ws)->nidxs_base;
  int _842 = mosek::fusion::p_WorkStack::_get_impl(ws)->cof_base;
  int _843 = mosek::fusion::p_WorkStack::_get_impl(ws)->code_base;
  int _844 = mosek::fusion::p_WorkStack::_get_impl(ws)->codeptr_base;
  int _845 = mosek::fusion::p_WorkStack::_get_impl(ws)->cconst_base;
  {
  }
  if ((_837 > (int)0))
  {
    {
      throw ::mosek::fusion::UpdateError(std::string ("Cannot update parameterized objective"));
    }
  }
  {}
  std::shared_ptr< monty::ndarray< int,1 > > _846 = mosek::fusion::p_WorkStack::_get_impl(ws)->i32;
  _checked_ptr_1<int> _ptr__846(_846 ? _846->raw() : nullptr,_846 ? _846->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _847 = mosek::fusion::p_WorkStack::_get_impl(ws)->i64;
  _checked_ptr_1<long long> _ptr__847(_847 ? _847->raw() : nullptr,_847 ? _847->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _848 = mosek::fusion::p_WorkStack::_get_impl(ws)->f64;
  _checked_ptr_1<double> _ptr__848(_848 ? _848->raw() : nullptr,_848 ? _848->size(0) : 0);
  int _849 = (int)0;
  int _8918 = (int)0;
  int _8919 = _834;
  for (int _850 = _8918; _850 < _8919; ++_850)
  {
    {
      int _851 = _ptr__846[safe_add( _839,_850 )];
      int _852 = _ptr__846[safe_add( safe_add( _839,_850 ),(int)1 )];
      int _853 = _851;
      int _854 = (int)0;
      while ( ((_854 < (int)((_825)->size(0))) && (_853 < _852)) )
      {
        {
          if ((_ptr__825[_854] < _ptr__847[safe_add( _841,_853 )]))
          {
            {
              ++ _854;
            }
          }
          else if((_ptr__825[_854] > _ptr__847[safe_add( _841,_853 )]))
          {
            {
              ++ _853;
            }
          }
          else
          {
            {
              _ptr__831[safe_add( _849,_854 )] = _ptr__848[safe_add( _842,_853 )];
              ++ _854;
              ++ _853;
            }
          }
        }
      }
      _849 += (int)((_825)->size(0));
    }
  }
  task_putclist(_832,_831);
}
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Model::__mosek_2fusion_2Model__parameter_unchecked(const std::string & _855,std::shared_ptr< monty::ndarray< int,1 > > _856,std::shared_ptr< monty::ndarray< long long,1 > > _857){
  _checked_ptr_1<int> _ptr__856(_856 ? _856->raw() : nullptr, _856 ? _856->size(0) : 0);
  _checked_ptr_1<long long> _ptr__857(_857 ? _857->raw() : nullptr, _857 ? _857->size(0) : 0);
  if ((((int)((_855).size()) > (int)0) && par_map->hasItem(_855)))
  {
    {
      throw ::mosek::fusion::NameError(std::string ("Duplicate parameter name"));
    }
  }
  {}
  long long _858 = ::mosek::fusion::p_Set::size(_856);
  int _8920;
  bool _8921 = (NULL != _857.get());
  if (_8921)
  {
    _8920 = (int)((_857)->size(0));
  }
  else
  {
    _8920 = (int)_858;
  }
  int _859 = _8920;
  if ((NULL == param_value.get()))
  {
    {
      param_value = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_859)));
    }
  }
  else
  {
    {
      if ((safe_add( param_num,_859 ) > (int)((param_value)->size(0))))
      {
        {
          std::shared_ptr< monty::ndarray< double,1 > > _860 = param_value;
          _checked_ptr_1<double> _ptr__860(_860 ? _860->raw() : nullptr,_860 ? _860->size(0) : 0);
          int _8922;
          bool _8923 = (safe_mul( (int)2,(int)((_860)->size(0)) ) > safe_add( (int)((_860)->size(0)),_859 ));
          if (_8923)
          {
            _8922 = safe_mul( (int)2,(int)((_860)->size(0)) );
          }
          else
          {
            _8922 = safe_add( (int)((_860)->size(0)),_859 );
          }
          int _861 = _8922;
          param_value = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_861)));
          if ((param_num > (int)0))
          {
            {
              ::mosek::fusion::Utils::Tools::arraycopy(_860,(int)0,param_value,(int)0,param_num);
            }
          }
          {}
        }
      }
      {}
    }
  }
  std::vector<int> _8924;
  for (int _863 = (int)0, _8925 = (int)_859; _863 < _8925 ; ++_863)
  {
    _8924.push_back(safe_add( param_num,_863 ));
  }
  auto _8926 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_8924.size()),_8924.begin(),_8924.end()));
  monty::rc_ptr< ::mosek::fusion::ParameterImpl > _862 = ::mosek::fusion::p_ParameterImpl::_new_ParameterImpl(::mosek::fusion::Model::t(_pubthis),_856,_857,_8926);
  param_num += _859;
  if (((int)((_855).size()) > (int)0))
  {
    {
      if (((NULL == parameters.get()) || (numparameter == (int)((parameters)->size(0)))))
      {
        {
          std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 > > _864 = parameters;
          std::vector<monty::rc_ptr< ::mosek::fusion::Parameter >> _8927;
          for (int _865 = (int)0, _8928 = safe_add( safe_mul( numparameter,(int)2 ),(int)64 ); _865 < _8928 ; ++_865)
          {
            _8927.push_back(nullptr);
          }
          auto _8929 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 >(monty::shape(_8927.size()),_8927.begin(),_8927.end()));
          parameters = _8929;
          int _8930 = (int)0;
          int _8931 = numparameter;
          for (int _866 = _8930; _866 < _8931; ++_866)
          {
            {
              ((*parameters)(_866)) = ((*_864)(_866));
            }
          }
        }
      }
      {}
      ((*parameters)(numparameter)) = (_862).as<::mosek::fusion::Parameter>();
      par_map->setItem(_855,numparameter);
      numparameter += (int)1;
    }
  }
  {}
  return (_862).as<::mosek::fusion::Parameter>();
}
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Model::__mosek_2fusion_2Model__parameter_(const std::string & _867,std::shared_ptr< monty::ndarray< int,1 > > _868,std::shared_ptr< monty::ndarray< long long,1 > > _869){
  _checked_ptr_1<int> _ptr__868(_868 ? _868->raw() : nullptr, _868 ? _868->size(0) : 0);
  _checked_ptr_1<long long> _ptr__869(_869 ? _869->raw() : nullptr, _869 ? _869->size(0) : 0);
  bool _870 = true;
  int _871 = (int)((_868)->size(0));
  if ((NULL != _869.get()))
  {
    {
      bool _872 = (_ptr__869[((int)((_869)->size(0)) - (int)1)] < ::mosek::fusion::p_Set::size(_868));
      int _8932 = (int)1;
      int _8933 = (int)((_869)->size(0));
      for (int _873 = _8932; _873 < _8933; ++_873)
      {
        {
          _872 = (_872 && (_ptr__869[(_873 - (int)1)] < _ptr__869[_873]));
        }
      }
      if ((!_872))
      {
        {
          throw ::mosek::fusion::IndexError(std::string ("Unordered sparsity pattern"));
        }
      }
      {}
    }
  }
  {}
  return __mosek_2fusion_2Model__parameter_unchecked(_867,_868,_869);
}
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Model::__mosek_2fusion_2Model__parameter_(const std::string & _874,std::shared_ptr< monty::ndarray< int,1 > > _875,std::shared_ptr< monty::ndarray< int,2 > > _876){
  _checked_ptr_1<int> _ptr__875(_875 ? _875->raw() : nullptr, _875 ? _875->size(0) : 0);
  int _877 = (int)((_876)->size(0));
  int _878 = (int)((_876)->size(1));
  if (((int)((_875)->size(0)) != _878))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Invalid sparsity"));
    }
  }
  {}
  if ((NULL == _876.get()))
  {
    {
      return __mosek_2fusion_2Model__parameter_unchecked(_874,_875,std::shared_ptr< monty::ndarray< long long,1 > >(nullptr));
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< long long,1 > > _879 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_877)));
      _checked_ptr_1<long long> _ptr__879(_879 ? _879->raw() : nullptr,_879 ? _879->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _880 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_878)));
      _checked_ptr_1<long long> _ptr__880(_880 ? _880->raw() : nullptr,_880 ? _880->size(0) : 0);
      _ptr__880[(_878 - (int)1)] = (int)1;
      int _8934 = (int)1;
      int _8935 = _878;
      for (int _881 = _8934; _881 < _8935; ++_881)
      {
        {
          _ptr__880[((_878 - (int)1) - _881)] = safe_mul( _ptr__880[(_878 - _881)],_ptr__875[(_878 - _881)] );
        }
      }
      int _8936 = (int)0;
      int _8937 = _877;
      for (int _882 = _8936; _882 < _8937; ++_882)
      {
        {
          _ptr__879[_882] = (int)0;
          int _8938 = (int)0;
          int _8939 = _878;
          for (int _883 = _8938; _883 < _8939; ++_883)
          {
            {
              _ptr__879[_882] += safe_mul( ((*_876)(_882,_883)),_ptr__880[_883] );
            }
          }
        }
      }
      return __mosek_2fusion_2Model__parameter_(_874,_875,_879);
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model :: __mosek_2fusion_2Model__parameter(const std::string & _884) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__parameter(_884); }monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model::parameter(const std::string &  _884) { return __mosek_2fusion_2Model__parameter(_884); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Model::__mosek_2fusion_2Model__parameter(const std::string & _884){
  std::shared_ptr< monty::ndarray< long long,1 > > _885 = nullptr;
  _checked_ptr_1<long long> _ptr__885(_885 ? _885->raw() : nullptr,_885 ? _885->size(0) : 0);
  return __mosek_2fusion_2Model__parameter_(_884,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))),_885);
}
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model :: __mosek_2fusion_2Model__parameter(const std::string & _886,int _887,int _888,int _889) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__parameter(_886,_887,_888,_889); }monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model::parameter(const std::string &  _886,int _887,int _888,int _889) { return __mosek_2fusion_2Model__parameter(_886,_887,_888,_889); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Model::__mosek_2fusion_2Model__parameter(const std::string & _886,int _887,int _888,int _889){
  std::shared_ptr< monty::ndarray< long long,1 > > _890 = nullptr;
  _checked_ptr_1<long long> _ptr__890(_890 ? _890->raw() : nullptr,_890 ? _890->size(0) : 0);
  return __mosek_2fusion_2Model__parameter_(_886,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_887),(int)(_888),(int)(_889)}),_890);
}
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model :: __mosek_2fusion_2Model__parameter(const std::string & _891,int _892,int _893) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__parameter(_891,_892,_893); }monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model::parameter(const std::string &  _891,int _892,int _893) { return __mosek_2fusion_2Model__parameter(_891,_892,_893); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Model::__mosek_2fusion_2Model__parameter(const std::string & _891,int _892,int _893){
  std::shared_ptr< monty::ndarray< long long,1 > > _894 = nullptr;
  _checked_ptr_1<long long> _ptr__894(_894 ? _894->raw() : nullptr,_894 ? _894->size(0) : 0);
  return __mosek_2fusion_2Model__parameter_(_891,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_892),(int)(_893)}),_894);
}
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model :: __mosek_2fusion_2Model__parameter(const std::string & _895,int _896) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__parameter(_895,_896); }monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model::parameter(const std::string &  _895,int _896) { return __mosek_2fusion_2Model__parameter(_895,_896); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Model::__mosek_2fusion_2Model__parameter(const std::string & _895,int _896){
  std::shared_ptr< monty::ndarray< long long,1 > > _897 = nullptr;
  _checked_ptr_1<long long> _ptr__897(_897 ? _897->raw() : nullptr,_897 ? _897->size(0) : 0);
  return __mosek_2fusion_2Model__parameter_(_895,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_896)}),_897);
}
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model :: __mosek_2fusion_2Model__parameter(const std::string & _898,std::shared_ptr< monty::ndarray< int,1 > > _899) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__parameter(_898,_899); }monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model::parameter(const std::string &  _898,std::shared_ptr< monty::ndarray< int,1 > > _899) { return __mosek_2fusion_2Model__parameter(_898,_899); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Model::__mosek_2fusion_2Model__parameter(const std::string & _898,std::shared_ptr< monty::ndarray< int,1 > > _899){
  _checked_ptr_1<int> _ptr__899(_899 ? _899->raw() : nullptr, _899 ? _899->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _900 = nullptr;
  _checked_ptr_1<long long> _ptr__900(_900 ? _900->raw() : nullptr,_900 ? _900->size(0) : 0);
  return __mosek_2fusion_2Model__parameter_(_898,_899,_900);
}
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model :: __mosek_2fusion_2Model__parameter(const std::string & _901,std::shared_ptr< monty::ndarray< int,1 > > _902,std::shared_ptr< monty::ndarray< long long,1 > > _903) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__parameter(_901,_902,_903); }monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model::parameter(const std::string &  _901,std::shared_ptr< monty::ndarray< int,1 > > _902,std::shared_ptr< monty::ndarray< long long,1 > > _903) { return __mosek_2fusion_2Model__parameter(_901,_902,_903); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Model::__mosek_2fusion_2Model__parameter(const std::string & _901,std::shared_ptr< monty::ndarray< int,1 > > _902,std::shared_ptr< monty::ndarray< long long,1 > > _903){
  _checked_ptr_1<int> _ptr__902(_902 ? _902->raw() : nullptr, _902 ? _902->size(0) : 0);
  _checked_ptr_1<long long> _ptr__903(_903 ? _903->raw() : nullptr, _903 ? _903->size(0) : 0);
  return __mosek_2fusion_2Model__parameter_(_901,_902,_903);
}
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model :: __mosek_2fusion_2Model__parameter(const std::string & _904,std::shared_ptr< monty::ndarray< int,1 > > _905,std::shared_ptr< monty::ndarray< int,2 > > _906) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__parameter(_904,_905,_906); }monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model::parameter(const std::string &  _904,std::shared_ptr< monty::ndarray< int,1 > > _905,std::shared_ptr< monty::ndarray< int,2 > > _906) { return __mosek_2fusion_2Model__parameter(_904,_905,_906); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Model::__mosek_2fusion_2Model__parameter(const std::string & _904,std::shared_ptr< monty::ndarray< int,1 > > _905,std::shared_ptr< monty::ndarray< int,2 > > _906){
  _checked_ptr_1<int> _ptr__905(_905 ? _905->raw() : nullptr, _905 ? _905->size(0) : 0);
  return __mosek_2fusion_2Model__parameter_(_904,_905,_906);
}
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model :: __mosek_2fusion_2Model__parameter() { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__parameter(); }monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model::parameter() { return __mosek_2fusion_2Model__parameter(); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Model::__mosek_2fusion_2Model__parameter(){
  std::shared_ptr< monty::ndarray< long long,1 > > _907 = nullptr;
  _checked_ptr_1<long long> _ptr__907(_907 ? _907->raw() : nullptr,_907 ? _907->size(0) : 0);
  return __mosek_2fusion_2Model__parameter_(std::string (""),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))),_907);
}
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model :: __mosek_2fusion_2Model__parameter(int _908,int _909,int _910) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__parameter(_908,_909,_910); }monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model::parameter(int _908,int _909,int _910) { return __mosek_2fusion_2Model__parameter(_908,_909,_910); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Model::__mosek_2fusion_2Model__parameter(int _908,int _909,int _910){
  std::shared_ptr< monty::ndarray< long long,1 > > _911 = nullptr;
  _checked_ptr_1<long long> _ptr__911(_911 ? _911->raw() : nullptr,_911 ? _911->size(0) : 0);
  return __mosek_2fusion_2Model__parameter_(std::string (""),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_908),(int)(_909),(int)(_910)}),_911);
}
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model :: __mosek_2fusion_2Model__parameter(int _912,int _913) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__parameter(_912,_913); }monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model::parameter(int _912,int _913) { return __mosek_2fusion_2Model__parameter(_912,_913); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Model::__mosek_2fusion_2Model__parameter(int _912,int _913){
  std::shared_ptr< monty::ndarray< long long,1 > > _914 = nullptr;
  _checked_ptr_1<long long> _ptr__914(_914 ? _914->raw() : nullptr,_914 ? _914->size(0) : 0);
  return __mosek_2fusion_2Model__parameter_(std::string (""),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_912),(int)(_913)}),_914);
}
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model :: __mosek_2fusion_2Model__parameter(int _915) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__parameter(_915); }monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model::parameter(int _915) { return __mosek_2fusion_2Model__parameter(_915); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Model::__mosek_2fusion_2Model__parameter(int _915){
  std::shared_ptr< monty::ndarray< long long,1 > > _916 = nullptr;
  _checked_ptr_1<long long> _ptr__916(_916 ? _916->raw() : nullptr,_916 ? _916->size(0) : 0);
  return __mosek_2fusion_2Model__parameter_(std::string (""),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_915)}),_916);
}
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model :: __mosek_2fusion_2Model__parameter(std::shared_ptr< monty::ndarray< int,1 > > _917) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__parameter(_917); }monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model::parameter(std::shared_ptr< monty::ndarray< int,1 > > _917) { return __mosek_2fusion_2Model__parameter(_917); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Model::__mosek_2fusion_2Model__parameter(std::shared_ptr< monty::ndarray< int,1 > > _917){
  _checked_ptr_1<int> _ptr__917(_917 ? _917->raw() : nullptr, _917 ? _917->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _918 = nullptr;
  _checked_ptr_1<long long> _ptr__918(_918 ? _918->raw() : nullptr,_918 ? _918->size(0) : 0);
  return __mosek_2fusion_2Model__parameter_(std::string (""),_917,_918);
}
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model :: __mosek_2fusion_2Model__parameter(std::shared_ptr< monty::ndarray< int,1 > > _919,std::shared_ptr< monty::ndarray< long long,1 > > _920) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__parameter(_919,_920); }monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model::parameter(std::shared_ptr< monty::ndarray< int,1 > > _919,std::shared_ptr< monty::ndarray< long long,1 > > _920) { return __mosek_2fusion_2Model__parameter(_919,_920); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Model::__mosek_2fusion_2Model__parameter(std::shared_ptr< monty::ndarray< int,1 > > _919,std::shared_ptr< monty::ndarray< long long,1 > > _920){
  _checked_ptr_1<int> _ptr__919(_919 ? _919->raw() : nullptr, _919 ? _919->size(0) : 0);
  _checked_ptr_1<long long> _ptr__920(_920 ? _920->raw() : nullptr, _920 ? _920->size(0) : 0);
  return __mosek_2fusion_2Model__parameter_(std::string (""),_919,_920);
}
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model :: __mosek_2fusion_2Model__parameter(std::shared_ptr< monty::ndarray< int,1 > > _921,std::shared_ptr< monty::ndarray< int,2 > > _922) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__parameter(_921,_922); }monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model::parameter(std::shared_ptr< monty::ndarray< int,1 > > _921,std::shared_ptr< monty::ndarray< int,2 > > _922) { return __mosek_2fusion_2Model__parameter(_921,_922); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Model::__mosek_2fusion_2Model__parameter(std::shared_ptr< monty::ndarray< int,1 > > _921,std::shared_ptr< monty::ndarray< int,2 > > _922){
  _checked_ptr_1<int> _ptr__921(_921 ? _921->raw() : nullptr, _921 ? _921->size(0) : 0);
  return __mosek_2fusion_2Model__parameter_(std::string (""),_921,_922);
}
void mosek::fusion::p_Model::objective_(const std::string & _923,mosek::fusion::ObjectiveSense _924,monty::rc_ptr< ::mosek::fusion::Expression > _925){
  task_putobjectivename(_923);
  monty::rc_ptr< ::mosek::fusion::WorkStack > _926 = ::mosek::fusion::p_WorkStack::_new_WorkStack();
  monty::rc_ptr< ::mosek::fusion::WorkStack > _927 = ::mosek::fusion::p_WorkStack::_new_WorkStack();
  monty::rc_ptr< ::mosek::fusion::ExprDense > _928 = ::mosek::fusion::p_ExprDense::_new_ExprDense((::mosek::fusion::p_ExprOptimizeCode::_new_ExprOptimizeCode((::mosek::fusion::p_ExprCompress::_new_ExprCompress(_925)).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>());
  _928->eval(_926,_927,xs);
  _926->pop_expr();
  std::shared_ptr< monty::ndarray< int,1 > > _929 = mosek::fusion::p_WorkStack::_get_impl(_926)->i32;
  _checked_ptr_1<int> _ptr__929(_929 ? _929->raw() : nullptr,_929 ? _929->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _930 = mosek::fusion::p_WorkStack::_get_impl(_926)->i64;
  _checked_ptr_1<long long> _ptr__930(_930 ? _930->raw() : nullptr,_930 ? _930->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _931 = mosek::fusion::p_WorkStack::_get_impl(_926)->f64;
  _checked_ptr_1<double> _ptr__931(_931 ? _931->raw() : nullptr,_931 ? _931->size(0) : 0);
  int _932 = mosek::fusion::p_WorkStack::_get_impl(_926)->nd;
  int _933 = mosek::fusion::p_WorkStack::_get_impl(_926)->nelem;
  int _934 = mosek::fusion::p_WorkStack::_get_impl(_926)->nnz;
  bool _935 = mosek::fusion::p_WorkStack::_get_impl(_926)->hassp;
  int _936 = mosek::fusion::p_WorkStack::_get_impl(_926)->ncodeatom;
  int _937 = mosek::fusion::p_WorkStack::_get_impl(_926)->ptr_base;
  int _938 = mosek::fusion::p_WorkStack::_get_impl(_926)->shape_base;
  int _939 = mosek::fusion::p_WorkStack::_get_impl(_926)->nidxs_base;
  int _940 = mosek::fusion::p_WorkStack::_get_impl(_926)->cof_base;
  int _941 = mosek::fusion::p_WorkStack::_get_impl(_926)->code_base;
  int _942 = mosek::fusion::p_WorkStack::_get_impl(_926)->codeptr_base;
  int _943 = mosek::fusion::p_WorkStack::_get_impl(_926)->cconst_base;
  long long _944 = (long long)1;
  int _8940 = (int)0;
  int _8941 = _932;
  for (int _945 = _8940; _945 < _8941; ++_945)
  {
    {
      _932 *= _ptr__929[safe_add( _938,_945 )];
    }
  }
  if ((_944 != (int)1))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Invalid expression size for objective"));
    }
  }
  {}
  if ((_933 != (int)1))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Invalid expression for objective"));
    }
  }
  {}
  int _946 = (int)0;
  int _947 = (int)0;
  int _8942 = (int)0;
  int _8943 = _934;
  for (int _948 = _8942; _948 < _8943; ++_948)
  {
    {
      if ((_ptr__930[safe_add( _939,_948 )] < (int)0))
      {
        {
          ++ _947;
        }
      }
      else if((_ptr__930[safe_add( _939,_948 )] >= (int)0))
      {
        {
          ++ _946;
        }
      }
      {}
    }
  }
  std::shared_ptr< monty::ndarray< int,1 > > _949 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_946)));
  _checked_ptr_1<int> _ptr__949(_949 ? _949->raw() : nullptr,_949 ? _949->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _950 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_946)));
  _checked_ptr_1<double> _ptr__950(_950 ? _950->raw() : nullptr,_950 ? _950->size(0) : 0);
  {
    int _951 = (int)0;
    int _8944 = (int)0;
    int _8945 = _934;
    for (int _952 = _8944; _952 < _8945; ++_952)
    {
      {
        if ((_ptr__930[safe_add( _939,_952 )] >= (int)0))
        {
          {
            _ptr__949[_951] = (int)_ptr__930[safe_add( _939,_952 )];
            _ptr__950[_951] = _ptr__931[safe_add( _940,_952 )];
            ++ _951;
          }
        }
        {}
      }
    }
  }
  task_putobjective((_924 == ::mosek::fusion::ObjectiveSense::Maximize),_949,_950,0.0);
  if ((_947 > (int)0))
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _953 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_947)));
      _checked_ptr_1<int> _ptr__953(_953 ? _953->raw() : nullptr,_953 ? _953->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _954 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_947)));
      _checked_ptr_1<int> _ptr__954(_954 ? _954->raw() : nullptr,_954 ? _954->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _955 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_947)));
      _checked_ptr_1<int> _ptr__955(_955 ? _955->raw() : nullptr,_955 ? _955->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _956 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_947)));
      _checked_ptr_1<double> _ptr__956(_956 ? _956->raw() : nullptr,_956 ? _956->size(0) : 0);
      int _8946 = (int)0;
      int _8947 = _947;
      for (int _957 = _8946; _957 < _8947; ++_957)
      {
        {
          long long _958 = (-safe_add( _ptr__930[safe_add( _939,_957 )],(int)1 ));
          _ptr__953[_957] = ((*natbarvar_idx)(_958));
          _ptr__954[_957] = ((*natbarvar_i)(_958));
          _ptr__955[_957] = ((*natbarvar_j)(_958));
          double _8948;
          bool _8949 = (_ptr__954[_957] == _ptr__955[_957]);
          if (_8949)
          {
            _8948 = _ptr__931[safe_add( _940,_957 )];
          }
          else
          {
            _8948 = (0.5 * _ptr__931[safe_add( _940,_957 )]);
          }
          _ptr__956[_957] = _8948;
        }
      }
      task_putbarc(_953,_954,_955,_956);
    }
  }
  {}
  if ((_936 == (int)0))
  {
    {
      int _8950 = (int)0;
      int _8951 = _933;
      for (int _959 = _8950; _959 < _8951; ++_959)
      {
        {
          natconmap_objcodenidx = nullptr;
          natconmap_objcodeptr = nullptr;
          natconmap_objcode = nullptr;
          natconmap_objcconst = nullptr;
        }
      }
    }
  }
  else
  {
    {
      bool _960 = true;
      int _961 = (int)0;
      int _962 = (int)0;
      int _8952 = _ptr__929[_937];
      int _8953 = _ptr__929[safe_add( _937,(int)1 )];
      for (int _963 = _8952; _963 < _8953; ++_963)
      {
        {
          if ((((_ptr__929[safe_add( safe_add( _942,_963 ),(int)1 )] - _ptr__929[safe_add( _942,_963 )]) == (int)1) && ((_ptr__929[safe_add( _941,_ptr__929[safe_add( _942,_963 )] )] == 10) || (_ptr__929[safe_add( _941,_ptr__929[safe_add( _942,_963 )] )] == 2))))
          {
            {
            }
          }
          else
          {
            {
              ++ _962;
              _961 += (_ptr__929[safe_add( safe_add( _942,_963 ),(int)1 )] - _ptr__929[safe_add( _942,_963 )]);
            }
          }
        }
      }
      if ((_962 > (int)0))
      {
        {
          std::shared_ptr< monty::ndarray< long long,1 > > _964 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_962)));
          _checked_ptr_1<long long> _ptr__964(_964 ? _964->raw() : nullptr,_964 ? _964->size(0) : 0);
          std::shared_ptr< monty::ndarray< int,1 > > _965 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(safe_add( _962,(int)1 ))));
          _checked_ptr_1<int> _ptr__965(_965 ? _965->raw() : nullptr,_965 ? _965->size(0) : 0);
          std::shared_ptr< monty::ndarray< int,1 > > _966 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_961)));
          _checked_ptr_1<int> _ptr__966(_966 ? _966->raw() : nullptr,_966 ? _966->size(0) : 0);
          std::shared_ptr< monty::ndarray< double,1 > > _967 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_961)));
          _checked_ptr_1<double> _ptr__967(_967 ? _967->raw() : nullptr,_967 ? _967->size(0) : 0);
          {
            int _968 = (int)0;
            int _969 = (int)0;
            int _8954 = _ptr__929[_937];
            int _8955 = _ptr__929[safe_add( _937,(int)1 )];
            for (int _970 = _8954; _970 < _8955; ++_970)
            {
              {
                if ((((_ptr__929[safe_add( safe_add( _942,_970 ),(int)1 )] - _ptr__929[safe_add( _942,_970 )]) == (int)1) && ((_ptr__929[safe_add( _941,_ptr__929[safe_add( _942,_970 )] )] == 10) || (_ptr__929[safe_add( _941,_ptr__929[safe_add( _942,_970 )] )] == 2))))
                {
                  {
                  }
                }
                else
                {
                  {
                    int _8956 = _ptr__929[safe_add( _942,_970 )];
                    int _8957 = _ptr__929[safe_add( safe_add( _942,_970 ),(int)1 )];
                    for (int _971 = _8956; _971 < _8957; ++_971)
                    {
                      {
                        _ptr__966[_968] = _ptr__929[safe_add( _941,_971 )];
                        _ptr__967[_968] = _ptr__931[safe_add( _943,_971 )];
                        ++ _968;
                      }
                    }
                    _ptr__965[safe_add( _969,(int)1 )] = _968;
                    _ptr__964[_969] = _ptr__930[safe_add( _939,_970 )];
                    _960 = (_ptr__964[_969] >= (int)0);
                    ++ _969;
                  }
                }
              }
            }
          }
          natconmap_objcodenidx = _964;
          natconmap_objcodeptr = _965;
          natconmap_objcode = _966;
          natconmap_objcconst = _967;
        }
      }
      else
      {
        {
          natconmap_objcodenidx = nullptr;
          natconmap_objcodeptr = nullptr;
          natconmap_objcode = nullptr;
          natconmap_objcconst = nullptr;
        }
      }
      if ((!_960))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Expression contains parameterized SDP non-zero"));
        }
      }
      {}
    }
  }
}
void mosek::fusion::Model :: objective(double _972) { mosek::fusion::p_Model::_get_impl(this)->objective(_972); }void mosek::fusion::p_Model::objective(double _972){
  objective_(std::string (""),::mosek::fusion::ObjectiveSense::Minimize,::mosek::fusion::p_Expr::constTerm(_972));
}
void mosek::fusion::Model :: objective(mosek::fusion::ObjectiveSense _973,double _974) { mosek::fusion::p_Model::_get_impl(this)->objective(_973,_974); }void mosek::fusion::p_Model::objective(mosek::fusion::ObjectiveSense _973,double _974){
  objective_(std::string (""),_973,::mosek::fusion::p_Expr::constTerm(_974));
}
void mosek::fusion::Model :: objective(mosek::fusion::ObjectiveSense _975,monty::rc_ptr< ::mosek::fusion::Expression > _976) { mosek::fusion::p_Model::_get_impl(this)->objective(_975,_976); }void mosek::fusion::p_Model::objective(mosek::fusion::ObjectiveSense _975,monty::rc_ptr< ::mosek::fusion::Expression > _976){
  objective_(std::string (""),_975,_976);
}
void mosek::fusion::Model :: objective(const std::string & _977,double _978) { mosek::fusion::p_Model::_get_impl(this)->objective(_977,_978); }void mosek::fusion::p_Model::objective(const std::string & _977,double _978){
  objective_(_977,::mosek::fusion::ObjectiveSense::Minimize,::mosek::fusion::p_Expr::constTerm(_978));
}
void mosek::fusion::Model :: objective(const std::string & _979,mosek::fusion::ObjectiveSense _980,double _981) { mosek::fusion::p_Model::_get_impl(this)->objective(_979,_980,_981); }void mosek::fusion::p_Model::objective(const std::string & _979,mosek::fusion::ObjectiveSense _980,double _981){
  objective_(_979,_980,::mosek::fusion::p_Expr::constTerm(_981));
}
void mosek::fusion::Model :: objective(const std::string & _982,mosek::fusion::ObjectiveSense _983,monty::rc_ptr< ::mosek::fusion::Expression > _984) { mosek::fusion::p_Model::_get_impl(this)->objective(_982,_983,_984); }void mosek::fusion::p_Model::objective(const std::string & _982,mosek::fusion::ObjectiveSense _983,monty::rc_ptr< ::mosek::fusion::Expression > _984){
  objective_(_982,_983,_984);
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model :: __mosek_2fusion_2Model__constraint(monty::rc_ptr< ::mosek::fusion::Expression > _985,monty::rc_ptr< ::mosek::fusion::ConeDomain > _986) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__constraint(_985,_986); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint(monty::rc_ptr< ::mosek::fusion::Expression > _985,monty::rc_ptr< ::mosek::fusion::ConeDomain > _986) { return __mosek_2fusion_2Model__constraint(_985,_986); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint(monty::rc_ptr< ::mosek::fusion::Expression > _985,monty::rc_ptr< ::mosek::fusion::ConeDomain > _986){
  return __mosek_2fusion_2Model__constraint_(std::string (""),_985,_986);
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model :: __mosek_2fusion_2Model__constraint(const std::string & _987,monty::rc_ptr< ::mosek::fusion::Expression > _988,monty::rc_ptr< ::mosek::fusion::ConeDomain > _989) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__constraint(_987,_988,_989); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint(const std::string &  _987,monty::rc_ptr< ::mosek::fusion::Expression > _988,monty::rc_ptr< ::mosek::fusion::ConeDomain > _989) { return __mosek_2fusion_2Model__constraint(_987,_988,_989); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint(const std::string & _987,monty::rc_ptr< ::mosek::fusion::Expression > _988,monty::rc_ptr< ::mosek::fusion::ConeDomain > _989){
  return __mosek_2fusion_2Model__constraint_(_987,_988,_989);
}
monty::rc_ptr< ::mosek::fusion::RangedConstraint > mosek::fusion::Model :: __mosek_2fusion_2Model__constraint(monty::rc_ptr< ::mosek::fusion::Expression > _990,monty::rc_ptr< ::mosek::fusion::RangeDomain > _991) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__constraint(_990,_991); }monty::rc_ptr< ::mosek::fusion::RangedConstraint > mosek::fusion::Model::constraint(monty::rc_ptr< ::mosek::fusion::Expression > _990,monty::rc_ptr< ::mosek::fusion::RangeDomain > _991) { return __mosek_2fusion_2Model__constraint(_990,_991); }
monty::rc_ptr< ::mosek::fusion::RangedConstraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint(monty::rc_ptr< ::mosek::fusion::Expression > _990,monty::rc_ptr< ::mosek::fusion::RangeDomain > _991){
  return __mosek_2fusion_2Model__constraint_(std::string (""),_990,_991);
}
monty::rc_ptr< ::mosek::fusion::RangedConstraint > mosek::fusion::Model :: __mosek_2fusion_2Model__constraint(const std::string & _992,monty::rc_ptr< ::mosek::fusion::Expression > _993,monty::rc_ptr< ::mosek::fusion::RangeDomain > _994) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__constraint(_992,_993,_994); }monty::rc_ptr< ::mosek::fusion::RangedConstraint > mosek::fusion::Model::constraint(const std::string &  _992,monty::rc_ptr< ::mosek::fusion::Expression > _993,monty::rc_ptr< ::mosek::fusion::RangeDomain > _994) { return __mosek_2fusion_2Model__constraint(_992,_993,_994); }
monty::rc_ptr< ::mosek::fusion::RangedConstraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint(const std::string & _992,monty::rc_ptr< ::mosek::fusion::Expression > _993,monty::rc_ptr< ::mosek::fusion::RangeDomain > _994){
  return __mosek_2fusion_2Model__constraint_(_992,_993,_994);
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model :: __mosek_2fusion_2Model__constraint(monty::rc_ptr< ::mosek::fusion::Expression > _995,monty::rc_ptr< ::mosek::fusion::LinearDomain > _996) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__constraint(_995,_996); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint(monty::rc_ptr< ::mosek::fusion::Expression > _995,monty::rc_ptr< ::mosek::fusion::LinearDomain > _996) { return __mosek_2fusion_2Model__constraint(_995,_996); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint(monty::rc_ptr< ::mosek::fusion::Expression > _995,monty::rc_ptr< ::mosek::fusion::LinearDomain > _996){
  return __mosek_2fusion_2Model__constraint_(std::string (""),_995,_996);
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model :: __mosek_2fusion_2Model__constraint(const std::string & _997,monty::rc_ptr< ::mosek::fusion::Expression > _998,monty::rc_ptr< ::mosek::fusion::LinearDomain > _999) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__constraint(_997,_998,_999); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint(const std::string &  _997,monty::rc_ptr< ::mosek::fusion::Expression > _998,monty::rc_ptr< ::mosek::fusion::LinearDomain > _999) { return __mosek_2fusion_2Model__constraint(_997,_998,_999); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint(const std::string & _997,monty::rc_ptr< ::mosek::fusion::Expression > _998,monty::rc_ptr< ::mosek::fusion::LinearDomain > _999){
  return __mosek_2fusion_2Model__constraint_(_997,_998,_999);
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model :: __mosek_2fusion_2Model__constraint(monty::rc_ptr< ::mosek::fusion::Expression > _1000,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _1001) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__constraint(_1000,_1001); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint(monty::rc_ptr< ::mosek::fusion::Expression > _1000,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _1001) { return __mosek_2fusion_2Model__constraint(_1000,_1001); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint(monty::rc_ptr< ::mosek::fusion::Expression > _1000,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _1001){
  return __mosek_2fusion_2Model__constraint_(std::string (""),_1000,_1001);
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model :: __mosek_2fusion_2Model__constraint(const std::string & _1002,monty::rc_ptr< ::mosek::fusion::Expression > _1003,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _1004) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__constraint(_1002,_1003,_1004); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint(const std::string &  _1002,monty::rc_ptr< ::mosek::fusion::Expression > _1003,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _1004) { return __mosek_2fusion_2Model__constraint(_1002,_1003,_1004); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint(const std::string & _1002,monty::rc_ptr< ::mosek::fusion::Expression > _1003,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _1004){
  return __mosek_2fusion_2Model__constraint_(_1002,_1003,_1004);
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model :: __mosek_2fusion_2Model__constraint(monty::rc_ptr< ::mosek::fusion::Expression > _1005,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1006) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__constraint(_1005,_1006); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint(monty::rc_ptr< ::mosek::fusion::Expression > _1005,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1006) { return __mosek_2fusion_2Model__constraint(_1005,_1006); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint(monty::rc_ptr< ::mosek::fusion::Expression > _1005,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1006){
  return __mosek_2fusion_2Model__constraint_(std::string (""),_1005,_1006);
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model :: __mosek_2fusion_2Model__constraint(const std::string & _1007,monty::rc_ptr< ::mosek::fusion::Expression > _1008,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1009) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__constraint(_1007,_1008,_1009); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::constraint(const std::string &  _1007,monty::rc_ptr< ::mosek::fusion::Expression > _1008,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1009) { return __mosek_2fusion_2Model__constraint(_1007,_1008,_1009); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint(const std::string & _1007,monty::rc_ptr< ::mosek::fusion::Expression > _1008,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1009){
  return __mosek_2fusion_2Model__constraint_(_1007,_1008,_1009);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _1010) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1010); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _1010) { return __mosek_2fusion_2Model__variable(_1010); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _1010){
  return __mosek_2fusion_2Model__variable_(std::string (""),mosek::fusion::p_LinPSDDomain::_get_impl(_1010)->shape,_1010);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(int _1011,int _1012,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _1013) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1011,_1012,_1013); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(int _1011,int _1012,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _1013) { return __mosek_2fusion_2Model__variable(_1011,_1012,_1013); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(int _1011,int _1012,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _1013){
  return __mosek_2fusion_2Model__variable_(std::string (""),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_1012),(int)((safe_mul( _1011,safe_add( _1011,(int)1 ) ) / (int)2))}),_1013);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(int _1014,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _1015) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1014,_1015); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(int _1014,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _1015) { return __mosek_2fusion_2Model__variable(_1014,_1015); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(int _1014,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _1015){
  return __mosek_2fusion_2Model__variable_(std::string (""),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((safe_mul( _1014,safe_add( _1014,(int)1 ) ) / (int)2))}),_1015);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _1016,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _1017) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1016,_1017); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _1016,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _1017) { return __mosek_2fusion_2Model__variable(_1016,_1017); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _1016,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _1017){
  return __mosek_2fusion_2Model__variable_(_1016,std::shared_ptr< monty::ndarray< int,1 > >(nullptr),_1017);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _1018,int _1019,int _1020,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _1021) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1018,_1019,_1020,_1021); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _1018,int _1019,int _1020,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _1021) { return __mosek_2fusion_2Model__variable(_1018,_1019,_1020,_1021); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _1018,int _1019,int _1020,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _1021){
  return __mosek_2fusion_2Model__variable_(_1018,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_1020),(int)((safe_mul( _1019,safe_add( _1019,(int)1 ) ) / (int)2))}),_1021);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _1022,int _1023,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _1024) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1022,_1023,_1024); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _1022,int _1023,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _1024) { return __mosek_2fusion_2Model__variable(_1022,_1023,_1024); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _1022,int _1023,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _1024){
  return __mosek_2fusion_2Model__variable_(_1022,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((safe_mul( _1023,safe_add( _1023,(int)1 ) ) / (int)2))}),_1024);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _1025,std::shared_ptr< monty::ndarray< int,1 > > _1026,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _1027) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1025,_1026,_1027); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _1025,std::shared_ptr< monty::ndarray< int,1 > > _1026,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _1027) { return __mosek_2fusion_2Model__variable(_1025,_1026,_1027); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _1025,std::shared_ptr< monty::ndarray< int,1 > > _1026,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _1027){
  _checked_ptr_1<int> _ptr__1026(_1026 ? _1026->raw() : nullptr, _1026 ? _1026->size(0) : 0);
  return __mosek_2fusion_2Model__variable_(_1025,_1026,_1027);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(monty::rc_ptr< ::mosek::fusion::PSDDomain > _1028) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1028); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(monty::rc_ptr< ::mosek::fusion::PSDDomain > _1028) { return __mosek_2fusion_2Model__variable(_1028); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(monty::rc_ptr< ::mosek::fusion::PSDDomain > _1028){
  return (__mosek_2fusion_2Model__variable_(std::string (""),mosek::fusion::p_PSDDomain::_get_impl(_1028)->shape,_1028)).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(int _1029,int _1030,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1031) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1029,_1030,_1031); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(int _1029,int _1030,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1031) { return __mosek_2fusion_2Model__variable(_1029,_1030,_1031); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(int _1029,int _1030,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1031){
  return (__mosek_2fusion_2Model__variable_(std::string (""),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_1030),(int)(_1029),(int)(_1029)}),_1031)).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(int _1032,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1033) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1032,_1033); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(int _1032,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1033) { return __mosek_2fusion_2Model__variable(_1032,_1033); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(int _1032,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1033){
  return (__mosek_2fusion_2Model__variable_(std::string (""),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_1032),(int)(_1032)}),_1033)).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _1034,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1035) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1034,_1035); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _1034,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1035) { return __mosek_2fusion_2Model__variable(_1034,_1035); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _1034,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1035){
  return (__mosek_2fusion_2Model__variable_(_1034,std::shared_ptr< monty::ndarray< int,1 > >(nullptr),_1035)).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _1036,int _1037,int _1038,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1039) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1036,_1037,_1038,_1039); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _1036,int _1037,int _1038,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1039) { return __mosek_2fusion_2Model__variable(_1036,_1037,_1038,_1039); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _1036,int _1037,int _1038,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1039){
  return (__mosek_2fusion_2Model__variable_(_1036,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_1038),(int)(_1037),(int)(_1037)}),_1039)).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _1040,int _1041,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1042) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1040,_1041,_1042); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _1040,int _1041,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1042) { return __mosek_2fusion_2Model__variable(_1040,_1041,_1042); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _1040,int _1041,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1042){
  return (__mosek_2fusion_2Model__variable_(_1040,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_1041),(int)(_1041)}),_1042)).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _1043,std::shared_ptr< monty::ndarray< int,1 > > _1044,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1045) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1043,_1044,_1045); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _1043,std::shared_ptr< monty::ndarray< int,1 > > _1044,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1045) { return __mosek_2fusion_2Model__variable(_1043,_1044,_1045); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _1043,std::shared_ptr< monty::ndarray< int,1 > > _1044,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1045){
  _checked_ptr_1<int> _ptr__1044(_1044 ? _1044->raw() : nullptr, _1044 ? _1044->size(0) : 0);
  return (__mosek_2fusion_2Model__variable_(_1043,_1044,_1045)).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(monty::rc_ptr< ::mosek::fusion::ConeDomain > _1046) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1046); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(monty::rc_ptr< ::mosek::fusion::ConeDomain > _1046) { return __mosek_2fusion_2Model__variable(_1046); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(monty::rc_ptr< ::mosek::fusion::ConeDomain > _1046){
  return __mosek_2fusion_2Model__variable_(std::string (""),std::shared_ptr< monty::ndarray< int,1 > >(nullptr),_1046);
}
monty::rc_ptr< ::mosek::fusion::RangedVariable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(monty::rc_ptr< ::mosek::fusion::RangeDomain > _1047) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1047); }monty::rc_ptr< ::mosek::fusion::RangedVariable > mosek::fusion::Model::variable(monty::rc_ptr< ::mosek::fusion::RangeDomain > _1047) { return __mosek_2fusion_2Model__variable(_1047); }
monty::rc_ptr< ::mosek::fusion::RangedVariable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(monty::rc_ptr< ::mosek::fusion::RangeDomain > _1047){
  return __mosek_2fusion_2Model__ranged_variable(std::string (""),std::shared_ptr< monty::ndarray< int,1 > >(nullptr),_1047);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(monty::rc_ptr< ::mosek::fusion::LinearDomain > _1048) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1048); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(monty::rc_ptr< ::mosek::fusion::LinearDomain > _1048) { return __mosek_2fusion_2Model__variable(_1048); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(monty::rc_ptr< ::mosek::fusion::LinearDomain > _1048){
  return __mosek_2fusion_2Model__variable_(std::string (""),std::shared_ptr< monty::ndarray< int,1 > >(nullptr),_1048);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(std::shared_ptr< monty::ndarray< int,1 > > _1049,monty::rc_ptr< ::mosek::fusion::ConeDomain > _1050) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1049,_1050); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(std::shared_ptr< monty::ndarray< int,1 > > _1049,monty::rc_ptr< ::mosek::fusion::ConeDomain > _1050) { return __mosek_2fusion_2Model__variable(_1049,_1050); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(std::shared_ptr< monty::ndarray< int,1 > > _1049,monty::rc_ptr< ::mosek::fusion::ConeDomain > _1050){
  _checked_ptr_1<int> _ptr__1049(_1049 ? _1049->raw() : nullptr, _1049 ? _1049->size(0) : 0);
  return __mosek_2fusion_2Model__variable_(std::string (""),_1049,_1050);
}
monty::rc_ptr< ::mosek::fusion::RangedVariable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(std::shared_ptr< monty::ndarray< int,1 > > _1051,monty::rc_ptr< ::mosek::fusion::RangeDomain > _1052) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1051,_1052); }monty::rc_ptr< ::mosek::fusion::RangedVariable > mosek::fusion::Model::variable(std::shared_ptr< monty::ndarray< int,1 > > _1051,monty::rc_ptr< ::mosek::fusion::RangeDomain > _1052) { return __mosek_2fusion_2Model__variable(_1051,_1052); }
monty::rc_ptr< ::mosek::fusion::RangedVariable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(std::shared_ptr< monty::ndarray< int,1 > > _1051,monty::rc_ptr< ::mosek::fusion::RangeDomain > _1052){
  _checked_ptr_1<int> _ptr__1051(_1051 ? _1051->raw() : nullptr, _1051 ? _1051->size(0) : 0);
  return __mosek_2fusion_2Model__ranged_variable(std::string (""),_1051,_1052);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(std::shared_ptr< monty::ndarray< int,1 > > _1053,monty::rc_ptr< ::mosek::fusion::LinearDomain > _1054) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1053,_1054); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(std::shared_ptr< monty::ndarray< int,1 > > _1053,monty::rc_ptr< ::mosek::fusion::LinearDomain > _1054) { return __mosek_2fusion_2Model__variable(_1053,_1054); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(std::shared_ptr< monty::ndarray< int,1 > > _1053,monty::rc_ptr< ::mosek::fusion::LinearDomain > _1054){
  _checked_ptr_1<int> _ptr__1053(_1053 ? _1053->raw() : nullptr, _1053 ? _1053->size(0) : 0);
  return __mosek_2fusion_2Model__variable_(std::string (""),_1053,_1054);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(std::shared_ptr< monty::ndarray< int,1 > > _1055) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1055); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(std::shared_ptr< monty::ndarray< int,1 > > _1055) { return __mosek_2fusion_2Model__variable(_1055); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(std::shared_ptr< monty::ndarray< int,1 > > _1055){
  _checked_ptr_1<int> _ptr__1055(_1055 ? _1055->raw() : nullptr, _1055 ? _1055->size(0) : 0);
  return __mosek_2fusion_2Model__variable_(std::string (""),_1055,::mosek::fusion::p_Domain::unbounded());
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(int _1056,monty::rc_ptr< ::mosek::fusion::ConeDomain > _1057) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1056,_1057); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(int _1056,monty::rc_ptr< ::mosek::fusion::ConeDomain > _1057) { return __mosek_2fusion_2Model__variable(_1056,_1057); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(int _1056,monty::rc_ptr< ::mosek::fusion::ConeDomain > _1057){
  return __mosek_2fusion_2Model__variable_(std::string (""),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_1056)}),_1057);
}
monty::rc_ptr< ::mosek::fusion::RangedVariable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(int _1058,monty::rc_ptr< ::mosek::fusion::RangeDomain > _1059) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1058,_1059); }monty::rc_ptr< ::mosek::fusion::RangedVariable > mosek::fusion::Model::variable(int _1058,monty::rc_ptr< ::mosek::fusion::RangeDomain > _1059) { return __mosek_2fusion_2Model__variable(_1058,_1059); }
monty::rc_ptr< ::mosek::fusion::RangedVariable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(int _1058,monty::rc_ptr< ::mosek::fusion::RangeDomain > _1059){
  return __mosek_2fusion_2Model__ranged_variable(std::string (""),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_1058)}),_1059);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(int _1060,monty::rc_ptr< ::mosek::fusion::LinearDomain > _1061) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1060,_1061); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(int _1060,monty::rc_ptr< ::mosek::fusion::LinearDomain > _1061) { return __mosek_2fusion_2Model__variable(_1060,_1061); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(int _1060,monty::rc_ptr< ::mosek::fusion::LinearDomain > _1061){
  return __mosek_2fusion_2Model__variable_(std::string (""),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_1060)}),_1061);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(int _1062) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1062); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(int _1062) { return __mosek_2fusion_2Model__variable(_1062); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(int _1062){
  return __mosek_2fusion_2Model__variable_(std::string (""),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_1062)}),::mosek::fusion::p_Domain::unbounded());
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable() { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable() { return __mosek_2fusion_2Model__variable(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(){
  return __mosek_2fusion_2Model__variable_(std::string (""),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))),::mosek::fusion::p_Domain::unbounded());
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _1063,monty::rc_ptr< ::mosek::fusion::ConeDomain > _1064) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1063,_1064); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _1063,monty::rc_ptr< ::mosek::fusion::ConeDomain > _1064) { return __mosek_2fusion_2Model__variable(_1063,_1064); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _1063,monty::rc_ptr< ::mosek::fusion::ConeDomain > _1064){
  return __mosek_2fusion_2Model__variable_(_1063,std::shared_ptr< monty::ndarray< int,1 > >(nullptr),_1064);
}
monty::rc_ptr< ::mosek::fusion::RangedVariable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _1065,monty::rc_ptr< ::mosek::fusion::RangeDomain > _1066) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1065,_1066); }monty::rc_ptr< ::mosek::fusion::RangedVariable > mosek::fusion::Model::variable(const std::string &  _1065,monty::rc_ptr< ::mosek::fusion::RangeDomain > _1066) { return __mosek_2fusion_2Model__variable(_1065,_1066); }
monty::rc_ptr< ::mosek::fusion::RangedVariable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _1065,monty::rc_ptr< ::mosek::fusion::RangeDomain > _1066){
  return __mosek_2fusion_2Model__ranged_variable(_1065,std::shared_ptr< monty::ndarray< int,1 > >(nullptr),_1066);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _1067,monty::rc_ptr< ::mosek::fusion::LinearDomain > _1068) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1067,_1068); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _1067,monty::rc_ptr< ::mosek::fusion::LinearDomain > _1068) { return __mosek_2fusion_2Model__variable(_1067,_1068); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _1067,monty::rc_ptr< ::mosek::fusion::LinearDomain > _1068){
  return __mosek_2fusion_2Model__variable_(_1067,std::shared_ptr< monty::ndarray< int,1 > >(nullptr),_1068);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _1069,std::shared_ptr< monty::ndarray< int,1 > > _1070,monty::rc_ptr< ::mosek::fusion::ConeDomain > _1071) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1069,_1070,_1071); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _1069,std::shared_ptr< monty::ndarray< int,1 > > _1070,monty::rc_ptr< ::mosek::fusion::ConeDomain > _1071) { return __mosek_2fusion_2Model__variable(_1069,_1070,_1071); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _1069,std::shared_ptr< monty::ndarray< int,1 > > _1070,monty::rc_ptr< ::mosek::fusion::ConeDomain > _1071){
  _checked_ptr_1<int> _ptr__1070(_1070 ? _1070->raw() : nullptr, _1070 ? _1070->size(0) : 0);
  return __mosek_2fusion_2Model__variable_(_1069,_1070,_1071);
}
monty::rc_ptr< ::mosek::fusion::RangedVariable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _1072,std::shared_ptr< monty::ndarray< int,1 > > _1073,monty::rc_ptr< ::mosek::fusion::RangeDomain > _1074) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1072,_1073,_1074); }monty::rc_ptr< ::mosek::fusion::RangedVariable > mosek::fusion::Model::variable(const std::string &  _1072,std::shared_ptr< monty::ndarray< int,1 > > _1073,monty::rc_ptr< ::mosek::fusion::RangeDomain > _1074) { return __mosek_2fusion_2Model__variable(_1072,_1073,_1074); }
monty::rc_ptr< ::mosek::fusion::RangedVariable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _1072,std::shared_ptr< monty::ndarray< int,1 > > _1073,monty::rc_ptr< ::mosek::fusion::RangeDomain > _1074){
  _checked_ptr_1<int> _ptr__1073(_1073 ? _1073->raw() : nullptr, _1073 ? _1073->size(0) : 0);
  return __mosek_2fusion_2Model__ranged_variable(_1072,_1073,_1074);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _1075,std::shared_ptr< monty::ndarray< int,1 > > _1076,monty::rc_ptr< ::mosek::fusion::LinearDomain > _1077) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1075,_1076,_1077); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _1075,std::shared_ptr< monty::ndarray< int,1 > > _1076,monty::rc_ptr< ::mosek::fusion::LinearDomain > _1077) { return __mosek_2fusion_2Model__variable(_1075,_1076,_1077); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _1075,std::shared_ptr< monty::ndarray< int,1 > > _1076,monty::rc_ptr< ::mosek::fusion::LinearDomain > _1077){
  _checked_ptr_1<int> _ptr__1076(_1076 ? _1076->raw() : nullptr, _1076 ? _1076->size(0) : 0);
  return __mosek_2fusion_2Model__variable_(_1075,_1076,_1077);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _1078,std::shared_ptr< monty::ndarray< int,1 > > _1079) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1078,_1079); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _1078,std::shared_ptr< monty::ndarray< int,1 > > _1079) { return __mosek_2fusion_2Model__variable(_1078,_1079); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _1078,std::shared_ptr< monty::ndarray< int,1 > > _1079){
  _checked_ptr_1<int> _ptr__1079(_1079 ? _1079->raw() : nullptr, _1079 ? _1079->size(0) : 0);
  return __mosek_2fusion_2Model__variable_(_1078,_1079,::mosek::fusion::p_Domain::unbounded());
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _1080,int _1081,monty::rc_ptr< ::mosek::fusion::ConeDomain > _1082) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1080,_1081,_1082); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _1080,int _1081,monty::rc_ptr< ::mosek::fusion::ConeDomain > _1082) { return __mosek_2fusion_2Model__variable(_1080,_1081,_1082); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _1080,int _1081,monty::rc_ptr< ::mosek::fusion::ConeDomain > _1082){
  return __mosek_2fusion_2Model__variable_(_1080,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_1081)}),_1082);
}
monty::rc_ptr< ::mosek::fusion::RangedVariable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _1083,int _1084,monty::rc_ptr< ::mosek::fusion::RangeDomain > _1085) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1083,_1084,_1085); }monty::rc_ptr< ::mosek::fusion::RangedVariable > mosek::fusion::Model::variable(const std::string &  _1083,int _1084,monty::rc_ptr< ::mosek::fusion::RangeDomain > _1085) { return __mosek_2fusion_2Model__variable(_1083,_1084,_1085); }
monty::rc_ptr< ::mosek::fusion::RangedVariable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _1083,int _1084,monty::rc_ptr< ::mosek::fusion::RangeDomain > _1085){
  return __mosek_2fusion_2Model__ranged_variable(_1083,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_1084)}),_1085);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _1086,int _1087,monty::rc_ptr< ::mosek::fusion::LinearDomain > _1088) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1086,_1087,_1088); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _1086,int _1087,monty::rc_ptr< ::mosek::fusion::LinearDomain > _1088) { return __mosek_2fusion_2Model__variable(_1086,_1087,_1088); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _1086,int _1087,monty::rc_ptr< ::mosek::fusion::LinearDomain > _1088){
  return __mosek_2fusion_2Model__variable_(_1086,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_1087)}),_1088);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _1089,int _1090) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1089,_1090); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _1089,int _1090) { return __mosek_2fusion_2Model__variable(_1089,_1090); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _1089,int _1090){
  return __mosek_2fusion_2Model__variable_(_1089,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_1090)}),::mosek::fusion::p_Domain::unbounded());
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__variable(const std::string & _1091) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__variable(_1091); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::variable(const std::string &  _1091) { return __mosek_2fusion_2Model__variable(_1091); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable(const std::string & _1091){
  return __mosek_2fusion_2Model__variable_(_1091,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))),::mosek::fusion::p_Domain::unbounded());
}
void mosek::fusion::p_Model::removeConstraintBlock(int _1092){
  int _1093 = natconmap->blocksize(_1092);
  std::shared_ptr< monty::ndarray< int,1 > > _1094 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1093)));
  _checked_ptr_1<int> _ptr__1094(_1094 ? _1094->raw() : nullptr,_1094 ? _1094->size(0) : 0);
  if ((((*natconmap_slackidx)(_ptr__1094[(int)0])) != (int)0))
  {
    {
      int _1095 = ((*natvarmap_idx)(((*natconmap_slackidx)(_ptr__1094[(int)0]))));
      removeVariableBlock((long long)(_1095));
    }
  }
  {}
  natconmap->get(_1092,_1094,(int)0);
  natconmap->free(_1092);
  int _8958 = (int)0;
  int _8959 = _1093;
  for (int _1096 = _8958; _1096 < _8959; ++_1096)
  {
    {
      ((*natconmap_blockid)(_ptr__1094[_1096])) = (-(int)1);
      ((*natconmap_slackidx)(_ptr__1094[_1096])) = (int)0;
      ((*natconmap_idx)(_ptr__1094[_1096])) = (-(int)1);
      if ((((*natconmap_coderowptrb)(_ptr__1094[_1096])) < ((*natconmap_coderowptre)(_ptr__1094[_1096]))))
      {
        {
          natconmap_numparameterized -= (((*natconmap_coderowptre)(_ptr__1094[_1096])) - ((*natconmap_coderowptrb)(_ptr__1094[_1096])));
          ((*natconmap_coderowptrb)(_ptr__1094[_1096])) = ((*natconmap_coderowptre)(_ptr__1094[_1096]));
        }
      }
      {}
    }
  }
  task_con_putboundlist_fr(_1094);
  task_cleararowlist(_1094);
}
void mosek::fusion::p_Model::removeVariableBlock(long long _1097){
  if ((natconmap_numparameterized > (int)0))
  {
    {
      throw ::mosek::fusion::DeletionError(std::string ("Cannot remove variables in parameterized model"));
    }
  }
  {}
  if ((_1097 < (int)0))
  {
    {
      throw ::mosek::fusion::DeletionError(std::string ("PSD variables cannot be removed"));
    }
  }
  else
  {
    {
      int _1098 = (int)_1097;
      int _1099 = natvarmap->blocksize(_1098);
      std::shared_ptr< monty::ndarray< int,1 > > _1100 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1099)));
      _checked_ptr_1<int> _ptr__1100(_1100 ? _1100->raw() : nullptr,_1100 ? _1100->size(0) : 0);
      natvarmap->get(_1098,_1100,(int)0);
      natvarmap->free(_1098);
      if ((((*natvarmap_type)(_1098)) > (int)5))
      {
        {
          int _1101 = (((*natvarmap_type)(_1098)) - (int)6);
          int _1102 = natconemap->blocksize(_1101);
          std::shared_ptr< monty::ndarray< int,1 > > _1103 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1102)));
          _checked_ptr_1<int> _ptr__1103(_1103 ? _1103->raw() : nullptr,_1103 ? _1103->size(0) : 0);
          natconemap->get(_1101,_1103,(int)0);
          natconemap->free(_1101);
          ((*natconemap_dim)(_1101)) = (int)0;
          task_clear_cones(_1103);
        }
      }
      {}
      ((*natvarmap_type)(_1098)) = (int)0;
      int _8960 = (int)0;
      int _8961 = _1099;
      for (int _1104 = _8960; _1104 < _8961; ++_1104)
      {
        {
          ((*natvarmap_blockid)(_1104)) = (-(int)1);
          ((*natvarmap_idx)(_1104)) = (-(int)1);
        }
      }
      task_var_putboundlist_fr(_1100);
      task_clearacollist(_1100);
    }
  }
}
monty::rc_ptr< ::mosek::fusion::RangedVariable > mosek::fusion::p_Model::__mosek_2fusion_2Model__ranged_variable(const std::string & _1105,std::shared_ptr< monty::ndarray< int,1 > > _1106,monty::rc_ptr< ::mosek::fusion::RangeDomain > _1107){
  _checked_ptr_1<int> _ptr__1106(_1106 ? _1106->raw() : nullptr, _1106 ? _1106->size(0) : 0);
  if ((((int)((_1105).size()) > (int)0) && hasVariable(_1105)))
  {
    {
      throw ::mosek::fusion::NameError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Duplicate variable name '"))->__mosek_2fusion_2Utils_2StringBuffer__a(_1105)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"))->toString());
    }
  }
  {}
  std::shared_ptr< monty::ndarray< int,1 > > _8962;
  bool _8963 = (NULL != _1106.get());
  if (_8963)
  {
    _8962 = _1106;
  }
  else
  {
    _8962 = mosek::fusion::p_RangeDomain::_get_impl(_1107)->shape;
  }
  std::shared_ptr< monty::ndarray< int,1 > > _1108 = _8962;
  _checked_ptr_1<int> _ptr__1108(_1108 ? _1108->raw() : nullptr,_1108 ? _1108->size(0) : 0);
  if (((NULL != mosek::fusion::p_RangeDomain::_get_impl(_1107)->shape.get()) && (!::mosek::fusion::p_Set::match(mosek::fusion::p_RangeDomain::_get_impl(_1107)->shape,_1108))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching shape and domain"));
    }
  }
  {}
  if ((NULL == _1108.get()))
  {
    {
      _1108 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0)));
      _ptr__1108.update(_1108 ? _1108->raw() : nullptr, _1108 ? _1108->size(0) : 0);
    }
  }
  {}
  int _1109 = (int)((_1108)->size(0));
  std::shared_ptr< monty::ndarray< int,1 > > _1110 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1109)));
  _checked_ptr_1<int> _ptr__1110(_1110 ? _1110->raw() : nullptr,_1110 ? _1110->size(0) : 0);
  if ((_1109 > (int)0))
  {
    {
      _ptr__1110[(_1109 - (int)1)] = (int)1;
      int _8964 = (int)1;
      int _8965 = _1109;
      for (int _1111 = _8964; _1111 < _8965; ++_1111)
      {
        {
          _ptr__1110[((_1109 - _1111) - (int)1)] = safe_mul( _ptr__1110[(_1109 - _1111)],_ptr__1108[(_1109 - _1111)] );
        }
      }
    }
  }
  {}
  int _1112 = (int)1;
  int _8966 = (int)0;
  int _8967 = (int)((_1108)->size(0));
  for (int _1113 = _8966; _1113 < _8967; ++_1113)
  {
    {
      _1112 *= _ptr__1108[_1113];
    }
  }
  std::shared_ptr< monty::ndarray< long long,1 > > _1114 = nullptr;
  _checked_ptr_1<long long> _ptr__1114(_1114 ? _1114->raw() : nullptr,_1114 ? _1114->size(0) : 0);
  if ((NULL != _1114.get()))
  {
    {
      if (((int)((mosek::fusion::p_RangeDomain::_get_impl(_1107)->sparsity)->size(1)) != _1109))
      {
        {
          throw ::mosek::fusion::SparseFormatError(std::string ("Sparsity pattern is not correct"));
        }
      }
      {}
      _1114 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((mosek::fusion::p_RangeDomain::_get_impl(_1107)->sparsity)->size(0)))));
      _ptr__1114.update(_1114 ? _1114->raw() : nullptr, _1114 ? _1114->size(0) : 0);
      int _8968 = (int)0;
      int _8969 = (int)((mosek::fusion::p_RangeDomain::_get_impl(_1107)->sparsity)->size(0));
      for (int _1115 = _8968; _1115 < _8969; ++_1115)
      {
        {
          int _8970 = (int)0;
          int _8971 = (int)((mosek::fusion::p_RangeDomain::_get_impl(_1107)->sparsity)->size(1));
          for (int _1116 = _8970; _1116 < _8971; ++_1116)
          {
            {
              if (((((*mosek::fusion::p_RangeDomain::_get_impl(_1107)->sparsity)(_1115,_1116)) < (int)0) || (((*mosek::fusion::p_RangeDomain::_get_impl(_1107)->sparsity)(_1115,_1116)) >= _ptr__1108[_1116])))
              {
                {
                  throw ::mosek::fusion::SparseFormatError(std::string ("Sparsity pattern is not correct"));
                }
              }
              {}
            }
          }
          long long _1117 = (int)0;
          int _8972 = (int)0;
          int _8973 = (int)((mosek::fusion::p_RangeDomain::_get_impl(_1107)->sparsity)->size(1));
          for (int _1118 = _8972; _1118 < _8973; ++_1118)
          {
            {
              _1117 += safe_mul( _ptr__1110[_1118],((*mosek::fusion::p_RangeDomain::_get_impl(_1107)->sparsity)(_1115,_1118)) );
            }
          }
          _ptr__1114[_1115] = _1117;
        }
      }
    }
  }
  {}
  int _8974;
  bool _8975 = (NULL != _1114.get());
  if (_8975)
  {
    _8974 = (int)((_1114)->size(0));
  }
  else
  {
    _8974 = _1112;
  }
  int _1119 = _8974;
  std::shared_ptr< monty::ndarray< double,1 > > _1120;
  _checked_ptr_1<double> _ptr__1120(_1120 ? _1120->raw() : nullptr,_1120 ? _1120->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1121;
  _checked_ptr_1<double> _ptr__1121(_1121 ? _1121->raw() : nullptr,_1121 ? _1121->size(0) : 0);
  if (mosek::fusion::p_RangeDomain::_get_impl(_1107)->scalable)
  {
    {
      std::vector<double> _8976;
      for (int _1122 = (int)0, _8977 = _1119; _1122 < _8977 ; ++_1122)
      {
        _8976.push_back(((*mosek::fusion::p_RangeDomain::_get_impl(_1107)->lb)((int)0)));
      }
      auto _8978 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8976.size()),_8976.begin(),_8976.end()));
      _1120 = _8978;
      _ptr__1120.update(_1120 ? _1120->raw() : nullptr, _1120 ? _1120->size(0) : 0);
      std::vector<double> _8979;
      for (int _1123 = (int)0, _8980 = _1119; _1123 < _8980 ; ++_1123)
      {
        _8979.push_back(((*mosek::fusion::p_RangeDomain::_get_impl(_1107)->ub)((int)0)));
      }
      auto _8981 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_8979.size()),_8979.begin(),_8979.end()));
      _1121 = _8981;
      _ptr__1121.update(_1121 ? _1121->raw() : nullptr, _1121 ? _1121->size(0) : 0);
    }
  }
  else
  {
    {
      _1120 = mosek::fusion::p_RangeDomain::_get_impl(_1107)->lb;
      _ptr__1120.update(_1120 ? _1120->raw() : nullptr, _1120 ? _1120->size(0) : 0);
      _1121 = mosek::fusion::p_RangeDomain::_get_impl(_1107)->ub;
      _ptr__1121.update(_1121 ? _1121->raw() : nullptr, _1121 ? _1121->size(0) : 0);
    }
  }
  int _1124 = natvarmap_alloc(_1119);
  std::shared_ptr< monty::ndarray< int,1 > > _1125 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(natvarmap->blocksize(_1124))));
  _checked_ptr_1<int> _ptr__1125(_1125 ? _1125->raw() : nullptr,_1125 ? _1125->size(0) : 0);
  natvarmap->get(_1124,_1125,(int)0);
  int _8982 = (int)0;
  int _8983 = _1119;
  for (int _1126 = _8982; _1126 < _8983; ++_1126)
  {
    {
      ((*natvarmap_idx)(_ptr__1125[_1126])) = _1124;
    }
  }
  task_var_putboundlist_ra(_1125,_1120,_1121);
  monty::rc_ptr< ::mosek::fusion::RangedVariable > _1127 = ::mosek::fusion::p_RangedVariable::_new_RangedVariable(::mosek::fusion::Model::t(_pubthis),_1105,(long long)(_1124),_1108,_1114,_1125);
  if (mosek::fusion::p_RangeDomain::_get_impl(_1107)->cardinal_flag)
  {
    {
      task_var_putintlist(_1125);
    }
  }
  {}
  ((*vars)(_1124)) = (_1127).as<::mosek::fusion::ModelVariable>();
  if (((int)((_1105).size()) > (int)0))
  {
    {
      var_map->setItem(_1105,_1124);
    }
  }
  {}
  return _1127;
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable_(const std::string & _1128,std::shared_ptr< monty::ndarray< int,1 > > _1129,monty::rc_ptr< ::mosek::fusion::ConeDomain > _1130){
  _checked_ptr_1<int> _ptr__1129(_1129 ? _1129->raw() : nullptr, _1129 ? _1129->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _8984;
  bool _8985 = (NULL != _1129.get());
  if (_8985)
  {
    _8984 = _1129;
  }
  else
  {
    _8984 = mosek::fusion::p_ConeDomain::_get_impl(_1130)->shape;
  }
  std::shared_ptr< monty::ndarray< int,1 > > _1131 = _8984;
  _checked_ptr_1<int> _ptr__1131(_1131 ? _1131->raw() : nullptr,_1131 ? _1131->size(0) : 0);
  if ((((int)((_1128).size()) > (int)0) && hasVariable(_1128)))
  {
    {
      throw ::mosek::fusion::NameError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Duplicate variable name '"))->__mosek_2fusion_2Utils_2StringBuffer__a(_1128)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"))->toString());
    }
  }
  {}
  if ((NULL == _1131.get()))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Missing shape"));
    }
  }
  else if(((NULL != mosek::fusion::p_ConeDomain::_get_impl(_1130)->shape.get()) && (!::mosek::fusion::p_Set::match(_1131,mosek::fusion::p_ConeDomain::_get_impl(_1130)->shape))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching shape and domain"));
    }
  }
  else if((_1130->getAxis() >= (int)((_1131)->size(0))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid cone dimension"));
    }
  }
  {}
  int _8986;
  bool _8987 = (NULL != mosek::fusion::p_ConeDomain::_get_impl(_1130)->shape.get());
  if (_8987)
  {
    _8986 = _1130->getAxis();
  }
  else
  {
    _8986 = ((int)((_1131)->size(0)) - (int)1);
  }
  int _1132 = _8986;
  int _1133 = _ptr__1131[_1132];
  int _1134 = (int)((_1131)->size(0));
  std::shared_ptr< monty::ndarray< int,1 > > _1135 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1134)));
  _checked_ptr_1<int> _ptr__1135(_1135 ? _1135->raw() : nullptr,_1135 ? _1135->size(0) : 0);
  _ptr__1135[(_1134 - (int)1)] = (int)1;
  int _8988 = (int)1;
  int _8989 = _1134;
  for (int _1136 = _8988; _1136 < _8989; ++_1136)
  {
    {
      _ptr__1135[((_1134 - _1136) - (int)1)] = safe_mul( _ptr__1135[(_1134 - _1136)],_ptr__1131[(_1134 - _1136)] );
    }
  }
  int _1137 = _ptr__1131[(int)0];
  int _8990 = (int)1;
  int _8991 = (int)((_1131)->size(0));
  for (int _1138 = _8990; _1138 < _8991; ++_1138)
  {
    {
      _1137 *= _ptr__1131[_1138];
    }
  }
  int _1139 = (int)1;
  int _8992 = (int)0;
  int _8993 = _1132;
  for (int _1140 = _8992; _1140 < _8993; ++_1140)
  {
    {
      _1139 *= _ptr__1131[_1140];
    }
  }
  int _1141 = (int)1;
  int _8994 = safe_add( _1132,(int)1 );
  int _8995 = _1134;
  for (int _1142 = _8994; _1142 < _8995; ++_1142)
  {
    {
      _1141 *= _ptr__1131[_1142];
    }
  }
  int _1143 = safe_mul( _1139,_1141 );
  if ((((mosek::fusion::p_ConeDomain::_get_impl(_1130)->key == ::mosek::fusion::QConeKey::InQCone) && (_1133 < (int)2)) || (((mosek::fusion::p_ConeDomain::_get_impl(_1130)->key == ::mosek::fusion::QConeKey::InRotatedQCone) && (_1133 < (int)3)) || (((mosek::fusion::p_ConeDomain::_get_impl(_1130)->key == ::mosek::fusion::QConeKey::InPExpCone) && (_1133 != (int)3)) || (((mosek::fusion::p_ConeDomain::_get_impl(_1130)->key == ::mosek::fusion::QConeKey::InPPowCone) && (_1133 < (int)2)) || (((mosek::fusion::p_ConeDomain::_get_impl(_1130)->key == ::mosek::fusion::QConeKey::InDExpCone) && (_1133 != (int)3)) || ((mosek::fusion::p_ConeDomain::_get_impl(_1130)->key == ::mosek::fusion::QConeKey::InDPowCone) && (_1133 < (int)2))))))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid size for cone"));
    }
  }
  {}
  int _1144 = natvarmap_alloc(_1137);
  int _1145 = natconemap_alloc(_1143);
  ((*natvarmap_type)(_1144)) = safe_add( _1145,(int)6 );
  std::shared_ptr< monty::ndarray< int,1 > > _1146 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(natvarmap->blocksize(_1144))));
  _checked_ptr_1<int> _ptr__1146(_1146 ? _1146->raw() : nullptr,_1146 ? _1146->size(0) : 0);
  natvarmap->get(_1144,_1146,(int)0);
  int _8996 = (int)0;
  int _8997 = _1137;
  for (int _1147 = _8996; _1147 < _8997; ++_1147)
  {
    {
      ((*natvarmap_idx)(_ptr__1146[_1147])) = _1144;
    }
  }
  task_var_putboundlist_fr(_1146);
  if (mosek::fusion::p_ConeDomain::_get_impl(_1130)->int_flag)
  {
    {
      task_var_putintlist(_1146);
    }
  }
  {}
  std::shared_ptr< monty::ndarray< int,1 > > _1148 = _1146;
  _checked_ptr_1<int> _ptr__1148(_1148 ? _1148->raw() : nullptr,_1148 ? _1148->size(0) : 0);
  if ((_1132 < ((int)((_1131)->size(0)) - (int)1)))
  {
    {
      _1148 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)((_1146)->size(0)))));
      _ptr__1148.update(_1148 ? _1148->raw() : nullptr, _1148 ? _1148->size(0) : 0);
      int _1149 = (int)0;
      int _8998 = (int)0;
      int _8999 = _1139;
      for (int _1150 = _8998; _1150 < _8999; ++_1150)
      {
        {
          int _9000 = (int)0;
          int _9001 = _1141;
          for (int _1151 = _9000; _1151 < _9001; ++_1151)
          {
            {
              int _9002 = (int)0;
              int _9003 = _1133;
              for (int _1152 = _9002; _1152 < _9003; ++_1152)
              {
                {
                  _ptr__1148[_1149] = _ptr__1146[safe_add( safe_mul( safe_add( safe_mul( _1150,_1133 ),_1152 ),_1141 ),_1151 )];
                  ++ _1149;
                }
              }
            }
          }
        }
      }
    }
  }
  {}
  std::shared_ptr< monty::ndarray< int,1 > > _1153 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1143)));
  _checked_ptr_1<int> _ptr__1153(_1153 ? _1153->raw() : nullptr,_1153 ? _1153->size(0) : 0);
  natconemap->get(_1145,_1153,(int)0);
  ((*natconemap_dim)(_1145)) = _1133;
  if ((mosek::fusion::p_ConeDomain::_get_impl(_1130)->key == ::mosek::fusion::QConeKey::InQCone))
  {
    {
      task_put_quadcones(_1153,_1133,_1143,_1148);
    }
  }
  else
  {
    {
      if ((mosek::fusion::p_ConeDomain::_get_impl(_1130)->key == ::mosek::fusion::QConeKey::InRotatedQCone))
      {
        {
          task_put_rquadcones(_1153,_1133,_1143,_1148);
        }
      }
      else
      {
        {
          if ((mosek::fusion::p_ConeDomain::_get_impl(_1130)->key == ::mosek::fusion::QConeKey::InPExpCone))
          {
            {
              task_put_pexpcones(_1153,_1133,_1143,_1148);
            }
          }
          else
          {
            {
              if ((mosek::fusion::p_ConeDomain::_get_impl(_1130)->key == ::mosek::fusion::QConeKey::InPPowCone))
              {
                {
                  std::vector<double> _9004;
                  for (int _1154 = (int)0, _9005 = _1143; _1154 < _9005 ; ++_1154)
                  {
                    _9004.push_back(mosek::fusion::p_ConeDomain::_get_impl(_1130)->alpha);
                  }
                  auto _9006 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9004.size()),_9004.begin(),_9004.end()));
                  task_put_ppowcones(_1153,_1133,_1143,_1148,_9006);
                }
              }
              else
              {
                {
                  if ((mosek::fusion::p_ConeDomain::_get_impl(_1130)->key == ::mosek::fusion::QConeKey::InDExpCone))
                  {
                    {
                      task_put_dexpcones(_1153,_1133,_1143,_1148);
                    }
                  }
                  else
                  {
                    {
                      if ((mosek::fusion::p_ConeDomain::_get_impl(_1130)->key == ::mosek::fusion::QConeKey::InDPowCone))
                      {
                        {
                          std::vector<double> _9007;
                          for (int _1155 = (int)0, _9008 = _1143; _1155 < _9008 ; ++_1155)
                          {
                            _9007.push_back(mosek::fusion::p_ConeDomain::_get_impl(_1130)->alpha);
                          }
                          auto _9009 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9007.size()),_9007.begin(),_9007.end()));
                          task_put_dpowcones(_1153,_1133,_1143,_1148,_9009);
                        }
                      }
                      {}
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  int _9010 = (int)0;
  int _9011 = (int)((_1153)->size(0));
  for (int _1156 = _9010; _1156 < _9011; ++_1156)
  {
    {
      task_cone_name(_ptr__1153[_1156],::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(_ptr__1153[_1156])->toString());
    }
  }
  monty::rc_ptr< ::mosek::fusion::ConicVariable > _1157 = ::mosek::fusion::p_ConicVariable::_new_ConicVariable(::mosek::fusion::Model::t(_pubthis),_1128,_1144,_1131,_1146);
  ((*vars)(_1144)) = (_1157).as<::mosek::fusion::ModelVariable>();
  if (((int)((_1128).size()) > (int)0))
  {
    {
      var_map->setItem(_1128,_1144);
    }
  }
  {}
  return (_1157).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable_(const std::string & _1158,std::shared_ptr< monty::ndarray< int,1 > > _1159,monty::rc_ptr< ::mosek::fusion::LinearDomain > _1160){
  _checked_ptr_1<int> _ptr__1159(_1159 ? _1159->raw() : nullptr, _1159 ? _1159->size(0) : 0);
  if ((((int)((_1158).size()) > (int)0) && hasVariable(_1158)))
  {
    {
      throw ::mosek::fusion::NameError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Duplicate variable name '"))->__mosek_2fusion_2Utils_2StringBuffer__a(_1158)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"))->toString());
    }
  }
  {}
  std::shared_ptr< monty::ndarray< int,1 > > _9012;
  bool _9013 = (NULL != _1159.get());
  if (_9013)
  {
    _9012 = _1159;
  }
  else
  {
    _9012 = mosek::fusion::p_LinearDomain::_get_impl(_1160)->shape;
  }
  std::shared_ptr< monty::ndarray< int,1 > > _1161 = _9012;
  _checked_ptr_1<int> _ptr__1161(_1161 ? _1161->raw() : nullptr,_1161 ? _1161->size(0) : 0);
  if (((NULL != mosek::fusion::p_LinearDomain::_get_impl(_1160)->shape.get()) && (!::mosek::fusion::p_Set::match(mosek::fusion::p_LinearDomain::_get_impl(_1160)->shape,_1161))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching shape and domain"));
    }
  }
  {}
  if ((NULL == _1161.get()))
  {
    {
      _1161 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0)));
      _ptr__1161.update(_1161 ? _1161->raw() : nullptr, _1161 ? _1161->size(0) : 0);
    }
  }
  {}
  int _1162 = (int)((_1161)->size(0));
  std::shared_ptr< monty::ndarray< int,1 > > _1163 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1162)));
  _checked_ptr_1<int> _ptr__1163(_1163 ? _1163->raw() : nullptr,_1163 ? _1163->size(0) : 0);
  if ((_1162 > (int)0))
  {
    {
      _ptr__1163[(_1162 - (int)1)] = (int)1;
      int _9014 = (int)1;
      int _9015 = _1162;
      for (int _1164 = _9014; _1164 < _9015; ++_1164)
      {
        {
          _ptr__1163[((_1162 - _1164) - (int)1)] = safe_mul( _ptr__1163[(_1162 - _1164)],_ptr__1161[(_1162 - _1164)] );
        }
      }
    }
  }
  {}
  int _1165 = (int)1;
  int _9016 = (int)0;
  int _9017 = (int)((_1161)->size(0));
  for (int _1166 = _9016; _1166 < _9017; ++_1166)
  {
    {
      _1165 *= _ptr__1161[_1166];
    }
  }
  std::shared_ptr< monty::ndarray< long long,1 > > _1167 = nullptr;
  _checked_ptr_1<long long> _ptr__1167(_1167 ? _1167->raw() : nullptr,_1167 ? _1167->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _1168 = nullptr;
  _checked_ptr_1<int> _ptr__1168(_1168 ? _1168->raw() : nullptr,_1168 ? _1168->size(0) : 0);
  if (mosek::fusion::p_LinearDomain::_get_impl(_1160)->empty)
  {
    {
      _1167 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)0)));
      _ptr__1167.update(_1167 ? _1167->raw() : nullptr, _1167 ? _1167->size(0) : 0);
    }
  }
  else if((NULL != mosek::fusion::p_LinearDomain::_get_impl(_1160)->sparsity.get()))
  {
    {
      if (((int)((mosek::fusion::p_LinearDomain::_get_impl(_1160)->sparsity)->size(1)) != _1162))
      {
        {
          throw ::mosek::fusion::SparseFormatError(std::string ("Sparsity pattern is not correct"));
        }
      }
      {}
      int _1169 = (int)((mosek::fusion::p_LinearDomain::_get_impl(_1160)->sparsity)->size(0));
      _1167 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1169)));
      _ptr__1167.update(_1167 ? _1167->raw() : nullptr, _1167 ? _1167->size(0) : 0);
      {
        bool _1170 = false;
        std::shared_ptr< monty::ndarray< int,2 > > _1171 = mosek::fusion::p_LinearDomain::_get_impl(_1160)->sparsity;
        int _9018 = (int)0;
        int _9019 = _1169;
        for (int _1172 = _9018; _1172 < _9019; ++_1172)
        {
          {
            int _9020 = (int)0;
            int _9021 = (int)((_1171)->size(1));
            for (int _1173 = _9020; _1173 < _9021; ++_1173)
            {
              {
                _1170 = (_1170 || ((((*_1171)(_1172,_1173)) < (int)0) || (((*_1171)(_1172,_1173)) >= _ptr__1161[_1173])));
              }
            }
            if ((!_1170))
            {
              {
                long long _1174 = (int)0;
                int _9022 = (int)0;
                int _9023 = (int)((_1171)->size(1));
                for (int _1175 = _9022; _1175 < _9023; ++_1175)
                {
                  {
                    _1174 += safe_mul( _ptr__1163[_1175],((*_1171)(_1172,_1175)) );
                  }
                }
                _ptr__1167[_1172] = _1174;
              }
            }
            {}
          }
        }
        if (_1170)
        {
          {
            throw ::mosek::fusion::SparseFormatError(std::string ("Sparsity pattern is out of bounds"));
          }
        }
        {}
      }
      std::shared_ptr< monty::ndarray< int,2 > > _1176 = mosek::fusion::p_LinearDomain::_get_impl(_1160)->sparsity;
      int _1177 = (int)0;
      int _9024 = (int)0;
      int _9025 = _1162;
      for (int _1178 = _9024; _1178 < _9025; ++_1178)
      {
        {
          if ((_1177 < _ptr__1161[_1178]))
          {
            {
              _1177 = _ptr__1161[_1178];
            }
          }
          {}
        }
      }
      std::shared_ptr< monty::ndarray< int,1 > > _1179 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1169)));
      _checked_ptr_1<int> _ptr__1179(_1179 ? _1179->raw() : nullptr,_1179 ? _1179->size(0) : 0);
      int _9026 = (int)0;
      int _9027 = _1169;
      for (int _1180 = _9026; _1180 < _9027; ++_1180)
      {
        {
          _ptr__1179[_1180] = _1180;
        }
      }
      std::shared_ptr< monty::ndarray< int,1 > > _1181 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1169)));
      _checked_ptr_1<int> _ptr__1181(_1181 ? _1181->raw() : nullptr,_1181 ? _1181->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _1182 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(safe_add( _1177,(int)1 ))));
      _checked_ptr_1<int> _ptr__1182(_1182 ? _1182->raw() : nullptr,_1182 ? _1182->size(0) : 0);
      int _9028 = (int)0;
      int _9029 = _1162;
      for (int _1183 = _9028; _1183 < _9029; ++_1183)
      {
        {
          {
            int _1184 = ((_1162 - _1183) - (int)1);
            int _9030 = (int)0;
            int _9031 = safe_add( _ptr__1161[_1184],(int)1 );
            for (int _1185 = _9030; _1185 < _9031; ++_1185)
            {
              {
                _ptr__1182[_1185] = (int)0;
              }
            }
            int _9032 = (int)0;
            int _9033 = _1169;
            for (int _1186 = _9032; _1186 < _9033; ++_1186)
            {
              {
                ++ _ptr__1182[safe_add( ((*_1176)(_1186,_1184)),(int)1 )];
              }
            }
            int _9034 = (int)0;
            int _9035 = _ptr__1161[_1184];
            for (int _1187 = _9034; _1187 < _9035; ++_1187)
            {
              {
                _ptr__1182[safe_add( _1187,(int)1 )] += _ptr__1182[_1187];
              }
            }
            int _9036 = (int)0;
            int _9037 = _1169;
            for (int _1188 = _9036; _1188 < _9037; ++_1188)
            {
              {
                int _1189 = _ptr__1179[_1188];
                _ptr__1181[_ptr__1182[((*_1176)(_1189,_1184))]] = _1189;
                ++ _ptr__1182[((*_1176)(_1189,_1184))];
              }
            }
          }
          std::shared_ptr< monty::ndarray< int,1 > > _1190 = _1179;
          _checked_ptr_1<int> _ptr__1190(_1190 ? _1190->raw() : nullptr,_1190 ? _1190->size(0) : 0);
          _1179 = _1181;
          _ptr__1179.update(_1179 ? _1179->raw() : nullptr, _1179 ? _1179->size(0) : 0);
          _1181 = _1190;
          _ptr__1181.update(_1181 ? _1181->raw() : nullptr, _1181 ? _1181->size(0) : 0);
        }
      }
      int _9038 = (int)0;
      int _9039 = _1169;
      for (int _1191 = _9038; _1191 < _9039; ++_1191)
      {
        {
          int _1192 = _ptr__1179[_1191];
          long long _1193 = (int)0;
          int _9040 = (int)0;
          int _9041 = _1162;
          for (int _1194 = _9040; _1194 < _9041; ++_1194)
          {
            {
              _1193 += safe_mul( _ptr__1163[_1194],((*_1176)(_1192,_1194)) );
            }
          }
          _ptr__1167[_1191] = _1193;
        }
      }
    }
  }
  {}
  int _9042;
  bool _9043 = (NULL != _1167.get());
  if (_9043)
  {
    _9042 = (int)((_1167)->size(0));
  }
  else
  {
    _9042 = _1165;
  }
  int _1195 = _9042;
  std::shared_ptr< monty::ndarray< double,1 > > _1196 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_1195)));
  _checked_ptr_1<double> _ptr__1196(_1196 ? _1196->raw() : nullptr,_1196 ? _1196->size(0) : 0);
  if ((NULL != mosek::fusion::p_LinearDomain::_get_impl(_1160)->bnd.get()))
  {
    {
      if (((int)((mosek::fusion::p_LinearDomain::_get_impl(_1160)->bnd)->size(0)) == (int)1))
      {
        {
          int _9044 = (int)0;
          int _9045 = _1195;
          for (int _1197 = _9044; _1197 < _9045; ++_1197)
          {
            {
              _ptr__1196[_1197] = ((*mosek::fusion::p_LinearDomain::_get_impl(_1160)->bnd)((int)0));
            }
          }
        }
      }
      else if(((int)((mosek::fusion::p_LinearDomain::_get_impl(_1160)->bnd)->size(0)) == _1195))
      {
        {
          ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_LinearDomain::_get_impl(_1160)->bnd,(int)0,_1196,(int)0,_1195);
        }
      }
      else
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Invalid right hand side shape in domain"));
        }
      }
    }
  }
  {}
  int _1198 = natvarmap_alloc(_1195);
  std::shared_ptr< monty::ndarray< int,1 > > _1199 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(natvarmap->blocksize(_1198))));
  _checked_ptr_1<int> _ptr__1199(_1199 ? _1199->raw() : nullptr,_1199 ? _1199->size(0) : 0);
  natvarmap->get(_1198,_1199,(int)0);
  int _9046 = (int)0;
  int _9047 = _1195;
  for (int _1200 = _9046; _1200 < _9047; ++_1200)
  {
    {
      ((*natvarmap_idx)(_ptr__1199[_1200])) = _1198;
    }
  }
  if ((mosek::fusion::p_LinearDomain::_get_impl(_1160)->key == ::mosek::fusion::RelationKey::IsFree))
  {
    {
      task_var_putboundlist_fr(_1199);
      ((*natvarmap_type)(_1198)) = (int)1;
    }
  }
  {}
  if ((mosek::fusion::p_LinearDomain::_get_impl(_1160)->key == ::mosek::fusion::RelationKey::LessThan))
  {
    {
      task_var_putboundlist_up(_1199,_1196);
      ((*natvarmap_type)(_1198)) = (int)3;
    }
  }
  else if((mosek::fusion::p_LinearDomain::_get_impl(_1160)->key == ::mosek::fusion::RelationKey::GreaterThan))
  {
    {
      task_var_putboundlist_lo(_1199,_1196);
      ((*natvarmap_type)(_1198)) = (int)2;
    }
  }
  else if((mosek::fusion::p_LinearDomain::_get_impl(_1160)->key == ::mosek::fusion::RelationKey::EqualsTo))
  {
    {
      task_var_putboundlist_fx(_1199,_1196);
      ((*natvarmap_type)(_1198)) = (int)5;
    }
  }
  {}
  monty::rc_ptr< ::mosek::fusion::LinearVariable > _1201 = ::mosek::fusion::p_LinearVariable::_new_LinearVariable(::mosek::fusion::Model::t(_pubthis),_1158,(long long)(_1198),_1161,_1167,_1199);
  if (mosek::fusion::p_LinearDomain::_get_impl(_1160)->cardinal_flag)
  {
    {
      task_var_putintlist(_1199);
    }
  }
  {}
  ((*vars)(_1198)) = (_1201).as<::mosek::fusion::ModelVariable>();
  if (((int)((_1158).size()) > (int)0))
  {
    {
      var_map->setItem(_1158,_1198);
    }
  }
  {}
  return (_1201).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable_(const std::string & _1202,std::shared_ptr< monty::ndarray< int,1 > > _1203,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _1204){
  _checked_ptr_1<int> _ptr__1203(_1203 ? _1203->raw() : nullptr, _1203 ? _1203->size(0) : 0);
  if ((((int)((_1202).size()) > (int)0) && hasVariable(_1202)))
  {
    {
      throw ::mosek::fusion::NameError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Duplicate variable name '"))->__mosek_2fusion_2Utils_2StringBuffer__a(_1202)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"))->toString());
    }
  }
  {}
  std::shared_ptr< monty::ndarray< int,1 > > _9048;
  bool _9049 = (NULL != _1203.get());
  if (_9049)
  {
    _9048 = _1203;
  }
  else
  {
    _9048 = mosek::fusion::p_LinPSDDomain::_get_impl(_1204)->shape;
  }
  std::shared_ptr< monty::ndarray< int,1 > > _1205 = _9048;
  _checked_ptr_1<int> _ptr__1205(_1205 ? _1205->raw() : nullptr,_1205 ? _1205->size(0) : 0);
  if ((NULL == _1205.get()))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Missing shape for variable"));
    }
  }
  else if(((NULL != mosek::fusion::p_LinPSDDomain::_get_impl(_1204)->shape.get()) && (!::mosek::fusion::p_Set::match(mosek::fusion::p_LinPSDDomain::_get_impl(_1204)->shape,_1205))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching shape and domain"));
    }
  }
  {}
  int _1206 = (int)((_1205)->size(0));
  int _9050;
  bool _9051 = (NULL != mosek::fusion::p_LinPSDDomain::_get_impl(_1204)->shape.get());
  if (_9051)
  {
    _9050 = mosek::fusion::p_LinPSDDomain::_get_impl(_1204)->conedim;
  }
  else
  {
    _9050 = (_1206 - (int)1);
  }
  int _1207 = _9050;
  if (((_1207 < (int)0) || (_1207 >= _1206)))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid cone direction dimension"));
    }
  }
  {}
  int _1208 = _ptr__1205[_1207];
  int _1209 = (int)((::mosek::fusion::Utils::Tools::sqrt((double)(safe_add( (int)1,safe_mul( (int)8,_1208 ) ))) - (int)1) / (int)2);
  if (((safe_mul( _1209,safe_add( _1209,(int)1 ) ) / (int)2) != _1208))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid size for semidefinite variable"));
    }
  }
  {}
  int _1210 = (int)1;
  int _1211 = _ptr__1205[_1207];
  int _1212 = (int)1;
  int _9052 = (int)0;
  int _9053 = _1207;
  for (int _1213 = _9052; _1213 < _9053; ++_1213)
  {
    {
      _1212 *= _ptr__1205[_1213];
    }
  }
  int _9054 = safe_add( _1207,(int)1 );
  int _9055 = _1206;
  for (int _1214 = _9054; _1214 < _9055; ++_1214)
  {
    {
      _1210 *= _ptr__1205[_1214];
    }
  }
  int _1215 = safe_mul( _1212,_1210 );
  int _1216 = safe_mul( _1215,_1208 );
  int _1217 = natbarvarmap_alloc(_1215,_1209);
  std::shared_ptr< monty::ndarray< int,1 > > _1218 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1215)));
  _checked_ptr_1<int> _ptr__1218(_1218 ? _1218->raw() : nullptr,_1218 ? _1218->size(0) : 0);
  natbarvarmap_get(_1217,_1218);
  std::shared_ptr< monty::ndarray< long long,1 > > _1219 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_mul( _1215,_1211 ))));
  _checked_ptr_1<long long> _ptr__1219(_1219 ? _1219->raw() : nullptr,_1219 ? _1219->size(0) : 0);
  {
    int _1220 = (int)0;
    int _9056 = (int)0;
    int _9057 = _1212;
    for (int _1221 = _9056; _1221 < _9057; ++_1221)
    {
      {
        int _9058 = (int)0;
        int _9059 = _1208;
        for (int _1222 = _9058; _1222 < _9059; ++_1222)
        {
          {
            int _9060 = (int)0;
            int _9061 = _1210;
            for (int _1223 = _9060; _1223 < _9061; ++_1223)
            {
              {
                _ptr__1219[_1220] = safe_add( ((*natbarvar_ptr)(_ptr__1218[safe_add( safe_mul( _1221,_1210 ),_1223 )])),_1222 );
                ++ _1220;
              }
            }
          }
        }
      }
    }
  }
  monty::rc_ptr< ::mosek::fusion::LinearPSDVariable > _1224 = ::mosek::fusion::p_LinearPSDVariable::_new_LinearPSDVariable(::mosek::fusion::Model::t(_pubthis),_1202,_1217,_1205,_1207,_1219);
  ((*barvars)(_1217)) = (_1224).as<::mosek::fusion::ModelVariable>();
  if (((int)((_1202).size()) > (int)0))
  {
    {
      var_map->setItem(_1202,(-safe_add( _1217,(int)1 )));
    }
  }
  {}
  return (_1224).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::SymmetricVariable > mosek::fusion::p_Model::__mosek_2fusion_2Model__variable_(const std::string & _1225,std::shared_ptr< monty::ndarray< int,1 > > _1226,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1227){
  _checked_ptr_1<int> _ptr__1226(_1226 ? _1226->raw() : nullptr, _1226 ? _1226->size(0) : 0);
  if ((((int)((_1225).size()) > (int)0) && hasVariable(_1225)))
  {
    {
      throw ::mosek::fusion::NameError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Duplicate variable name '"))->__mosek_2fusion_2Utils_2StringBuffer__a(_1225)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"))->toString());
    }
  }
  {}
  std::shared_ptr< monty::ndarray< int,1 > > _1228 = _1226;
  _checked_ptr_1<int> _ptr__1228(_1228 ? _1228->raw() : nullptr,_1228 ? _1228->size(0) : 0);
  if ((NULL == _1228.get()))
  {
    {
      _1228 = mosek::fusion::p_PSDDomain::_get_impl(_1227)->shape;
      _ptr__1228.update(_1228 ? _1228->raw() : nullptr, _1228 ? _1228->size(0) : 0);
    }
  }
  {}
  if ((NULL == _1228.get()))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Missing shape for variable"));
    }
  }
  {}
  int _1229 = mosek::fusion::p_PSDDomain::_get_impl(_1227)->conedim1;
  int _1230 = mosek::fusion::p_PSDDomain::_get_impl(_1227)->conedim2;
  int _1231 = (int)((_1228)->size(0));
  int _1232 = _ptr__1228[_1229];
  if ((_1229 > _1230))
  {
    {
      int _1233 = _1229;
      _1229 = _1230;
      _1230 = _1233;
    }
  }
  {}
  if (((_1229 == _1230) || ((_1229 < (int)0) || (_1230 >= _1231))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid cone order dimensions for semidefinite variables"));
    }
  }
  {}
  if ((_ptr__1228[_1229] != _ptr__1228[_1230]))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching shape in cone order dimensions"));
    }
  }
  {}
  int _1234 = (int)1;
  int _9062 = (int)0;
  int _9063 = _1229;
  for (int _1235 = _9062; _1235 < _9063; ++_1235)
  {
    {
      _1234 *= _ptr__1228[_1235];
    }
  }
  int _9064 = safe_add( _1229,(int)1 );
  int _9065 = _1230;
  for (int _1236 = _9064; _1236 < _9065; ++_1236)
  {
    {
      _1234 *= _ptr__1228[_1236];
    }
  }
  int _9066 = safe_add( _1230,(int)1 );
  int _9067 = _1231;
  for (int _1237 = _9066; _1237 < _9067; ++_1237)
  {
    {
      _1234 *= _ptr__1228[_1237];
    }
  }
  int _1238 = (safe_mul( safe_mul( _1234,_1232 ),safe_add( _1232,(int)1 ) ) / (int)2);
  int _1239 = natbarvarmap_alloc(_1234,_1232);
  std::shared_ptr< monty::ndarray< long long,1 > > _1240 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1238)));
  _checked_ptr_1<long long> _ptr__1240(_1240 ? _1240->raw() : nullptr,_1240 ? _1240->size(0) : 0);
  natbarvar_get(_1239,_1240);
  monty::rc_ptr< ::mosek::fusion::PSDVariable > _1241 = ::mosek::fusion::p_PSDVariable::_new_PSDVariable(::mosek::fusion::Model::t(_pubthis),_1225,_1239,_1228,mosek::fusion::p_PSDDomain::_get_impl(_1227)->conedim1,mosek::fusion::p_PSDDomain::_get_impl(_1227)->conedim2,_1240);
  ((*barvars)(_1239)) = (_1241).as<::mosek::fusion::ModelVariable>();
  if (((int)((_1225).size()) > (int)0))
  {
    {
      var_map->setItem(_1225,(-safe_add( _1239,(int)1 )));
    }
  }
  {}
  return (_1241).as<::mosek::fusion::SymmetricVariable>();
}
void mosek::fusion::p_Model::replace_row_code(monty::rc_ptr< ::mosek::fusion::WorkStack > _1242,std::shared_ptr< monty::ndarray< int,1 > > _1243,int _1244,int _1245,int _1246,int _1247,int _1248){
  _checked_ptr_1<int> _ptr__1243(_1243 ? _1243->raw() : nullptr, _1243 ? _1243->size(0) : 0);
  int _1249 = (int)((_1243)->size(0));
  std::shared_ptr< monty::ndarray< int,1 > > _1250 = mosek::fusion::p_WorkStack::_get_impl(_1242)->i32;
  _checked_ptr_1<int> _ptr__1250(_1250 ? _1250->raw() : nullptr,_1250 ? _1250->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _1251 = mosek::fusion::p_WorkStack::_get_impl(_1242)->i64;
  _checked_ptr_1<long long> _ptr__1251(_1251 ? _1251->raw() : nullptr,_1251 ? _1251->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1252 = mosek::fusion::p_WorkStack::_get_impl(_1242)->f64;
  _checked_ptr_1<double> _ptr__1252(_1252 ? _1252->raw() : nullptr,_1252 ? _1252->size(0) : 0);
  bool _1253 = true;
  int _1254 = (int)0;
  int _1255 = (int)0;
  int _9068 = (int)0;
  int _9069 = _1249;
  for (int _1256 = _9068; _1256 < _9069; ++_1256)
  {
    {
      int _9070 = _ptr__1250[safe_add( _1244,_1256 )];
      int _9071 = _ptr__1250[safe_add( safe_add( _1244,_1256 ),(int)1 )];
      for (int _1257 = _9070; _1257 < _9071; ++_1257)
      {
        {
          if ((((_ptr__1250[safe_add( safe_add( _1246,_1257 ),(int)1 )] - _ptr__1250[safe_add( _1246,_1257 )]) == (int)1) && ((_ptr__1250[safe_add( _1247,_ptr__1250[safe_add( _1246,_1257 )] )] == 10) || (_ptr__1250[safe_add( _1247,_ptr__1250[safe_add( _1246,_1257 )] )] == 2))))
          {
            {
            }
          }
          else
          {
            {
              ++ _1254;
              _1255 += (_ptr__1250[safe_add( safe_add( _1246,_1257 ),(int)1 )] - _ptr__1250[safe_add( _1246,_1257 )]);
            }
          }
        }
      }
    }
  }
  int _1258 = natconmap_codenztop;
  int _1259 = natconmap_codeatomtop;
  natconmap_codealloc(_1254,_1255);
  int _9072 = (int)0;
  int _9073 = _1249;
  for (int _1260 = _9072; _1260 < _9073; ++_1260)
  {
    {
      ((*natconmap_coderowptrb)(_ptr__1243[_1260])) = _1258;
      int _9074 = _ptr__1250[safe_add( _1244,_1260 )];
      int _9075 = _ptr__1250[safe_add( safe_add( _1244,_1260 ),(int)1 )];
      for (int _1261 = _9074; _1261 < _9075; ++_1261)
      {
        {
          if ((((_ptr__1250[safe_add( safe_add( _1246,_1261 ),(int)1 )] - _ptr__1250[safe_add( _1246,_1261 )]) == (int)1) && ((_ptr__1250[safe_add( _1247,_ptr__1250[safe_add( _1246,_1261 )] )] == 10) || (_ptr__1250[safe_add( _1247,_ptr__1250[safe_add( _1246,_1261 )] )] == 2))))
          {
            {
            }
          }
          else
          {
            {
              int _9076 = _ptr__1250[safe_add( _1246,_1261 )];
              int _9077 = _ptr__1250[safe_add( safe_add( _1246,_1261 ),(int)1 )];
              for (int _1262 = _9076; _1262 < _9077; ++_1262)
              {
                {
                  ((*natconmap_code)(_1259)) = _ptr__1250[safe_add( _1247,_1262 )];
                  ((*natconmap_cconst)(_1259)) = _ptr__1252[safe_add( _1248,_1262 )];
                  ++ _1259;
                }
              }
              ((*natconmap_codeptr)(safe_add( _1258,(int)1 ))) = _1259;
              ((*natconmap_codenidx)(_1258)) = _ptr__1251[safe_add( _1245,_1261 )];
              _1253 = (_ptr__1251[safe_add( _1245,_1261 )] >= (int)0);
              ++ _1258;
            }
          }
        }
      }
      ((*natconmap_coderowptre)(_ptr__1243[_1260])) = _1258;
    }
  }
  natconmap_numparameterized += _1254;
  if ((!_1253))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Expression contains parameterized SDP non-zero"));
    }
  }
  {}
}
monty::rc_ptr< ::mosek::fusion::RangedConstraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint_(const std::string & _1263,monty::rc_ptr< ::mosek::fusion::Expression > _1264,monty::rc_ptr< ::mosek::fusion::RangeDomain > _1265){
  if ((((int)((_1263).size()) > (int)0) && hasConstraint(_1263)))
  {
    {
      throw ::mosek::fusion::NameError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Duplicate constraint name '"))->__mosek_2fusion_2Utils_2StringBuffer__a(_1263)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"))->toString());
    }
  }
  {}
  if (mosek::fusion::p_RangeDomain::_get_impl(_1265)->cardinal_flag)
  {
    {
      throw ::mosek::fusion::DomainError(std::string ("Integer domain not allowed in a constraint"));
    }
  }
  {}
  monty::rc_ptr< ::mosek::fusion::ExprDense > _1266 = ::mosek::fusion::p_ExprDense::_new_ExprDense((::mosek::fusion::p_ExprOptimizeCode::_new_ExprOptimizeCode((::mosek::fusion::p_ExprCompress::_new_ExprCompress(_1264)).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>());
  _1266->eval(rs,ws,xs);
  rs->pop_expr();
  std::shared_ptr< monty::ndarray< int,1 > > _1267 = mosek::fusion::p_WorkStack::_get_impl(rs)->i32;
  _checked_ptr_1<int> _ptr__1267(_1267 ? _1267->raw() : nullptr,_1267 ? _1267->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _1268 = mosek::fusion::p_WorkStack::_get_impl(rs)->i64;
  _checked_ptr_1<long long> _ptr__1268(_1268 ? _1268->raw() : nullptr,_1268 ? _1268->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1269 = mosek::fusion::p_WorkStack::_get_impl(rs)->f64;
  _checked_ptr_1<double> _ptr__1269(_1269 ? _1269->raw() : nullptr,_1269 ? _1269->size(0) : 0);
  int _1270 = mosek::fusion::p_WorkStack::_get_impl(rs)->nd;
  int _1271 = mosek::fusion::p_WorkStack::_get_impl(rs)->shape_base;
  int _1272 = mosek::fusion::p_WorkStack::_get_impl(rs)->nelem;
  int _1273 = mosek::fusion::p_WorkStack::_get_impl(rs)->nnz;
  int _1274 = mosek::fusion::p_WorkStack::_get_impl(rs)->ncodeatom;
  bool _1275 = mosek::fusion::p_WorkStack::_get_impl(rs)->hassp;
  int _1276 = mosek::fusion::p_WorkStack::_get_impl(rs)->ptr_base;
  int _1277 = mosek::fusion::p_WorkStack::_get_impl(rs)->nidxs_base;
  int _1278 = mosek::fusion::p_WorkStack::_get_impl(rs)->cof_base;
  int _1279 = mosek::fusion::p_WorkStack::_get_impl(rs)->codeptr_base;
  int _1280 = mosek::fusion::p_WorkStack::_get_impl(rs)->code_base;
  int _1281 = mosek::fusion::p_WorkStack::_get_impl(rs)->cconst_base;
  if ((NULL != mosek::fusion::p_RangeDomain::_get_impl(_1265)->shape.get()))
  {
    {
      if (((int)((mosek::fusion::p_RangeDomain::_get_impl(_1265)->shape)->size(0)) != _1270))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Mismatching expression and domain"));
        }
      }
      else
      {
        {
          int _9078 = (int)0;
          int _9079 = _1270;
          for (int _1282 = _9078; _1282 < _9079; ++_1282)
          {
            {
              if ((((*mosek::fusion::p_RangeDomain::_get_impl(_1265)->shape)(_1282)) != _ptr__1267[safe_add( _1271,_1282 )]))
              {
                {
                  throw ::mosek::fusion::DimensionError(std::string ("Mismatching expression and domain"));
                }
              }
              {}
            }
          }
        }
      }
    }
  }
  {}
  int _1283 = (int)1;
  int _9080 = (int)0;
  int _9081 = _1270;
  for (int _1284 = _9080; _1284 < _9081; ++_1284)
  {
    {
      _1283 *= _ptr__1267[safe_add( _1271,_1284 )];
    }
  }
  int _1285 = natconmap_alloc(_1283);
  std::shared_ptr< monty::ndarray< int,1 > > _1286 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1283)));
  _checked_ptr_1<int> _ptr__1286(_1286 ? _1286->raw() : nullptr,_1286 ? _1286->size(0) : 0);
  natconmap->get(_1285,_1286,(int)0);
  int _9082 = (int)0;
  int _9083 = _1283;
  for (int _1287 = _9082; _1287 < _9083; ++_1287)
  {
    {
      ((*natconmap_idx)(_ptr__1286[_1287])) = _1285;
      ((*natconmap_slackidx)(_ptr__1286[_1287])) = (int)0;
    }
  }
  ((*natconmap_type)(_1285)) = (int)4;
  putarows(_1286,rs,_1272,_1273,_1276,_1277,_1278,std::shared_ptr< monty::ndarray< int,1 > >(nullptr));
  xs->clear();
  std::shared_ptr< monty::ndarray< double,1 > > _1288 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_1283)));
  _checked_ptr_1<double> _ptr__1288(_1288 ? _1288->raw() : nullptr,_1288 ? _1288->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1289 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_1283)));
  _checked_ptr_1<double> _ptr__1289(_1289 ? _1289->raw() : nullptr,_1289 ? _1289->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1290 = mosek::fusion::p_RangeDomain::_get_impl(_1265)->lb;
  _checked_ptr_1<double> _ptr__1290(_1290 ? _1290->raw() : nullptr,_1290 ? _1290->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1291 = mosek::fusion::p_RangeDomain::_get_impl(_1265)->ub;
  _checked_ptr_1<double> _ptr__1291(_1291 ? _1291->raw() : nullptr,_1291 ? _1291->size(0) : 0);
  bool _1292 = mosek::fusion::p_RangeDomain::_get_impl(_1265)->empty;
  bool _1293 = mosek::fusion::p_RangeDomain::_get_impl(_1265)->scalable;
  std::shared_ptr< monty::ndarray< int,2 > > _1294 = mosek::fusion::p_RangeDomain::_get_impl(_1265)->sparsity;
  {
    if (_1293)
    {
      {
        int _9084 = (int)0;
        int _9085 = _1283;
        for (int _1295 = _9084; _1295 < _9085; ++_1295)
        {
          {
            _ptr__1288[_1295] = _ptr__1290[(int)0];
            _ptr__1289[_1295] = _ptr__1291[(int)0];
          }
        }
      }
    }
    else if(_1292)
    {
      {
      }
    }
    else if((NULL != _1294.get()))
    {
      {
        std::shared_ptr< monty::ndarray< int,1 > > _1296 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1270)));
        _checked_ptr_1<int> _ptr__1296(_1296 ? _1296->raw() : nullptr,_1296 ? _1296->size(0) : 0);
        _ptr__1296[(_1270 - (int)1)] = (int)1;
        int _9086 = (int)1;
        int _9087 = _1270;
        for (int _1297 = _9086; _1297 < _9087; ++_1297)
        {
          {
            _ptr__1296[((_1270 - _1297) - (int)1)] = safe_mul( _ptr__1296[(_1270 - _1297)],_ptr__1267[(safe_add( _1271,_1270 ) - _1297)] );
          }
        }
        int _9088 = (int)0;
        int _9089 = (int)((_1290)->size(0));
        for (int _1298 = _9088; _1298 < _9089; ++_1298)
        {
          {
            int _1299 = (int)0;
            int _9090 = (int)0;
            int _9091 = _1270;
            for (int _1300 = _9090; _1300 < _9091; ++_1300)
            {
              {
                _1299 += safe_mul( _ptr__1296[_1300],((*_1294)(_1298,_1300)) );
              }
            }
            _ptr__1288[_1299] = _ptr__1290[_1298];
            _ptr__1289[_1299] = _ptr__1291[_1298];
          }
        }
      }
    }
    else
    {
      {
        int _9092 = (int)0;
        int _9093 = _1283;
        for (int _1301 = _9092; _1301 < _9093; ++_1301)
        {
          {
            _ptr__1288[_1301] = _ptr__1290[_1301];
            _ptr__1289[_1301] = _ptr__1291[_1301];
          }
        }
      }
    }
  }
  task_con_putboundlist_ra(_1286,_1288,_1289);
  if ((_1274 == (int)0))
  {
    {
      int _9094 = (int)0;
      int _9095 = _1272;
      for (int _1302 = _9094; _1302 < _9095; ++_1302)
      {
        {
          ((*natconmap_coderowptrb)(_ptr__1286[_1302])) = natconmap_codeatomtop;
          ((*natconmap_coderowptre)(_ptr__1286[_1302])) = natconmap_codeatomtop;
        }
      }
    }
  }
  else
  {
    {
      bool _1303 = true;
      int _1304 = (int)0;
      int _1305 = (int)0;
      int _9096 = (int)0;
      int _9097 = _1272;
      for (int _1306 = _9096; _1306 < _9097; ++_1306)
      {
        {
          int _9098 = _ptr__1267[safe_add( _1276,_1306 )];
          int _9099 = _ptr__1267[safe_add( safe_add( _1276,_1306 ),(int)1 )];
          for (int _1307 = _9098; _1307 < _9099; ++_1307)
          {
            {
              if ((((_ptr__1267[safe_add( safe_add( _1279,_1307 ),(int)1 )] - _ptr__1267[safe_add( _1279,_1307 )]) == (int)1) && ((_ptr__1267[safe_add( _1280,_ptr__1267[safe_add( _1279,_1307 )] )] == 10) || (_ptr__1267[safe_add( _1280,_ptr__1267[safe_add( _1279,_1307 )] )] == 2))))
              {
                {
                }
              }
              else
              {
                {
                  ++ _1304;
                  _1305 += (_ptr__1267[safe_add( safe_add( _1279,_1307 ),(int)1 )] - _ptr__1267[safe_add( _1279,_1307 )]);
                }
              }
            }
          }
        }
      }
      int _1308 = natconmap_codenztop;
      int _1309 = natconmap_codeatomtop;
      natconmap_codealloc(_1304,_1305);
      int _1310 = _1309;
      int _1311 = _1308;
      int _9100 = (int)0;
      int _9101 = _1272;
      for (int _1312 = _9100; _1312 < _9101; ++_1312)
      {
        {
          ((*natconmap_coderowptrb)(_ptr__1286[_1312])) = _1311;
          if ((_1304 > (int)0))
          {
            {
              int _9102 = _ptr__1267[safe_add( _1276,_1312 )];
              int _9103 = _ptr__1267[safe_add( safe_add( _1276,_1312 ),(int)1 )];
              for (int _1313 = _9102; _1313 < _9103; ++_1313)
              {
                {
                  if ((((_ptr__1267[safe_add( safe_add( _1279,_1313 ),(int)1 )] - _ptr__1267[safe_add( _1279,_1313 )]) == (int)1) && ((_ptr__1267[safe_add( _1280,_ptr__1267[safe_add( _1279,_1313 )] )] == 10) || (_ptr__1267[safe_add( _1280,_ptr__1267[safe_add( _1279,_1313 )] )] == 2))))
                  {
                    {
                    }
                  }
                  else
                  {
                    {
                      int _9104 = _ptr__1267[safe_add( _1279,_1313 )];
                      int _9105 = _ptr__1267[safe_add( safe_add( _1279,_1313 ),(int)1 )];
                      for (int _1314 = _9104; _1314 < _9105; ++_1314)
                      {
                        {
                          ((*natconmap_code)(_1310)) = _ptr__1267[safe_add( _1280,_1314 )];
                          ((*natconmap_cconst)(_1310)) = _ptr__1269[safe_add( _1281,_1314 )];
                          ++ _1310;
                        }
                      }
                      ((*natconmap_codeptr)(safe_add( _1311,(int)1 ))) = _1310;
                      ((*natconmap_codenidx)(_1311)) = _ptr__1268[safe_add( _1277,_1313 )];
                      _1303 = (_ptr__1268[safe_add( _1277,_1313 )] >= (int)0);
                      ++ _1311;
                    }
                  }
                }
              }
              natconmap_numparameterized += _1304;
            }
          }
          {}
          ((*natconmap_coderowptre)(_ptr__1286[_1312])) = _1311;
        }
      }
      if ((!_1303))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Expression contains parameterized SDP non-zero"));
        }
      }
      {}
    }
  }
  std::vector<int> _9106;
  for (int _1316 = (int)0, _9107 = _1270; _1316 < _9107 ; ++_1316)
  {
    _9106.push_back(_ptr__1267[safe_add( _1271,_1316 )]);
  }
  auto _9108 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9106.size()),_9106.begin(),_9106.end()));
  monty::rc_ptr< ::mosek::fusion::RangedConstraint > _1315 = ::mosek::fusion::p_RangedConstraint::_new_RangedConstraint(::mosek::fusion::Model::t(_pubthis),_1263,_9108,_1286,_1285);
  ((*cons)(_1285)) = (_1315).as<::mosek::fusion::ModelConstraint>();
  if (((int)((_1263).size()) > (int)0))
  {
    {
      con_map->setItem(_1263,_1285);
    }
  }
  {}
  return _1315;
}
void mosek::fusion::p_Model::putarows(std::shared_ptr< monty::ndarray< int,1 > > _1317,monty::rc_ptr< ::mosek::fusion::WorkStack > _1318,int _1319,int _1320,int _1321,int _1322,int _1323,std::shared_ptr< monty::ndarray< int,1 > > _1324){
  _checked_ptr_1<int> _ptr__1317(_1317 ? _1317->raw() : nullptr, _1317 ? _1317->size(0) : 0);
  _checked_ptr_1<int> _ptr__1324(_1324 ? _1324->raw() : nullptr, _1324 ? _1324->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _1325 = mosek::fusion::p_WorkStack::_get_impl(_1318)->i32;
  _checked_ptr_1<int> _ptr__1325(_1325 ? _1325->raw() : nullptr,_1325 ? _1325->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _1326 = mosek::fusion::p_WorkStack::_get_impl(_1318)->i64;
  _checked_ptr_1<long long> _ptr__1326(_1326 ? _1326->raw() : nullptr,_1326 ? _1326->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1327 = mosek::fusion::p_WorkStack::_get_impl(_1318)->f64;
  _checked_ptr_1<double> _ptr__1327(_1327 ? _1327->raw() : nullptr,_1327 ? _1327->size(0) : 0);
  int _1328 = (int)0;
  int _1329 = (int)0;
  int _1330 = (int)0;
  int _9109 = (int)0;
  int _9110 = _1319;
  for (int _1331 = _9109; _1331 < _9110; ++_1331)
  {
    {
      int _1332 = _ptr__1325[safe_add( _1321,_1331 )];
      int _1333 = _ptr__1325[safe_add( safe_add( _1321,_1331 ),(int)1 )];
      int _1334 = _1332;
      while ( ((_1334 < _1333) && (_ptr__1326[safe_add( _1322,_1334 )] < (int)0)) )
      {
        {
          int _1335 = ((*natbarvar_idx)((-safe_add( _ptr__1326[safe_add( _1322,_1334 )],(int)1 ))));
          int _1336 = _1334;
          ++ _1334;
          while ( ((_1334 < _1333) && ((_ptr__1326[safe_add( _1322,_1334 )] < (int)0) && (_1335 == ((*natbarvar_idx)((-safe_add( _ptr__1326[safe_add( _1322,_1334 )],(int)1 ))))))) )
          {
            {
              ++ _1334;
            }
          }
          ++ _1329;
        }
      }
      _1330 += (_1334 - _1332);
      _1328 += (_1333 - _1334);
    }
  }
  _1328 += _1319;
  if ((NULL != _1324.get()))
  {
    {
      _1328 += _1319;
    }
  }
  {}
  int _1337 = (int)((_1317)->size(0));
  std::shared_ptr< monty::ndarray< long long,1 > > _1338 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_add( _1337,(int)1 ))));
  _checked_ptr_1<long long> _ptr__1338(_1338 ? _1338->raw() : nullptr,_1338 ? _1338->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _1339 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1328)));
  _checked_ptr_1<int> _ptr__1339(_1339 ? _1339->raw() : nullptr,_1339 ? _1339->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1340 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_1328)));
  _checked_ptr_1<double> _ptr__1340(_1340 ? _1340->raw() : nullptr,_1340 ? _1340->size(0) : 0);
  if ((NULL != _1324.get()))
  {
    {
      int _1341 = (int)0;
      int _9111 = (int)0;
      int _9112 = _1319;
      for (int _1342 = _9111; _1342 < _9112; ++_1342)
      {
        {
          int _1343 = (int)0;
          int _9113 = _ptr__1325[safe_add( _1321,_1342 )];
          int _9114 = _ptr__1325[safe_add( safe_add( _1321,_1342 ),(int)1 )];
          for (int _1344 = _9113; _1344 < _9114; ++_1344)
          {
            {
              if ((_ptr__1326[safe_add( _1322,_1344 )] >= (int)0))
              {
                {
                  _ptr__1339[safe_add( _1341,_1343 )] = (int)_ptr__1326[safe_add( _1322,_1344 )];
                  _ptr__1340[safe_add( _1341,_1343 )] = _ptr__1327[safe_add( _1323,_1344 )];
                  ++ _1343;
                }
              }
              {}
            }
          }
          _ptr__1339[safe_add( _1341,_1343 )] = _ptr__1324[_1342];
          _ptr__1340[safe_add( _1341,_1343 )] = (-1.0);
          ++ _1343;
          _ptr__1338[safe_add( _1342,(int)1 )] = safe_add( _ptr__1338[_1342],_1343 );
          _1341 += _1343;
        }
      }
    }
  }
  else
  {
    {
      int _1345 = (int)0;
      int _9115 = (int)0;
      int _9116 = _1319;
      for (int _1346 = _9115; _1346 < _9116; ++_1346)
      {
        {
          int _1347 = (int)0;
          int _9117 = _ptr__1325[safe_add( _1321,_1346 )];
          int _9118 = _ptr__1325[safe_add( safe_add( _1321,_1346 ),(int)1 )];
          for (int _1348 = _9117; _1348 < _9118; ++_1348)
          {
            {
              if ((_ptr__1326[safe_add( _1322,_1348 )] >= (int)0))
              {
                {
                  _ptr__1339[safe_add( _1345,_1347 )] = (int)_ptr__1326[safe_add( _1322,_1348 )];
                  _ptr__1340[safe_add( _1345,_1347 )] = _ptr__1327[safe_add( _1323,_1348 )];
                  ++ _1347;
                }
              }
              {}
            }
          }
          _ptr__1338[safe_add( _1346,(int)1 )] = safe_add( _ptr__1338[_1346],_1347 );
          _1345 += _1347;
        }
      }
    }
  }
  task_putarowlist(_1317,_1338,_1339,_1340);
  if ((_1329 > (int)0))
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _1349 = _1317;
      _checked_ptr_1<int> _ptr__1349(_1349 ? _1349->raw() : nullptr,_1349 ? _1349->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _1350 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_add( _1337,(int)1 ))));
      _checked_ptr_1<long long> _ptr__1350(_1350 ? _1350->raw() : nullptr,_1350 ? _1350->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _1351 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1329)));
      _checked_ptr_1<int> _ptr__1351(_1351 ? _1351->raw() : nullptr,_1351 ? _1351->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _1352 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1329)));
      _checked_ptr_1<int> _ptr__1352(_1352 ? _1352->raw() : nullptr,_1352 ? _1352->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _1353 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1329)));
      _checked_ptr_1<long long> _ptr__1353(_1353 ? _1353->raw() : nullptr,_1353 ? _1353->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _1354 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1330)));
      _checked_ptr_1<int> _ptr__1354(_1354 ? _1354->raw() : nullptr,_1354 ? _1354->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _1355 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1330)));
      _checked_ptr_1<int> _ptr__1355(_1355 ? _1355->raw() : nullptr,_1355 ? _1355->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _1356 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_1330)));
      _checked_ptr_1<double> _ptr__1356(_1356 ? _1356->raw() : nullptr,_1356 ? _1356->size(0) : 0);
      int _1357 = (int)0;
      int _1358 = (int)0;
      int _9119 = (int)0;
      int _9120 = _1337;
      for (int _1359 = _9119; _1359 < _9120; ++_1359)
      {
        {
          int _1360 = _ptr__1325[safe_add( _1321,_1359 )];
          int _1361 = _ptr__1325[safe_add( safe_add( _1321,_1359 ),(int)1 )];
          while ( ((_1360 < _1361) && (_ptr__1326[safe_add( _1322,_1360 )] < (int)0)) )
          {
            {
              int _1362 = _1360;
              int _1363 = ((*natbarvar_idx)((-safe_add( _ptr__1326[safe_add( _1322,_1360 )],(int)1 ))));
              while ( ((_1360 < _1361) && ((_ptr__1326[safe_add( _1322,_1360 )] < (int)0) && (((*natbarvar_idx)((-safe_add( _ptr__1326[safe_add( _1322,_1360 )],(int)1 )))) == _1363))) )
              {
                {
                  _ptr__1354[_1358] = ((*natbarvar_i)((-safe_add( _ptr__1326[safe_add( _1322,_1360 )],(int)1 ))));
                  _ptr__1355[_1358] = ((*natbarvar_j)((-safe_add( _ptr__1326[safe_add( _1322,_1360 )],(int)1 ))));
                  if ((_ptr__1354[_1358] == _ptr__1355[_1358]))
                  {
                    {
                      _ptr__1356[_1358] = _ptr__1327[safe_add( _1323,_1360 )];
                    }
                  }
                  else
                  {
                    {
                      _ptr__1356[_1358] = (0.5 * _ptr__1327[safe_add( _1323,_1360 )]);
                    }
                  }
                  ++ _1358;
                  ++ _1360;
                }
              }
              _ptr__1351[_1357] = _1363;
              _ptr__1352[_1357] = ((*natbarvar_dim)(_1363));
              _ptr__1353[_1357] = (_1360 - _1362);
              ++ _1357;
            }
          }
          _1360 = _1361;
          _ptr__1350[safe_add( _1359,(int)1 )] = _1357;
        }
      }
      std::shared_ptr< monty::ndarray< long long,1 > > _1364 = task_appendsymmatlist(_1352,_1353,_1354,_1355,_1356);
      _checked_ptr_1<long long> _ptr__1364(_1364 ? _1364->raw() : nullptr,_1364 ? _1364->size(0) : 0);
      task_putbararowlist(_1349,_1350,_1351,_1364);
    }
  }
  {}
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint_(const std::string & _1365,monty::rc_ptr< ::mosek::fusion::Expression > _1366,monty::rc_ptr< ::mosek::fusion::PSDDomain > _1367){
  std::shared_ptr< monty::ndarray< int,1 > > _1368 = _1366->getShape();
  _checked_ptr_1<int> _ptr__1368(_1368 ? _1368->raw() : nullptr,_1368 ? _1368->size(0) : 0);
  if (((NULL != mosek::fusion::p_PSDDomain::_get_impl(_1367)->shape.get()) && (!::mosek::fusion::p_Set::match(_1368,mosek::fusion::p_PSDDomain::_get_impl(_1367)->shape))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching expression and domain"));
    }
  }
  {}
  bool _1369;
  int _1370;
  int _1371;
  if (mosek::fusion::p_PSDDomain::_get_impl(_1367)->axisIsSet)
  {
    {
      _1369 = (mosek::fusion::p_PSDDomain::_get_impl(_1367)->conedim1 < mosek::fusion::p_PSDDomain::_get_impl(_1367)->conedim2);
      int _9121;
      bool _9122 = _1369;
      if (_9122)
      {
        _9121 = mosek::fusion::p_PSDDomain::_get_impl(_1367)->conedim1;
      }
      else
      {
        _9121 = mosek::fusion::p_PSDDomain::_get_impl(_1367)->conedim2;
      }
      _1371 = _9121;
      int _9123;
      bool _9124 = _1369;
      if (_9124)
      {
        _9123 = mosek::fusion::p_PSDDomain::_get_impl(_1367)->conedim2;
      }
      else
      {
        _9123 = mosek::fusion::p_PSDDomain::_get_impl(_1367)->conedim1;
      }
      _1370 = _9123;
    }
  }
  else
  {
    {
      _1369 = true;
      _1371 = ((int)((_1368)->size(0)) - (int)2);
      _1370 = ((int)((_1368)->size(0)) - (int)1);
    }
  }
  if (((_1370 >= (int)((_1368)->size(0))) || (_ptr__1368[_1371] != _ptr__1368[_1370])))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching expression and domain"));
    }
  }
  {}
  monty::rc_ptr< ::mosek::fusion::Expression > _9125;
  bool _9126 = (mosek::fusion::p_PSDDomain::_get_impl(_1367)->key == ::mosek::fusion::PSDKey::IsSymPSD);
  if (_9126)
  {
    _9125 = ::mosek::fusion::p_ExprSymmetrize::_new_ExprSymmetrize(_1371,_1370,_1366).as<::mosek::fusion::Expression>();
  }
  else
  {
    _9125 = _1366;
  }
  monty::rc_ptr< ::mosek::fusion::ExprOptimizeCode > _1372 = ::mosek::fusion::p_ExprOptimizeCode::_new_ExprOptimizeCode((::mosek::fusion::p_ExprCompress::_new_ExprCompress((::mosek::fusion::p_ExprDenseTril::_new_ExprDenseTril(_1371,_1370,_9125)).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>());
  _1372->eval(rs,ws,xs);
  std::shared_ptr< monty::ndarray< int,1 > > _1373 = mosek::fusion::p_WorkStack::_get_impl(rs)->i32;
  _checked_ptr_1<int> _ptr__1373(_1373 ? _1373->raw() : nullptr,_1373 ? _1373->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _1374 = mosek::fusion::p_WorkStack::_get_impl(rs)->i64;
  _checked_ptr_1<long long> _ptr__1374(_1374 ? _1374->raw() : nullptr,_1374 ? _1374->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1375 = mosek::fusion::p_WorkStack::_get_impl(rs)->f64;
  _checked_ptr_1<double> _ptr__1375(_1375 ? _1375->raw() : nullptr,_1375 ? _1375->size(0) : 0);
  int _1376 = mosek::fusion::p_WorkStack::_get_impl(rs)->nd;
  int _1377 = mosek::fusion::p_WorkStack::_get_impl(rs)->nelem;
  int _1378 = mosek::fusion::p_WorkStack::_get_impl(rs)->nnz;
  bool _1379 = mosek::fusion::p_WorkStack::_get_impl(rs)->hassp;
  int _1380 = mosek::fusion::p_WorkStack::_get_impl(rs)->ncodeatom;
  int _1381 = mosek::fusion::p_WorkStack::_get_impl(rs)->shape_base;
  int _1382 = mosek::fusion::p_WorkStack::_get_impl(rs)->ptr_base;
  int _1383 = mosek::fusion::p_WorkStack::_get_impl(rs)->nidxs_base;
  int _1384 = mosek::fusion::p_WorkStack::_get_impl(rs)->sp_base;
  int _1385 = mosek::fusion::p_WorkStack::_get_impl(rs)->cof_base;
  int _1386 = mosek::fusion::p_WorkStack::_get_impl(rs)->codeptr_base;
  int _1387 = mosek::fusion::p_WorkStack::_get_impl(rs)->code_base;
  int _1388 = mosek::fusion::p_WorkStack::_get_impl(rs)->cconst_base;
  int _1389 = _ptr__1368[_1370];
  int _1390 = (safe_mul( _1389,safe_add( _1389,(int)1 ) ) / (int)2);
  int _9127 = (int)0;
  int _9128 = _1376;
  for (int _1391 = _9127; _1391 < _9128; ++_1391)
  {
    {
      if (((_1391 != _1371) && (_1391 != _1370)))
      {
        {
          _1390 *= _ptr__1368[_1391];
        }
      }
      {}
    }
  }
  int _1392 = natconmap_alloc(_1390);
  std::shared_ptr< monty::ndarray< int,1 > > _1393 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1390)));
  _checked_ptr_1<int> _ptr__1393(_1393 ? _1393->raw() : nullptr,_1393 ? _1393->size(0) : 0);
  natconmap->get(_1392,_1393,(int)0);
  putarows(_1393,rs,_1377,_1378,_1382,_1383,_1385,std::shared_ptr< monty::ndarray< int,1 > >(nullptr));
  xs->clear();
  std::shared_ptr< monty::ndarray< int,1 > > _1394 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)1),(int)((int)1),(int)((int)1),(int)((int)1),(int)((int)1)});
  _checked_ptr_1<int> _ptr__1394(_1394 ? _1394->raw() : nullptr,_1394 ? _1394->size(0) : 0);
  int _9129 = (int)0;
  int _9130 = _1371;
  for (int _1395 = _9129; _1395 < _9130; ++_1395)
  {
    {
      _ptr__1394[(int)0] *= _ptr__1368[_1395];
    }
  }
  _ptr__1394[(int)1] = _ptr__1368[_1371];
  int _9131 = safe_add( _1371,(int)1 );
  int _9132 = _1370;
  for (int _1396 = _9131; _1396 < _9132; ++_1396)
  {
    {
      _ptr__1394[(int)2] *= _ptr__1368[_1396];
    }
  }
  _ptr__1394[(int)3] = _ptr__1368[_1370];
  int _9133 = safe_add( _1370,(int)1 );
  int _9134 = _1376;
  for (int _1397 = _9133; _1397 < _9134; ++_1397)
  {
    {
      _ptr__1394[(int)4] *= _ptr__1368[_1397];
    }
  }
  std::shared_ptr< monty::ndarray< int,1 > > _1398 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)5)));
  _checked_ptr_1<int> _ptr__1398(_1398 ? _1398->raw() : nullptr,_1398 ? _1398->size(0) : 0);
  _ptr__1398[(int)4] = (int)1;
  int _9135 = (int)1;
  int _9136 = (int)5;
  for (int _1399 = _9135; _1399 < _9136; ++_1399)
  {
    {
      _ptr__1398[(((int)5 - _1399) - (int)1)] = safe_mul( _ptr__1398[((int)5 - _1399)],_ptr__1394[((int)5 - _1399)] );
    }
  }
  std::shared_ptr< monty::ndarray< double,1 > > _1400 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_1390)));
  _checked_ptr_1<double> _ptr__1400(_1400 ? _1400->raw() : nullptr,_1400 ? _1400->size(0) : 0);
  if ((!_1379))
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("Unexpected case!"));
    }
  }
  else
  {
    {
      int _9137 = (int)0;
      int _9138 = _1377;
      for (int _1401 = _9137; _1401 < _9138; ++_1401)
      {
        {
          _ptr__1400[_1401] = 0.0;
        }
      }
    }
  }
  task_con_putboundlist_fx(_1393,_1400);
  int _1402 = safe_mul( safe_mul( _ptr__1394[(int)0],_ptr__1394[(int)2] ),_ptr__1394[(int)4] );
  int _1403 = _ptr__1394[(int)1];
  int _1404 = natbarvarmap_alloc(_1402,_1403);
  std::shared_ptr< monty::ndarray< int,1 > > _1405 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1402)));
  _checked_ptr_1<int> _ptr__1405(_1405 ? _1405->raw() : nullptr,_1405 ? _1405->size(0) : 0);
  natbarvarmap_get(_1404,_1405);
  std::vector<int> _9139;
  for (int _1407 = (int)0, _9140 = (safe_mul( _1403,safe_add( _1403,(int)1 ) ) / (int)2); _1407 < _9140 ; ++_1407)
  {
    _9139.push_back(_1403);
  }
  auto _9141 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9139.size()),_9139.begin(),_9139.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _1406 = _9141;
  _checked_ptr_1<int> _ptr__1406(_1406 ? _1406->raw() : nullptr,_1406 ? _1406->size(0) : 0);
  std::vector<long long> _9142;
  for (int _1409 = (int)0, _9143 = (safe_mul( _1403,safe_add( _1403,(int)1 ) ) / (int)2); _1409 < _9143 ; ++_1409)
  {
    _9142.push_back((int)1);
  }
  auto _9144 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9142.size()),_9142.begin(),_9142.end()));
  std::shared_ptr< monty::ndarray< long long,1 > > _1408 = _9144;
  _checked_ptr_1<long long> _ptr__1408(_1408 ? _1408->raw() : nullptr,_1408 ? _1408->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _1410 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((safe_mul( _1403,safe_add( _1403,(int)1 ) ) / (int)2))));
  _checked_ptr_1<int> _ptr__1410(_1410 ? _1410->raw() : nullptr,_1410 ? _1410->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _1411 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((safe_mul( _1403,safe_add( _1403,(int)1 ) ) / (int)2))));
  _checked_ptr_1<int> _ptr__1411(_1411 ? _1411->raw() : nullptr,_1411 ? _1411->size(0) : 0);
  std::vector<double> _9145;
  for (int _1413 = (int)0, _9146 = (safe_mul( _1403,safe_add( _1403,(int)1 ) ) / (int)2); _1413 < _9146 ; ++_1413)
  {
    _9145.push_back((-0.5));
  }
  auto _9147 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9145.size()),_9145.begin(),_9145.end()));
  std::shared_ptr< monty::ndarray< double,1 > > _1412 = _9147;
  _checked_ptr_1<double> _ptr__1412(_1412 ? _1412->raw() : nullptr,_1412 ? _1412->size(0) : 0);
  int _9148 = (int)1;
  int _9149 = safe_add( _1403,(int)1 );
  for (int _1414 = _9148; _1414 < _9149; ++_1414)
  {
    {
      _ptr__1412[((safe_mul( _1414,safe_add( _1414,(int)1 ) ) / (int)2) - (int)1)] = (-1.0);
    }
  }
  {
    int _1415 = (int)0;
    int _9150 = (int)0;
    int _9151 = _1403;
    for (int _1416 = _9150; _1416 < _9151; ++_1416)
    {
      {
        int _9152 = (int)0;
        int _9153 = safe_add( _1416,(int)1 );
        for (int _1417 = _9152; _1417 < _9153; ++_1417)
        {
          {
            _ptr__1410[_1415] = _1416;
            _ptr__1411[_1415] = _1417;
            ++ _1415;
          }
        }
      }
    }
  }
  std::shared_ptr< monty::ndarray< long long,1 > > _1418 = task_appendsymmatlist(_1406,_1408,_1410,_1411,_1412);
  _checked_ptr_1<long long> _ptr__1418(_1418 ? _1418->raw() : nullptr,_1418 ? _1418->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _1419 = _1393;
  _checked_ptr_1<int> _ptr__1419(_1419 ? _1419->raw() : nullptr,_1419 ? _1419->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _1420 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1390)));
  _checked_ptr_1<int> _ptr__1420(_1420 ? _1420->raw() : nullptr,_1420 ? _1420->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _1421 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1390)));
  _checked_ptr_1<long long> _ptr__1421(_1421 ? _1421->raw() : nullptr,_1421 ? _1421->size(0) : 0);
  {
    int _1422 = (int)0;
    if (_1369)
    {
      {
        int _9154 = (int)0;
        int _9155 = _ptr__1394[(int)0];
        for (int _1423 = _9154; _1423 < _9155; ++_1423)
        {
          {
            int _9156 = (int)0;
            int _9157 = _ptr__1394[(int)1];
            for (int _1424 = _9156; _1424 < _9157; ++_1424)
            {
              {
                int _9158 = (int)0;
                int _9159 = _ptr__1394[(int)2];
                for (int _1425 = _9158; _1425 < _9159; ++_1425)
                {
                  {
                    int _9160 = (int)0;
                    int _9161 = safe_add( _1424,(int)1 );
                    for (int _1426 = _9160; _1426 < _9161; ++_1426)
                    {
                      {
                        int _9162 = (int)0;
                        int _9163 = _ptr__1394[(int)4];
                        for (int _1427 = _9162; _1427 < _9163; ++_1427)
                        {
                          {
                            _ptr__1421[_1422] = _ptr__1418[safe_add( (safe_mul( _1424,safe_add( _1424,(int)1 ) ) / (int)2),_1426 )];
                            _ptr__1420[_1422] = _ptr__1405[safe_add( safe_mul( safe_add( safe_mul( _1423,_ptr__1394[(int)2] ),_1425 ),_ptr__1394[(int)4] ),_1427 )];
                            ((*natconmap_slackidx)(_ptr__1393[_1422])) = ((-safe_add( safe_add( ((*natbarvar_ptr)(_ptr__1420[_1422])),(safe_mul( _1424,safe_add( _1424,(int)1 ) ) / (int)2) ),_1426 )) - (int)1);
                            ++ _1422;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    else
    {
      {
        int _9164 = (int)0;
        int _9165 = _ptr__1394[(int)0];
        for (int _1428 = _9164; _1428 < _9165; ++_1428)
        {
          {
            int _9166 = (int)0;
            int _9167 = _ptr__1394[(int)1];
            for (int _1429 = _9166; _1429 < _9167; ++_1429)
            {
              {
                int _9168 = (int)0;
                int _9169 = _ptr__1394[(int)2];
                for (int _1430 = _9168; _1430 < _9169; ++_1430)
                {
                  {
                    int _9170 = _1429;
                    int _9171 = _ptr__1394[(int)1];
                    for (int _1431 = _9170; _1431 < _9171; ++_1431)
                    {
                      {
                        int _9172 = (int)0;
                        int _9173 = _ptr__1394[(int)4];
                        for (int _1432 = _9172; _1432 < _9173; ++_1432)
                        {
                          {
                            _ptr__1421[_1422] = _ptr__1418[safe_add( (safe_mul( _1431,safe_add( _1431,(int)1 ) ) / (int)2),_1429 )];
                            _ptr__1420[_1422] = _ptr__1405[safe_add( safe_mul( safe_add( safe_mul( _1428,_ptr__1394[(int)2] ),_1430 ),_ptr__1394[(int)4] ),_1432 )];
                            ((*natconmap_slackidx)(_ptr__1393[_1422])) = ((-safe_add( safe_add( ((*natbarvar_ptr)(_ptr__1420[_1422])),(safe_mul( _1431,safe_add( _1431,(int)1 ) ) / (int)2) ),_1429 )) - (int)1);
                            ++ _1422;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  task_putbaraijlist(_1419,_1420,_1421);
  ((*natconmap_type)(_1392)) = (-safe_add( _1404,(int)1 ));
  if ((_1380 == (int)0))
  {
    {
      int _9174 = (int)0;
      int _9175 = _1377;
      for (int _1433 = _9174; _1433 < _9175; ++_1433)
      {
        {
          ((*natconmap_coderowptrb)(_ptr__1393[_1433])) = natconmap_codeatomtop;
          ((*natconmap_coderowptre)(_ptr__1393[_1433])) = natconmap_codeatomtop;
        }
      }
    }
  }
  else
  {
    {
      bool _1434 = true;
      int _1435 = (int)0;
      int _1436 = (int)0;
      int _9176 = (int)0;
      int _9177 = _1377;
      for (int _1437 = _9176; _1437 < _9177; ++_1437)
      {
        {
          int _9178 = _ptr__1373[safe_add( _1382,_1437 )];
          int _9179 = _ptr__1373[safe_add( safe_add( _1382,_1437 ),(int)1 )];
          for (int _1438 = _9178; _1438 < _9179; ++_1438)
          {
            {
              if ((((_ptr__1373[safe_add( safe_add( _1386,_1438 ),(int)1 )] - _ptr__1373[safe_add( _1386,_1438 )]) == (int)1) && ((_ptr__1373[safe_add( _1387,_ptr__1373[safe_add( _1386,_1438 )] )] == 10) || (_ptr__1373[safe_add( _1387,_ptr__1373[safe_add( _1386,_1438 )] )] == 2))))
              {
                {
                }
              }
              else
              {
                {
                  ++ _1435;
                  _1436 += (_ptr__1373[safe_add( safe_add( _1386,_1438 ),(int)1 )] - _ptr__1373[safe_add( _1386,_1438 )]);
                }
              }
            }
          }
        }
      }
      int _1439 = natconmap_codenztop;
      int _1440 = natconmap_codeatomtop;
      natconmap_codealloc(_1435,_1436);
      int _1441 = _1440;
      int _1442 = _1439;
      int _9180 = (int)0;
      int _9181 = _1377;
      for (int _1443 = _9180; _1443 < _9181; ++_1443)
      {
        {
          ((*natconmap_coderowptrb)(_ptr__1393[_1443])) = _1442;
          int _9182 = _ptr__1373[safe_add( _1382,_1443 )];
          int _9183 = _ptr__1373[safe_add( safe_add( _1382,_1443 ),(int)1 )];
          for (int _1444 = _9182; _1444 < _9183; ++_1444)
          {
            {
              if ((((_ptr__1373[safe_add( safe_add( _1386,_1444 ),(int)1 )] - _ptr__1373[safe_add( _1386,_1444 )]) == (int)1) && ((_ptr__1373[safe_add( _1387,_ptr__1373[safe_add( _1386,_1444 )] )] == 10) || (_ptr__1373[safe_add( _1387,_ptr__1373[safe_add( _1386,_1444 )] )] == 2))))
              {
                {
                }
              }
              else
              {
                {
                  int _9184 = _ptr__1373[safe_add( _1386,_1444 )];
                  int _9185 = _ptr__1373[safe_add( safe_add( _1386,_1444 ),(int)1 )];
                  for (int _1445 = _9184; _1445 < _9185; ++_1445)
                  {
                    {
                      ((*natconmap_code)(_1441)) = _ptr__1373[safe_add( _1387,_1445 )];
                      ((*natconmap_cconst)(_1441)) = _ptr__1375[safe_add( _1388,_1445 )];
                      ++ _1441;
                    }
                  }
                  ((*natconmap_codeptr)(safe_add( _1442,(int)1 ))) = _1441;
                  ((*natconmap_codenidx)(_1442)) = _ptr__1374[safe_add( _1383,_1444 )];
                  _1434 = (_ptr__1374[safe_add( _1383,_1444 )] >= (int)0);
                  ++ _1442;
                }
              }
            }
          }
          ((*natconmap_coderowptre)(_ptr__1393[_1443])) = _1442;
        }
      }
      natconmap_numparameterized += _1435;
      if ((!_1434))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Expression contains parameterized SDP non-zero"));
        }
      }
      {}
    }
  }
  std::vector<long long> _9186;
  for (int _1447 = (int)0, _9187 = _1390; _1447 < _9187 ; ++_1447)
  {
    _9186.push_back(((*natconmap_slackidx)(_ptr__1393[_1447])));
  }
  auto _9188 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9186.size()),_9186.begin(),_9186.end()));
  monty::rc_ptr< ::mosek::fusion::PSDConstraint > _1446 = ::mosek::fusion::p_PSDConstraint::_new_PSDConstraint(::mosek::fusion::Model::t(_pubthis),_1365,_1392,_1368,_1371,_1370,_9188,_1393);
  ((*cons)(_1392)) = (_1446).as<::mosek::fusion::ModelConstraint>();
  if (((int)((_1365).size()) > (int)0))
  {
    {
      con_map->setItem(_1365,_1392);
    }
  }
  {}
  return (_1446).as<::mosek::fusion::Constraint>();
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint_(const std::string & _1448,monty::rc_ptr< ::mosek::fusion::Expression > _1449,monty::rc_ptr< ::mosek::fusion::LinPSDDomain > _1450){
  if ((((int)((_1448).size()) > (int)0) && hasConstraint(_1448)))
  {
    {
      throw ::mosek::fusion::NameError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Duplicate constraint name '"))->__mosek_2fusion_2Utils_2StringBuffer__a(_1448)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"))->toString());
    }
  }
  {}
  if ((((int)((_1448).size()) > (int)0) && hasConstraint(_1448)))
  {
    {
      throw ::mosek::fusion::NameError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Duplicate constraint name '"))->__mosek_2fusion_2Utils_2StringBuffer__a(_1448)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"))->toString());
    }
  }
  {}
  monty::rc_ptr< ::mosek::fusion::ExprDense > _1451 = ::mosek::fusion::p_ExprDense::_new_ExprDense((::mosek::fusion::p_ExprOptimizeCode::_new_ExprOptimizeCode((::mosek::fusion::p_ExprCompress::_new_ExprCompress(_1449)).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>());
  _1451->eval(rs,ws,xs);
  std::shared_ptr< monty::ndarray< int,1 > > _1452 = mosek::fusion::p_WorkStack::_get_impl(rs)->i32;
  _checked_ptr_1<int> _ptr__1452(_1452 ? _1452->raw() : nullptr,_1452 ? _1452->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _1453 = mosek::fusion::p_WorkStack::_get_impl(rs)->i64;
  _checked_ptr_1<long long> _ptr__1453(_1453 ? _1453->raw() : nullptr,_1453 ? _1453->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1454 = mosek::fusion::p_WorkStack::_get_impl(rs)->f64;
  _checked_ptr_1<double> _ptr__1454(_1454 ? _1454->raw() : nullptr,_1454 ? _1454->size(0) : 0);
  int _1455 = mosek::fusion::p_WorkStack::_get_impl(rs)->nd;
  int _1456 = mosek::fusion::p_WorkStack::_get_impl(rs)->nelem;
  int _1457 = mosek::fusion::p_WorkStack::_get_impl(rs)->nnz;
  bool _1458 = mosek::fusion::p_WorkStack::_get_impl(rs)->hassp;
  int _1459 = mosek::fusion::p_WorkStack::_get_impl(rs)->ncodeatom;
  int _1460 = mosek::fusion::p_WorkStack::_get_impl(rs)->shape_base;
  int _1461 = mosek::fusion::p_WorkStack::_get_impl(rs)->ptr_base;
  int _1462 = mosek::fusion::p_WorkStack::_get_impl(rs)->nidxs_base;
  int _1463 = mosek::fusion::p_WorkStack::_get_impl(rs)->cof_base;
  int _1464 = mosek::fusion::p_WorkStack::_get_impl(rs)->codeptr_base;
  int _1465 = mosek::fusion::p_WorkStack::_get_impl(rs)->code_base;
  int _1466 = mosek::fusion::p_WorkStack::_get_impl(rs)->cconst_base;
  std::vector<int> _9189;
  for (int _1468 = (int)0, _9190 = _1455; _1468 < _9190 ; ++_1468)
  {
    _9189.push_back(_ptr__1452[safe_add( _1460,_1468 )]);
  }
  auto _9191 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9189.size()),_9189.begin(),_9189.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _1467 = _9191;
  _checked_ptr_1<int> _ptr__1467(_1467 ? _1467->raw() : nullptr,_1467 ? _1467->size(0) : 0);
  if (((NULL != mosek::fusion::p_LinPSDDomain::_get_impl(_1450)->shape.get()) && (!::mosek::fusion::p_Set::match(_1467,mosek::fusion::p_LinPSDDomain::_get_impl(_1450)->shape))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching expression and domain"));
    }
  }
  {}
  int _1469 = (int)1;
  int _9192 = (int)0;
  int _9193 = _1455;
  for (int _1470 = _9192; _1470 < _9193; ++_1470)
  {
    {
      _1469 *= _ptr__1467[_1470];
    }
  }
  int _9194;
  bool _9195 = (NULL != mosek::fusion::p_LinPSDDomain::_get_impl(_1450)->shape.get());
  if (_9195)
  {
    _9194 = mosek::fusion::p_LinPSDDomain::_get_impl(_1450)->conedim;
  }
  else
  {
    _9194 = ((int)((_1467)->size(0)) - (int)1);
  }
  int _1471 = _9194;
  int _1472 = _ptr__1467[_1471];
  int _1473 = (int)((::mosek::fusion::Utils::Tools::sqrt((double)(safe_add( (int)1,safe_mul( (int)8,_1472 ) ))) - (int)1) / (int)2);
  if (((safe_mul( _1473,safe_add( _1473,(int)1 ) ) / (int)2) != _1472))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid size for semidefinite variable"));
    }
  }
  {}
  int _1474 = (int)1;
  int _9196 = (int)0;
  int _9197 = _1471;
  for (int _1475 = _9196; _1475 < _9197; ++_1475)
  {
    {
      _1474 *= _ptr__1467[_1475];
    }
  }
  int _1476 = (int)1;
  int _9198 = safe_add( _1471,(int)1 );
  int _9199 = _1455;
  for (int _1477 = _9198; _1477 < _9199; ++_1477)
  {
    {
      _1476 *= _ptr__1467[_1477];
    }
  }
  int _1478 = safe_mul( _1474,_1476 );
  int _1479 = natconmap_alloc(_1469);
  std::shared_ptr< monty::ndarray< int,1 > > _1480 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1469)));
  _checked_ptr_1<int> _ptr__1480(_1480 ? _1480->raw() : nullptr,_1480 ? _1480->size(0) : 0);
  natconmap->get(_1479,_1480,(int)0);
  putarows(_1480,rs,_1456,_1457,_1461,_1462,_1463,std::shared_ptr< monty::ndarray< int,1 > >(nullptr));
  int _1481 = natbarvarmap_alloc(_1478,_1473);
  std::shared_ptr< monty::ndarray< int,1 > > _1482 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1478)));
  _checked_ptr_1<int> _ptr__1482(_1482 ? _1482->raw() : nullptr,_1482 ? _1482->size(0) : 0);
  natbarvarmap_get(_1481,_1482);
  ((*barvars)(_1481)) = nullptr;
  int _1483 = safe_mul( safe_mul( _1472,_1474 ),_1476 );
  std::vector<int> _9200;
  for (int _1485 = (int)0, _9201 = _1483; _1485 < _9201 ; ++_1485)
  {
    _9200.push_back(_1473);
  }
  auto _9202 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9200.size()),_9200.begin(),_9200.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _1484 = _9202;
  _checked_ptr_1<int> _ptr__1484(_1484 ? _1484->raw() : nullptr,_1484 ? _1484->size(0) : 0);
  std::vector<long long> _9203;
  for (int _1487 = (int)0, _9204 = _1483; _1487 < _9204 ; ++_1487)
  {
    _9203.push_back((int)1);
  }
  auto _9205 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9203.size()),_9203.begin(),_9203.end()));
  std::shared_ptr< monty::ndarray< long long,1 > > _1486 = _9205;
  _checked_ptr_1<long long> _ptr__1486(_1486 ? _1486->raw() : nullptr,_1486 ? _1486->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1488 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_1483)));
  _checked_ptr_1<double> _ptr__1488(_1488 ? _1488->raw() : nullptr,_1488 ? _1488->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _1489 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1483)));
  _checked_ptr_1<int> _ptr__1489(_1489 ? _1489->raw() : nullptr,_1489 ? _1489->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _1490 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1483)));
  _checked_ptr_1<int> _ptr__1490(_1490 ? _1490->raw() : nullptr,_1490 ? _1490->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _1491 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1483)));
  _checked_ptr_1<int> _ptr__1491(_1491 ? _1491->raw() : nullptr,_1491 ? _1491->size(0) : 0);
  {
    int _1492 = (int)0;
    int _9206 = (int)0;
    int _9207 = _1474;
    for (int _1493 = _9206; _1493 < _9207; ++_1493)
    {
      {
        int _1494 = (int)0;
        int _9208 = (int)0;
        int _9209 = _1473;
        for (int _1495 = _9208; _1495 < _9209; ++_1495)
        {
          {
            int _9210 = _1495;
            int _9211 = _1473;
            for (int _1496 = _9210; _1496 < _9211; ++_1496)
            {
              {
                int _9212 = (int)0;
                int _9213 = _1476;
                for (int _1497 = _9212; _1497 < _9213; ++_1497)
                {
                  {
                    _ptr__1491[_1492] = _ptr__1482[safe_add( safe_mul( _1493,_1476 ),_1497 )];
                    _ptr__1489[_1492] = _1496;
                    _ptr__1490[_1492] = _1495;
                    double _9214;
                    bool _9215 = (_1496 == _1495);
                    if (_9215)
                    {
                      _9214 = (-1.0);
                    }
                    else
                    {
                      _9214 = (-0.5);
                    }
                    _ptr__1488[_1492] = _9214;
                    ((*natconmap_slackidx)(_ptr__1480[_1492])) = ((-safe_add( ((*natbarvar_ptr)(_ptr__1482[safe_add( safe_mul( _1493,_1476 ),_1497 )])),_1494 )) - (int)1);
                    ++ _1492;
                  }
                }
                ++ _1494;
              }
            }
          }
        }
      }
    }
    ((*natconmap_type)(_1479)) = (-safe_add( _1481,(int)1 ));
    int _9216 = (int)0;
    int _9217 = _1469;
    for (int _1498 = _9216; _1498 < _9217; ++_1498)
    {
      {
        ((*natconmap_blockid)(_ptr__1480[_1498])) = _1479;
        ((*natconmap_idx)(_ptr__1480[_1498])) = _1498;
      }
    }
  }
  std::shared_ptr< monty::ndarray< long long,1 > > _1499 = task_appendsymmatlist(_1484,_1486,_1489,_1490,_1488);
  _checked_ptr_1<long long> _ptr__1499(_1499 ? _1499->raw() : nullptr,_1499 ? _1499->size(0) : 0);
  task_putbaraijlist(_1480,_1491,_1499);
  task_con_putboundlist_fx(_1480,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_1469))));
  if ((_1459 == (int)0))
  {
    {
      int _9218 = (int)0;
      int _9219 = _1456;
      for (int _1500 = _9218; _1500 < _9219; ++_1500)
      {
        {
          ((*natconmap_coderowptrb)(_ptr__1480[_1500])) = natconmap_codeatomtop;
          ((*natconmap_coderowptre)(_ptr__1480[_1500])) = natconmap_codeatomtop;
        }
      }
    }
  }
  else
  {
    {
      bool _1501 = true;
      int _1502 = (int)0;
      int _1503 = (int)0;
      int _9220 = (int)0;
      int _9221 = _1456;
      for (int _1504 = _9220; _1504 < _9221; ++_1504)
      {
        {
          int _9222 = _ptr__1452[safe_add( _1461,_1504 )];
          int _9223 = _ptr__1452[safe_add( safe_add( _1461,_1504 ),(int)1 )];
          for (int _1505 = _9222; _1505 < _9223; ++_1505)
          {
            {
              if ((((_ptr__1452[safe_add( safe_add( _1464,_1505 ),(int)1 )] - _ptr__1452[safe_add( _1464,_1505 )]) == (int)1) && ((_ptr__1452[safe_add( _1465,_ptr__1452[safe_add( _1464,_1505 )] )] == 10) || (_ptr__1452[safe_add( _1465,_ptr__1452[safe_add( _1464,_1505 )] )] == 2))))
              {
                {
                }
              }
              else
              {
                {
                  ++ _1502;
                  _1503 += (_ptr__1452[safe_add( safe_add( _1464,_1505 ),(int)1 )] - _ptr__1452[safe_add( _1464,_1505 )]);
                }
              }
            }
          }
        }
      }
      int _1506 = natconmap_codenztop;
      int _1507 = natconmap_codeatomtop;
      natconmap_codealloc(_1502,_1503);
      int _1508 = _1507;
      int _1509 = _1506;
      int _9224 = (int)0;
      int _9225 = _1456;
      for (int _1510 = _9224; _1510 < _9225; ++_1510)
      {
        {
          ((*natconmap_coderowptrb)(_ptr__1480[_1510])) = _1509;
          int _9226 = _ptr__1452[safe_add( _1461,_1510 )];
          int _9227 = _ptr__1452[safe_add( safe_add( _1461,_1510 ),(int)1 )];
          for (int _1511 = _9226; _1511 < _9227; ++_1511)
          {
            {
              if ((((_ptr__1452[safe_add( safe_add( _1464,_1511 ),(int)1 )] - _ptr__1452[safe_add( _1464,_1511 )]) == (int)1) && ((_ptr__1452[safe_add( _1465,_ptr__1452[safe_add( _1464,_1511 )] )] == 10) || (_ptr__1452[safe_add( _1465,_ptr__1452[safe_add( _1464,_1511 )] )] == 2))))
              {
                {
                }
              }
              else
              {
                {
                  int _9228 = _ptr__1452[safe_add( _1464,_1511 )];
                  int _9229 = _ptr__1452[safe_add( safe_add( _1464,_1511 ),(int)1 )];
                  for (int _1512 = _9228; _1512 < _9229; ++_1512)
                  {
                    {
                      ((*natconmap_code)(_1508)) = _ptr__1452[safe_add( _1465,_1512 )];
                      ((*natconmap_cconst)(_1508)) = _ptr__1454[safe_add( _1466,_1512 )];
                      ++ _1508;
                    }
                  }
                  ((*natconmap_codeptr)(safe_add( _1509,(int)1 ))) = _1508;
                  ((*natconmap_codenidx)(_1509)) = _ptr__1453[safe_add( _1462,_1511 )];
                  _1501 = (_ptr__1453[safe_add( _1462,_1511 )] >= (int)0);
                  ++ _1509;
                }
              }
            }
          }
          ((*natconmap_coderowptre)(_ptr__1480[_1510])) = _1509;
        }
      }
      natconmap_numparameterized += _1502;
      if ((!_1501))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Expression contains parameterized SDP non-zero"));
        }
      }
      {}
    }
  }
  std::vector<long long> _9230;
  for (int _1514 = (int)0, _9231 = _1469; _1514 < _9231 ; ++_1514)
  {
    _9230.push_back(((*natconmap_slackidx)(_ptr__1480[_1514])));
  }
  auto _9232 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9230.size()),_9230.begin(),_9230.end()));
  monty::rc_ptr< ::mosek::fusion::LinearPSDConstraint > _1513 = ::mosek::fusion::p_LinearPSDConstraint::_new_LinearPSDConstraint(::mosek::fusion::Model::t(_pubthis),_1448,_1479,_1467,_1471,_1480,_9232);
  ((*cons)(_1479)) = (_1513).as<::mosek::fusion::ModelConstraint>();
  if (((int)((_1448).size()) > (int)0))
  {
    {
      con_map->setItem(_1448,_1479);
    }
  }
  {}
  return (_1513).as<::mosek::fusion::Constraint>();
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint_(const std::string & _1515,monty::rc_ptr< ::mosek::fusion::Expression > _1516,monty::rc_ptr< ::mosek::fusion::ConeDomain > _1517){
  if ((((int)((_1515).size()) > (int)0) && hasConstraint(_1515)))
  {
    {
      throw ::mosek::fusion::NameError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Duplicate constraint name '"))->__mosek_2fusion_2Utils_2StringBuffer__a(_1515)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"))->toString());
    }
  }
  {}
  if ((((int)((_1515).size()) > (int)0) && hasConstraint(_1515)))
  {
    {
      throw ::mosek::fusion::NameError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Duplicate constraint name '"))->__mosek_2fusion_2Utils_2StringBuffer__a(_1515)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"))->toString());
    }
  }
  {}
  if (mosek::fusion::p_ConeDomain::_get_impl(_1517)->int_flag)
  {
    {
      throw ::mosek::fusion::DomainError(std::string ("Integer domain not allowed in a constraint"));
    }
  }
  {}
  monty::rc_ptr< ::mosek::fusion::ExprDense > _1518 = ::mosek::fusion::p_ExprDense::_new_ExprDense((::mosek::fusion::p_ExprOptimizeCode::_new_ExprOptimizeCode((::mosek::fusion::p_ExprCompress::_new_ExprCompress(_1516)).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>());
  _1518->eval(rs,ws,xs);
  rs->pop_expr();
  std::shared_ptr< monty::ndarray< int,1 > > _1519 = mosek::fusion::p_WorkStack::_get_impl(rs)->i32;
  _checked_ptr_1<int> _ptr__1519(_1519 ? _1519->raw() : nullptr,_1519 ? _1519->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _1520 = mosek::fusion::p_WorkStack::_get_impl(rs)->i64;
  _checked_ptr_1<long long> _ptr__1520(_1520 ? _1520->raw() : nullptr,_1520 ? _1520->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1521 = mosek::fusion::p_WorkStack::_get_impl(rs)->f64;
  _checked_ptr_1<double> _ptr__1521(_1521 ? _1521->raw() : nullptr,_1521 ? _1521->size(0) : 0);
  int _1522 = mosek::fusion::p_WorkStack::_get_impl(rs)->nd;
  int _1523 = mosek::fusion::p_WorkStack::_get_impl(rs)->shape_base;
  int _1524 = mosek::fusion::p_WorkStack::_get_impl(rs)->nelem;
  int _1525 = mosek::fusion::p_WorkStack::_get_impl(rs)->nnz;
  int _1526 = mosek::fusion::p_WorkStack::_get_impl(rs)->ncodeatom;
  bool _1527 = mosek::fusion::p_WorkStack::_get_impl(rs)->hassp;
  int _1528 = mosek::fusion::p_WorkStack::_get_impl(rs)->ptr_base;
  int _1529 = mosek::fusion::p_WorkStack::_get_impl(rs)->nidxs_base;
  int _1530 = mosek::fusion::p_WorkStack::_get_impl(rs)->cof_base;
  int _1531 = mosek::fusion::p_WorkStack::_get_impl(rs)->code_base;
  int _1532 = mosek::fusion::p_WorkStack::_get_impl(rs)->codeptr_base;
  int _1533 = mosek::fusion::p_WorkStack::_get_impl(rs)->cconst_base;
  std::vector<int> _9233;
  for (int _1535 = (int)0, _9234 = _1522; _1535 < _9234 ; ++_1535)
  {
    _9233.push_back(_ptr__1519[safe_add( _1523,_1535 )]);
  }
  auto _9235 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9233.size()),_9233.begin(),_9233.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _1534 = _9235;
  _checked_ptr_1<int> _ptr__1534(_1534 ? _1534->raw() : nullptr,_1534 ? _1534->size(0) : 0);
  if (((NULL != mosek::fusion::p_ConeDomain::_get_impl(_1517)->shape.get()) && (!::mosek::fusion::p_Set::match(_1534,mosek::fusion::p_ConeDomain::_get_impl(_1517)->shape))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching expression and domain"));
    }
  }
  {}
  int _9236;
  bool _9237 = _1517->axisIsSet();
  if (_9237)
  {
    _9236 = _1517->getAxis();
  }
  else
  {
    _9236 = (_1522 - (int)1);
  }
  int _1536 = _9236;
  int _1537 = _ptr__1534[_1536];
  int _1538 = (int)1;
  int _1539 = (int)1;
  int _1540 = (int)1;
  {
    int _9238 = (int)0;
    int _9239 = _1522;
    for (int _1541 = _9238; _1541 < _9239; ++_1541)
    {
      {
        _1540 *= _ptr__1534[_1541];
      }
    }
    int _9240 = (int)0;
    int _9241 = _1536;
    for (int _1542 = _9240; _1542 < _9241; ++_1542)
    {
      {
        _1539 *= _ptr__1534[_1542];
      }
    }
    int _9242 = safe_add( _1536,(int)1 );
    int _9243 = _1522;
    for (int _1543 = _9242; _1543 < _9243; ++_1543)
    {
      {
        _1538 *= _ptr__1534[_1543];
      }
    }
  }
  int _1544 = safe_mul( _1539,_1538 );
  if (((mosek::fusion::p_ConeDomain::_get_impl(_1517)->key == ::mosek::fusion::QConeKey::InQCone) && (_1537 < (int)2)))
  {
    {
      throw ::mosek::fusion::DimensionError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Invalid size ("))->__mosek_2fusion_2Utils_2StringBuffer__a(_1537)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (") for quadratic cone"))->toString());
    }
  }
  else if(((mosek::fusion::p_ConeDomain::_get_impl(_1517)->key == ::mosek::fusion::QConeKey::InRotatedQCone) && (_1537 < (int)3)))
  {
    {
      throw ::mosek::fusion::DimensionError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Invalid size ("))->__mosek_2fusion_2Utils_2StringBuffer__a(_1537)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (") for rotated quadratic cone"))->toString());
    }
  }
  else if(((mosek::fusion::p_ConeDomain::_get_impl(_1517)->key == ::mosek::fusion::QConeKey::InPExpCone) && (_1537 != (int)3)))
  {
    {
      throw ::mosek::fusion::DimensionError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Invalid size ("))->__mosek_2fusion_2Utils_2StringBuffer__a(_1537)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (") for exponential cone"))->toString());
    }
  }
  else if(((mosek::fusion::p_ConeDomain::_get_impl(_1517)->key == ::mosek::fusion::QConeKey::InPPowCone) && (_1537 < (int)2)))
  {
    {
      throw ::mosek::fusion::DimensionError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Invalid size ("))->__mosek_2fusion_2Utils_2StringBuffer__a(_1537)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (") for power cone"))->toString());
    }
  }
  else if(((mosek::fusion::p_ConeDomain::_get_impl(_1517)->key == ::mosek::fusion::QConeKey::InDExpCone) && (_1537 != (int)3)))
  {
    {
      throw ::mosek::fusion::DimensionError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Invalid size ("))->__mosek_2fusion_2Utils_2StringBuffer__a(_1537)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (") for dual exponential cone"))->toString());
    }
  }
  else if(((mosek::fusion::p_ConeDomain::_get_impl(_1517)->key == ::mosek::fusion::QConeKey::InDPowCone) && (_1537 < (int)2)))
  {
    {
      throw ::mosek::fusion::DimensionError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Invalid size ("))->__mosek_2fusion_2Utils_2StringBuffer__a(_1537)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (") for dual power cone"))->toString());
    }
  }
  {}
  int _1545 = natvarmap_alloc(_1540);
  std::shared_ptr< monty::ndarray< int,1 > > _1546 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1540)));
  _checked_ptr_1<int> _ptr__1546(_1546 ? _1546->raw() : nullptr,_1546 ? _1546->size(0) : 0);
  natvarmap->get(_1545,_1546,(int)0);
  int _1547 = natconemap_alloc(_1544);
  int _9244 = (int)0;
  int _9245 = _1540;
  for (int _1548 = _9244; _1548 < _9245; ++_1548)
  {
    {
      ((*natvarmap_idx)(_ptr__1546[_1548])) = _1545;
    }
  }
  task_var_putboundlist_fr(_1546);
  std::shared_ptr< monty::ndarray< int,1 > > _9246;
  bool _9247 = (_1536 < ((int)((_1534)->size(0)) - (int)1));
  if (_9247)
  {
    _9246 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)((_1546)->size(0)))));
  }
  else
  {
    _9246 = _1546;
  }
  std::shared_ptr< monty::ndarray< int,1 > > _1549 = _9246;
  _checked_ptr_1<int> _ptr__1549(_1549 ? _1549->raw() : nullptr,_1549 ? _1549->size(0) : 0);
  if ((_1536 < ((int)((_1534)->size(0)) - (int)1)))
  {
    {
      int _1550 = (int)0;
      int _9248 = (int)0;
      int _9249 = _1539;
      for (int _1551 = _9248; _1551 < _9249; ++_1551)
      {
        {
          int _9250 = (int)0;
          int _9251 = _1538;
          for (int _1552 = _9250; _1552 < _9251; ++_1552)
          {
            {
              int _9252 = (int)0;
              int _9253 = _1537;
              for (int _1553 = _9252; _1553 < _9253; ++_1553)
              {
                {
                  _ptr__1549[_1550] = _ptr__1546[safe_add( safe_mul( safe_add( safe_mul( _1551,_1537 ),_1553 ),_1538 ),_1552 )];
                  ++ _1550;
                }
              }
            }
          }
        }
      }
    }
  }
  {}
  std::shared_ptr< monty::ndarray< int,1 > > _1554 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1544)));
  _checked_ptr_1<int> _ptr__1554(_1554 ? _1554->raw() : nullptr,_1554 ? _1554->size(0) : 0);
  natconemap->get(_1547,_1554,(int)0);
  ((*natconemap_dim)(_1547)) = _1537;
  if ((mosek::fusion::p_ConeDomain::_get_impl(_1517)->key == ::mosek::fusion::QConeKey::InQCone))
  {
    {
      task_put_quadcones(_1554,_1537,_1544,_1549);
    }
  }
  else if((mosek::fusion::p_ConeDomain::_get_impl(_1517)->key == ::mosek::fusion::QConeKey::InRotatedQCone))
  {
    {
      task_put_rquadcones(_1554,_1537,_1544,_1549);
    }
  }
  else if((mosek::fusion::p_ConeDomain::_get_impl(_1517)->key == ::mosek::fusion::QConeKey::InPExpCone))
  {
    {
      task_put_pexpcones(_1554,_1537,_1544,_1549);
    }
  }
  else if((mosek::fusion::p_ConeDomain::_get_impl(_1517)->key == ::mosek::fusion::QConeKey::InPPowCone))
  {
    {
      std::vector<double> _9254;
      for (int _1555 = (int)0, _9255 = _1544; _1555 < _9255 ; ++_1555)
      {
        _9254.push_back(mosek::fusion::p_ConeDomain::_get_impl(_1517)->alpha);
      }
      auto _9256 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9254.size()),_9254.begin(),_9254.end()));
      task_put_ppowcones(_1554,_1537,_1544,_1549,_9256);
    }
  }
  else if((mosek::fusion::p_ConeDomain::_get_impl(_1517)->key == ::mosek::fusion::QConeKey::InDExpCone))
  {
    {
      task_put_dexpcones(_1554,_1537,_1544,_1549);
    }
  }
  else if((mosek::fusion::p_ConeDomain::_get_impl(_1517)->key == ::mosek::fusion::QConeKey::InDPowCone))
  {
    {
      std::vector<double> _9257;
      for (int _1556 = (int)0, _9258 = _1544; _1556 < _9258 ; ++_1556)
      {
        _9257.push_back(mosek::fusion::p_ConeDomain::_get_impl(_1517)->alpha);
      }
      auto _9259 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9257.size()),_9257.begin(),_9257.end()));
      task_put_dpowcones(_1554,_1537,_1544,_1549,_9259);
    }
  }
  else
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("Internal error: Invalid cone type"));
    }
  }
  ((*vars)(_1545)) = nullptr;
  int _1557 = natconmap_alloc(_1540);
  std::shared_ptr< monty::ndarray< int,1 > > _1558 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1540)));
  _checked_ptr_1<int> _ptr__1558(_1558 ? _1558->raw() : nullptr,_1558 ? _1558->size(0) : 0);
  natconmap->get(_1557,_1558,(int)0);
  ((*natconmap_type)(_1557)) = safe_add( _1545,(int)6 );
  {
    int _9260 = (int)0;
    int _9261 = _1540;
    for (int _1559 = _9260; _1559 < _9261; ++_1559)
    {
      {
        ((*natconmap_slackidx)(_ptr__1558[_1559])) = safe_add( _ptr__1546[_1559],(int)1 );
      }
    }
    int _9262 = (int)0;
    int _9263 = _1540;
    for (int _1560 = _9262; _1560 < _9263; ++_1560)
    {
      {
        ((*natconmap_blockid)(_ptr__1558[_1560])) = _1557;
      }
    }
    int _9264 = (int)0;
    int _9265 = _1540;
    for (int _1561 = _9264; _1561 < _9265; ++_1561)
    {
      {
        ((*natconmap_idx)(_ptr__1558[_1561])) = _1561;
      }
    }
  }
  std::shared_ptr< monty::ndarray< double,1 > > _1562 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_1540)));
  _checked_ptr_1<double> _ptr__1562(_1562 ? _1562->raw() : nullptr,_1562 ? _1562->size(0) : 0);
  task_con_putboundlist_fx(_1558,_1562);
  putarows(_1558,rs,_1524,_1525,_1528,_1529,_1530,_1546);
  if ((_1526 == (int)0))
  {
    {
      int _9266 = (int)0;
      int _9267 = _1524;
      for (int _1563 = _9266; _1563 < _9267; ++_1563)
      {
        {
          ((*natconmap_coderowptrb)(_ptr__1558[_1563])) = natconmap_codeatomtop;
          ((*natconmap_coderowptre)(_ptr__1558[_1563])) = natconmap_codeatomtop;
        }
      }
    }
  }
  else
  {
    {
      bool _1564 = true;
      int _1565 = (int)0;
      int _1566 = (int)0;
      int _9268 = (int)0;
      int _9269 = _1524;
      for (int _1567 = _9268; _1567 < _9269; ++_1567)
      {
        {
          int _9270 = _ptr__1519[safe_add( _1528,_1567 )];
          int _9271 = _ptr__1519[safe_add( safe_add( _1528,_1567 ),(int)1 )];
          for (int _1568 = _9270; _1568 < _9271; ++_1568)
          {
            {
              if ((((_ptr__1519[safe_add( safe_add( _1532,_1568 ),(int)1 )] - _ptr__1519[safe_add( _1532,_1568 )]) == (int)1) && ((_ptr__1519[safe_add( _1531,_ptr__1519[safe_add( _1532,_1568 )] )] == 10) || (_ptr__1519[safe_add( _1531,_ptr__1519[safe_add( _1532,_1568 )] )] == 2))))
              {
                {
                }
              }
              else
              {
                {
                  ++ _1565;
                  _1566 += (_ptr__1519[safe_add( safe_add( _1532,_1568 ),(int)1 )] - _ptr__1519[safe_add( _1532,_1568 )]);
                }
              }
            }
          }
        }
      }
      int _1569 = natconmap_codenztop;
      int _1570 = natconmap_codeatomtop;
      natconmap_codealloc(_1565,_1566);
      int _1571 = _1570;
      int _1572 = _1569;
      int _9272 = (int)0;
      int _9273 = _1524;
      for (int _1573 = _9272; _1573 < _9273; ++_1573)
      {
        {
          ((*natconmap_coderowptrb)(_ptr__1558[_1573])) = _1572;
          int _9274 = _ptr__1519[safe_add( _1528,_1573 )];
          int _9275 = _ptr__1519[safe_add( safe_add( _1528,_1573 ),(int)1 )];
          for (int _1574 = _9274; _1574 < _9275; ++_1574)
          {
            {
              if ((((_ptr__1519[safe_add( safe_add( _1532,_1574 ),(int)1 )] - _ptr__1519[safe_add( _1532,_1574 )]) == (int)1) && ((_ptr__1519[safe_add( _1531,_ptr__1519[safe_add( _1532,_1574 )] )] == 10) || (_ptr__1519[safe_add( _1531,_ptr__1519[safe_add( _1532,_1574 )] )] == 2))))
              {
                {
                }
              }
              else
              {
                {
                  int _9276 = _ptr__1519[safe_add( _1532,_1574 )];
                  int _9277 = _ptr__1519[safe_add( safe_add( _1532,_1574 ),(int)1 )];
                  for (int _1575 = _9276; _1575 < _9277; ++_1575)
                  {
                    {
                      ((*natconmap_code)(_1571)) = _ptr__1519[safe_add( _1531,_1575 )];
                      ((*natconmap_cconst)(_1571)) = _ptr__1521[safe_add( _1533,_1575 )];
                      ++ _1571;
                    }
                  }
                  ((*natconmap_codeptr)(safe_add( _1572,(int)1 ))) = _1571;
                  ((*natconmap_codenidx)(_1572)) = _ptr__1520[safe_add( _1529,_1574 )];
                  _1564 = (_ptr__1520[safe_add( _1529,_1574 )] >= (int)0);
                  ++ _1572;
                }
              }
            }
          }
          ((*natconmap_coderowptre)(_ptr__1558[_1573])) = _1572;
        }
      }
      natconmap_numparameterized += _1565;
      if ((!_1564))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Expression contains parameterized SDP non-zero"));
        }
      }
      {}
    }
  }
  monty::rc_ptr< ::mosek::fusion::ConicConstraint > _1576 = ::mosek::fusion::p_ConicConstraint::_new_ConicConstraint(::mosek::fusion::Model::t(_pubthis),_1515,_1517,_1534,_1557,_1558,_1546);
  ((*cons)(_1557)) = (_1576).as<::mosek::fusion::ModelConstraint>();
  if (((int)((_1515).size()) > (int)0))
  {
    {
      con_map->setItem(_1515,_1557);
    }
  }
  {}
  return (_1576).as<::mosek::fusion::Constraint>();
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__constraint_(const std::string & _1577,monty::rc_ptr< ::mosek::fusion::Expression > _1578,monty::rc_ptr< ::mosek::fusion::LinearDomain > _1579){
  if ((((int)((_1577).size()) > (int)0) && hasConstraint(_1577)))
  {
    {
      throw ::mosek::fusion::NameError(::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Duplicate constraint name '"))->__mosek_2fusion_2Utils_2StringBuffer__a(_1577)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"))->toString());
    }
  }
  {}
  if (mosek::fusion::p_LinearDomain::_get_impl(_1579)->cardinal_flag)
  {
    {
      throw ::mosek::fusion::DomainError(std::string ("Integer domain not allowed in a constraint"));
    }
  }
  {}
  monty::rc_ptr< ::mosek::fusion::ExprDense > _1580 = ::mosek::fusion::p_ExprDense::_new_ExprDense((::mosek::fusion::p_ExprOptimizeCode::_new_ExprOptimizeCode((::mosek::fusion::p_ExprCompress::_new_ExprCompress(_1578)).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>());
  _1580->eval(rs,ws,xs);
  rs->pop_expr();
  std::shared_ptr< monty::ndarray< int,1 > > _1581 = mosek::fusion::p_WorkStack::_get_impl(rs)->i32;
  _checked_ptr_1<int> _ptr__1581(_1581 ? _1581->raw() : nullptr,_1581 ? _1581->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _1582 = mosek::fusion::p_WorkStack::_get_impl(rs)->i64;
  _checked_ptr_1<long long> _ptr__1582(_1582 ? _1582->raw() : nullptr,_1582 ? _1582->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1583 = mosek::fusion::p_WorkStack::_get_impl(rs)->f64;
  _checked_ptr_1<double> _ptr__1583(_1583 ? _1583->raw() : nullptr,_1583 ? _1583->size(0) : 0);
  int _1584 = mosek::fusion::p_WorkStack::_get_impl(rs)->nd;
  int _1585 = mosek::fusion::p_WorkStack::_get_impl(rs)->nelem;
  int _1586 = mosek::fusion::p_WorkStack::_get_impl(rs)->nnz;
  bool _1587 = mosek::fusion::p_WorkStack::_get_impl(rs)->hassp;
  int _1588 = mosek::fusion::p_WorkStack::_get_impl(rs)->ncodeatom;
  int _1589 = mosek::fusion::p_WorkStack::_get_impl(rs)->shape_base;
  int _1590 = mosek::fusion::p_WorkStack::_get_impl(rs)->ptr_base;
  int _1591 = mosek::fusion::p_WorkStack::_get_impl(rs)->nidxs_base;
  int _1592 = mosek::fusion::p_WorkStack::_get_impl(rs)->cof_base;
  int _1593 = mosek::fusion::p_WorkStack::_get_impl(rs)->codeptr_base;
  int _1594 = mosek::fusion::p_WorkStack::_get_impl(rs)->code_base;
  int _1595 = mosek::fusion::p_WorkStack::_get_impl(rs)->cconst_base;
  std::vector<int> _9278;
  for (int _1597 = (int)0, _9279 = _1584; _1597 < _9279 ; ++_1597)
  {
    _9278.push_back(_ptr__1581[safe_add( _1589,_1597 )]);
  }
  auto _9280 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9278.size()),_9278.begin(),_9278.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _1596 = _9280;
  _checked_ptr_1<int> _ptr__1596(_1596 ? _1596->raw() : nullptr,_1596 ? _1596->size(0) : 0);
  int _1598 = (int)1;
  int _9281 = (int)0;
  int _9282 = _1584;
  for (int _1599 = _9281; _1599 < _9282; ++_1599)
  {
    {
      _1598 *= _ptr__1596[_1599];
    }
  }
  if (((NULL != mosek::fusion::p_LinearDomain::_get_impl(_1579)->shape.get()) && (!::mosek::fusion::p_Set::match(_1596,mosek::fusion::p_LinearDomain::_get_impl(_1579)->shape))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching expression and domain"));
    }
  }
  {}
  std::shared_ptr< monty::ndarray< double,1 > > _1600;
  _checked_ptr_1<double> _ptr__1600(_1600 ? _1600->raw() : nullptr,_1600 ? _1600->size(0) : 0);
  int _1601 = natconmap_alloc(_1598);
  std::shared_ptr< monty::ndarray< int,1 > > _1602 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1598)));
  _checked_ptr_1<int> _ptr__1602(_1602 ? _1602->raw() : nullptr,_1602 ? _1602->size(0) : 0);
  natconmap->get(_1601,_1602,(int)0);
  putarows(_1602,rs,_1585,_1586,_1590,_1591,_1592,std::shared_ptr< monty::ndarray< int,1 > >(nullptr));
  {
    std::shared_ptr< monty::ndarray< int,2 > > _1603 = mosek::fusion::p_LinearDomain::_get_impl(_1579)->sparsity;
    bool _1604 = mosek::fusion::p_LinearDomain::_get_impl(_1579)->empty;
    std::shared_ptr< monty::ndarray< double,1 > > _1605 = mosek::fusion::p_LinearDomain::_get_impl(_1579)->bnd;
    _checked_ptr_1<double> _ptr__1605(_1605 ? _1605->raw() : nullptr,_1605 ? _1605->size(0) : 0);
    bool _1606 = mosek::fusion::p_LinearDomain::_get_impl(_1579)->scalable;
    {
      if ((NULL == _1605.get()))
      {
        {
          std::vector<double> _9283;
          for (int _1607 = (int)0, _9284 = (int)((_1602)->size(0)); _1607 < _9284 ; ++_1607)
          {
            _9283.push_back(0.0);
          }
          auto _9285 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9283.size()),_9283.begin(),_9283.end()));
          _1600 = _9285;
          _ptr__1600.update(_1600 ? _1600->raw() : nullptr, _1600 ? _1600->size(0) : 0);
        }
      }
      else if(_1606)
      {
        {
          std::vector<double> _9286;
          for (int _1608 = (int)0, _9287 = (int)((_1602)->size(0)); _1608 < _9287 ; ++_1608)
          {
            _9286.push_back(_ptr__1605[(int)0]);
          }
          auto _9288 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9286.size()),_9286.begin(),_9286.end()));
          _1600 = _9288;
          _ptr__1600.update(_1600 ? _1600->raw() : nullptr, _1600 ? _1600->size(0) : 0);
        }
      }
      else if((NULL != _1603.get()))
      {
        {
          std::shared_ptr< monty::ndarray< int,1 > > _1609 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1584)));
          _checked_ptr_1<int> _ptr__1609(_1609 ? _1609->raw() : nullptr,_1609 ? _1609->size(0) : 0);
          _ptr__1609[(_1584 - (int)1)] = (int)1;
          int _9289 = (int)1;
          int _9290 = _1584;
          for (int _1610 = _9289; _1610 < _9290; ++_1610)
          {
            {
              _ptr__1609[((_1584 - _1610) - (int)1)] = safe_mul( _ptr__1609[(_1584 - _1610)],_ptr__1596[(_1584 - _1610)] );
            }
          }
          _1600 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)((_1602)->size(0)))));
          _ptr__1600.update(_1600 ? _1600->raw() : nullptr, _1600 ? _1600->size(0) : 0);
          int _9291 = (int)0;
          int _9292 = (int)((_1603)->size(0));
          for (int _1611 = _9291; _1611 < _9292; ++_1611)
          {
            {
              int _1612 = (int)0;
              int _9293 = (int)0;
              int _9294 = _1584;
              for (int _1613 = _9293; _1613 < _9294; ++_1613)
              {
                {
                  _1612 += safe_mul( _ptr__1609[_1613],((*_1603)(_1611,_1613)) );
                }
              }
              _ptr__1600[_1612] = _ptr__1605[_1611];
            }
          }
        }
      }
      else if(_1604)
      {
        {
          std::shared_ptr< monty::ndarray< int,1 > > _1614 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_1584)));
          _checked_ptr_1<int> _ptr__1614(_1614 ? _1614->raw() : nullptr,_1614 ? _1614->size(0) : 0);
          _ptr__1614[(_1584 - (int)1)] = (int)1;
          int _9295 = (int)1;
          int _9296 = _1584;
          for (int _1615 = _9295; _1615 < _9296; ++_1615)
          {
            {
              _ptr__1614[((_1584 - _1615) - (int)1)] = safe_mul( _ptr__1614[(_1584 - _1615)],_ptr__1596[(_1584 - _1615)] );
            }
          }
          _1600 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)((_1602)->size(0)))));
          _ptr__1600.update(_1600 ? _1600->raw() : nullptr, _1600 ? _1600->size(0) : 0);
        }
      }
      else
      {
        {
          std::vector<double> _9297;
          for (int _1616 = (int)0, _9298 = (int)((_1602)->size(0)); _1616 < _9298 ; ++_1616)
          {
            _9297.push_back(_ptr__1605[_1616]);
          }
          auto _9299 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9297.size()),_9297.begin(),_9297.end()));
          _1600 = _9299;
          _ptr__1600.update(_1600 ? _1600->raw() : nullptr, _1600 ? _1600->size(0) : 0);
        }
      }
    }
  }
  int _9300 = (int)0;
  int _9301 = _1598;
  for (int _1617 = _9300; _1617 < _9301; ++_1617)
  {
    {
      ((*natconmap_idx)(_ptr__1602[_1617])) = _1601;
      ((*natconmap_slackidx)(_ptr__1602[_1617])) = (int)0;
    }
  }
  if ((mosek::fusion::p_LinearDomain::_get_impl(_1579)->key == ::mosek::fusion::RelationKey::IsFree))
  {
    {
      ((*natconmap_type)(_1601)) = (int)1;
      task_con_putboundlist_fr(_1602);
    }
  }
  {}
  if ((mosek::fusion::p_LinearDomain::_get_impl(_1579)->key == ::mosek::fusion::RelationKey::LessThan))
  {
    {
      ((*natconmap_type)(_1601)) = (int)3;
      task_con_putboundlist_up(_1602,_1600);
    }
  }
  else if((mosek::fusion::p_LinearDomain::_get_impl(_1579)->key == ::mosek::fusion::RelationKey::GreaterThan))
  {
    {
      ((*natconmap_type)(_1601)) = (int)2;
      task_con_putboundlist_lo(_1602,_1600);
    }
  }
  else if((mosek::fusion::p_LinearDomain::_get_impl(_1579)->key == ::mosek::fusion::RelationKey::EqualsTo))
  {
    {
      ((*natconmap_type)(_1601)) = (int)5;
      task_con_putboundlist_fx(_1602,_1600);
    }
  }
  {}
  if ((_1588 == (int)0))
  {
    {
      int _9302 = (int)0;
      int _9303 = _1585;
      for (int _1618 = _9302; _1618 < _9303; ++_1618)
      {
        {
          ((*natconmap_coderowptrb)(_ptr__1602[_1618])) = natconmap_codeatomtop;
          ((*natconmap_coderowptre)(_ptr__1602[_1618])) = natconmap_codeatomtop;
        }
      }
    }
  }
  else
  {
    {
      replace_row_code(rs,_1602,_1590,_1591,_1593,_1594,_1595);
    }
  }
  monty::rc_ptr< ::mosek::fusion::LinearConstraint > _1619 = ::mosek::fusion::p_LinearConstraint::_new_LinearConstraint(::mosek::fusion::Model::t(_pubthis),_1577,_1601,_1596,_1602);
  ((*cons)(_1601)) = (_1619).as<::mosek::fusion::ModelConstraint>();
  if (((int)((_1577).size()) > (int)0))
  {
    {
      con_map->setItem(_1577,_1601);
    }
  }
  {}
  return (_1619).as<::mosek::fusion::Constraint>();
}
std::string mosek::fusion::Model::getVersion  ( ) { return mosek::fusion::p_Model::getVersion(); }std::string mosek::fusion::p_Model::getVersion(){
  return ::mosek::fusion::p_BaseModel::env_getversion();
}
bool mosek::fusion::Model :: hasParameter(const std::string & _1620) { return mosek::fusion::p_Model::_get_impl(this)->hasParameter(_1620); }bool mosek::fusion::p_Model::hasParameter(const std::string & _1620){
  return par_map->hasItem(_1620);
}
bool mosek::fusion::Model :: hasConstraint(const std::string & _1621) { return mosek::fusion::p_Model::_get_impl(this)->hasConstraint(_1621); }bool mosek::fusion::p_Model::hasConstraint(const std::string & _1621){
  return con_map->hasItem(_1621);
}
bool mosek::fusion::Model :: hasVariable(const std::string & _1622) { return mosek::fusion::p_Model::_get_impl(this)->hasVariable(_1622); }bool mosek::fusion::p_Model::hasVariable(const std::string & _1622){
  return var_map->hasItem(_1622);
}
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model :: __mosek_2fusion_2Model__getParameter(const std::string & _1623) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__getParameter(_1623); }monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Model::getParameter(const std::string &  _1623) { return __mosek_2fusion_2Model__getParameter(_1623); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Model::__mosek_2fusion_2Model__getParameter(const std::string & _1623){
  return ((*parameters)(par_map->getItem(_1623)));
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model :: __mosek_2fusion_2Model__getConstraint(int _1624) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__getConstraint(_1624); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::getConstraint(int _1624) { return __mosek_2fusion_2Model__getConstraint(_1624); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__getConstraint(int _1624){
  return (((*cons)(_1624))).as<::mosek::fusion::Constraint>();
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model :: __mosek_2fusion_2Model__getConstraint(const std::string & _1625) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__getConstraint(_1625); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Model::getConstraint(const std::string &  _1625) { return __mosek_2fusion_2Model__getConstraint(_1625); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Model::__mosek_2fusion_2Model__getConstraint(const std::string & _1625){
  monty::rc_ptr< ::mosek::fusion::ModelConstraint > _9304;
  bool _9305 = con_map->hasItem(_1625);
  if (_9305)
  {
    _9304 = ((*cons)(con_map->getItem(_1625)));
  }
  else
  {
    _9304 = nullptr;
  }
  return (_9304).as<::mosek::fusion::Constraint>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__getVariable(int _1626) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__getVariable(_1626); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::getVariable(int _1626) { return __mosek_2fusion_2Model__getVariable(_1626); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__getVariable(int _1626){
  return (((*vars)(_1626))).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model :: __mosek_2fusion_2Model__getVariable(const std::string & _1627) { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__getVariable(_1627); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Model::getVariable(const std::string &  _1627) { return __mosek_2fusion_2Model__getVariable(_1627); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Model::__mosek_2fusion_2Model__getVariable(const std::string & _1627){
  if (var_map->hasItem(_1627))
  {
    {
      int _1628 = var_map->getItem(_1627);
      if ((_1628 < (int)0))
      {
        {
          return (((*barvars)((-safe_add( _1628,(int)1 ))))).as<::mosek::fusion::Variable>();
        }
      }
      else
      {
        {
          return (((*vars)(_1628))).as<::mosek::fusion::Variable>();
        }
      }
    }
  }
  else
  {
    {
      return nullptr;
    }
  }
}
std::string mosek::fusion::Model :: getName() { return mosek::fusion::p_Model::_get_impl(this)->getName(); }std::string mosek::fusion::p_Model::getName(){
  return model_name;
}
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Model::getParameterValue(std::shared_ptr< monty::ndarray< int,1 > > _1629){
  _checked_ptr_1<int> _ptr__1629(_1629 ? _1629->raw() : nullptr, _1629 ? _1629->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1630 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)((_1629)->size(0)))));
  _checked_ptr_1<double> _ptr__1630(_1630 ? _1630->raw() : nullptr,_1630 ? _1630->size(0) : 0);
  int _9306 = (int)0;
  int _9307 = (int)((_1629)->size(0));
  for (int _1631 = _9306; _1631 < _9307; ++_1631)
  {
    {
      _ptr__1630[_1631] = ((*param_value)(_ptr__1629[_1631]));
    }
  }
  return _1630;
}
void mosek::fusion::p_Model::setParameterValue(std::shared_ptr< monty::ndarray< int,1 > > _1632,std::shared_ptr< monty::ndarray< double,1 > > _1633){
  _checked_ptr_1<int> _ptr__1632(_1632 ? _1632->raw() : nullptr, _1632 ? _1632->size(0) : 0);
  _checked_ptr_1<double> _ptr__1633(_1633 ? _1633->raw() : nullptr, _1633 ? _1633->size(0) : 0);
  int _9308 = (int)0;
  int _9309 = (int)((_1632)->size(0));
  for (int _1634 = _9308; _1634 < _9309; ++_1634)
  {
    {
      ((*param_value)(_ptr__1632[_1634])) = _ptr__1633[_1634];
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::Model :: __mosek_2fusion_2Model__clone() { return mosek::fusion::p_Model::_get_impl(this)->__mosek_2fusion_2Model__clone(); }monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::Model::clone() { return __mosek_2fusion_2Model__clone(); }
monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::p_Model::__mosek_2fusion_2Model__clone(){
  return ::mosek::fusion::p_Model::_new_Model(::mosek::fusion::Model::t(_pubthis));
}
void mosek::fusion::p_Model::destroy(){xs.reset();ws.reset();rs.reset();con_map.reset();cons.reset();natconmap_objcconst.reset();natconmap_objcode.reset();natconmap_objcodeptr.reset();natconmap_objcodenidx.reset();natconmap_cconst.reset();natconmap_code.reset();natconmap_codeptr.reset();natconmap_codenidx.reset();natconmap_coderowptre.reset();natconmap_coderowptrb.reset();param_value.reset();par_map.reset();parameters.reset();natconmap_type.reset();natconmap_idx.reset();natconmap_slackidx.reset();natconmap_blockid.reset();natconmap.reset();initsol_xx_flag.reset();initsol_xx.reset();var_map.reset();barvars.reset();natbarvarmap_ptr.reset();natbarvarmap_num.reset();natbarvar_dim.reset();natbarvar_ptr.reset();natbarvar_j.reset();natbarvar_i.reset();natbarvar_idx.reset();natvarmap_type.reset();natconemap_dim.reset();natconemap.reset();vars.reset();natvarmap_idx.reset();natvarmap_blockid.reset();natvarmap.reset();}void mosek::fusion::Model::destroy() { mosek::fusion::p_Model::_get_impl(this)->destroy(); }mosek::fusion::SliceVariable::SliceVariable(mosek::fusion::p_SliceVariable *_impl) : mosek::fusion::BaseVariable(_impl) { /*std::cout << "SliceVariable()" << this << std::endl; */ }mosek::fusion::SliceVariable::~SliceVariable() {  /* std::cout << "~SliceVariable()" << this << std::endl << std::flush; */ }mosek::fusion::p_SliceVariable::p_SliceVariable  (::mosek::fusion::SliceVariable * _pubthis) :     mosek::fusion::p_BaseVariable(_pubthis),    _pubthis(_pubthis){}mosek::fusion::SliceVariable::t mosek::fusion::p_SliceVariable::_new_SliceVariable  (monty::rc_ptr< ::mosek::fusion::Model > _1635,    std::shared_ptr< monty::ndarray< int,1 > > _1636,    std::shared_ptr< monty::ndarray< long long,1 > > _1637,    std::shared_ptr< monty::ndarray< long long,1 > > _1638){ return new mosek::fusion::SliceVariable(_1635,_1636,_1637,_1638); }mosek::fusion::SliceVariable::SliceVariable  (monty::rc_ptr< ::mosek::fusion::Model > _1635,    std::shared_ptr< monty::ndarray< int,1 > > _1636,    std::shared_ptr< monty::ndarray< long long,1 > > _1637,    std::shared_ptr< monty::ndarray< long long,1 > > _1638) :    SliceVariable(new mosek::fusion::p_SliceVariable(this)){ mosek::fusion::p_SliceVariable::_get_impl(this)->_initialize(_1635,_1636,_1637,_1638); }void mosek::fusion::p_SliceVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _1635,    std::shared_ptr< monty::ndarray< int,1 > > _1636,    std::shared_ptr< monty::ndarray< long long,1 > > _1637,    std::shared_ptr< monty::ndarray< long long,1 > > _1638){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__1636(_1636 ? _1636->raw() : nullptr, _1636 ? _1636->size(0) : 0);
    _checked_ptr_1<long long> _ptr__1637(_1637 ? _1637->raw() : nullptr, _1637 ? _1637->size(0) : 0);
    _checked_ptr_1<long long> _ptr__1638(_1638 ? _1638->raw() : nullptr, _1638 ? _1638->size(0) : 0);
    mosek::fusion::p_BaseVariable::_initialize(_1635,_1636,_1637,_1638);
    mosek::fusion::p_SliceVariable::_get_impl(::mosek::fusion::SliceVariable::t(_pubthis))->nativeidxs = _1638;
    mosek::fusion::p_SliceVariable::_get_impl(::mosek::fusion::SliceVariable::t(_pubthis))->sparsity = _1637;
    mosek::fusion::p_SliceVariable::_get_impl(::mosek::fusion::SliceVariable::t(_pubthis))->shape = _1636;
  }
}mosek::fusion::SliceVariable::t mosek::fusion::p_SliceVariable::_new_SliceVariable  (monty::rc_ptr< ::mosek::fusion::SliceVariable > _1639){ return new mosek::fusion::SliceVariable(_1639); }mosek::fusion::SliceVariable::SliceVariable  (monty::rc_ptr< ::mosek::fusion::SliceVariable > _1639) :    SliceVariable(new mosek::fusion::p_SliceVariable(this)){ mosek::fusion::p_SliceVariable::_get_impl(this)->_initialize(_1639); }void mosek::fusion::p_SliceVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::SliceVariable > _1639){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseVariable::_initialize(_1639,_1639->__mosek_2fusion_2BaseVariable__getModel());
    mosek::fusion::p_SliceVariable::_get_impl(::mosek::fusion::SliceVariable::t(_pubthis))->nativeidxs = mosek::fusion::p_SliceVariable::_get_impl(_1639)->nativeidxs;
    mosek::fusion::p_SliceVariable::_get_impl(::mosek::fusion::SliceVariable::t(_pubthis))->sparsity = mosek::fusion::p_SliceVariable::_get_impl(_1639)->sparsity;
    mosek::fusion::p_SliceVariable::_get_impl(::mosek::fusion::SliceVariable::t(_pubthis))->shape = mosek::fusion::p_SliceVariable::_get_impl(_1639)->shape;
  }
}void mosek::fusion::p_SliceVariable::destroy(){shape.reset();sparsity.reset();nativeidxs.reset();}void mosek::fusion::SliceVariable::destroy() { mosek::fusion::p_SliceVariable::_get_impl(this)->destroy(); }mosek::fusion::SymRangedVariable::SymRangedVariable(mosek::fusion::p_SymRangedVariable *_impl) : mosek::fusion::ModelVariable(_impl) { /*std::cout << "SymRangedVariable()" << this << std::endl; */ }mosek::fusion::SymRangedVariable::~SymRangedVariable() {  /* std::cout << "~SymRangedVariable()" << this << std::endl << std::flush; */ }mosek::fusion::p_SymRangedVariable::p_SymRangedVariable  (::mosek::fusion::SymRangedVariable * _pubthis) :     mosek::fusion::p_ModelVariable(_pubthis),    _pubthis(_pubthis){}mosek::fusion::SymRangedVariable::t mosek::fusion::p_SymRangedVariable::_new_SymRangedVariable  (monty::rc_ptr< ::mosek::fusion::SymRangedVariable > _1640,    monty::rc_ptr< ::mosek::fusion::Model > _1641){ return new mosek::fusion::SymRangedVariable(_1640,_1641); }mosek::fusion::SymRangedVariable::SymRangedVariable  (monty::rc_ptr< ::mosek::fusion::SymRangedVariable > _1640,    monty::rc_ptr< ::mosek::fusion::Model > _1641) :    SymRangedVariable(new mosek::fusion::p_SymRangedVariable(this)){ mosek::fusion::p_SymRangedVariable::_get_impl(this)->_initialize(_1640,_1641); }void mosek::fusion::p_SymRangedVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::SymRangedVariable > _1640,    monty::rc_ptr< ::mosek::fusion::Model > _1641){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_ModelVariable::_initialize(_1640,_1641);
    names_flushed = mosek::fusion::p_SymRangedVariable::_get_impl(_1640)->names_flushed;
    name = mosek::fusion::p_SymRangedVariable::_get_impl(_1640)->name;
    sparsity = mosek::fusion::p_SymRangedVariable::_get_impl(_1640)->sparsity;
    nativeidxs = mosek::fusion::p_SymRangedVariable::_get_impl(_1640)->nativeidxs;
    dim = mosek::fusion::p_SymRangedVariable::_get_impl(_1640)->dim;
  }
}mosek::fusion::SymRangedVariable::t mosek::fusion::p_SymRangedVariable::_new_SymRangedVariable  (monty::rc_ptr< ::mosek::fusion::Model > _1642,    const std::string &  _1643,    long long _1644,    int _1645,    std::shared_ptr< monty::ndarray< long long,1 > > _1646,    std::shared_ptr< monty::ndarray< int,1 > > _1647){ return new mosek::fusion::SymRangedVariable(_1642,_1643,_1644,_1645,_1646,_1647); }mosek::fusion::SymRangedVariable::SymRangedVariable  (monty::rc_ptr< ::mosek::fusion::Model > _1642,    const std::string &  _1643,    long long _1644,    int _1645,    std::shared_ptr< monty::ndarray< long long,1 > > _1646,    std::shared_ptr< monty::ndarray< int,1 > > _1647) :    SymRangedVariable(new mosek::fusion::p_SymRangedVariable(this)){ mosek::fusion::p_SymRangedVariable::_get_impl(this)->_initialize(_1642,_1643,_1644,_1645,_1646,_1647); }void mosek::fusion::p_SymRangedVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _1642,    const std::string &  _1643,    long long _1644,    int _1645,    std::shared_ptr< monty::ndarray< long long,1 > > _1646,    std::shared_ptr< monty::ndarray< int,1 > > _1647){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<long long> _ptr__1646(_1646 ? _1646->raw() : nullptr, _1646 ? _1646->size(0) : 0);
    _checked_ptr_1<int> _ptr__1647(_1647 ? _1647->raw() : nullptr, _1647 ? _1647->size(0) : 0);
    mosek::fusion::p_ModelVariable::_initialize(_1642,_1643,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_1645),(int)(_1645)}),_1644,::mosek::fusion::p_SymRangedVariable::mirror_sp(_1645,_1646),::mosek::fusion::p_SymRangedVariable::mirror_idxs(_1645,_1646,_1647));
    names_flushed = false;
    mosek::fusion::p_SymRangedVariable::_get_impl(::mosek::fusion::SymRangedVariable::t(_pubthis))->name = _1643;
    mosek::fusion::p_SymRangedVariable::_get_impl(::mosek::fusion::SymRangedVariable::t(_pubthis))->nativeidxs = _1647;
    mosek::fusion::p_SymRangedVariable::_get_impl(::mosek::fusion::SymRangedVariable::t(_pubthis))->sparsity = _1646;
    mosek::fusion::p_SymRangedVariable::_get_impl(::mosek::fusion::SymRangedVariable::t(_pubthis))->dim = _1645;
  }
}void mosek::fusion::p_SymRangedVariable::dual_u(int _1648,std::shared_ptr< monty::ndarray< double,1 > > _1649){
  _checked_ptr_1<double> _ptr__1649(_1649 ? _1649->raw() : nullptr, _1649 ? _1649->size(0) : 0);
  dual_lu(_1648,_1649,false);
}
void mosek::fusion::p_SymRangedVariable::dual_l(int _1650,std::shared_ptr< monty::ndarray< double,1 > > _1651){
  _checked_ptr_1<double> _ptr__1651(_1651 ? _1651->raw() : nullptr, _1651 ? _1651->size(0) : 0);
  dual_lu(_1650,_1651,true);
}
void mosek::fusion::p_SymRangedVariable::flushNames(){
  monty::rc_ptr< ::mosek::fusion::Model > _1652 = _pubthis->__mosek_2fusion_2BaseVariable__getModel();
  if (((!names_flushed) && ((int)((name).size()) > (int)0)))
  {
    {
      if ((NULL == sparsity.get()))
      {
        {
          int _9310 = (int)0;
          int _9311 = (int)((nativeidxs)->size(0));
          for (int _1653 = _9310; _1653 < _9311; ++_1653)
          {
            {
              std::string _9312;
              bool _9313 = ((int)((name).size()) == (int)0);
              if (_9313)
              {
                _9312 = std::string ("");
              }
              else
              {
                _9312 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("["))->__mosek_2fusion_2Utils_2StringBuffer__a((_1653 / dim))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a((_1653 % dim))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("]"))->toString();
              }
              mosek::fusion::p_Model::_get_impl(_1652.get())->varname(((*nativeidxs)(_1653)),_9312);
            }
          }
        }
      }
      else
      {
        {
          int _9314 = (int)0;
          int _9315 = (int)((sparsity)->size(0));
          for (int _1654 = _9314; _1654 < _9315; ++_1654)
          {
            {
              mosek::fusion::p_Model::_get_impl(_1652.get())->varname(((*nativeidxs)(_1654)),::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("["))->__mosek_2fusion_2Utils_2StringBuffer__a((((*sparsity)(_1654)) / dim))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a((((*sparsity)(_1654)) % dim))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("]"))->toString());
            }
          }
        }
      }
      names_flushed = true;
    }
  }
  {}
}
monty::rc_ptr< ::mosek::fusion::ModelVariable > mosek::fusion::p_SymRangedVariable::__mosek_2fusion_2SymRangedVariable__clone(monty::rc_ptr< ::mosek::fusion::Model > _1655){
  return (::mosek::fusion::p_SymRangedVariable::_new_SymRangedVariable(::mosek::fusion::SymRangedVariable::t(_pubthis),_1655)).as<::mosek::fusion::ModelVariable>();
}
std::shared_ptr< monty::ndarray< long long,1 > > mosek::fusion::p_SymRangedVariable::mirror_idxs(int _1656,std::shared_ptr< monty::ndarray< long long,1 > > _1657,std::shared_ptr< monty::ndarray< int,1 > > _1658){
  _checked_ptr_1<long long> _ptr__1657(_1657 ? _1657->raw() : nullptr, _1657 ? _1657->size(0) : 0);
  _checked_ptr_1<int> _ptr__1658(_1658 ? _1658->raw() : nullptr, _1658 ? _1658->size(0) : 0);
  if ((NULL == _1657.get()))
  {
    {
      std::shared_ptr< monty::ndarray< long long,1 > > _1659 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_mul( _1656,_1656 ))));
      _checked_ptr_1<long long> _ptr__1659(_1659 ? _1659->raw() : nullptr,_1659 ? _1659->size(0) : 0);
      int _1660 = (int)0;
      {
        int _9316 = (int)0;
        int _9317 = _1656;
        for (int _1661 = _9316; _1661 < _9317; ++_1661)
        {
          {
            _ptr__1659[safe_add( safe_mul( _1661,_1656 ),_1661 )] = safe_add( _ptr__1658[_1660],(int)1 );
            ++ _1660;
            int _9318 = safe_add( _1661,(int)1 );
            int _9319 = _1656;
            for (int _1662 = _9318; _1662 < _9319; ++_1662)
            {
              {
                _ptr__1659[safe_add( safe_mul( _1661,_1656 ),_1662 )] = safe_add( _ptr__1658[_1660],(int)1 );
                _ptr__1659[safe_add( safe_mul( _1662,_1656 ),_1661 )] = safe_add( _ptr__1658[_1660],(int)1 );
                ++ _1660;
              }
            }
          }
        }
      }
      return _1659;
    }
  }
  else
  {
    {
      int _1663 = (int)0;
      {
        int _9320 = (int)0;
        int _9321 = (int)((_1657)->size(0));
        for (int _1664 = _9320; _1664 < _9321; ++_1664)
        {
          {
            int _9322;
            bool _9323 = ((_ptr__1657[_1664] % safe_add( _1656,(int)1 )) == (int)0);
            if (_9323)
            {
              _9322 = (int)1;
            }
            else
            {
              _9322 = (int)2;
            }
            _1663 += _9322;
          }
        }
      }
      std::shared_ptr< monty::ndarray< long long,1 > > _1665 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1663)));
      _checked_ptr_1<long long> _ptr__1665(_1665 ? _1665->raw() : nullptr,_1665 ? _1665->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _1666 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1663)));
      _checked_ptr_1<long long> _ptr__1666(_1666 ? _1666->raw() : nullptr,_1666 ? _1666->size(0) : 0);
      {
        int _1667 = (int)0;
        int _9324 = (int)0;
        int _9325 = (int)((_1657)->size(0));
        for (int _1668 = _9324; _1668 < _9325; ++_1668)
        {
          {
            long long _1669 = (_ptr__1657[_1668] / _1656);
            long long _1670 = (_ptr__1657[_1668] % _1656);
            _ptr__1665[_1667] = _ptr__1657[_1668];
            _ptr__1666[_1667] = safe_add( _ptr__1658[_1668],(int)1 );
            ++ _1667;
            if ((_1669 != _1670))
            {
              {
                _ptr__1665[_1667] = safe_add( safe_mul( _1670,_1656 ),_1669 );
                _ptr__1666[_1667] = safe_add( _ptr__1658[_1668],(int)1 );
                ++ _1667;
              }
            }
            {}
          }
        }
      }
      std::vector<long long> _9326;
      for (int _1672 = (int)0, _9327 = _1663; _1672 < _9327 ; ++_1672)
      {
        _9326.push_back(_1672);
      }
      auto _9328 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9326.size()),_9326.begin(),_9326.end()));
      std::shared_ptr< monty::ndarray< long long,1 > > _1671 = _9328;
      _checked_ptr_1<long long> _ptr__1671(_1671 ? _1671->raw() : nullptr,_1671 ? _1671->size(0) : 0);
      ::mosek::fusion::p_CommonTools::argQsort(_1671,_1665,std::shared_ptr< monty::ndarray< long long,1 > >(nullptr),(long long)((int)0),(long long)(_1663));
      std::vector<long long> _9329;
      for (int _1673 = (int)0, _9330 = _1663; _1673 < _9330 ; ++_1673)
      {
        _9329.push_back(_ptr__1666[_ptr__1671[_1673]]);
      }
      auto _9331 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9329.size()),_9329.begin(),_9329.end()));
      return _9331;
    }
  }
}
std::shared_ptr< monty::ndarray< long long,1 > > mosek::fusion::p_SymRangedVariable::mirror_sp(int _1674,std::shared_ptr< monty::ndarray< long long,1 > > _1675){
  _checked_ptr_1<long long> _ptr__1675(_1675 ? _1675->raw() : nullptr, _1675 ? _1675->size(0) : 0);
  if ((NULL == _1675.get()))
  {
    {
      return nullptr;
    }
  }
  else
  {
    {
      int _1676 = (int)0;
      {
        int _9332 = (int)0;
        int _9333 = (int)((_1675)->size(0));
        for (int _1677 = _9332; _1677 < _9333; ++_1677)
        {
          {
            int _9334;
            bool _9335 = ((_ptr__1675[_1677] % safe_add( _1674,(int)1 )) == (int)0);
            if (_9335)
            {
              _9334 = (int)1;
            }
            else
            {
              _9334 = (int)2;
            }
            _1676 += _9334;
          }
        }
      }
      std::shared_ptr< monty::ndarray< long long,1 > > _1678 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1676)));
      _checked_ptr_1<long long> _ptr__1678(_1678 ? _1678->raw() : nullptr,_1678 ? _1678->size(0) : 0);
      {
        int _1679 = (int)0;
        int _9336 = (int)0;
        int _9337 = (int)((_1675)->size(0));
        for (int _1680 = _9336; _1680 < _9337; ++_1680)
        {
          {
            long long _1681 = (_ptr__1675[_1680] / _1674);
            long long _1682 = (_ptr__1675[_1680] % _1674);
            _ptr__1678[_1679] = _ptr__1675[_1680];
            ++ _1679;
            if ((_1681 != _1682))
            {
              {
                _ptr__1678[_1679] = safe_add( safe_mul( _1682,_1674 ),_1681 );
                ++ _1679;
              }
            }
            {}
          }
        }
      }
      std::vector<long long> _9338;
      for (int _1684 = (int)0, _9339 = _1676; _1684 < _9339 ; ++_1684)
      {
        _9338.push_back(_1684);
      }
      auto _9340 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9338.size()),_9338.begin(),_9338.end()));
      std::shared_ptr< monty::ndarray< long long,1 > > _1683 = _9340;
      _checked_ptr_1<long long> _ptr__1683(_1683 ? _1683->raw() : nullptr,_1683 ? _1683->size(0) : 0);
      ::mosek::fusion::p_CommonTools::argQsort(_1683,_1678,std::shared_ptr< monty::ndarray< long long,1 > >(nullptr),(long long)((int)0),(long long)(_1676));
      std::vector<long long> _9341;
      for (int _1685 = (int)0, _9342 = _1676; _1685 < _9342 ; ++_1685)
      {
        _9341.push_back(_ptr__1678[_ptr__1683[_1685]]);
      }
      auto _9343 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9341.size()),_9341.begin(),_9341.end()));
      return _9343;
    }
  }
}
void mosek::fusion::p_SymRangedVariable::destroy(){sparsity.reset();nativeidxs.reset();}void mosek::fusion::SymRangedVariable::destroy() { mosek::fusion::p_SymRangedVariable::_get_impl(this)->destroy(); }mosek::fusion::BoundInterfaceVariable::BoundInterfaceVariable(mosek::fusion::p_BoundInterfaceVariable *_impl) : mosek::fusion::SliceVariable(_impl) { /*std::cout << "BoundInterfaceVariable()" << this << std::endl; */ }mosek::fusion::BoundInterfaceVariable::~BoundInterfaceVariable() {  /* std::cout << "~BoundInterfaceVariable()" << this << std::endl << std::flush; */ }mosek::fusion::p_BoundInterfaceVariable::p_BoundInterfaceVariable  (::mosek::fusion::BoundInterfaceVariable * _pubthis) :     mosek::fusion::p_SliceVariable(_pubthis),    _pubthis(_pubthis){}mosek::fusion::BoundInterfaceVariable::t mosek::fusion::p_BoundInterfaceVariable::_new_BoundInterfaceVariable  (monty::rc_ptr< ::mosek::fusion::Model > _1686,    std::shared_ptr< monty::ndarray< int,1 > > _1687,    std::shared_ptr< monty::ndarray< long long,1 > > _1688,    std::shared_ptr< monty::ndarray< long long,1 > > _1689,    bool _1690){ return new mosek::fusion::BoundInterfaceVariable(_1686,_1687,_1688,_1689,_1690); }mosek::fusion::BoundInterfaceVariable::BoundInterfaceVariable  (monty::rc_ptr< ::mosek::fusion::Model > _1686,    std::shared_ptr< monty::ndarray< int,1 > > _1687,    std::shared_ptr< monty::ndarray< long long,1 > > _1688,    std::shared_ptr< monty::ndarray< long long,1 > > _1689,    bool _1690) :    BoundInterfaceVariable(new mosek::fusion::p_BoundInterfaceVariable(this)){ mosek::fusion::p_BoundInterfaceVariable::_get_impl(this)->_initialize(_1686,_1687,_1688,_1689,_1690); }void mosek::fusion::p_BoundInterfaceVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _1686,    std::shared_ptr< monty::ndarray< int,1 > > _1687,    std::shared_ptr< monty::ndarray< long long,1 > > _1688,    std::shared_ptr< monty::ndarray< long long,1 > > _1689,    bool _1690){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__1687(_1687 ? _1687->raw() : nullptr, _1687 ? _1687->size(0) : 0);
    _checked_ptr_1<long long> _ptr__1688(_1688 ? _1688->raw() : nullptr, _1688 ? _1688->size(0) : 0);
    _checked_ptr_1<long long> _ptr__1689(_1689 ? _1689->raw() : nullptr, _1689 ? _1689->size(0) : 0);
    mosek::fusion::p_SliceVariable::_initialize(_1686,_1687,_1688,_1689);
    mosek::fusion::p_BoundInterfaceVariable::_get_impl(::mosek::fusion::BoundInterfaceVariable::t(_pubthis))->islower = _1690;
  }
}mosek::fusion::BoundInterfaceVariable::t mosek::fusion::p_BoundInterfaceVariable::_new_BoundInterfaceVariable  (monty::rc_ptr< ::mosek::fusion::SliceVariable > _1691,    bool _1692){ return new mosek::fusion::BoundInterfaceVariable(_1691,_1692); }mosek::fusion::BoundInterfaceVariable::BoundInterfaceVariable  (monty::rc_ptr< ::mosek::fusion::SliceVariable > _1691,    bool _1692) :    BoundInterfaceVariable(new mosek::fusion::p_BoundInterfaceVariable(this)){ mosek::fusion::p_BoundInterfaceVariable::_get_impl(this)->_initialize(_1691,_1692); }void mosek::fusion::p_BoundInterfaceVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::SliceVariable > _1691,    bool _1692){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_SliceVariable::_initialize(_1691);
    mosek::fusion::p_BoundInterfaceVariable::_get_impl(::mosek::fusion::BoundInterfaceVariable::t(_pubthis))->islower = _1692;
  }
}std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::BoundInterfaceVariable :: dual() { return mosek::fusion::p_BoundInterfaceVariable::_get_impl(this)->dual(); }std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_BoundInterfaceVariable::dual(){
  std::shared_ptr< monty::ndarray< double,1 > > _1693 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_pubthis->getSize())));
  _checked_ptr_1<double> _ptr__1693(_1693 ? _1693->raw() : nullptr,_1693 ? _1693->size(0) : 0);
  dual_lu((int)0,_1693,islower);
  return _1693;
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable :: __mosek_2fusion_2BoundInterfaceVariable__transpose() { return mosek::fusion::p_BoundInterfaceVariable::_get_impl(this)->__mosek_2fusion_2BoundInterfaceVariable__transpose(); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable::transpose() { return __mosek_2fusion_2BoundInterfaceVariable__transpose(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable::__mosek_2fusion_2BaseVariable__transpose() { return __mosek_2fusion_2BoundInterfaceVariable__transpose(); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BoundInterfaceVariable::__mosek_2fusion_2BoundInterfaceVariable__transpose(){
  return (__mosek_2fusion_2BoundInterfaceVariable__from_(::mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__transpose())).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable :: __mosek_2fusion_2BoundInterfaceVariable__pick(std::shared_ptr< monty::ndarray< int,1 > > _1694,std::shared_ptr< monty::ndarray< int,1 > > _1695,std::shared_ptr< monty::ndarray< int,1 > > _1696) { return mosek::fusion::p_BoundInterfaceVariable::_get_impl(this)->__mosek_2fusion_2BoundInterfaceVariable__pick(_1694,_1695,_1696); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable::pick(std::shared_ptr< monty::ndarray< int,1 > > _1694,std::shared_ptr< monty::ndarray< int,1 > > _1695,std::shared_ptr< monty::ndarray< int,1 > > _1696) { return __mosek_2fusion_2BoundInterfaceVariable__pick(_1694,_1695,_1696); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable::__mosek_2fusion_2BaseVariable__pick(std::shared_ptr< monty::ndarray< int,1 > > _1694,std::shared_ptr< monty::ndarray< int,1 > > _1695,std::shared_ptr< monty::ndarray< int,1 > > _1696) { return __mosek_2fusion_2BoundInterfaceVariable__pick(_1694,_1695,_1696); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BoundInterfaceVariable::__mosek_2fusion_2BoundInterfaceVariable__pick(std::shared_ptr< monty::ndarray< int,1 > > _1694,std::shared_ptr< monty::ndarray< int,1 > > _1695,std::shared_ptr< monty::ndarray< int,1 > > _1696){
  _checked_ptr_1<int> _ptr__1694(_1694 ? _1694->raw() : nullptr, _1694 ? _1694->size(0) : 0);
  _checked_ptr_1<int> _ptr__1695(_1695 ? _1695->raw() : nullptr, _1695 ? _1695->size(0) : 0);
  _checked_ptr_1<int> _ptr__1696(_1696 ? _1696->raw() : nullptr, _1696 ? _1696->size(0) : 0);
  return (__mosek_2fusion_2BoundInterfaceVariable__from_(::mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__pick(_1694,_1695,_1696))).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable :: __mosek_2fusion_2BoundInterfaceVariable__pick(std::shared_ptr< monty::ndarray< int,1 > > _1697,std::shared_ptr< monty::ndarray< int,1 > > _1698) { return mosek::fusion::p_BoundInterfaceVariable::_get_impl(this)->__mosek_2fusion_2BoundInterfaceVariable__pick(_1697,_1698); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable::pick(std::shared_ptr< monty::ndarray< int,1 > > _1697,std::shared_ptr< monty::ndarray< int,1 > > _1698) { return __mosek_2fusion_2BoundInterfaceVariable__pick(_1697,_1698); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable::__mosek_2fusion_2BaseVariable__pick(std::shared_ptr< monty::ndarray< int,1 > > _1697,std::shared_ptr< monty::ndarray< int,1 > > _1698) { return __mosek_2fusion_2BoundInterfaceVariable__pick(_1697,_1698); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BoundInterfaceVariable::__mosek_2fusion_2BoundInterfaceVariable__pick(std::shared_ptr< monty::ndarray< int,1 > > _1697,std::shared_ptr< monty::ndarray< int,1 > > _1698){
  _checked_ptr_1<int> _ptr__1697(_1697 ? _1697->raw() : nullptr, _1697 ? _1697->size(0) : 0);
  _checked_ptr_1<int> _ptr__1698(_1698 ? _1698->raw() : nullptr, _1698 ? _1698->size(0) : 0);
  return (__mosek_2fusion_2BoundInterfaceVariable__from_(::mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__pick(_1697,_1698))).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable :: __mosek_2fusion_2BoundInterfaceVariable__pick(std::shared_ptr< monty::ndarray< int,2 > > _1699) { return mosek::fusion::p_BoundInterfaceVariable::_get_impl(this)->__mosek_2fusion_2BoundInterfaceVariable__pick(_1699); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable::pick(std::shared_ptr< monty::ndarray< int,2 > > _1699) { return __mosek_2fusion_2BoundInterfaceVariable__pick(_1699); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable::__mosek_2fusion_2BaseVariable__pick(std::shared_ptr< monty::ndarray< int,2 > > _1699) { return __mosek_2fusion_2BoundInterfaceVariable__pick(_1699); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BoundInterfaceVariable::__mosek_2fusion_2BoundInterfaceVariable__pick(std::shared_ptr< monty::ndarray< int,2 > > _1699){
  return (__mosek_2fusion_2BoundInterfaceVariable__from_(::mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__pick(_1699))).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable :: __mosek_2fusion_2BoundInterfaceVariable__pick(std::shared_ptr< monty::ndarray< int,1 > > _1700) { return mosek::fusion::p_BoundInterfaceVariable::_get_impl(this)->__mosek_2fusion_2BoundInterfaceVariable__pick(_1700); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable::pick(std::shared_ptr< monty::ndarray< int,1 > > _1700) { return __mosek_2fusion_2BoundInterfaceVariable__pick(_1700); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable::__mosek_2fusion_2BaseVariable__pick(std::shared_ptr< monty::ndarray< int,1 > > _1700) { return __mosek_2fusion_2BoundInterfaceVariable__pick(_1700); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BoundInterfaceVariable::__mosek_2fusion_2BoundInterfaceVariable__pick(std::shared_ptr< monty::ndarray< int,1 > > _1700){
  _checked_ptr_1<int> _ptr__1700(_1700 ? _1700->raw() : nullptr, _1700 ? _1700->size(0) : 0);
  return (__mosek_2fusion_2BoundInterfaceVariable__from_(::mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__pick(_1700))).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable :: __mosek_2fusion_2BoundInterfaceVariable__antidiag(int _1701) { return mosek::fusion::p_BoundInterfaceVariable::_get_impl(this)->__mosek_2fusion_2BoundInterfaceVariable__antidiag(_1701); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable::antidiag(int _1701) { return __mosek_2fusion_2BoundInterfaceVariable__antidiag(_1701); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable::__mosek_2fusion_2BaseVariable__antidiag(int _1701) { return __mosek_2fusion_2BoundInterfaceVariable__antidiag(_1701); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BoundInterfaceVariable::__mosek_2fusion_2BoundInterfaceVariable__antidiag(int _1701){
  return (__mosek_2fusion_2BoundInterfaceVariable__from_(::mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__antidiag(_1701))).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable :: __mosek_2fusion_2BoundInterfaceVariable__antidiag() { return mosek::fusion::p_BoundInterfaceVariable::_get_impl(this)->__mosek_2fusion_2BoundInterfaceVariable__antidiag(); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable::antidiag() { return __mosek_2fusion_2BoundInterfaceVariable__antidiag(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable::__mosek_2fusion_2BaseVariable__antidiag() { return __mosek_2fusion_2BoundInterfaceVariable__antidiag(); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BoundInterfaceVariable::__mosek_2fusion_2BoundInterfaceVariable__antidiag(){
  return (__mosek_2fusion_2BoundInterfaceVariable__from_(::mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__antidiag())).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable :: __mosek_2fusion_2BoundInterfaceVariable__diag(int _1702) { return mosek::fusion::p_BoundInterfaceVariable::_get_impl(this)->__mosek_2fusion_2BoundInterfaceVariable__diag(_1702); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable::diag(int _1702) { return __mosek_2fusion_2BoundInterfaceVariable__diag(_1702); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable::__mosek_2fusion_2BaseVariable__diag(int _1702) { return __mosek_2fusion_2BoundInterfaceVariable__diag(_1702); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BoundInterfaceVariable::__mosek_2fusion_2BoundInterfaceVariable__diag(int _1702){
  return (__mosek_2fusion_2BoundInterfaceVariable__from_(::mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__diag(_1702))).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable :: __mosek_2fusion_2BoundInterfaceVariable__diag() { return mosek::fusion::p_BoundInterfaceVariable::_get_impl(this)->__mosek_2fusion_2BoundInterfaceVariable__diag(); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable::diag() { return __mosek_2fusion_2BoundInterfaceVariable__diag(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable::__mosek_2fusion_2BaseVariable__diag() { return __mosek_2fusion_2BoundInterfaceVariable__diag(); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BoundInterfaceVariable::__mosek_2fusion_2BoundInterfaceVariable__diag(){
  return (__mosek_2fusion_2BoundInterfaceVariable__from_(::mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__diag())).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable :: __mosek_2fusion_2BoundInterfaceVariable__slice(std::shared_ptr< monty::ndarray< int,1 > > _1703,std::shared_ptr< monty::ndarray< int,1 > > _1704) { return mosek::fusion::p_BoundInterfaceVariable::_get_impl(this)->__mosek_2fusion_2BoundInterfaceVariable__slice(_1703,_1704); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable::slice(std::shared_ptr< monty::ndarray< int,1 > > _1703,std::shared_ptr< monty::ndarray< int,1 > > _1704) { return __mosek_2fusion_2BoundInterfaceVariable__slice(_1703,_1704); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable::__mosek_2fusion_2BaseVariable__slice(std::shared_ptr< monty::ndarray< int,1 > > _1703,std::shared_ptr< monty::ndarray< int,1 > > _1704) { return __mosek_2fusion_2BoundInterfaceVariable__slice(_1703,_1704); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BoundInterfaceVariable::__mosek_2fusion_2BoundInterfaceVariable__slice(std::shared_ptr< monty::ndarray< int,1 > > _1703,std::shared_ptr< monty::ndarray< int,1 > > _1704){
  _checked_ptr_1<int> _ptr__1703(_1703 ? _1703->raw() : nullptr, _1703 ? _1703->size(0) : 0);
  _checked_ptr_1<int> _ptr__1704(_1704 ? _1704->raw() : nullptr, _1704 ? _1704->size(0) : 0);
  return (__mosek_2fusion_2BoundInterfaceVariable__from_(::mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__slice(_1703,_1704))).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable :: __mosek_2fusion_2BoundInterfaceVariable__slice(int _1705,int _1706) { return mosek::fusion::p_BoundInterfaceVariable::_get_impl(this)->__mosek_2fusion_2BoundInterfaceVariable__slice(_1705,_1706); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable::slice(int _1705,int _1706) { return __mosek_2fusion_2BoundInterfaceVariable__slice(_1705,_1706); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BoundInterfaceVariable::__mosek_2fusion_2BaseVariable__slice(int _1705,int _1706) { return __mosek_2fusion_2BoundInterfaceVariable__slice(_1705,_1706); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BoundInterfaceVariable::__mosek_2fusion_2BoundInterfaceVariable__slice(int _1705,int _1706){
  return (__mosek_2fusion_2BoundInterfaceVariable__from_(::mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__slice(_1705,_1706))).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::BoundInterfaceVariable > mosek::fusion::p_BoundInterfaceVariable::__mosek_2fusion_2BoundInterfaceVariable__from_(monty::rc_ptr< ::mosek::fusion::Variable > _1707){
  std::shared_ptr< monty::ndarray< int,1 > > _1708 = _pubthis->getShape();
  _checked_ptr_1<int> _ptr__1708(_1708 ? _1708->raw() : nullptr,_1708 ? _1708->size(0) : 0);
  int _1709 = _1707->numInst();
  std::shared_ptr< monty::ndarray< long long,1 > > _1710 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1709)));
  _checked_ptr_1<long long> _ptr__1710(_1710 ? _1710->raw() : nullptr,_1710 ? _1710->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _1711 = nullptr;
  _checked_ptr_1<long long> _ptr__1711(_1711 ? _1711->raw() : nullptr,_1711 ? _1711->size(0) : 0);
  if ((_1707->getSize() == _1709))
  {
    {
      _1707->inst((int)0,_1710);
    }
  }
  else
  {
    {
      _1711 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1709)));
      _ptr__1711.update(_1711 ? _1711->raw() : nullptr, _1711 ? _1711->size(0) : 0);
      _1707->inst((int)0,_1711,(int)0,_1710);
    }
  }
  return ::mosek::fusion::p_BoundInterfaceVariable::_new_BoundInterfaceVariable(_1707->__mosek_2fusion_2Variable__getModel(),_1708,_1711,_1710,islower);
}
void mosek::fusion::p_BoundInterfaceVariable::destroy(){}void mosek::fusion::BoundInterfaceVariable::destroy() { mosek::fusion::p_BoundInterfaceVariable::_get_impl(this)->destroy(); }mosek::fusion::RangedVariable::RangedVariable(mosek::fusion::p_RangedVariable *_impl) : mosek::fusion::ModelVariable(_impl) { /*std::cout << "RangedVariable()" << this << std::endl; */ }mosek::fusion::RangedVariable::~RangedVariable() {  /* std::cout << "~RangedVariable()" << this << std::endl << std::flush; */ }mosek::fusion::p_RangedVariable::p_RangedVariable  (::mosek::fusion::RangedVariable * _pubthis) :     mosek::fusion::p_ModelVariable(_pubthis),    _pubthis(_pubthis){}mosek::fusion::RangedVariable::t mosek::fusion::p_RangedVariable::_new_RangedVariable  (monty::rc_ptr< ::mosek::fusion::RangedVariable > _1712,    monty::rc_ptr< ::mosek::fusion::Model > _1713){ return new mosek::fusion::RangedVariable(_1712,_1713); }mosek::fusion::RangedVariable::RangedVariable  (monty::rc_ptr< ::mosek::fusion::RangedVariable > _1712,    monty::rc_ptr< ::mosek::fusion::Model > _1713) :    RangedVariable(new mosek::fusion::p_RangedVariable(this)){ mosek::fusion::p_RangedVariable::_get_impl(this)->_initialize(_1712,_1713); }void mosek::fusion::p_RangedVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::RangedVariable > _1712,    monty::rc_ptr< ::mosek::fusion::Model > _1713){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_ModelVariable::_initialize(_1712,_1713);
    name = mosek::fusion::p_RangedVariable::_get_impl(_1712)->name;
    nativeidxs = mosek::fusion::p_RangedVariable::_get_impl(_1712)->nativeidxs;
    sparsity = mosek::fusion::p_RangedVariable::_get_impl(_1712)->sparsity;
    names_flushed = mosek::fusion::p_RangedVariable::_get_impl(_1712)->names_flushed;
    shape = mosek::fusion::p_RangedVariable::_get_impl(_1712)->shape;
  }
}mosek::fusion::RangedVariable::t mosek::fusion::p_RangedVariable::_new_RangedVariable  (monty::rc_ptr< ::mosek::fusion::Model > _1714,    const std::string &  _1715,    long long _1716,    std::shared_ptr< monty::ndarray< int,1 > > _1717,    std::shared_ptr< monty::ndarray< long long,1 > > _1718,    std::shared_ptr< monty::ndarray< int,1 > > _1719){ return new mosek::fusion::RangedVariable(_1714,_1715,_1716,_1717,_1718,_1719); }mosek::fusion::RangedVariable::RangedVariable  (monty::rc_ptr< ::mosek::fusion::Model > _1714,    const std::string &  _1715,    long long _1716,    std::shared_ptr< monty::ndarray< int,1 > > _1717,    std::shared_ptr< monty::ndarray< long long,1 > > _1718,    std::shared_ptr< monty::ndarray< int,1 > > _1719) :    RangedVariable(new mosek::fusion::p_RangedVariable(this)){ mosek::fusion::p_RangedVariable::_get_impl(this)->_initialize(_1714,_1715,_1716,_1717,_1718,_1719); }void mosek::fusion::p_RangedVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _1714,    const std::string &  _1715,    long long _1716,    std::shared_ptr< monty::ndarray< int,1 > > _1717,    std::shared_ptr< monty::ndarray< long long,1 > > _1718,    std::shared_ptr< monty::ndarray< int,1 > > _1719){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__1717(_1717 ? _1717->raw() : nullptr, _1717 ? _1717->size(0) : 0);
    _checked_ptr_1<long long> _ptr__1718(_1718 ? _1718->raw() : nullptr, _1718 ? _1718->size(0) : 0);
    _checked_ptr_1<int> _ptr__1719(_1719 ? _1719->raw() : nullptr, _1719 ? _1719->size(0) : 0);
    mosek::fusion::p_ModelVariable::_initialize(_1714,_1715,_1717,_1716,_1718,::mosek::fusion::p_RangedVariable::globalNativeIndexes(_1719));
    mosek::fusion::p_RangedVariable::_get_impl(::mosek::fusion::RangedVariable::t(_pubthis))->nativeidxs = _1719;
    mosek::fusion::p_RangedVariable::_get_impl(::mosek::fusion::RangedVariable::t(_pubthis))->sparsity = _1718;
    mosek::fusion::p_RangedVariable::_get_impl(::mosek::fusion::RangedVariable::t(_pubthis))->name = _1715;
    mosek::fusion::p_RangedVariable::_get_impl(::mosek::fusion::RangedVariable::t(_pubthis))->shape = _1717;
    names_flushed = false;
  }
}monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::RangedVariable :: __mosek_2fusion_2RangedVariable__elementDesc(long long _1720,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1721) { return mosek::fusion::p_RangedVariable::_get_impl(this)->__mosek_2fusion_2RangedVariable__elementDesc(_1720,_1721); }monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::RangedVariable::elementDesc(long long _1720,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1721) { return __mosek_2fusion_2RangedVariable__elementDesc(_1720,_1721); }
monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::p_RangedVariable::__mosek_2fusion_2RangedVariable__elementDesc(long long _1720,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1721){
  _pubthis->elementName(_1720,_1721);
  _1721->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (" : in range"));
  return _1721;
}
void mosek::fusion::p_RangedVariable::flushNames(){
  monty::rc_ptr< ::mosek::fusion::Model > _1722 = _pubthis->__mosek_2fusion_2BaseVariable__getModel();
  if (((!names_flushed) && ((int)((name).size()) > (int)0)))
  {
    {
      monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1723 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
      _1723->__mosek_2fusion_2Utils_2StringBuffer__a(name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("["));
      if ((_pubthis->getND() > (int)0))
      {
        {
          _1723->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("%0"));
          int _9344 = (int)1;
          int _9345 = _pubthis->getND();
          for (int _1724 = _9344; _1724 < _9345; ++_1724)
          {
            {
              _1723->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (",%"))->__mosek_2fusion_2Utils_2StringBuffer__a(_1724);
            }
          }
        }
      }
      {}
      _1723->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("]"));
      mosek::fusion::p_Model::_get_impl(_1722.get())->varnames(nativeidxs,_1723->toString(),_pubthis->getShape(),sparsity);
      names_flushed = true;
    }
  }
  {}
}
void mosek::fusion::p_RangedVariable::dual_u(int _1725,std::shared_ptr< monty::ndarray< double,1 > > _1726){
  _checked_ptr_1<double> _ptr__1726(_1726 ? _1726->raw() : nullptr, _1726 ? _1726->size(0) : 0);
  dual_lu(_1725,_1726,false);
}
void mosek::fusion::p_RangedVariable::dual_l(int _1727,std::shared_ptr< monty::ndarray< double,1 > > _1728){
  _checked_ptr_1<double> _ptr__1728(_1728 ? _1728->raw() : nullptr, _1728 ? _1728->size(0) : 0);
  dual_lu(_1727,_1728,true);
}
monty::rc_ptr< ::mosek::fusion::BoundInterfaceVariable > mosek::fusion::RangedVariable :: __mosek_2fusion_2RangedVariable__upperBoundVar() { return mosek::fusion::p_RangedVariable::_get_impl(this)->__mosek_2fusion_2RangedVariable__upperBoundVar(); }monty::rc_ptr< ::mosek::fusion::BoundInterfaceVariable > mosek::fusion::RangedVariable::upperBoundVar() { return __mosek_2fusion_2RangedVariable__upperBoundVar(); }
monty::rc_ptr< ::mosek::fusion::BoundInterfaceVariable > mosek::fusion::p_RangedVariable::__mosek_2fusion_2RangedVariable__upperBoundVar(){
  std::vector<long long> _9346;
  for (int _1729 = (int)0, _9347 = (int)((nativeidxs)->size(0)); _1729 < _9347 ; ++_1729)
  {
    _9346.push_back(((*nativeidxs)(_1729)));
  }
  auto _9348 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9346.size()),_9346.begin(),_9346.end()));
  return ::mosek::fusion::p_BoundInterfaceVariable::_new_BoundInterfaceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),shape,sparsity,_9348,false);
}
monty::rc_ptr< ::mosek::fusion::BoundInterfaceVariable > mosek::fusion::RangedVariable :: __mosek_2fusion_2RangedVariable__lowerBoundVar() { return mosek::fusion::p_RangedVariable::_get_impl(this)->__mosek_2fusion_2RangedVariable__lowerBoundVar(); }monty::rc_ptr< ::mosek::fusion::BoundInterfaceVariable > mosek::fusion::RangedVariable::lowerBoundVar() { return __mosek_2fusion_2RangedVariable__lowerBoundVar(); }
monty::rc_ptr< ::mosek::fusion::BoundInterfaceVariable > mosek::fusion::p_RangedVariable::__mosek_2fusion_2RangedVariable__lowerBoundVar(){
  std::vector<long long> _9349;
  for (int _1730 = (int)0, _9350 = (int)((nativeidxs)->size(0)); _1730 < _9350 ; ++_1730)
  {
    _9349.push_back(((*nativeidxs)(_1730)));
  }
  auto _9351 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9349.size()),_9349.begin(),_9349.end()));
  return ::mosek::fusion::p_BoundInterfaceVariable::_new_BoundInterfaceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),shape,sparsity,_9351,true);
}
monty::rc_ptr< ::mosek::fusion::ModelVariable > mosek::fusion::p_RangedVariable::__mosek_2fusion_2RangedVariable__clone(monty::rc_ptr< ::mosek::fusion::Model > _1731){
  return (::mosek::fusion::p_RangedVariable::_new_RangedVariable(::mosek::fusion::RangedVariable::t(_pubthis),_1731)).as<::mosek::fusion::ModelVariable>();
}
std::shared_ptr< monty::ndarray< long long,1 > > mosek::fusion::p_RangedVariable::globalNativeIndexes(std::shared_ptr< monty::ndarray< int,1 > > _1732){
  _checked_ptr_1<int> _ptr__1732(_1732 ? _1732->raw() : nullptr, _1732 ? _1732->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _1733 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((_1732)->size(0)))));
  _checked_ptr_1<long long> _ptr__1733(_1733 ? _1733->raw() : nullptr,_1733 ? _1733->size(0) : 0);
  int _9352 = (int)0;
  int _9353 = (int)((_1732)->size(0));
  for (int _1734 = _9352; _1734 < _9353; ++_1734)
  {
    {
      _ptr__1733[_1734] = _ptr__1732[_1734];
    }
  }
  return _1733;
}
void mosek::fusion::p_RangedVariable::destroy(){shape.reset();nativeidxs.reset();sparsity.reset();}void mosek::fusion::RangedVariable::destroy() { mosek::fusion::p_RangedVariable::_get_impl(this)->destroy(); }mosek::fusion::LinearPSDVariable::LinearPSDVariable(mosek::fusion::p_LinearPSDVariable *_impl) : mosek::fusion::ModelVariable(_impl) { /*std::cout << "LinearPSDVariable()" << this << std::endl; */ }mosek::fusion::LinearPSDVariable::~LinearPSDVariable() {  /* std::cout << "~LinearPSDVariable()" << this << std::endl << std::flush; */ }mosek::fusion::p_LinearPSDVariable::p_LinearPSDVariable  (::mosek::fusion::LinearPSDVariable * _pubthis) :     mosek::fusion::p_ModelVariable(_pubthis),    _pubthis(_pubthis){}mosek::fusion::LinearPSDVariable::t mosek::fusion::p_LinearPSDVariable::_new_LinearPSDVariable  (monty::rc_ptr< ::mosek::fusion::LinearPSDVariable > _1735,    monty::rc_ptr< ::mosek::fusion::Model > _1736){ return new mosek::fusion::LinearPSDVariable(_1735,_1736); }mosek::fusion::LinearPSDVariable::LinearPSDVariable  (monty::rc_ptr< ::mosek::fusion::LinearPSDVariable > _1735,    monty::rc_ptr< ::mosek::fusion::Model > _1736) :    LinearPSDVariable(new mosek::fusion::p_LinearPSDVariable(this)){ mosek::fusion::p_LinearPSDVariable::_get_impl(this)->_initialize(_1735,_1736); }void mosek::fusion::p_LinearPSDVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::LinearPSDVariable > _1735,    monty::rc_ptr< ::mosek::fusion::Model > _1736){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_ModelVariable::_initialize(_1735,_1736);
    mosek::fusion::p_LinearPSDVariable::_get_impl(::mosek::fusion::LinearPSDVariable::t(_pubthis))->conedim = mosek::fusion::p_LinearPSDVariable::_get_impl(_1735)->conedim;
    mosek::fusion::p_LinearPSDVariable::_get_impl(::mosek::fusion::LinearPSDVariable::t(_pubthis))->varid = mosek::fusion::p_LinearPSDVariable::_get_impl(_1735)->varid;
    mosek::fusion::p_LinearPSDVariable::_get_impl(::mosek::fusion::LinearPSDVariable::t(_pubthis))->name = mosek::fusion::p_LinearPSDVariable::_get_impl(_1735)->name;
    mosek::fusion::p_LinearPSDVariable::_get_impl(::mosek::fusion::LinearPSDVariable::t(_pubthis))->shape = mosek::fusion::p_LinearPSDVariable::_get_impl(_1735)->shape;
    mosek::fusion::p_LinearPSDVariable::_get_impl(::mosek::fusion::LinearPSDVariable::t(_pubthis))->nativeidxs = mosek::fusion::p_LinearPSDVariable::_get_impl(_1735)->nativeidxs;
  }
}mosek::fusion::LinearPSDVariable::t mosek::fusion::p_LinearPSDVariable::_new_LinearPSDVariable  (monty::rc_ptr< ::mosek::fusion::Model > _1737,    const std::string &  _1738,    int _1739,    std::shared_ptr< monty::ndarray< int,1 > > _1740,    int _1741,    std::shared_ptr< monty::ndarray< long long,1 > > _1742){ return new mosek::fusion::LinearPSDVariable(_1737,_1738,_1739,_1740,_1741,_1742); }mosek::fusion::LinearPSDVariable::LinearPSDVariable  (monty::rc_ptr< ::mosek::fusion::Model > _1737,    const std::string &  _1738,    int _1739,    std::shared_ptr< monty::ndarray< int,1 > > _1740,    int _1741,    std::shared_ptr< monty::ndarray< long long,1 > > _1742) :    LinearPSDVariable(new mosek::fusion::p_LinearPSDVariable(this)){ mosek::fusion::p_LinearPSDVariable::_get_impl(this)->_initialize(_1737,_1738,_1739,_1740,_1741,_1742); }void mosek::fusion::p_LinearPSDVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _1737,    const std::string &  _1738,    int _1739,    std::shared_ptr< monty::ndarray< int,1 > > _1740,    int _1741,    std::shared_ptr< monty::ndarray< long long,1 > > _1742){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__1740(_1740 ? _1740->raw() : nullptr, _1740 ? _1740->size(0) : 0);
    _checked_ptr_1<long long> _ptr__1742(_1742 ? _1742->raw() : nullptr, _1742 ? _1742->size(0) : 0);
    mosek::fusion::p_ModelVariable::_initialize(_1737,_1738,_1740,_1739,nullptr,::mosek::fusion::p_LinearPSDVariable::globalNativeIndexes(_1742));
    mosek::fusion::p_LinearPSDVariable::_get_impl(::mosek::fusion::LinearPSDVariable::t(_pubthis))->name = _1738;
    mosek::fusion::p_LinearPSDVariable::_get_impl(::mosek::fusion::LinearPSDVariable::t(_pubthis))->conedim = _1741;
    mosek::fusion::p_LinearPSDVariable::_get_impl(::mosek::fusion::LinearPSDVariable::t(_pubthis))->varid = _1739;
    mosek::fusion::p_LinearPSDVariable::_get_impl(::mosek::fusion::LinearPSDVariable::t(_pubthis))->shape = _1740;
    mosek::fusion::p_LinearPSDVariable::_get_impl(::mosek::fusion::LinearPSDVariable::t(_pubthis))->nativeidxs = _1742;
  }
}void mosek::fusion::p_LinearPSDVariable::flushNames(){
}
std::string mosek::fusion::LinearPSDVariable :: toString() { return mosek::fusion::p_LinearPSDVariable::_get_impl(this)->toString(); }std::string mosek::fusion::p_LinearPSDVariable::toString(){
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1743 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  _1743->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("PSDVariable("));
  if (((int)((name).size()) > (int)0))
  {
    {
      _1743->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"))->__mosek_2fusion_2Utils_2StringBuffer__a(name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("',"));
    }
  }
  {}
  _1743->__mosek_2fusion_2Utils_2StringBuffer__a(((*shape)((int)0)));
  int _9354 = (int)1;
  int _9355 = (int)((shape)->size(0));
  for (int _1744 = _9354; _1744 < _9355; ++_1744)
  {
    {
      _1743->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(((*shape)(_1744)));
    }
  }
  _1743->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"));
  return _1743->toString();
}
void mosek::fusion::LinearPSDVariable :: make_continuous(std::shared_ptr< monty::ndarray< long long,1 > > _1745) { mosek::fusion::p_LinearPSDVariable::_get_impl(this)->make_continuous(_1745); }void mosek::fusion::p_LinearPSDVariable::make_continuous(std::shared_ptr< monty::ndarray< long long,1 > > _1745){
  _checked_ptr_1<long long> _ptr__1745(_1745 ? _1745->raw() : nullptr, _1745 ? _1745->size(0) : 0);
}
void mosek::fusion::LinearPSDVariable :: make_integer(std::shared_ptr< monty::ndarray< long long,1 > > _1746) { mosek::fusion::p_LinearPSDVariable::_get_impl(this)->make_integer(_1746); }void mosek::fusion::p_LinearPSDVariable::make_integer(std::shared_ptr< monty::ndarray< long long,1 > > _1746){
  _checked_ptr_1<long long> _ptr__1746(_1746 ? _1746->raw() : nullptr, _1746 ? _1746->size(0) : 0);
  throw ::mosek::fusion::UnimplementedError(std::string ("Cannot make PSDVariable elements integer"));
}
monty::rc_ptr< ::mosek::fusion::ModelVariable > mosek::fusion::p_LinearPSDVariable::__mosek_2fusion_2LinearPSDVariable__clone(monty::rc_ptr< ::mosek::fusion::Model > _1747){
  return (::mosek::fusion::p_LinearPSDVariable::_new_LinearPSDVariable(::mosek::fusion::LinearPSDVariable::t(_pubthis),_1747)).as<::mosek::fusion::ModelVariable>();
}
std::shared_ptr< monty::ndarray< long long,1 > > mosek::fusion::p_LinearPSDVariable::globalNativeIndexes(std::shared_ptr< monty::ndarray< long long,1 > > _1748){
  _checked_ptr_1<long long> _ptr__1748(_1748 ? _1748->raw() : nullptr, _1748 ? _1748->size(0) : 0);
  std::vector<long long> _9356;
  for (int _1749 = (int)0, _9357 = (int)((_1748)->size(0)); _1749 < _9357 ; ++_1749)
  {
    _9356.push_back((-safe_add( _ptr__1748[_1749],(int)1 )));
  }
  auto _9358 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9356.size()),_9356.begin(),_9356.end()));
  return _9358;
}
void mosek::fusion::p_LinearPSDVariable::destroy(){shape.reset();nativeidxs.reset();}void mosek::fusion::LinearPSDVariable::destroy() { mosek::fusion::p_LinearPSDVariable::_get_impl(this)->destroy(); }mosek::fusion::PSDVariable::PSDVariable(mosek::fusion::p_PSDVariable *_impl) : mosek::fusion::ModelVariable(_impl) { /*std::cout << "PSDVariable()" << this << std::endl; */ }mosek::fusion::PSDVariable::~PSDVariable() {  /* std::cout << "~PSDVariable()" << this << std::endl << std::flush; */ }mosek::fusion::p_PSDVariable::p_PSDVariable  (::mosek::fusion::PSDVariable * _pubthis) :     mosek::fusion::p_ModelVariable(_pubthis),    _pubthis(_pubthis){}mosek::fusion::PSDVariable::t mosek::fusion::p_PSDVariable::_new_PSDVariable  (monty::rc_ptr< ::mosek::fusion::PSDVariable > _1750,    monty::rc_ptr< ::mosek::fusion::Model > _1751){ return new mosek::fusion::PSDVariable(_1750,_1751); }mosek::fusion::PSDVariable::PSDVariable  (monty::rc_ptr< ::mosek::fusion::PSDVariable > _1750,    monty::rc_ptr< ::mosek::fusion::Model > _1751) :    PSDVariable(new mosek::fusion::p_PSDVariable(this)){ mosek::fusion::p_PSDVariable::_get_impl(this)->_initialize(_1750,_1751); }void mosek::fusion::p_PSDVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::PSDVariable > _1750,    monty::rc_ptr< ::mosek::fusion::Model > _1751){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_ModelVariable::_initialize(_1750,_1751);
    varid = mosek::fusion::p_PSDVariable::_get_impl(_1750)->varid;
    nativeidxs = mosek::fusion::p_PSDVariable::_get_impl(_1750)->nativeidxs;
    name = mosek::fusion::p_PSDVariable::_get_impl(_1750)->name;
    shape = mosek::fusion::p_PSDVariable::_get_impl(_1750)->shape;
    conedim1 = mosek::fusion::p_PSDVariable::_get_impl(_1750)->conedim1;
    conedim2 = mosek::fusion::p_PSDVariable::_get_impl(_1750)->conedim2;
  }
}mosek::fusion::PSDVariable::t mosek::fusion::p_PSDVariable::_new_PSDVariable  (monty::rc_ptr< ::mosek::fusion::Model > _1752,    const std::string &  _1753,    int _1754,    std::shared_ptr< monty::ndarray< int,1 > > _1755,    int _1756,    int _1757,    std::shared_ptr< monty::ndarray< long long,1 > > _1758){ return new mosek::fusion::PSDVariable(_1752,_1753,_1754,_1755,_1756,_1757,_1758); }mosek::fusion::PSDVariable::PSDVariable  (monty::rc_ptr< ::mosek::fusion::Model > _1752,    const std::string &  _1753,    int _1754,    std::shared_ptr< monty::ndarray< int,1 > > _1755,    int _1756,    int _1757,    std::shared_ptr< monty::ndarray< long long,1 > > _1758) :    PSDVariable(new mosek::fusion::p_PSDVariable(this)){ mosek::fusion::p_PSDVariable::_get_impl(this)->_initialize(_1752,_1753,_1754,_1755,_1756,_1757,_1758); }void mosek::fusion::p_PSDVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _1752,    const std::string &  _1753,    int _1754,    std::shared_ptr< monty::ndarray< int,1 > > _1755,    int _1756,    int _1757,    std::shared_ptr< monty::ndarray< long long,1 > > _1758){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__1755(_1755 ? _1755->raw() : nullptr, _1755 ? _1755->size(0) : 0);
    _checked_ptr_1<long long> _ptr__1758(_1758 ? _1758->raw() : nullptr, _1758 ? _1758->size(0) : 0);
    mosek::fusion::p_ModelVariable::_initialize(_1752,_1753,_1755,_1754,nullptr,::mosek::fusion::p_PSDVariable::fullnativeidxs(_1755,_1756,_1757,_1758));
    mosek::fusion::p_PSDVariable::_get_impl(::mosek::fusion::PSDVariable::t(_pubthis))->varid = _1754;
    mosek::fusion::p_PSDVariable::_get_impl(::mosek::fusion::PSDVariable::t(_pubthis))->nativeidxs = _1758;
    mosek::fusion::p_PSDVariable::_get_impl(::mosek::fusion::PSDVariable::t(_pubthis))->name = _1753;
    mosek::fusion::p_PSDVariable::_get_impl(::mosek::fusion::PSDVariable::t(_pubthis))->shape = _1755;
    mosek::fusion::p_PSDVariable::_get_impl(::mosek::fusion::PSDVariable::t(_pubthis))->conedim1 = _1756;
    mosek::fusion::p_PSDVariable::_get_impl(::mosek::fusion::PSDVariable::t(_pubthis))->conedim2 = _1757;
  }
}void mosek::fusion::p_PSDVariable::flushNames(){
}
std::string mosek::fusion::PSDVariable :: toString() { return mosek::fusion::p_PSDVariable::_get_impl(this)->toString(); }std::string mosek::fusion::p_PSDVariable::toString(){
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1759 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  _1759->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("PSDVariable("));
  if (((int)((name).size()) > (int)0))
  {
    {
      _1759->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"))->__mosek_2fusion_2Utils_2StringBuffer__a(name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("',"));
    }
  }
  {}
  _1759->__mosek_2fusion_2Utils_2StringBuffer__a(((*shape)((int)0)));
  int _9359 = (int)1;
  int _9360 = (int)((shape)->size(0));
  for (int _1760 = _9359; _1760 < _9360; ++_1760)
  {
    {
      _1759->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(((*shape)(_1760)));
    }
  }
  _1759->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"));
  return _1759->toString();
}
monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::PSDVariable :: __mosek_2fusion_2PSDVariable__elementDesc(long long _1761,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1762) { return mosek::fusion::p_PSDVariable::_get_impl(this)->__mosek_2fusion_2PSDVariable__elementDesc(_1761,_1762); }monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::PSDVariable::elementDesc(long long _1761,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1762) { return __mosek_2fusion_2PSDVariable__elementDesc(_1761,_1762); }
monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::p_PSDVariable::__mosek_2fusion_2PSDVariable__elementDesc(long long _1761,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1762){
  _pubthis->elementName(_1761,_1762);
  _1762->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (" : element in positive semidefinite cone"));
  return _1762;
}
monty::rc_ptr< ::mosek::fusion::ModelVariable > mosek::fusion::p_PSDVariable::__mosek_2fusion_2PSDVariable__clone(monty::rc_ptr< ::mosek::fusion::Model > _1763){
  return (::mosek::fusion::p_PSDVariable::_new_PSDVariable(::mosek::fusion::PSDVariable::t(_pubthis),_1763)).as<::mosek::fusion::ModelVariable>();
}
std::shared_ptr< monty::ndarray< long long,1 > > mosek::fusion::p_PSDVariable::fullnativeidxs(std::shared_ptr< monty::ndarray< int,1 > > _1764,int _1765,int _1766,std::shared_ptr< monty::ndarray< long long,1 > > _1767){
  _checked_ptr_1<int> _ptr__1764(_1764 ? _1764->raw() : nullptr, _1764 ? _1764->size(0) : 0);
  _checked_ptr_1<long long> _ptr__1767(_1767 ? _1767->raw() : nullptr, _1767 ? _1767->size(0) : 0);
  int _1768 = (int)((_1764)->size(0));
  bool _1769 = (_1765 < _1766);
  int _9361;
  bool _9362 = _1769;
  if (_9362)
  {
    _9361 = _1765;
  }
  else
  {
    _9361 = _1766;
  }
  int _1770 = _9361;
  int _9363;
  bool _9364 = (!_1769);
  if (_9364)
  {
    _9363 = _1765;
  }
  else
  {
    _9363 = _1766;
  }
  int _1771 = _9363;
  int _1772 = (int)1;
  int _9365 = (int)0;
  int _9366 = _1770;
  for (int _1773 = _9365; _1773 < _9366; ++_1773)
  {
    {
      _1772 *= _ptr__1764[_1773];
    }
  }
  int _1774 = _ptr__1764[_1770];
  int _1775 = (int)1;
  int _9367 = safe_add( _1770,(int)1 );
  int _9368 = _1771;
  for (int _1776 = _9367; _1776 < _9368; ++_1776)
  {
    {
      _1775 *= _ptr__1764[_1776];
    }
  }
  int _1777 = _ptr__1764[_1771];
  int _1778 = (int)1;
  int _9369 = safe_add( _1771,(int)1 );
  int _9370 = _1768;
  for (int _1779 = _9369; _1779 < _9370; ++_1779)
  {
    {
      _1778 *= _ptr__1764[_1779];
    }
  }
  int _1780 = safe_mul( safe_mul( safe_mul( safe_mul( _1772,_1774 ),_1775 ),_1777 ),_1778 );
  std::shared_ptr< monty::ndarray< long long,1 > > _1781 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1780)));
  _checked_ptr_1<long long> _ptr__1781(_1781 ? _1781->raw() : nullptr,_1781 ? _1781->size(0) : 0);
  int _1782 = _1778;
  int _1783 = safe_mul( _1782,_1777 );
  int _1784 = safe_mul( _1783,_1775 );
  int _1785 = safe_mul( _1784,_1784 );
  {
    int _1786 = (int)0;
    int _9371 = (int)0;
    int _9372 = _1772;
    for (int _1787 = _9371; _1787 < _9372; ++_1787)
    {
      {
        int _9373 = (int)0;
        int _9374 = _1777;
        for (int _1788 = _9373; _1788 < _9374; ++_1788)
        {
          {
            int _9375 = (int)0;
            int _9376 = _1775;
            for (int _1789 = _9375; _1789 < _9376; ++_1789)
            {
              {
                int _9377 = _1788;
                int _9378 = _1774;
                for (int _1790 = _9377; _1790 < _9378; ++_1790)
                {
                  {
                    int _9379 = (int)0;
                    int _9380 = _1778;
                    for (int _1791 = _9379; _1791 < _9380; ++_1791)
                    {
                      {
                        _ptr__1781[safe_add( safe_add( safe_add( safe_add( safe_mul( _1787,_1785 ),safe_mul( _1790,_1784 ) ),safe_mul( _1789,_1783 ) ),safe_mul( _1788,_1782 ) ),_1791 )] = (-safe_add( _ptr__1767[_1786],(int)1 ));
                        _ptr__1781[safe_add( safe_add( safe_add( safe_add( safe_mul( _1787,_1785 ),safe_mul( _1788,_1784 ) ),safe_mul( _1789,_1783 ) ),safe_mul( _1790,_1782 ) ),_1791 )] = (-safe_add( _ptr__1767[_1786],(int)1 ));
                        ++ _1786;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return _1781;
}
void mosek::fusion::p_PSDVariable::destroy(){shape.reset();nativeidxs.reset();}void mosek::fusion::PSDVariable::destroy() { mosek::fusion::p_PSDVariable::_get_impl(this)->destroy(); }mosek::fusion::SymLinearVariable::SymLinearVariable(mosek::fusion::p_SymLinearVariable *_impl) : mosek::fusion::ModelVariable(_impl) { /*std::cout << "SymLinearVariable()" << this << std::endl; */ }mosek::fusion::SymLinearVariable::~SymLinearVariable() {  /* std::cout << "~SymLinearVariable()" << this << std::endl << std::flush; */ }mosek::fusion::p_SymLinearVariable::p_SymLinearVariable  (::mosek::fusion::SymLinearVariable * _pubthis) :     mosek::fusion::p_ModelVariable(_pubthis),    _pubthis(_pubthis){}mosek::fusion::SymLinearVariable::t mosek::fusion::p_SymLinearVariable::_new_SymLinearVariable  (monty::rc_ptr< ::mosek::fusion::SymLinearVariable > _1792,    monty::rc_ptr< ::mosek::fusion::Model > _1793){ return new mosek::fusion::SymLinearVariable(_1792,_1793); }mosek::fusion::SymLinearVariable::SymLinearVariable  (monty::rc_ptr< ::mosek::fusion::SymLinearVariable > _1792,    monty::rc_ptr< ::mosek::fusion::Model > _1793) :    SymLinearVariable(new mosek::fusion::p_SymLinearVariable(this)){ mosek::fusion::p_SymLinearVariable::_get_impl(this)->_initialize(_1792,_1793); }void mosek::fusion::p_SymLinearVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::SymLinearVariable > _1792,    monty::rc_ptr< ::mosek::fusion::Model > _1793){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_ModelVariable::_initialize(_1792,_1793);
    names_flushed = mosek::fusion::p_SymLinearVariable::_get_impl(_1792)->names_flushed;
    name = mosek::fusion::p_SymLinearVariable::_get_impl(_1792)->name;
    sparsity = mosek::fusion::p_SymLinearVariable::_get_impl(_1792)->sparsity;
    nativeidxs = mosek::fusion::p_SymLinearVariable::_get_impl(_1792)->nativeidxs;
    dim = mosek::fusion::p_SymLinearVariable::_get_impl(_1792)->dim;
  }
}mosek::fusion::SymLinearVariable::t mosek::fusion::p_SymLinearVariable::_new_SymLinearVariable  (monty::rc_ptr< ::mosek::fusion::Model > _1794,    const std::string &  _1795,    long long _1796,    int _1797,    std::shared_ptr< monty::ndarray< long long,1 > > _1798,    std::shared_ptr< monty::ndarray< int,1 > > _1799){ return new mosek::fusion::SymLinearVariable(_1794,_1795,_1796,_1797,_1798,_1799); }mosek::fusion::SymLinearVariable::SymLinearVariable  (monty::rc_ptr< ::mosek::fusion::Model > _1794,    const std::string &  _1795,    long long _1796,    int _1797,    std::shared_ptr< monty::ndarray< long long,1 > > _1798,    std::shared_ptr< monty::ndarray< int,1 > > _1799) :    SymLinearVariable(new mosek::fusion::p_SymLinearVariable(this)){ mosek::fusion::p_SymLinearVariable::_get_impl(this)->_initialize(_1794,_1795,_1796,_1797,_1798,_1799); }void mosek::fusion::p_SymLinearVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _1794,    const std::string &  _1795,    long long _1796,    int _1797,    std::shared_ptr< monty::ndarray< long long,1 > > _1798,    std::shared_ptr< monty::ndarray< int,1 > > _1799){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<long long> _ptr__1798(_1798 ? _1798->raw() : nullptr, _1798 ? _1798->size(0) : 0);
    _checked_ptr_1<int> _ptr__1799(_1799 ? _1799->raw() : nullptr, _1799 ? _1799->size(0) : 0);
    mosek::fusion::p_ModelVariable::_initialize(_1794,_1795,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_1797),(int)(_1797)}),_1796,::mosek::fusion::p_SymLinearVariable::mirror_sp(_1797,_1798),::mosek::fusion::p_SymLinearVariable::mirror_idxs(_1797,_1798,_1799));
    names_flushed = false;
    mosek::fusion::p_SymLinearVariable::_get_impl(::mosek::fusion::SymLinearVariable::t(_pubthis))->name = _1795;
    mosek::fusion::p_SymLinearVariable::_get_impl(::mosek::fusion::SymLinearVariable::t(_pubthis))->nativeidxs = _1799;
    mosek::fusion::p_SymLinearVariable::_get_impl(::mosek::fusion::SymLinearVariable::t(_pubthis))->sparsity = _1798;
    mosek::fusion::p_SymLinearVariable::_get_impl(::mosek::fusion::SymLinearVariable::t(_pubthis))->dim = _1797;
  }
}void mosek::fusion::p_SymLinearVariable::flushNames(){
  monty::rc_ptr< ::mosek::fusion::Model > _1800 = _pubthis->__mosek_2fusion_2BaseVariable__getModel();
  if (((!names_flushed) && ((int)((name).size()) > (int)0)))
  {
    {
      if ((NULL == sparsity.get()))
      {
        {
          int _9381 = (int)0;
          int _9382 = (int)((nativeidxs)->size(0));
          for (int _1801 = _9381; _1801 < _9382; ++_1801)
          {
            {
              std::string _9383;
              bool _9384 = ((int)((name).size()) == (int)0);
              if (_9384)
              {
                _9383 = std::string ("");
              }
              else
              {
                _9383 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("["))->__mosek_2fusion_2Utils_2StringBuffer__a((_1801 / dim))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a((_1801 % dim))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("]"))->toString();
              }
              mosek::fusion::p_Model::_get_impl(_1800.get())->varname(((*nativeidxs)(_1801)),_9383);
            }
          }
        }
      }
      else
      {
        {
          int _9385 = (int)0;
          int _9386 = (int)((sparsity)->size(0));
          for (int _1802 = _9385; _1802 < _9386; ++_1802)
          {
            {
              mosek::fusion::p_Model::_get_impl(_1800.get())->varname(((*nativeidxs)(_1802)),::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("["))->__mosek_2fusion_2Utils_2StringBuffer__a((((*sparsity)(_1802)) / dim))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a((((*sparsity)(_1802)) % dim))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("]"))->toString());
            }
          }
        }
      }
      names_flushed = true;
    }
  }
  {}
}
monty::rc_ptr< ::mosek::fusion::ModelVariable > mosek::fusion::p_SymLinearVariable::__mosek_2fusion_2SymLinearVariable__clone(monty::rc_ptr< ::mosek::fusion::Model > _1803){
  return (::mosek::fusion::p_SymLinearVariable::_new_SymLinearVariable(::mosek::fusion::SymLinearVariable::t(_pubthis),_1803)).as<::mosek::fusion::ModelVariable>();
}
std::shared_ptr< monty::ndarray< long long,1 > > mosek::fusion::p_SymLinearVariable::mirror_idxs(int _1804,std::shared_ptr< monty::ndarray< long long,1 > > _1805,std::shared_ptr< monty::ndarray< int,1 > > _1806){
  _checked_ptr_1<long long> _ptr__1805(_1805 ? _1805->raw() : nullptr, _1805 ? _1805->size(0) : 0);
  _checked_ptr_1<int> _ptr__1806(_1806 ? _1806->raw() : nullptr, _1806 ? _1806->size(0) : 0);
  if ((NULL == _1805.get()))
  {
    {
      std::shared_ptr< monty::ndarray< long long,1 > > _1807 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_mul( _1804,_1804 ))));
      _checked_ptr_1<long long> _ptr__1807(_1807 ? _1807->raw() : nullptr,_1807 ? _1807->size(0) : 0);
      int _1808 = (int)0;
      {
        int _9387 = (int)0;
        int _9388 = _1804;
        for (int _1809 = _9387; _1809 < _9388; ++_1809)
        {
          {
            _ptr__1807[safe_add( safe_mul( _1809,_1804 ),_1809 )] = safe_add( _ptr__1806[_1808],(int)1 );
            ++ _1808;
            int _9389 = safe_add( _1809,(int)1 );
            int _9390 = _1804;
            for (int _1810 = _9389; _1810 < _9390; ++_1810)
            {
              {
                _ptr__1807[safe_add( safe_mul( _1809,_1804 ),_1810 )] = safe_add( _ptr__1806[_1808],(int)1 );
                _ptr__1807[safe_add( safe_mul( _1810,_1804 ),_1809 )] = safe_add( _ptr__1806[_1808],(int)1 );
                ++ _1808;
              }
            }
          }
        }
      }
      return _1807;
    }
  }
  else
  {
    {
      int _1811 = (int)0;
      {
        int _9391 = (int)0;
        int _9392 = (int)((_1805)->size(0));
        for (int _1812 = _9391; _1812 < _9392; ++_1812)
        {
          {
            int _9393;
            bool _9394 = ((_ptr__1805[_1812] % safe_add( _1804,(int)1 )) == (int)0);
            if (_9394)
            {
              _9393 = (int)1;
            }
            else
            {
              _9393 = (int)2;
            }
            _1811 += _9393;
          }
        }
      }
      std::shared_ptr< monty::ndarray< long long,1 > > _1813 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1811)));
      _checked_ptr_1<long long> _ptr__1813(_1813 ? _1813->raw() : nullptr,_1813 ? _1813->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _1814 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1811)));
      _checked_ptr_1<long long> _ptr__1814(_1814 ? _1814->raw() : nullptr,_1814 ? _1814->size(0) : 0);
      {
        int _1815 = (int)0;
        int _9395 = (int)0;
        int _9396 = (int)((_1805)->size(0));
        for (int _1816 = _9395; _1816 < _9396; ++_1816)
        {
          {
            long long _1817 = (_ptr__1805[_1816] / _1804);
            long long _1818 = (_ptr__1805[_1816] % _1804);
            _ptr__1813[_1815] = _ptr__1805[_1816];
            _ptr__1814[_1815] = safe_add( _ptr__1806[_1816],(int)1 );
            ++ _1815;
            if ((_1817 != _1818))
            {
              {
                _ptr__1813[_1815] = safe_add( safe_mul( _1818,_1804 ),_1817 );
                _ptr__1814[_1815] = safe_add( _ptr__1806[_1816],(int)1 );
                ++ _1815;
              }
            }
            {}
          }
        }
      }
      std::vector<long long> _9397;
      for (int _1820 = (int)0, _9398 = _1811; _1820 < _9398 ; ++_1820)
      {
        _9397.push_back(_1820);
      }
      auto _9399 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9397.size()),_9397.begin(),_9397.end()));
      std::shared_ptr< monty::ndarray< long long,1 > > _1819 = _9399;
      _checked_ptr_1<long long> _ptr__1819(_1819 ? _1819->raw() : nullptr,_1819 ? _1819->size(0) : 0);
      ::mosek::fusion::p_CommonTools::argQsort(_1819,_1813,std::shared_ptr< monty::ndarray< long long,1 > >(nullptr),(long long)((int)0),(long long)(_1811));
      std::vector<long long> _9400;
      for (int _1821 = (int)0, _9401 = _1811; _1821 < _9401 ; ++_1821)
      {
        _9400.push_back(_ptr__1814[_ptr__1819[_1821]]);
      }
      auto _9402 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9400.size()),_9400.begin(),_9400.end()));
      return _9402;
    }
  }
}
std::shared_ptr< monty::ndarray< long long,1 > > mosek::fusion::p_SymLinearVariable::mirror_sp(int _1822,std::shared_ptr< monty::ndarray< long long,1 > > _1823){
  _checked_ptr_1<long long> _ptr__1823(_1823 ? _1823->raw() : nullptr, _1823 ? _1823->size(0) : 0);
  if ((NULL == _1823.get()))
  {
    {
      return nullptr;
    }
  }
  else
  {
    {
      int _1824 = (int)0;
      {
        int _9403 = (int)0;
        int _9404 = (int)((_1823)->size(0));
        for (int _1825 = _9403; _1825 < _9404; ++_1825)
        {
          {
            int _9405;
            bool _9406 = ((_ptr__1823[_1825] % safe_add( _1822,(int)1 )) == (int)0);
            if (_9406)
            {
              _9405 = (int)1;
            }
            else
            {
              _9405 = (int)2;
            }
            _1824 += _9405;
          }
        }
      }
      std::shared_ptr< monty::ndarray< long long,1 > > _1826 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1824)));
      _checked_ptr_1<long long> _ptr__1826(_1826 ? _1826->raw() : nullptr,_1826 ? _1826->size(0) : 0);
      {
        int _1827 = (int)0;
        int _9407 = (int)0;
        int _9408 = (int)((_1823)->size(0));
        for (int _1828 = _9407; _1828 < _9408; ++_1828)
        {
          {
            long long _1829 = (_ptr__1823[_1828] / _1822);
            long long _1830 = (_ptr__1823[_1828] % _1822);
            _ptr__1826[_1827] = _ptr__1823[_1828];
            ++ _1827;
            if ((_1829 != _1830))
            {
              {
                _ptr__1826[_1827] = safe_add( safe_mul( _1830,_1822 ),_1829 );
                ++ _1827;
              }
            }
            {}
          }
        }
      }
      std::vector<long long> _9409;
      for (int _1832 = (int)0, _9410 = _1824; _1832 < _9410 ; ++_1832)
      {
        _9409.push_back(_1832);
      }
      auto _9411 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9409.size()),_9409.begin(),_9409.end()));
      std::shared_ptr< monty::ndarray< long long,1 > > _1831 = _9411;
      _checked_ptr_1<long long> _ptr__1831(_1831 ? _1831->raw() : nullptr,_1831 ? _1831->size(0) : 0);
      ::mosek::fusion::p_CommonTools::argQsort(_1831,_1826,std::shared_ptr< monty::ndarray< long long,1 > >(nullptr),(long long)((int)0),(long long)(_1824));
      std::vector<long long> _9412;
      for (int _1833 = (int)0, _9413 = _1824; _1833 < _9413 ; ++_1833)
      {
        _9412.push_back(_ptr__1826[_ptr__1831[_1833]]);
      }
      auto _9414 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9412.size()),_9412.begin(),_9412.end()));
      return _9414;
    }
  }
}
void mosek::fusion::p_SymLinearVariable::destroy(){sparsity.reset();nativeidxs.reset();}void mosek::fusion::SymLinearVariable::destroy() { mosek::fusion::p_SymLinearVariable::_get_impl(this)->destroy(); }mosek::fusion::LinearVariable::LinearVariable(mosek::fusion::p_LinearVariable *_impl) : mosek::fusion::ModelVariable(_impl) { /*std::cout << "LinearVariable()" << this << std::endl; */ }mosek::fusion::LinearVariable::~LinearVariable() {  /* std::cout << "~LinearVariable()" << this << std::endl << std::flush; */ }mosek::fusion::p_LinearVariable::p_LinearVariable  (::mosek::fusion::LinearVariable * _pubthis) :     mosek::fusion::p_ModelVariable(_pubthis),    _pubthis(_pubthis){}mosek::fusion::LinearVariable::t mosek::fusion::p_LinearVariable::_new_LinearVariable  (monty::rc_ptr< ::mosek::fusion::LinearVariable > _1834,    monty::rc_ptr< ::mosek::fusion::Model > _1835){ return new mosek::fusion::LinearVariable(_1834,_1835); }mosek::fusion::LinearVariable::LinearVariable  (monty::rc_ptr< ::mosek::fusion::LinearVariable > _1834,    monty::rc_ptr< ::mosek::fusion::Model > _1835) :    LinearVariable(new mosek::fusion::p_LinearVariable(this)){ mosek::fusion::p_LinearVariable::_get_impl(this)->_initialize(_1834,_1835); }void mosek::fusion::p_LinearVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::LinearVariable > _1834,    monty::rc_ptr< ::mosek::fusion::Model > _1835){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_ModelVariable::_initialize(_1834,_1835);
    names_flushed = mosek::fusion::p_LinearVariable::_get_impl(_1834)->names_flushed;
    nativeidxs = mosek::fusion::p_LinearVariable::_get_impl(_1834)->nativeidxs;
    sparsity = mosek::fusion::p_LinearVariable::_get_impl(_1834)->sparsity;
    shape = mosek::fusion::p_LinearVariable::_get_impl(_1834)->shape;
    name = mosek::fusion::p_LinearVariable::_get_impl(_1834)->name;
  }
}mosek::fusion::LinearVariable::t mosek::fusion::p_LinearVariable::_new_LinearVariable  (monty::rc_ptr< ::mosek::fusion::Model > _1836,    const std::string &  _1837,    long long _1838,    std::shared_ptr< monty::ndarray< int,1 > > _1839,    std::shared_ptr< monty::ndarray< long long,1 > > _1840,    std::shared_ptr< monty::ndarray< int,1 > > _1841){ return new mosek::fusion::LinearVariable(_1836,_1837,_1838,_1839,_1840,_1841); }mosek::fusion::LinearVariable::LinearVariable  (monty::rc_ptr< ::mosek::fusion::Model > _1836,    const std::string &  _1837,    long long _1838,    std::shared_ptr< monty::ndarray< int,1 > > _1839,    std::shared_ptr< monty::ndarray< long long,1 > > _1840,    std::shared_ptr< monty::ndarray< int,1 > > _1841) :    LinearVariable(new mosek::fusion::p_LinearVariable(this)){ mosek::fusion::p_LinearVariable::_get_impl(this)->_initialize(_1836,_1837,_1838,_1839,_1840,_1841); }void mosek::fusion::p_LinearVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _1836,    const std::string &  _1837,    long long _1838,    std::shared_ptr< monty::ndarray< int,1 > > _1839,    std::shared_ptr< monty::ndarray< long long,1 > > _1840,    std::shared_ptr< monty::ndarray< int,1 > > _1841){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__1839(_1839 ? _1839->raw() : nullptr, _1839 ? _1839->size(0) : 0);
    _checked_ptr_1<long long> _ptr__1840(_1840 ? _1840->raw() : nullptr, _1840 ? _1840->size(0) : 0);
    _checked_ptr_1<int> _ptr__1841(_1841 ? _1841->raw() : nullptr, _1841 ? _1841->size(0) : 0);
    mosek::fusion::p_ModelVariable::_initialize(_1836,_1837,_1839,_1838,_1840,::mosek::fusion::p_LinearVariable::globalNativeIndexes(_1841));
    names_flushed = false;
    mosek::fusion::p_LinearVariable::_get_impl(::mosek::fusion::LinearVariable::t(_pubthis))->name = _1837;
    mosek::fusion::p_LinearVariable::_get_impl(::mosek::fusion::LinearVariable::t(_pubthis))->nativeidxs = _1841;
    mosek::fusion::p_LinearVariable::_get_impl(::mosek::fusion::LinearVariable::t(_pubthis))->sparsity = _1840;
    mosek::fusion::p_LinearVariable::_get_impl(::mosek::fusion::LinearVariable::t(_pubthis))->shape = _1839;
  }
}std::string mosek::fusion::LinearVariable :: toString() { return mosek::fusion::p_LinearVariable::_get_impl(this)->toString(); }std::string mosek::fusion::p_LinearVariable::toString(){
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1842 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  _1842->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("LinearVariable(("));
  if (((int)((shape)->size(0)) > (int)0))
  {
    {
      _1842->__mosek_2fusion_2Utils_2StringBuffer__a(((*shape)((int)0)));
      int _9415 = (int)1;
      int _9416 = (int)((shape)->size(0));
      for (int _1843 = _9415; _1843 < _9416; ++_1843)
      {
        {
          _1842->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(((*shape)(_1843)));
        }
      }
    }
  }
  {}
  _1842->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"));
  if ((NULL != sparsity.get()))
  {
    {
      _1842->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (",sparse"));
    }
  }
  {}
  _1842->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"));
  return _1842->toString();
}
void mosek::fusion::p_LinearVariable::flushNames(){
  monty::rc_ptr< ::mosek::fusion::Model > _1844 = _pubthis->__mosek_2fusion_2BaseVariable__getModel();
  if ((_pubthis->getSize() == (int)0))
  {
    {
      names_flushed = true;
    }
  }
  else
  {
    {
      if (((int)((name).size()) == (int)0))
      {
        {
          names_flushed = true;
        }
      }
      {}
    }
  }
  if ((!names_flushed))
  {
    {
      monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1845 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
      _1845->__mosek_2fusion_2Utils_2StringBuffer__a(name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("["));
      if ((_pubthis->getND() > (int)0))
      {
        {
          _1845->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("%0"));
          int _9417 = (int)1;
          int _9418 = _pubthis->getND();
          for (int _1846 = _9417; _1846 < _9418; ++_1846)
          {
            {
              _1845->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (",%"))->__mosek_2fusion_2Utils_2StringBuffer__a(_1846);
            }
          }
        }
      }
      {}
      _1845->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("]"));
      std::shared_ptr< monty::ndarray< int,1 > > _9419;
      bool _9420 = (_pubthis->getND() > (int)0);
      if (_9420)
      {
        _9419 = _pubthis->getShape();
      }
      else
      {
        _9419 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)1)});
      }
      mosek::fusion::p_Model::_get_impl(_1844.get())->varnames(nativeidxs,_1845->toString(),_9419,sparsity);
      names_flushed = true;
    }
  }
  {}
}
monty::rc_ptr< ::mosek::fusion::ModelVariable > mosek::fusion::p_LinearVariable::__mosek_2fusion_2LinearVariable__clone(monty::rc_ptr< ::mosek::fusion::Model > _1847){
  return (::mosek::fusion::p_LinearVariable::_new_LinearVariable(::mosek::fusion::LinearVariable::t(_pubthis),_1847)).as<::mosek::fusion::ModelVariable>();
}
std::shared_ptr< monty::ndarray< long long,1 > > mosek::fusion::p_LinearVariable::globalNativeIndexes(std::shared_ptr< monty::ndarray< int,1 > > _1848){
  _checked_ptr_1<int> _ptr__1848(_1848 ? _1848->raw() : nullptr, _1848 ? _1848->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _1849 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((_1848)->size(0)))));
  _checked_ptr_1<long long> _ptr__1849(_1849 ? _1849->raw() : nullptr,_1849 ? _1849->size(0) : 0);
  int _9421 = (int)0;
  int _9422 = (int)((_1848)->size(0));
  for (int _1850 = _9421; _1850 < _9422; ++_1850)
  {
    {
      _ptr__1849[_1850] = _ptr__1848[_1850];
    }
  }
  return _1849;
}
void mosek::fusion::p_LinearVariable::destroy(){shape.reset();sparsity.reset();nativeidxs.reset();}void mosek::fusion::LinearVariable::destroy() { mosek::fusion::p_LinearVariable::_get_impl(this)->destroy(); }mosek::fusion::ConicVariable::ConicVariable(mosek::fusion::p_ConicVariable *_impl) : mosek::fusion::ModelVariable(_impl) { /*std::cout << "ConicVariable()" << this << std::endl; */ }mosek::fusion::ConicVariable::~ConicVariable() {  /* std::cout << "~ConicVariable()" << this << std::endl << std::flush; */ }mosek::fusion::p_ConicVariable::p_ConicVariable  (::mosek::fusion::ConicVariable * _pubthis) :     mosek::fusion::p_ModelVariable(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ConicVariable::t mosek::fusion::p_ConicVariable::_new_ConicVariable  (monty::rc_ptr< ::mosek::fusion::ConicVariable > _1851,    monty::rc_ptr< ::mosek::fusion::Model > _1852){ return new mosek::fusion::ConicVariable(_1851,_1852); }mosek::fusion::ConicVariable::ConicVariable  (monty::rc_ptr< ::mosek::fusion::ConicVariable > _1851,    monty::rc_ptr< ::mosek::fusion::Model > _1852) :    ConicVariable(new mosek::fusion::p_ConicVariable(this)){ mosek::fusion::p_ConicVariable::_get_impl(this)->_initialize(_1851,_1852); }void mosek::fusion::p_ConicVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::ConicVariable > _1851,    monty::rc_ptr< ::mosek::fusion::Model > _1852){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_ModelVariable::_initialize(_1851,_1852);
    names_flushed = mosek::fusion::p_ConicVariable::_get_impl(_1851)->names_flushed;
    shape = mosek::fusion::p_ConicVariable::_get_impl(_1851)->shape;
    nativeidxs = mosek::fusion::p_ConicVariable::_get_impl(_1851)->nativeidxs;
    shape = mosek::fusion::p_ConicVariable::_get_impl(_1851)->shape;
    varid = mosek::fusion::p_ConicVariable::_get_impl(_1851)->varid;
    name = mosek::fusion::p_ConicVariable::_get_impl(_1851)->name;
  }
}mosek::fusion::ConicVariable::t mosek::fusion::p_ConicVariable::_new_ConicVariable  (monty::rc_ptr< ::mosek::fusion::Model > _1853,    const std::string &  _1854,    int _1855,    std::shared_ptr< monty::ndarray< int,1 > > _1856,    std::shared_ptr< monty::ndarray< int,1 > > _1857){ return new mosek::fusion::ConicVariable(_1853,_1854,_1855,_1856,_1857); }mosek::fusion::ConicVariable::ConicVariable  (monty::rc_ptr< ::mosek::fusion::Model > _1853,    const std::string &  _1854,    int _1855,    std::shared_ptr< monty::ndarray< int,1 > > _1856,    std::shared_ptr< monty::ndarray< int,1 > > _1857) :    ConicVariable(new mosek::fusion::p_ConicVariable(this)){ mosek::fusion::p_ConicVariable::_get_impl(this)->_initialize(_1853,_1854,_1855,_1856,_1857); }void mosek::fusion::p_ConicVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _1853,    const std::string &  _1854,    int _1855,    std::shared_ptr< monty::ndarray< int,1 > > _1856,    std::shared_ptr< monty::ndarray< int,1 > > _1857){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__1856(_1856 ? _1856->raw() : nullptr, _1856 ? _1856->size(0) : 0);
    _checked_ptr_1<int> _ptr__1857(_1857 ? _1857->raw() : nullptr, _1857 ? _1857->size(0) : 0);
    mosek::fusion::p_ModelVariable::_initialize(_1853,_1854,_1856,_1855,nullptr,::mosek::fusion::p_ConicVariable::globalNativeIndexes(_1857));
    mosek::fusion::p_ConicVariable::_get_impl(::mosek::fusion::ConicVariable::t(_pubthis))->name = _1854;
    mosek::fusion::p_ConicVariable::_get_impl(::mosek::fusion::ConicVariable::t(_pubthis))->names_flushed = false;
    mosek::fusion::p_ConicVariable::_get_impl(::mosek::fusion::ConicVariable::t(_pubthis))->varid = _1855;
    mosek::fusion::p_ConicVariable::_get_impl(::mosek::fusion::ConicVariable::t(_pubthis))->shape = _1856;
    mosek::fusion::p_ConicVariable::_get_impl(::mosek::fusion::ConicVariable::t(_pubthis))->nativeidxs = _1857;
  }
}std::string mosek::fusion::ConicVariable :: toString() { return mosek::fusion::p_ConicVariable::_get_impl(this)->toString(); }std::string mosek::fusion::p_ConicVariable::toString(){
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1858 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  _1858->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ConicVariable( "));
  if (((int)((name).size()) > (int)0))
  {
    {
      _1858->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"))->__mosek_2fusion_2Utils_2StringBuffer__a(name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("',"));
    }
  }
  {}
  _1858->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("("));
  _1858->__mosek_2fusion_2Utils_2StringBuffer__a(((*shape)((int)0)));
  int _9423 = (int)1;
  int _9424 = (int)((shape)->size(0));
  for (int _1859 = _9423; _1859 < _9424; ++_1859)
  {
    {
      _1858->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(((*shape)(_1859)));
    }
  }
  _1858->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (") )"));
  return _1858->toString();
}
void mosek::fusion::p_ConicVariable::flushNames(){
  monty::rc_ptr< ::mosek::fusion::Model > _1860 = _pubthis->__mosek_2fusion_2BaseVariable__getModel();
  if ((_pubthis->getSize() == (int)0))
  {
    {
      names_flushed = true;
    }
  }
  else
  {
    {
      if (((int)((name).size()) == (int)0))
      {
        {
          names_flushed = true;
        }
      }
      {}
    }
  }
  if ((!names_flushed))
  {
    {
      monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1861 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
      _1861->__mosek_2fusion_2Utils_2StringBuffer__a(name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("["));
      _1861->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("%0"));
      int _9425 = (int)1;
      int _9426 = _pubthis->getND();
      for (int _1862 = _9425; _1862 < _9426; ++_1862)
      {
        {
          _1861->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (",%"))->__mosek_2fusion_2Utils_2StringBuffer__a(_1862);
        }
      }
      _1861->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("]"));
      std::shared_ptr< monty::ndarray< int,1 > > _9427;
      bool _9428 = (_pubthis->getND() > (int)0);
      if (_9428)
      {
        _9427 = _pubthis->getShape();
      }
      else
      {
        _9427 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)0)});
      }
      mosek::fusion::p_Model::_get_impl(_1860.get())->varnames(nativeidxs,_1861->toString(),_9427,std::shared_ptr< monty::ndarray< long long,1 > >(nullptr));
      names_flushed = true;
    }
  }
  {}
}
monty::rc_ptr< ::mosek::fusion::ModelVariable > mosek::fusion::p_ConicVariable::__mosek_2fusion_2ConicVariable__clone(monty::rc_ptr< ::mosek::fusion::Model > _1863){
  return (::mosek::fusion::p_ConicVariable::_new_ConicVariable(::mosek::fusion::ConicVariable::t(_pubthis),_1863)).as<::mosek::fusion::ModelVariable>();
}
std::shared_ptr< monty::ndarray< long long,1 > > mosek::fusion::p_ConicVariable::globalNativeIndexes(std::shared_ptr< monty::ndarray< int,1 > > _1864){
  _checked_ptr_1<int> _ptr__1864(_1864 ? _1864->raw() : nullptr, _1864 ? _1864->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _1865 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((_1864)->size(0)))));
  _checked_ptr_1<long long> _ptr__1865(_1865 ? _1865->raw() : nullptr,_1865 ? _1865->size(0) : 0);
  int _9429 = (int)0;
  int _9430 = (int)((_1864)->size(0));
  for (int _1866 = _9429; _1866 < _9430; ++_1866)
  {
    {
      _ptr__1865[_1866] = _ptr__1864[_1866];
    }
  }
  return _1865;
}
void mosek::fusion::p_ConicVariable::destroy(){nativeidxs.reset();shape.reset();}void mosek::fusion::ConicVariable::destroy() { mosek::fusion::p_ConicVariable::_get_impl(this)->destroy(); }mosek::fusion::ModelVariable::ModelVariable(mosek::fusion::p_ModelVariable *_impl) : mosek::fusion::BaseVariable(_impl) { /*std::cout << "ModelVariable()" << this << std::endl; */ }mosek::fusion::ModelVariable::~ModelVariable() {  /* std::cout << "~ModelVariable()" << this << std::endl << std::flush; */ }mosek::fusion::p_ModelVariable::p_ModelVariable  (::mosek::fusion::ModelVariable * _pubthis) :     mosek::fusion::p_BaseVariable(_pubthis),    _pubthis(_pubthis){}void mosek::fusion::p_ModelVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::ModelVariable > _1867,    monty::rc_ptr< ::mosek::fusion::Model > _1868){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseVariable::_initialize(_1867,_1868);
    name = mosek::fusion::p_ModelVariable::_get_impl(_1867)->name;
    varid = mosek::fusion::p_ModelVariable::_get_impl(_1867)->varid;
    nativeidxs = mosek::fusion::p_ModelVariable::_get_impl(_1867)->nativeidxs;
    shape = mosek::fusion::p_ModelVariable::_get_impl(_1867)->shape;
    sparsity = mosek::fusion::p_ModelVariable::_get_impl(_1867)->sparsity;
  }
}void mosek::fusion::p_ModelVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _1869,    const std::string &  _1870,    std::shared_ptr< monty::ndarray< int,1 > > _1871,    long long _1872,    std::shared_ptr< monty::ndarray< long long,1 > > _1873,    std::shared_ptr< monty::ndarray< long long,1 > > _1874){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__1871(_1871 ? _1871->raw() : nullptr, _1871 ? _1871->size(0) : 0);
    _checked_ptr_1<long long> _ptr__1873(_1873 ? _1873->raw() : nullptr, _1873 ? _1873->size(0) : 0);
    _checked_ptr_1<long long> _ptr__1874(_1874 ? _1874->raw() : nullptr, _1874 ? _1874->size(0) : 0);
    mosek::fusion::p_BaseVariable::_initialize(_1869,_1871,_1873,_1874);
    mosek::fusion::p_ModelVariable::_get_impl(::mosek::fusion::ModelVariable::t(_pubthis))->name = _1870;
    mosek::fusion::p_ModelVariable::_get_impl(::mosek::fusion::ModelVariable::t(_pubthis))->varid = _1872;
    mosek::fusion::p_ModelVariable::_get_impl(::mosek::fusion::ModelVariable::t(_pubthis))->shape = _1871;
    mosek::fusion::p_ModelVariable::_get_impl(::mosek::fusion::ModelVariable::t(_pubthis))->sparsity = _1873;
    mosek::fusion::p_ModelVariable::_get_impl(::mosek::fusion::ModelVariable::t(_pubthis))->nativeidxs = _1874;
  }
}void mosek::fusion::ModelVariable :: elementName(long long _1875,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1876) { mosek::fusion::p_ModelVariable::_get_impl(this)->elementName(_1875,_1876); }void mosek::fusion::p_ModelVariable::elementName(long long _1875,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1876){
  std::string _9431;
  bool _9432 = ((int)((name).size()) == (int)0);
  if (_9432)
  {
    _9431 = std::string ("_");
  }
  else
  {
    _9431 = name;
  }
  _1876->__mosek_2fusion_2Utils_2StringBuffer__a(_9431)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("["))->__mosek_2fusion_2Utils_2StringBuffer__a(::mosek::fusion::p_Set::indexToString(shape,_1875))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("]"));
}
void mosek::fusion::ModelVariable :: remove() { mosek::fusion::p_ModelVariable::_get_impl(this)->remove(); }void mosek::fusion::p_ModelVariable::remove(){
  mosek::fusion::p_Model::_get_impl(_pubthis->__mosek_2fusion_2BaseVariable__getModel().get())->removeVariableBlock(varid);
}
void mosek::fusion::p_ModelVariable::destroy(){sparsity.reset();shape.reset();nativeidxs.reset();}void mosek::fusion::ModelVariable::destroy() { mosek::fusion::p_ModelVariable::_get_impl(this)->destroy(); }mosek::fusion::NilVariable::NilVariable(mosek::fusion::p_NilVariable *_impl) : mosek::fusion::BaseVariable(_impl) { /*std::cout << "NilVariable()" << this << std::endl; */ }mosek::fusion::NilVariable::~NilVariable() {  /* std::cout << "~NilVariable()" << this << std::endl << std::flush; */ }mosek::fusion::p_NilVariable::p_NilVariable  (::mosek::fusion::NilVariable * _pubthis) :     mosek::fusion::p_BaseVariable(_pubthis),    _pubthis(_pubthis){}mosek::fusion::NilVariable::t mosek::fusion::p_NilVariable::_new_NilVariable  (std::shared_ptr< monty::ndarray< int,1 > > _1878){ return new mosek::fusion::NilVariable(_1878); }mosek::fusion::NilVariable::NilVariable  (std::shared_ptr< monty::ndarray< int,1 > > _1878) :    NilVariable(new mosek::fusion::p_NilVariable(this)){ mosek::fusion::p_NilVariable::_get_impl(this)->_initialize(_1878); }void mosek::fusion::p_NilVariable::_initialize  (std::shared_ptr< monty::ndarray< int,1 > > _1878){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__1878(_1878 ? _1878->raw() : nullptr, _1878 ? _1878->size(0) : 0);
    mosek::fusion::p_BaseVariable::_initialize(nullptr,::mosek::fusion::Utils::Tools::arraycopy(_1878),std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)0))));
    std::vector<int> _9433;
    for (int _1879 = (int)0, _9434 = (int)((_1878)->size(0)); _1879 < _9434 ; ++_1879)
    {
      _9433.push_back(_ptr__1878[_1879]);
    }
    auto _9435 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9433.size()),_9433.begin(),_9433.end()));
    mosek::fusion::p_NilVariable::_get_impl(::mosek::fusion::NilVariable::t(_pubthis))->shape = _9435;
  }
}mosek::fusion::NilVariable::t mosek::fusion::p_NilVariable::_new_NilVariable  (){ return new mosek::fusion::NilVariable(); }mosek::fusion::NilVariable::NilVariable  () :    NilVariable(new mosek::fusion::p_NilVariable(this)){ mosek::fusion::p_NilVariable::_get_impl(this)->_initialize(); }void mosek::fusion::p_NilVariable::_initialize  (){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_NilVariable::_initialize(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))));
  }
}void mosek::fusion::p_NilVariable::flushNames(){
}
monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::NilVariable :: __mosek_2fusion_2NilVariable__elementDesc(long long _1880,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1881) { return mosek::fusion::p_NilVariable::_get_impl(this)->__mosek_2fusion_2NilVariable__elementDesc(_1880,_1881); }monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::NilVariable::elementDesc(long long _1880,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1881) { return __mosek_2fusion_2NilVariable__elementDesc(_1880,_1881); }
monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > mosek::fusion::p_NilVariable::__mosek_2fusion_2NilVariable__elementDesc(long long _1880,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1881){
  return _1881;
}
void mosek::fusion::NilVariable :: elementName(long long _1882,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1883) { mosek::fusion::p_NilVariable::_get_impl(this)->elementName(_1882,_1883); }void mosek::fusion::p_NilVariable::elementName(long long _1882,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1883){
}
int mosek::fusion::NilVariable :: numInst() { return mosek::fusion::p_NilVariable::_get_impl(this)->numInst(); }int mosek::fusion::p_NilVariable::numInst(){
  return (int)0;
}
int mosek::fusion::NilVariable :: inst(int _1884,std::shared_ptr< monty::ndarray< long long,1 > > _1885,std::shared_ptr< monty::ndarray< long long,1 > > _1886) { return mosek::fusion::p_NilVariable::_get_impl(this)->inst(_1884,_1885,_1886); }int mosek::fusion::p_NilVariable::inst(int _1884,std::shared_ptr< monty::ndarray< long long,1 > > _1885,std::shared_ptr< monty::ndarray< long long,1 > > _1886){
  _checked_ptr_1<long long> _ptr__1885(_1885 ? _1885->raw() : nullptr, _1885 ? _1885->size(0) : 0);
  _checked_ptr_1<long long> _ptr__1886(_1886 ? _1886->raw() : nullptr, _1886 ? _1886->size(0) : 0);
  return (int)0;
}
void mosek::fusion::NilVariable :: inst(int _1887,std::shared_ptr< monty::ndarray< long long,1 > > _1888) { mosek::fusion::p_NilVariable::_get_impl(this)->inst(_1887,_1888); }void mosek::fusion::p_NilVariable::inst(int _1887,std::shared_ptr< monty::ndarray< long long,1 > > _1888){
  _checked_ptr_1<long long> _ptr__1888(_1888 ? _1888->raw() : nullptr, _1888 ? _1888->size(0) : 0);
}
void mosek::fusion::NilVariable :: set_values(std::shared_ptr< monty::ndarray< double,1 > > _1889,bool _1890) { mosek::fusion::p_NilVariable::_get_impl(this)->set_values(_1889,_1890); }void mosek::fusion::p_NilVariable::set_values(std::shared_ptr< monty::ndarray< double,1 > > _1889,bool _1890){
  _checked_ptr_1<double> _ptr__1889(_1889 ? _1889->raw() : nullptr, _1889 ? _1889->size(0) : 0);
}
void mosek::fusion::NilVariable :: values(int _1891,std::shared_ptr< monty::ndarray< double,1 > > _1892,bool _1893) { mosek::fusion::p_NilVariable::_get_impl(this)->values(_1891,_1892,_1893); }void mosek::fusion::p_NilVariable::values(int _1891,std::shared_ptr< monty::ndarray< double,1 > > _1892,bool _1893){
  _checked_ptr_1<double> _ptr__1892(_1892 ? _1892->raw() : nullptr, _1892 ? _1892->size(0) : 0);
}
void mosek::fusion::NilVariable :: make_continuous() { mosek::fusion::p_NilVariable::_get_impl(this)->make_continuous(); }void mosek::fusion::p_NilVariable::make_continuous(){
}
void mosek::fusion::NilVariable :: make_integer() { mosek::fusion::p_NilVariable::_get_impl(this)->make_integer(); }void mosek::fusion::p_NilVariable::make_integer(){
}
std::string mosek::fusion::NilVariable :: toString() { return mosek::fusion::p_NilVariable::_get_impl(this)->toString(); }std::string mosek::fusion::p_NilVariable::toString(){
  return std::string ("NilVariable");
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable :: __mosek_2fusion_2NilVariable__index(std::shared_ptr< monty::ndarray< int,1 > > _1894) { return mosek::fusion::p_NilVariable::_get_impl(this)->__mosek_2fusion_2NilVariable__index(_1894); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::index(std::shared_ptr< monty::ndarray< int,1 > > _1894) { return __mosek_2fusion_2NilVariable__index(_1894); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::__mosek_2fusion_2BaseVariable__index(std::shared_ptr< monty::ndarray< int,1 > > _1894) { return __mosek_2fusion_2NilVariable__index(_1894); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::__mosek_2fusion_2Variable__index(std::shared_ptr< monty::ndarray< int,1 > > _1894) { return __mosek_2fusion_2NilVariable__index(_1894); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_NilVariable::__mosek_2fusion_2NilVariable__index(std::shared_ptr< monty::ndarray< int,1 > > _1894){
  _checked_ptr_1<int> _ptr__1894(_1894 ? _1894->raw() : nullptr, _1894 ? _1894->size(0) : 0);
  std::vector<int> _9436;
  for (int _1895 = (int)0, _9437 = (int)((shape)->size(0)); _1895 < _9437 ; ++_1895)
  {
    _9436.push_back((int)1);
  }
  auto _9438 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9436.size()),_9436.begin(),_9436.end()));
  return (::mosek::fusion::p_NilVariable::_new_NilVariable(_9438)).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable :: __mosek_2fusion_2NilVariable__index(int _1896) { return mosek::fusion::p_NilVariable::_get_impl(this)->__mosek_2fusion_2NilVariable__index(_1896); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::index(int _1896) { return __mosek_2fusion_2NilVariable__index(_1896); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::__mosek_2fusion_2BaseVariable__index(int _1896) { return __mosek_2fusion_2NilVariable__index(_1896); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::__mosek_2fusion_2Variable__index(int _1896) { return __mosek_2fusion_2NilVariable__index(_1896); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_NilVariable::__mosek_2fusion_2NilVariable__index(int _1896){
  std::vector<int> _9439;
  for (int _1897 = (int)0, _9440 = (int)((shape)->size(0)); _1897 < _9440 ; ++_1897)
  {
    _9439.push_back((int)1);
  }
  auto _9441 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9439.size()),_9439.begin(),_9439.end()));
  return (::mosek::fusion::p_NilVariable::_new_NilVariable(_9441)).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable :: __mosek_2fusion_2NilVariable__slice(std::shared_ptr< monty::ndarray< int,1 > > _1898,std::shared_ptr< monty::ndarray< int,1 > > _1899) { return mosek::fusion::p_NilVariable::_get_impl(this)->__mosek_2fusion_2NilVariable__slice(_1898,_1899); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::slice(std::shared_ptr< monty::ndarray< int,1 > > _1898,std::shared_ptr< monty::ndarray< int,1 > > _1899) { return __mosek_2fusion_2NilVariable__slice(_1898,_1899); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::__mosek_2fusion_2BaseVariable__slice(std::shared_ptr< monty::ndarray< int,1 > > _1898,std::shared_ptr< monty::ndarray< int,1 > > _1899) { return __mosek_2fusion_2NilVariable__slice(_1898,_1899); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::__mosek_2fusion_2Variable__slice(std::shared_ptr< monty::ndarray< int,1 > > _1898,std::shared_ptr< monty::ndarray< int,1 > > _1899) { return __mosek_2fusion_2NilVariable__slice(_1898,_1899); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_NilVariable::__mosek_2fusion_2NilVariable__slice(std::shared_ptr< monty::ndarray< int,1 > > _1898,std::shared_ptr< monty::ndarray< int,1 > > _1899){
  _checked_ptr_1<int> _ptr__1898(_1898 ? _1898->raw() : nullptr, _1898 ? _1898->size(0) : 0);
  _checked_ptr_1<int> _ptr__1899(_1899 ? _1899->raw() : nullptr, _1899 ? _1899->size(0) : 0);
  if ((((int)((shape)->size(0)) != (int)((_1898)->size(0))) || ((int)((shape)->size(0)) != (int)((_1899)->size(0)))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching slice shape"));
    }
  }
  {}
  int _9442 = (int)0;
  int _9443 = (int)((_1898)->size(0));
  for (int _1900 = _9442; _1900 < _9443; ++_1900)
  {
    {
      if (((_ptr__1899[_1900] > _ptr__1898[_1900]) || ((_ptr__1898[_1900] < (int)0) || (_ptr__1899[_1900] >= ((*shape)(_1900))))))
      {
        {
          throw ::mosek::fusion::SliceError(std::string ("Slice is out of bounds"));
        }
      }
      {}
    }
  }
  std::vector<int> _9444;
  for (int _1901 = (int)0, _9445 = (int)((shape)->size(0)); _1901 < _9445 ; ++_1901)
  {
    _9444.push_back((_ptr__1899[_1901] - _ptr__1898[_1901]));
  }
  auto _9446 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9444.size()),_9444.begin(),_9444.end()));
  return (::mosek::fusion::p_NilVariable::_new_NilVariable(_9446)).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable :: __mosek_2fusion_2NilVariable__slice(int _1902,int _1903) { return mosek::fusion::p_NilVariable::_get_impl(this)->__mosek_2fusion_2NilVariable__slice(_1902,_1903); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::slice(int _1902,int _1903) { return __mosek_2fusion_2NilVariable__slice(_1902,_1903); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::__mosek_2fusion_2BaseVariable__slice(int _1902,int _1903) { return __mosek_2fusion_2NilVariable__slice(_1902,_1903); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::NilVariable::__mosek_2fusion_2Variable__slice(int _1902,int _1903) { return __mosek_2fusion_2NilVariable__slice(_1902,_1903); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_NilVariable::__mosek_2fusion_2NilVariable__slice(int _1902,int _1903){
  if (((_1903 > _1902) || ((_1902 < (int)0) || (_1903 > ((*shape)((int)0))))))
  {
    {
      throw ::mosek::fusion::SliceError(std::string ("Slice is out of bounds"));
    }
  }
  else if(((int)((shape)->size(0)) != (int)1))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching slice shape"));
    }
  }
  else
  {
    {
      return (::mosek::fusion::p_NilVariable::_new_NilVariable(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((_1903 - _1902))}))).as<::mosek::fusion::Variable>();
    }
  }
}
void mosek::fusion::p_NilVariable::destroy(){shape.reset();}void mosek::fusion::NilVariable::destroy() { mosek::fusion::p_NilVariable::_get_impl(this)->destroy(); }mosek::fusion::BaseVariable::BaseVariable(mosek::fusion::p_BaseVariable *_impl) : _impl(_impl) { /*std::cout << "BaseVariable() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::BaseVariable::~BaseVariable() { delete _impl; _impl = nullptr; }mosek::fusion::p_BaseVariable::p_BaseVariable  (::mosek::fusion::BaseVariable * _pubthis) :     _pubthis(_pubthis){}void mosek::fusion::p_BaseVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::BaseVariable > _1904,    monty::rc_ptr< ::mosek::fusion::Model > _1905){monty::rc_reserve __reserve_this(_pubthis);   {
    model = _1905;
    shape = mosek::fusion::p_BaseVariable::_get_impl(_1904)->shape;
    sparsity = mosek::fusion::p_BaseVariable::_get_impl(_1904)->sparsity;
    nativeidxs = mosek::fusion::p_BaseVariable::_get_impl(_1904)->nativeidxs;
  }
}void mosek::fusion::p_BaseVariable::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _1906,    std::shared_ptr< monty::ndarray< int,1 > > _1907,    std::shared_ptr< monty::ndarray< long long,1 > > _1908,    std::shared_ptr< monty::ndarray< long long,1 > > _1909){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__1907(_1907 ? _1907->raw() : nullptr, _1907 ? _1907->size(0) : 0);
    _checked_ptr_1<long long> _ptr__1908(_1908 ? _1908->raw() : nullptr, _1908 ? _1908->size(0) : 0);
    _checked_ptr_1<long long> _ptr__1909(_1909 ? _1909->raw() : nullptr, _1909 ? _1909->size(0) : 0);
    model = _1906;
    mosek::fusion::p_BaseVariable::_get_impl(::mosek::fusion::BaseVariable::t(_pubthis))->shape = _1907;
    mosek::fusion::p_BaseVariable::_get_impl(::mosek::fusion::BaseVariable::t(_pubthis))->sparsity = _1908;
    mosek::fusion::p_BaseVariable::_get_impl(::mosek::fusion::BaseVariable::t(_pubthis))->nativeidxs = _1909;
  }
}std::string mosek::fusion::BaseVariable :: toString() { return mosek::fusion::p_BaseVariable::_get_impl(this)->toString(); }std::string mosek::fusion::p_BaseVariable::toString(){
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _1910 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  _1910->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Variable(("));
  if (((int)((shape)->size(0)) > (int)0))
  {
    {
      _1910->__mosek_2fusion_2Utils_2StringBuffer__a(((*shape)((int)0)));
      int _9447 = (int)1;
      int _9448 = (int)((shape)->size(0));
      for (int _1911 = _9447; _1911 < _9448; ++_1911)
      {
        {
          _1910->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(((*shape)(_1911)));
        }
      }
    }
  }
  {}
  _1910->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("))"));
  return _1910->toString();
}
void mosek::fusion::BaseVariable :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _1912,monty::rc_ptr< ::mosek::fusion::WorkStack > _1913,monty::rc_ptr< ::mosek::fusion::WorkStack > _1914) { mosek::fusion::p_BaseVariable::_get_impl(this)->eval(_1912,_1913,_1914); }void mosek::fusion::p_BaseVariable::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _1912,monty::rc_ptr< ::mosek::fusion::WorkStack > _1913,monty::rc_ptr< ::mosek::fusion::WorkStack > _1914){
  int _1915 = (int)((nativeidxs)->size(0));
  int _1916 = _1915;
  int _1917 = (int)((shape)->size(0));
  bool _1918 = (NULL != sparsity.get());
  _1912->alloc_expr(_1917,_1916,_1915,_1918);
  int _1919 = mosek::fusion::p_WorkStack::_get_impl(_1912)->ptr_base;
  int _1920 = mosek::fusion::p_WorkStack::_get_impl(_1912)->nidxs_base;
  int _1921 = mosek::fusion::p_WorkStack::_get_impl(_1912)->sp_base;
  int _1922 = mosek::fusion::p_WorkStack::_get_impl(_1912)->cof_base;
  int _1923 = mosek::fusion::p_WorkStack::_get_impl(_1912)->shape_base;
  std::shared_ptr< monty::ndarray< int,1 > > _1924 = mosek::fusion::p_WorkStack::_get_impl(_1912)->i32;
  _checked_ptr_1<int> _ptr__1924(_1924 ? _1924->raw() : nullptr,_1924 ? _1924->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _1925 = mosek::fusion::p_WorkStack::_get_impl(_1912)->i64;
  _checked_ptr_1<long long> _ptr__1925(_1925 ? _1925->raw() : nullptr,_1925 ? _1925->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _1926 = mosek::fusion::p_WorkStack::_get_impl(_1912)->f64;
  _checked_ptr_1<double> _ptr__1926(_1926 ? _1926->raw() : nullptr,_1926 ? _1926->size(0) : 0);
  int _9449 = (int)0;
  int _9450 = _1917;
  for (int _1927 = _9449; _1927 < _9450; ++_1927)
  {
    {
      _ptr__1924[safe_add( _1923,_1927 )] = ((*shape)(_1927));
    }
  }
  {
    int _9451 = (int)0;
    int _9452 = safe_add( _1915,(int)1 );
    for (int _1928 = _9451; _1928 < _9452; ++_1928)
    {
      {
        _ptr__1924[safe_add( _1919,_1928 )] = _1928;
      }
    }
    int _9453 = (int)0;
    int _9454 = _1915;
    for (int _1929 = _9453; _1929 < _9454; ++_1929)
    {
      {
        _ptr__1925[safe_add( _1920,_1929 )] = ((*nativeidxs)(_1929));
      }
    }
    if (_1918)
    {
      {
        int _9455 = (int)0;
        int _9456 = _1915;
        for (int _1930 = _9455; _1930 < _9456; ++_1930)
        {
          {
            _ptr__1925[safe_add( _1921,_1930 )] = ((*sparsity)(_1930));
          }
        }
      }
    }
    {}
    int _9457 = (int)0;
    int _9458 = _1915;
    for (int _1931 = _9457; _1931 < _9458; ++_1931)
    {
      {
        _ptr__1926[safe_add( _1922,_1931 )] = 1.0;
      }
    }
  }
}
void mosek::fusion::BaseVariable :: remove() { mosek::fusion::p_BaseVariable::_get_impl(this)->remove(); }void mosek::fusion::p_BaseVariable::remove(){
  throw ::mosek::fusion::DeletionError(std::string ("Only original variables can be removed"));
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__fromTril(int _1932,int _1933) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__fromTril(_1932,_1933); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::fromTril(int _1932,int _1933) { return __mosek_2fusion_2BaseVariable__fromTril(_1932,_1933); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__fromTril(int _1932,int _1933){
  if (((_1932 < (int)0) || (_1932 >= (int)((shape)->size(0)))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid dimension"));
    }
  }
  else if((((*shape)(_1932)) != (safe_mul( _1933,safe_add( _1933,(int)1 ) ) / (int)2)))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid shape for operation"));
    }
  }
  {}
  int _1934 = (int)1;
  int _9459 = (int)0;
  int _9460 = _1932;
  for (int _1935 = _9459; _1935 < _9460; ++_1935)
  {
    {
      _1934 *= ((*shape)(_1935));
    }
  }
  int _1936 = ((*shape)(_1932));
  int _1937 = (int)1;
  int _9461 = safe_add( _1932,(int)1 );
  int _9462 = (int)((shape)->size(0));
  for (int _1938 = _9461; _1938 < _9462; ++_1938)
  {
    {
      _1937 *= ((*shape)(_1938));
    }
  }
  std::shared_ptr< monty::ndarray< int,1 > > _1939 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(safe_add( (int)((shape)->size(0)),(int)1 ))));
  _checked_ptr_1<int> _ptr__1939(_1939 ? _1939->raw() : nullptr,_1939 ? _1939->size(0) : 0);
  int _9463 = (int)0;
  int _9464 = _1932;
  for (int _1940 = _9463; _1940 < _9464; ++_1940)
  {
    {
      _ptr__1939[_1940] = ((*shape)(_1940));
    }
  }
  _ptr__1939[_1932] = _1933;
  _ptr__1939[safe_add( _1932,(int)1 )] = _1933;
  int _9465 = safe_add( _1932,(int)1 );
  int _9466 = (int)((shape)->size(0));
  for (int _1941 = _9465; _1941 < _9466; ++_1941)
  {
    {
      _ptr__1939[safe_add( _1941,(int)1 )] = ((*shape)(_1941));
    }
  }
  if ((NULL == sparsity.get()))
  {
    {
      std::shared_ptr< monty::ndarray< long long,1 > > _1942 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_mul( safe_mul( safe_mul( _1934,_1933 ),_1933 ),_1937 ))));
      _checked_ptr_1<long long> _ptr__1942(_1942 ? _1942->raw() : nullptr,_1942 ? _1942->size(0) : 0);
      int _1943 = (int)0;
      int _9467 = (int)0;
      int _9468 = _1934;
      for (int _1944 = _9467; _1944 < _9468; ++_1944)
      {
        {
          int _9469 = (int)0;
          int _9470 = _1933;
          for (int _1945 = _9469; _1945 < _9470; ++_1945)
          {
            {
              int _9471 = (int)0;
              int _9472 = _1933;
              for (int _1946 = _9471; _1946 < _9472; ++_1946)
              {
                {
                  int _9473 = (int)0;
                  int _9474 = _1937;
                  for (int _1947 = _9473; _1947 < _9474; ++_1947)
                  {
                    {
                      if ((_1945 >= _1946))
                      {
                        {
                          _ptr__1942[_1943] = ((*nativeidxs)(safe_add( safe_add( safe_mul( safe_mul( _1944,_1936 ),_1937 ),safe_mul( safe_add( (safe_mul( _1945,safe_add( _1945,(int)1 ) ) / (int)2),_1946 ),_1937 ) ),_1947 )));
                        }
                      }
                      else
                      {
                        {
                          _ptr__1942[_1943] = ((*nativeidxs)(safe_add( safe_add( safe_mul( safe_mul( _1944,_1936 ),_1937 ),safe_mul( safe_add( (safe_mul( _1946,safe_add( _1946,(int)1 ) ) / (int)2),_1945 ),_1937 ) ),_1947 )));
                        }
                      }
                      ++ _1943;
                    }
                  }
                }
              }
            }
          }
        }
      }
      return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),_1939,nullptr,_1942)).as<::mosek::fusion::Variable>();
    }
  }
  else
  {
    {
      int _1948 = (int)0;
      int _9475 = (int)0;
      int _9476 = (int)((sparsity)->size(0));
      for (int _1949 = _9475; _1949 < _9476; ++_1949)
      {
        {
          long long _1950 = ((((*sparsity)(_1949)) / _1937) % _1936);
          int _1951 = (int)(((-(int)1) + ::mosek::fusion::Utils::Tools::sqrt((double)(safe_mul( safe_add( (int)1,safe_mul( (int)2,_1950 ) ),safe_add( (int)1,safe_mul( (int)2,_1950 ) ) )))) / (int)4);
          long long _1952 = (((*sparsity)(_1949)) - (safe_mul( _1951,safe_add( _1951,(int)1 ) ) / (int)2));
          if ((_1951 == _1952))
          {
            {
              _1948 += (int)1;
            }
          }
          else
          {
            {
              _1948 += (int)2;
            }
          }
        }
      }
      std::shared_ptr< monty::ndarray< long long,1 > > _1953 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1948)));
      _checked_ptr_1<long long> _ptr__1953(_1953 ? _1953->raw() : nullptr,_1953 ? _1953->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _1954 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1948)));
      _checked_ptr_1<long long> _ptr__1954(_1954 ? _1954->raw() : nullptr,_1954 ? _1954->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _1955 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_1948)));
      _checked_ptr_1<long long> _ptr__1955(_1955 ? _1955->raw() : nullptr,_1955 ? _1955->size(0) : 0);
      int _9477 = (int)0;
      int _9478 = _1948;
      for (int _1956 = _9477; _1956 < _9478; ++_1956)
      {
        {
          _ptr__1955[_1956] = _1956;
        }
      }
      int _1957 = (int)0;
      int _9479 = (int)0;
      int _9480 = (int)((sparsity)->size(0));
      for (int _1958 = _9479; _1958 < _9480; ++_1958)
      {
        {
          long long _1959 = (((*sparsity)(_1958)) / safe_mul( _1936,_1937 ));
          long long _1960 = ((((*sparsity)(_1958)) / _1937) % _1936);
          long long _1961 = (((*sparsity)(_1958)) % _1937);
          int _1962 = (int)(((-(int)1) + ::mosek::fusion::Utils::Tools::sqrt((double)(safe_mul( safe_add( (int)1,safe_mul( (int)2,_1960 ) ),safe_add( (int)1,safe_mul( (int)2,_1960 ) ) )))) / (int)4);
          long long _1963 = (((*sparsity)(_1958)) - (safe_mul( _1962,safe_add( _1962,(int)1 ) ) / (int)2));
          if ((_1962 == _1963))
          {
            {
              _ptr__1953[_1957] = ((*nativeidxs)(_1958));
              _ptr__1954[_1957] = safe_add( safe_add( safe_mul( safe_mul( safe_mul( _1959,_1933 ),_1933 ),_1937 ),safe_mul( safe_add( safe_mul( _1962,_1933 ),_1963 ),_1937 ) ),_1961 );
              _1957 += (int)1;
            }
          }
          else
          {
            {
              _ptr__1953[_1957] = ((*nativeidxs)(_1958));
              _ptr__1953[safe_add( _1957,(int)1 )] = ((*nativeidxs)(_1958));
              _ptr__1954[_1957] = safe_add( safe_add( safe_mul( safe_mul( safe_mul( _1959,_1933 ),_1933 ),_1937 ),safe_mul( safe_add( safe_mul( _1962,_1933 ),_1963 ),_1937 ) ),_1961 );
              _ptr__1954[safe_add( _1957,(int)1 )] = safe_add( safe_add( safe_mul( safe_mul( safe_mul( _1959,_1933 ),_1933 ),_1937 ),safe_mul( safe_add( safe_mul( _1963,_1933 ),_1962 ),_1937 ) ),_1961 );
              _1957 += (int)2;
            }
          }
        }
      }
      ::mosek::fusion::p_CommonTools::argQsort(_1955,_1953,std::shared_ptr< monty::ndarray< long long,1 > >(nullptr),(long long)((int)0),(long long)(_1948));
      std::vector<long long> _9481;
      for (int _1964 = (int)0, _9482 = _1948; _1964 < _9482 ; ++_1964)
      {
        _9481.push_back(_ptr__1954[_ptr__1955[_1964]]);
      }
      auto _9483 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9481.size()),_9481.begin(),_9481.end()));
      std::vector<long long> _9484;
      for (int _1965 = (int)0, _9485 = _1948; _1965 < _9485 ; ++_1965)
      {
        _9484.push_back(_ptr__1953[_ptr__1955[_1965]]);
      }
      auto _9486 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9484.size()),_9484.begin(),_9484.end()));
      return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),_1939,_9483,_9486)).as<::mosek::fusion::Variable>();
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__fromTril(int _1966) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__fromTril(_1966); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::fromTril(int _1966) { return __mosek_2fusion_2BaseVariable__fromTril(_1966); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__fromTril(int _1966) { return __mosek_2fusion_2BaseVariable__fromTril(_1966); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__fromTril(int _1966){
  return _pubthis->__mosek_2fusion_2BaseVariable__fromTril((int)0,_1966);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__tril(int _1967,int _1968) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__tril(_1967,_1968); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::tril(int _1967,int _1968) { return __mosek_2fusion_2BaseVariable__tril(_1967,_1968); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__tril(int _1967,int _1968){
  if (((_1967 < (int)0) || ((_1967 >= _1968) || (_1968 >= (int)((shape)->size(0))))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid dimension specification"));
    }
  }
  else
  {
    {
      if ((((*shape)(_1967)) != ((*shape)(_1968))))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Operation only valid for square variables"));
        }
      }
      {}
    }
  }
  std::shared_ptr< monty::ndarray< int,1 > > _1969 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(((int)((shape)->size(0)) - (int)1))));
  _checked_ptr_1<int> _ptr__1969(_1969 ? _1969->raw() : nullptr,_1969 ? _1969->size(0) : 0);
  int _9487 = (int)0;
  int _9488 = _1967;
  for (int _1970 = _9487; _1970 < _9488; ++_1970)
  {
    {
      _ptr__1969[_1970] = ((*shape)(_1970));
    }
  }
  _ptr__1969[_1967] = (safe_mul( ((*shape)(_1967)),safe_add( ((*shape)(_1967)),(int)1 ) ) / (int)2);
  int _9489 = safe_add( _1967,(int)1 );
  int _9490 = _1968;
  for (int _1971 = _9489; _1971 < _9490; ++_1971)
  {
    {
      _ptr__1969[_1971] = ((*shape)(_1971));
    }
  }
  int _9491 = safe_add( _1968,(int)1 );
  int _9492 = (int)((shape)->size(0));
  for (int _1972 = _9491; _1972 < _9492; ++_1972)
  {
    {
      _ptr__1969[(_1972 - (int)1)] = ((*shape)(_1972));
    }
  }
  if ((NULL == sparsity.get()))
  {
    {
      int _1973 = (int)1;
      int _9493 = (int)0;
      int _9494 = _1967;
      for (int _1974 = _9493; _1974 < _9494; ++_1974)
      {
        {
          _1973 *= ((*shape)(_1974));
        }
      }
      int _1975 = ((*shape)(_1967));
      int _1976 = (int)1;
      int _9495 = safe_add( _1967,(int)1 );
      int _9496 = _1968;
      for (int _1977 = _9495; _1977 < _9496; ++_1977)
      {
        {
          _1976 *= ((*shape)(_1977));
        }
      }
      int _1978 = ((*shape)(_1968));
      int _1979 = (int)1;
      int _9497 = safe_add( _1968,(int)1 );
      int _9498 = (int)((shape)->size(0));
      for (int _1980 = _9497; _1980 < _9498; ++_1980)
      {
        {
          _1979 *= ((*shape)(_1980));
        }
      }
      std::shared_ptr< monty::ndarray< long long,1 > > _1981 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((safe_mul( safe_mul( safe_mul( safe_mul( _1973,_1976 ),_1979 ),_1975 ),safe_add( _1975,(int)1 ) ) / (int)2))));
      _checked_ptr_1<long long> _ptr__1981(_1981 ? _1981->raw() : nullptr,_1981 ? _1981->size(0) : 0);
      int _1982 = (int)0;
      int _9499 = (int)0;
      int _9500 = _1973;
      for (int _1983 = _9499; _1983 < _9500; ++_1983)
      {
        {
          int _9501 = (int)0;
          int _9502 = _1975;
          for (int _1984 = _9501; _1984 < _9502; ++_1984)
          {
            {
              int _9503 = (int)0;
              int _9504 = safe_add( _1984,(int)1 );
              for (int _1985 = _9503; _1985 < _9504; ++_1985)
              {
                {
                  int _9505 = (int)0;
                  int _9506 = _1976;
                  for (int _1986 = _9505; _1986 < _9506; ++_1986)
                  {
                    {
                      int _9507 = (int)0;
                      int _9508 = _1979;
                      for (int _1987 = _9507; _1987 < _9508; ++_1987)
                      {
                        {
                          _ptr__1981[_1982] = ((*nativeidxs)(safe_add( _1987,safe_mul( _1979,safe_add( _1985,safe_mul( _1978,safe_add( _1986,safe_mul( _1976,safe_add( _1984,safe_mul( _1975,_1983 ) ) ) ) ) ) ) )));
                          _1982 += (int)1;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),_1969,nullptr,_1981)).as<::mosek::fusion::Variable>();
    }
  }
  else
  {
    {
      int _1988 = (int)1;
      int _9509 = (int)0;
      int _9510 = _1967;
      for (int _1989 = _9509; _1989 < _9510; ++_1989)
      {
        {
          _1988 *= ((*shape)(_1989));
        }
      }
      int _1990 = ((*shape)(_1967));
      int _1991 = (int)1;
      int _9511 = safe_add( _1967,(int)1 );
      int _9512 = _1968;
      for (int _1992 = _9511; _1992 < _9512; ++_1992)
      {
        {
          _1991 *= ((*shape)(_1992));
        }
      }
      int _1993 = ((*shape)(_1968));
      int _1994 = (int)1;
      int _9513 = safe_add( _1968,(int)1 );
      int _9514 = (int)((shape)->size(0));
      for (int _1995 = _9513; _1995 < _9514; ++_1995)
      {
        {
          _1994 *= ((*shape)(_1995));
        }
      }
      int _1996 = (int)1;
      int _1997 = _1994;
      int _1998 = safe_mul( _1997,_1993 );
      int _1999 = safe_mul( _1998,_1991 );
      int _2000 = safe_mul( _1999,_1990 );
      int _2001 = (int)0;
      int _9515 = (int)0;
      int _9516 = (int)((sparsity)->size(0));
      for (int _2002 = _9515; _2002 < _9516; ++_2002)
      {
        {
          if ((((((*sparsity)(_2002)) / _1999) % _1990) >= ((((*sparsity)(_2002)) / _1997) % _1993)))
          {
            {
              ++ _2001;
            }
          }
          {}
        }
      }
      int _2003 = (int)1;
      int _2004 = _1994;
      int _2005 = safe_mul( _2004,_1991 );
      int _2006 = (safe_mul( safe_mul( _2005,_1990 ),safe_add( _1990,(int)1 ) ) / (int)2);
      std::shared_ptr< monty::ndarray< long long,1 > > _2007 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2001)));
      _checked_ptr_1<long long> _ptr__2007(_2007 ? _2007->raw() : nullptr,_2007 ? _2007->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _2008 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2001)));
      _checked_ptr_1<long long> _ptr__2008(_2008 ? _2008->raw() : nullptr,_2008 ? _2008->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _2009 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2001)));
      _checked_ptr_1<long long> _ptr__2009(_2009 ? _2009->raw() : nullptr,_2009 ? _2009->size(0) : 0);
      int _2010 = (int)0;
      {
        int _9517 = (int)0;
        int _9518 = (int)((sparsity)->size(0));
        for (int _2011 = _9517; _2011 < _9518; ++_2011)
        {
          {
            if ((((((*sparsity)(_2011)) / _1999) % _1990) >= ((((*sparsity)(_2011)) / _1997) % _1993)))
            {
              {
                long long _2012 = (((*sparsity)(_2011)) / _2000);
                long long _2013 = ((((*sparsity)(_2011)) / _1999) % _1990);
                long long _2014 = ((((*sparsity)(_2011)) / _1998) % _1991);
                long long _2015 = ((((*sparsity)(_2011)) / _1997) % _1993);
                long long _2016 = ((((*sparsity)(_2011)) / _1996) % _1994);
                _ptr__2008[_2010] = ((*nativeidxs)(_2011));
                _ptr__2009[_2010] = safe_add( safe_add( safe_add( safe_mul( _2006,_2012 ),safe_mul( _2005,safe_add( (safe_mul( _2013,safe_add( _2013,(int)1 ) ) / (int)2),_2015 ) ) ),safe_mul( _2004,_2014 ) ),safe_mul( _2003,_2016 ) );
                ++ _2010;
              }
            }
            {}
          }
        }
        int _9519 = (int)0;
        int _9520 = _2001;
        for (int _2017 = _9519; _2017 < _9520; ++_2017)
        {
          {
            _ptr__2007[_2017] = _2017;
          }
        }
      }
      ::mosek::fusion::p_CommonTools::argQsort(_2007,_2008,std::shared_ptr< monty::ndarray< long long,1 > >(nullptr),(long long)((int)0),(long long)(_2001));
      std::shared_ptr< monty::ndarray< long long,1 > > _2018 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2001)));
      _checked_ptr_1<long long> _ptr__2018(_2018 ? _2018->raw() : nullptr,_2018 ? _2018->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _2019 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2001)));
      _checked_ptr_1<long long> _ptr__2019(_2019 ? _2019->raw() : nullptr,_2019 ? _2019->size(0) : 0);
      int _9521 = (int)0;
      int _9522 = _2001;
      for (int _2020 = _9521; _2020 < _9522; ++_2020)
      {
        {
          _ptr__2018[_2020] = _ptr__2008[_ptr__2007[_2020]];
        }
      }
      int _9523 = (int)0;
      int _9524 = _2001;
      for (int _2021 = _9523; _2021 < _9524; ++_2021)
      {
        {
          _ptr__2019[_2021] = _ptr__2009[_ptr__2007[_2021]];
        }
      }
      return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),_1969,_2019,_2018)).as<::mosek::fusion::Variable>();
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__tril() { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__tril(); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::tril() { return __mosek_2fusion_2BaseVariable__tril(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__tril() { return __mosek_2fusion_2BaseVariable__tril(); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__tril(){
  return _pubthis->__mosek_2fusion_2BaseVariable__tril((int)0,(int)1);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__reshape(int _2022,int _2023,int _2024) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__reshape(_2022,_2023,_2024); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::reshape(int _2022,int _2023,int _2024) { return __mosek_2fusion_2BaseVariable__reshape(_2022,_2023,_2024); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__reshape(int _2022,int _2023,int _2024) { return __mosek_2fusion_2BaseVariable__reshape(_2022,_2023,_2024); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__reshape(int _2022,int _2023,int _2024){
  return _pubthis->__mosek_2fusion_2BaseVariable__reshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2022),(int)(_2023),(int)(_2024)}));
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__reshape(int _2025,int _2026) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__reshape(_2025,_2026); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::reshape(int _2025,int _2026) { return __mosek_2fusion_2BaseVariable__reshape(_2025,_2026); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__reshape(int _2025,int _2026) { return __mosek_2fusion_2BaseVariable__reshape(_2025,_2026); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__reshape(int _2025,int _2026){
  return _pubthis->__mosek_2fusion_2BaseVariable__reshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2025),(int)(_2026)}));
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__reshape(int _2027) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__reshape(_2027); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::reshape(int _2027) { return __mosek_2fusion_2BaseVariable__reshape(_2027); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__reshape(int _2027) { return __mosek_2fusion_2BaseVariable__reshape(_2027); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__reshape(int _2027){
  return _pubthis->__mosek_2fusion_2BaseVariable__reshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2027)}));
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__reshape(std::shared_ptr< monty::ndarray< int,1 > > _2028) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__reshape(_2028); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::reshape(std::shared_ptr< monty::ndarray< int,1 > > _2028) { return __mosek_2fusion_2BaseVariable__reshape(_2028); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__reshape(std::shared_ptr< monty::ndarray< int,1 > > _2028) { return __mosek_2fusion_2BaseVariable__reshape(_2028); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__reshape(std::shared_ptr< monty::ndarray< int,1 > > _2028){
  _checked_ptr_1<int> _ptr__2028(_2028 ? _2028->raw() : nullptr, _2028 ? _2028->size(0) : 0);
  long long _2029 = (int)1;
  int _9525 = (int)0;
  int _9526 = (int)((_2028)->size(0));
  for (int _2030 = _9525; _2030 < _9526; ++_2030)
  {
    {
      if ((_ptr__2028[_2030] < (int)0))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Invalid shape"));
        }
      }
      {}
      _2029 *= _ptr__2028[_2030];
    }
  }
  if ((_2029 != _pubthis->getSize()))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Shape size does not match variable size"));
    }
  }
  {}
  std::vector<int> _9527;
  for (int _2031 = (int)0, _9528 = (int)((_2028)->size(0)); _2031 < _9528 ; ++_2031)
  {
    _9527.push_back(_ptr__2028[_2031]);
  }
  auto _9529 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9527.size()),_9527.begin(),_9527.end()));
  return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),_9529,sparsity,nativeidxs)).as<::mosek::fusion::Variable>();
}
void mosek::fusion::BaseVariable :: setLevel(std::shared_ptr< monty::ndarray< double,1 > > _2032) { mosek::fusion::p_BaseVariable::_get_impl(this)->setLevel(_2032); }void mosek::fusion::p_BaseVariable::setLevel(std::shared_ptr< monty::ndarray< double,1 > > _2032){
  _checked_ptr_1<double> _ptr__2032(_2032 ? _2032->raw() : nullptr, _2032 ? _2032->size(0) : 0);
  if ((NULL == sparsity.get()))
  {
    {
      if (((int)((_2032)->size(0)) != (int)((nativeidxs)->size(0))))
      {
        {
          throw ::mosek::fusion::LengthError(std::string ("Invalid length of solution values vector"));
        }
      }
      {}
      model->setVariableValues(true,nativeidxs,_2032);
    }
  }
  else
  {
    {
      if (((int)((_2032)->size(0)) != _pubthis->getSize()))
      {
        {
          throw ::mosek::fusion::LengthError(std::string ("Invalid length of solution values vector"));
        }
      }
      {}
      std::vector<double> _9530;
      for (int _2034 = (int)0, _9531 = (int)((nativeidxs)->size(0)); _2034 < _9531 ; ++_2034)
      {
        _9530.push_back(_ptr__2032[((*sparsity)(_2034))]);
      }
      auto _9532 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_9530.size()),_9530.begin(),_9530.end()));
      std::shared_ptr< monty::ndarray< double,1 > > _2033 = _9532;
      _checked_ptr_1<double> _ptr__2033(_2033 ? _2033->raw() : nullptr,_2033 ? _2033->size(0) : 0);
      model->setVariableValues(true,nativeidxs,_2033);
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__getModel() { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__getModel(); }monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::BaseVariable::getModel() { return __mosek_2fusion_2BaseVariable__getModel(); }
monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__getModel() { return __mosek_2fusion_2BaseVariable__getModel(); }monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__getModel(){
  return model;
}
int mosek::fusion::BaseVariable :: getND() { return mosek::fusion::p_BaseVariable::_get_impl(this)->getND(); }int mosek::fusion::p_BaseVariable::getND(){
  return (int)((shape)->size(0));
}
int mosek::fusion::BaseVariable :: getDim(int _2035) { return mosek::fusion::p_BaseVariable::_get_impl(this)->getDim(_2035); }int mosek::fusion::p_BaseVariable::getDim(int _2035){
  return ((*shape)(_2035));
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::BaseVariable :: getShape() { return mosek::fusion::p_BaseVariable::_get_impl(this)->getShape(); }std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_BaseVariable::getShape(){
  return ::mosek::fusion::Utils::Tools::arraycopy(shape);
}
long long mosek::fusion::BaseVariable :: getSize() { return mosek::fusion::p_BaseVariable::_get_impl(this)->getSize(); }long long mosek::fusion::p_BaseVariable::getSize(){
  long long _2036 = (long long)1;
  int _9533 = (int)0;
  int _9534 = (int)((shape)->size(0));
  for (int _2037 = _9533; _2037 < _9534; ++_2037)
  {
    {
      _2036 *= ((*shape)(_2037));
    }
  }
  return _2036;
}
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::BaseVariable :: dual() { return mosek::fusion::p_BaseVariable::_get_impl(this)->dual(); }std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_BaseVariable::dual(){
  std::shared_ptr< monty::ndarray< double,1 > > _2038 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)((nativeidxs)->size(0)))));
  _checked_ptr_1<double> _ptr__2038(_2038 ? _2038->raw() : nullptr,_2038 ? _2038->size(0) : 0);
  model->getVariableValues(false,nativeidxs,_2038,(int)0);
  if ((NULL != sparsity.get()))
  {
    {
      std::shared_ptr< monty::ndarray< double,1 > > _2039 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_pubthis->getSize())));
      _checked_ptr_1<double> _ptr__2039(_2039 ? _2039->raw() : nullptr,_2039 ? _2039->size(0) : 0);
      int _9535 = (int)0;
      int _9536 = (int)((nativeidxs)->size(0));
      for (int _2040 = _9535; _2040 < _9536; ++_2040)
      {
        {
          _ptr__2039[((*sparsity)(_2040))] = _ptr__2038[_2040];
        }
      }
      _2038 = _2039;
      _ptr__2038.update(_2038 ? _2038->raw() : nullptr, _2038 ? _2038->size(0) : 0);
    }
  }
  {}
  return _2038;
}
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::BaseVariable :: level() { return mosek::fusion::p_BaseVariable::_get_impl(this)->level(); }std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_BaseVariable::level(){
  std::shared_ptr< monty::ndarray< double,1 > > _2041 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)((nativeidxs)->size(0)))));
  _checked_ptr_1<double> _ptr__2041(_2041 ? _2041->raw() : nullptr,_2041 ? _2041->size(0) : 0);
  model->getVariableValues(true,nativeidxs,_2041,(int)0);
  if ((NULL != sparsity.get()))
  {
    {
      std::shared_ptr< monty::ndarray< double,1 > > _2042 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_pubthis->getSize())));
      _checked_ptr_1<double> _ptr__2042(_2042 ? _2042->raw() : nullptr,_2042 ? _2042->size(0) : 0);
      int _9537 = (int)0;
      int _9538 = (int)((nativeidxs)->size(0));
      for (int _2043 = _9537; _2043 < _9538; ++_2043)
      {
        {
          _ptr__2042[((*sparsity)(_2043))] = _ptr__2041[_2043];
        }
      }
      _2041 = _2042;
      _ptr__2041.update(_2041 ? _2041->raw() : nullptr, _2041 ? _2041->size(0) : 0);
    }
  }
  {}
  return _2041;
}
void mosek::fusion::BaseVariable :: makeContinuous() { mosek::fusion::p_BaseVariable::_get_impl(this)->makeContinuous(); }void mosek::fusion::p_BaseVariable::makeContinuous(){
  _pubthis->make_continuous();
}
void mosek::fusion::BaseVariable :: makeInteger() { mosek::fusion::p_BaseVariable::_get_impl(this)->makeInteger(); }void mosek::fusion::p_BaseVariable::makeInteger(){
  _pubthis->make_integer();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__transpose() { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__transpose(); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::transpose() { return __mosek_2fusion_2BaseVariable__transpose(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__transpose() { return __mosek_2fusion_2BaseVariable__transpose(); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__transpose(){
  if (((int)((shape)->size(0)) == (int)1))
  {
    {
      return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)1),(int)(((*shape)((int)0)))}),sparsity,nativeidxs)).as<::mosek::fusion::Variable>();
    }
  }
  else if(((int)((shape)->size(0)) > (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid shape for operation"));
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< long long,1 > > _2044 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((nativeidxs)->size(0)))));
      _checked_ptr_1<long long> _ptr__2044(_2044 ? _2044->raw() : nullptr,_2044 ? _2044->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _9539;
      bool _9540 = (NULL == sparsity.get());
      if (_9540)
      {
        _9539 = nullptr;
      }
      else
      {
        _9539 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((nativeidxs)->size(0)))));
      }
      std::shared_ptr< monty::ndarray< long long,1 > > _2045 = _9539;
      _checked_ptr_1<long long> _ptr__2045(_2045 ? _2045->raw() : nullptr,_2045 ? _2045->size(0) : 0);
      if ((NULL == sparsity.get()))
      {
        {
          int _2046 = (int)0;
          int _9541 = (int)0;
          int _9542 = ((*shape)((int)1));
          for (int _2047 = _9541; _2047 < _9542; ++_2047)
          {
            {
              int _9543 = (int)0;
              int _9544 = ((*shape)((int)0));
              for (int _2048 = _9543; _2048 < _9544; ++_2048)
              {
                {
                  _ptr__2044[_2046] = ((*nativeidxs)(safe_add( safe_mul( _2048,((*shape)((int)1)) ),_2047 )));
                  ++ _2046;
                }
              }
            }
          }
        }
      }
      else
      {
        {
          std::shared_ptr< monty::ndarray< int,1 > > _2049 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(safe_add( ((*shape)((int)1)),(int)1 ))));
          _checked_ptr_1<int> _ptr__2049(_2049 ? _2049->raw() : nullptr,_2049 ? _2049->size(0) : 0);
          int _2050 = ((*shape)((int)0));
          int _2051 = ((*shape)((int)1));
          int _9545 = (int)0;
          int _9546 = (int)((sparsity)->size(0));
          for (int _2052 = _9545; _2052 < _9546; ++_2052)
          {
            {
              ++ _ptr__2049[safe_add( (((*sparsity)(_2052)) % _2051),(int)1 )];
            }
          }
          int _9547 = (int)0;
          int _9548 = _2051;
          for (int _2053 = _9547; _2053 < _9548; ++_2053)
          {
            {
              _ptr__2049[safe_add( _2053,(int)1 )] += _ptr__2049[_2053];
            }
          }
          int _9549 = (int)0;
          int _9550 = (int)((sparsity)->size(0));
          for (int _2054 = _9549; _2054 < _9550; ++_2054)
          {
            {
              long long _2055 = (((*sparsity)(_2054)) % _2051);
              _ptr__2044[_ptr__2049[_2055]] = ((*nativeidxs)(_2054));
              _ptr__2045[_ptr__2049[_2055]] = safe_add( (((*sparsity)(_2054)) / _2051),safe_mul( (((*sparsity)(_2054)) % _2051),_2050 ) );
              ++ _ptr__2049[_2055];
            }
          }
        }
      }
      return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(((*shape)((int)1))),(int)(((*shape)((int)0)))}),_2045,_2044)).as<::mosek::fusion::Variable>();
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__index(int _2056,int _2057,int _2058) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__index(_2056,_2057,_2058); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::index(int _2056,int _2057,int _2058) { return __mosek_2fusion_2BaseVariable__index(_2056,_2057,_2058); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__index(int _2056,int _2057,int _2058) { return __mosek_2fusion_2BaseVariable__index(_2056,_2057,_2058); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__index(int _2056,int _2057,int _2058){
  return _pubthis->__mosek_2fusion_2BaseVariable__index(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2056),(int)(_2057),(int)(_2058)}));
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__index(int _2059,int _2060) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__index(_2059,_2060); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::index(int _2059,int _2060) { return __mosek_2fusion_2BaseVariable__index(_2059,_2060); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__index(int _2059,int _2060) { return __mosek_2fusion_2BaseVariable__index(_2059,_2060); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__index(int _2059,int _2060){
  return _pubthis->__mosek_2fusion_2BaseVariable__index(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2059),(int)(_2060)}));
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__index(std::shared_ptr< monty::ndarray< int,1 > > _2061) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__index(_2061); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::index(std::shared_ptr< monty::ndarray< int,1 > > _2061) { return __mosek_2fusion_2BaseVariable__index(_2061); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__index(std::shared_ptr< monty::ndarray< int,1 > > _2061) { return __mosek_2fusion_2BaseVariable__index(_2061); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__index(std::shared_ptr< monty::ndarray< int,1 > > _2061){
  _checked_ptr_1<int> _ptr__2061(_2061 ? _2061->raw() : nullptr, _2061 ? _2061->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,2 > > _2062 = std::shared_ptr< monty::ndarray< int,2 > >(new monty::ndarray< int,2 >(monty::shape((int)1,(int)((_2061)->size(0)))));
  int _9551 = (int)0;
  int _9552 = (int)((_2061)->size(0));
  for (int _2063 = _9551; _2063 < _9552; ++_2063)
  {
    {
      ((*_2062)((int)0,_2063)) = _ptr__2061[_2063];
    }
  }
  return _pubthis->__mosek_2fusion_2BaseVariable__pick(_2062)->__mosek_2fusion_2Variable__reshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))));
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__index(int _2064) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__index(_2064); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::index(int _2064) { return __mosek_2fusion_2BaseVariable__index(_2064); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__index(int _2064) { return __mosek_2fusion_2BaseVariable__index(_2064); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__index(int _2064){
  return _pubthis->__mosek_2fusion_2BaseVariable__pick(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2064)}))->__mosek_2fusion_2Variable__reshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))));
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__pick(std::shared_ptr< monty::ndarray< int,1 > > _2065,std::shared_ptr< monty::ndarray< int,1 > > _2066,std::shared_ptr< monty::ndarray< int,1 > > _2067) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__pick(_2065,_2066,_2067); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::pick(std::shared_ptr< monty::ndarray< int,1 > > _2065,std::shared_ptr< monty::ndarray< int,1 > > _2066,std::shared_ptr< monty::ndarray< int,1 > > _2067) { return __mosek_2fusion_2BaseVariable__pick(_2065,_2066,_2067); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__pick(std::shared_ptr< monty::ndarray< int,1 > > _2065,std::shared_ptr< monty::ndarray< int,1 > > _2066,std::shared_ptr< monty::ndarray< int,1 > > _2067) { return __mosek_2fusion_2BaseVariable__pick(_2065,_2066,_2067); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__pick(std::shared_ptr< monty::ndarray< int,1 > > _2065,std::shared_ptr< monty::ndarray< int,1 > > _2066,std::shared_ptr< monty::ndarray< int,1 > > _2067){
  _checked_ptr_1<int> _ptr__2065(_2065 ? _2065->raw() : nullptr, _2065 ? _2065->size(0) : 0);
  _checked_ptr_1<int> _ptr__2066(_2066 ? _2066->raw() : nullptr, _2066 ? _2066->size(0) : 0);
  _checked_ptr_1<int> _ptr__2067(_2067 ? _2067->raw() : nullptr, _2067 ? _2067->size(0) : 0);
  if (((int)((shape)->size(0)) != (int)3))
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Invalid index"));
    }
  }
  {}
  if ((((int)((_2065)->size(0)) != (int)((_2066)->size(0))) || ((int)((_2065)->size(0)) != (int)((_2067)->size(0)))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Mismatching argument lengths"));
    }
  }
  {}
  std::shared_ptr< monty::ndarray< int,2 > > _2068 = std::shared_ptr< monty::ndarray< int,2 > >(new monty::ndarray< int,2 >(monty::shape((int)((_2065)->size(0)),(int)3)));
  int _9553 = (int)0;
  int _9554 = (int)((_2065)->size(0));
  for (int _2069 = _9553; _2069 < _9554; ++_2069)
  {
    {
      ((*_2068)(_2069,(int)0)) = _ptr__2065[_2069];
      ((*_2068)(_2069,(int)1)) = _ptr__2066[_2069];
      ((*_2068)(_2069,(int)2)) = _ptr__2067[_2069];
    }
  }
  return _pubthis->__mosek_2fusion_2BaseVariable__pick(_2068);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__pick(std::shared_ptr< monty::ndarray< int,1 > > _2070,std::shared_ptr< monty::ndarray< int,1 > > _2071) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__pick(_2070,_2071); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::pick(std::shared_ptr< monty::ndarray< int,1 > > _2070,std::shared_ptr< monty::ndarray< int,1 > > _2071) { return __mosek_2fusion_2BaseVariable__pick(_2070,_2071); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__pick(std::shared_ptr< monty::ndarray< int,1 > > _2070,std::shared_ptr< monty::ndarray< int,1 > > _2071) { return __mosek_2fusion_2BaseVariable__pick(_2070,_2071); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__pick(std::shared_ptr< monty::ndarray< int,1 > > _2070,std::shared_ptr< monty::ndarray< int,1 > > _2071){
  _checked_ptr_1<int> _ptr__2070(_2070 ? _2070->raw() : nullptr, _2070 ? _2070->size(0) : 0);
  _checked_ptr_1<int> _ptr__2071(_2071 ? _2071->raw() : nullptr, _2071 ? _2071->size(0) : 0);
  if ((((int)((shape)->size(0)) != (int)2) || ((int)((_2070)->size(0)) != (int)((_2071)->size(0)))))
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Invalid index"));
    }
  }
  {}
  std::shared_ptr< monty::ndarray< int,2 > > _2072 = std::shared_ptr< monty::ndarray< int,2 > >(new monty::ndarray< int,2 >(monty::shape((int)((_2070)->size(0)),(int)2)));
  int _9555 = (int)0;
  int _9556 = (int)((_2070)->size(0));
  for (int _2073 = _9555; _2073 < _9556; ++_2073)
  {
    {
      ((*_2072)(_2073,(int)0)) = _ptr__2070[_2073];
      ((*_2072)(_2073,(int)1)) = _ptr__2071[_2073];
    }
  }
  return _pubthis->__mosek_2fusion_2BaseVariable__pick(_2072);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__pick(std::shared_ptr< monty::ndarray< int,2 > > _2074) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__pick(_2074); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::pick(std::shared_ptr< monty::ndarray< int,2 > > _2074) { return __mosek_2fusion_2BaseVariable__pick(_2074); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__pick(std::shared_ptr< monty::ndarray< int,2 > > _2074) { return __mosek_2fusion_2BaseVariable__pick(_2074); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__pick(std::shared_ptr< monty::ndarray< int,2 > > _2074){
  if (((int)((shape)->size(0)) != (int)((_2074)->size(1))))
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Invalid index"));
    }
  }
  {}
  bool _2075 = false;
  int _9557 = (int)0;
  int _9558 = (int)((_2074)->size(0));
  for (int _2076 = _9557; _2076 < _9558; ++_2076)
  {
    {
      int _9559 = (int)0;
      int _9560 = (int)((_2074)->size(1));
      for (int _2077 = _9559; _2077 < _9560; ++_2077)
      {
        {
          if (((((*_2074)(_2076,_2077)) < (int)0) || (((*_2074)(_2076,_2077)) >= ((*shape)(_2077)))))
          {
            {
              _2075 = true;
            }
          }
          {}
        }
      }
    }
  }
  if (_2075)
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Invalid index"));
    }
  }
  {}
  int _2078 = (int)((shape)->size(0));
  std::shared_ptr< monty::ndarray< long long,1 > > _2079 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2078)));
  _checked_ptr_1<long long> _ptr__2079(_2079 ? _2079->raw() : nullptr,_2079 ? _2079->size(0) : 0);
  _ptr__2079[(_2078 - (int)1)] = (int)1;
  int _9561 = (int)1;
  int _9562 = _2078;
  for (int _2080 = _9561; _2080 < _9562; ++_2080)
  {
    {
      _ptr__2079[((_2078 - _2080) - (int)1)] = safe_mul( _ptr__2079[(_2078 - _2080)],((*shape)((_2078 - _2080))) );
    }
  }
  std::shared_ptr< monty::ndarray< int,1 > > _2081 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)((_2074)->size(0)))});
  _checked_ptr_1<int> _ptr__2081(_2081 ? _2081->raw() : nullptr,_2081 ? _2081->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _2082;
  _checked_ptr_1<long long> _ptr__2082(_2082 ? _2082->raw() : nullptr,_2082 ? _2082->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _2083 = nullptr;
  _checked_ptr_1<long long> _ptr__2083(_2083 ? _2083->raw() : nullptr,_2083 ? _2083->size(0) : 0);
  if ((NULL == sparsity.get()))
  {
    {
      _2082 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((_2074)->size(0)))));
      _ptr__2082.update(_2082 ? _2082->raw() : nullptr, _2082 ? _2082->size(0) : 0);
      {
        int _9563 = (int)0;
        int _9564 = (int)((_2074)->size(0));
        for (int _2084 = _9563; _2084 < _9564; ++_2084)
        {
          {
            long long _2085 = (long long)0;
            int _9565 = (int)0;
            int _9566 = _2078;
            for (int _2086 = _9565; _2086 < _9566; ++_2086)
            {
              {
                _2085 += safe_mul( _ptr__2079[_2086],((*_2074)(_2084,_2086)) );
              }
            }
            _ptr__2082[_2084] = ((*nativeidxs)(_2085));
          }
        }
      }
    }
  }
  else
  {
    {
      int _2087 = (int)0;
      int _9567 = (int)0;
      int _9568 = (int)((_2074)->size(0));
      for (int _2088 = _9567; _2088 < _9568; ++_2088)
      {
        {
          long long _2089 = (long long)0;
          int _9569 = (int)0;
          int _9570 = _2078;
          for (int _2090 = _9569; _2090 < _9570; ++_2090)
          {
            {
              _2089 += safe_mul( _ptr__2079[_2090],((*_2074)(_2088,_2090)) );
            }
          }
          if ((::mosek::fusion::p_CommonTools::binarySearch(sparsity,_2089) >= (int)0))
          {
            {
              ++ _2087;
            }
          }
          {}
        }
      }
      _2082 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2087)));
      _ptr__2082.update(_2082 ? _2082->raw() : nullptr, _2082 ? _2082->size(0) : 0);
      _2083 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2087)));
      _ptr__2083.update(_2083 ? _2083->raw() : nullptr, _2083 ? _2083->size(0) : 0);
      {
        int _2091 = (int)0;
        int _9571 = (int)0;
        int _9572 = (int)((_2074)->size(0));
        for (int _2092 = _9571; _2092 < _9572; ++_2092)
        {
          {
            long long _2093 = (long long)0;
            int _9573 = (int)0;
            int _9574 = _2078;
            for (int _2094 = _9573; _2094 < _9574; ++_2094)
            {
              {
                _2093 += safe_mul( _ptr__2079[_2094],((*_2074)(_2092,_2094)) );
              }
            }
            int _2095 = ::mosek::fusion::p_CommonTools::binarySearch(sparsity,_2093);
            if ((_2095 >= (int)0))
            {
              {
                _ptr__2082[_2091] = ((*nativeidxs)(_2095));
                _ptr__2083[_2091] = _2092;
                ++ _2091;
              }
            }
            {}
          }
        }
      }
      if ((_2087 == (int)((_2074)->size(0))))
      {
        {
          _2083 = nullptr;
          _ptr__2083.update(_2083 ? _2083->raw() : nullptr, _2083 ? _2083->size(0) : 0);
        }
      }
      {}
    }
  }
  return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),_2081,_2083,_2082)).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__pick(std::shared_ptr< monty::ndarray< int,1 > > _2096) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__pick(_2096); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::pick(std::shared_ptr< monty::ndarray< int,1 > > _2096) { return __mosek_2fusion_2BaseVariable__pick(_2096); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__pick(std::shared_ptr< monty::ndarray< int,1 > > _2096) { return __mosek_2fusion_2BaseVariable__pick(_2096); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__pick(std::shared_ptr< monty::ndarray< int,1 > > _2096){
  _checked_ptr_1<int> _ptr__2096(_2096 ? _2096->raw() : nullptr, _2096 ? _2096->size(0) : 0);
  if (((int)((shape)->size(0)) != (int)1))
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Invalid index"));
    }
  }
  {}
  bool _2097 = false;
  int _9575 = (int)0;
  int _9576 = (int)((_2096)->size(0));
  for (int _2098 = _9575; _2098 < _9576; ++_2098)
  {
    {
      if (((_ptr__2096[_2098] < (int)0) || (_ptr__2096[_2098] >= ((*shape)((int)0)))))
      {
        {
          _2097 = true;
        }
      }
      {}
    }
  }
  if (_2097)
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Invalid index"));
    }
  }
  {}
  std::shared_ptr< monty::ndarray< long long,1 > > _2099;
  _checked_ptr_1<long long> _ptr__2099(_2099 ? _2099->raw() : nullptr,_2099 ? _2099->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _2100 = nullptr;
  _checked_ptr_1<long long> _ptr__2100(_2100 ? _2100->raw() : nullptr,_2100 ? _2100->size(0) : 0);
  if ((NULL == sparsity.get()))
  {
    {
      std::vector<long long> _9577;
      for (int _2101 = (int)0, _9578 = (int)((_2096)->size(0)); _2101 < _9578 ; ++_2101)
      {
        _9577.push_back(((*nativeidxs)(_ptr__2096[_2101])));
      }
      auto _9579 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9577.size()),_9577.begin(),_9577.end()));
      _2099 = _9579;
      _ptr__2099.update(_2099 ? _2099->raw() : nullptr, _2099 ? _2099->size(0) : 0);
    }
  }
  else
  {
    {
      int _2102 = (int)0;
      int _9580 = (int)0;
      int _9581 = (int)((_2096)->size(0));
      for (int _2103 = _9580; _2103 < _9581; ++_2103)
      {
        {
          if ((::mosek::fusion::p_CommonTools::binarySearch(sparsity,(long long)(_ptr__2096[_2103])) >= (int)0))
          {
            {
              ++ _2102;
            }
          }
          {}
        }
      }
      _2099 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2102)));
      _ptr__2099.update(_2099 ? _2099->raw() : nullptr, _2099 ? _2099->size(0) : 0);
      _2100 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2102)));
      _ptr__2100.update(_2100 ? _2100->raw() : nullptr, _2100 ? _2100->size(0) : 0);
      int _2104 = (int)0;
      int _9582 = (int)0;
      int _9583 = (int)((_2096)->size(0));
      for (int _2105 = _9582; _2105 < _9583; ++_2105)
      {
        {
          int _2106 = ::mosek::fusion::p_CommonTools::binarySearch(sparsity,(long long)(_ptr__2096[_2105]));
          if ((_2106 >= (int)0))
          {
            {
              _ptr__2100[_2104] = _2105;
              _ptr__2099[_2104] = ((*nativeidxs)(_2106));
              ++ _2104;
            }
          }
          {}
        }
      }
      if ((_2102 == (int)((_2096)->size(0))))
      {
        {
          _2100 = nullptr;
          _ptr__2100.update(_2100 ? _2100->raw() : nullptr, _2100 ? _2100->size(0) : 0);
        }
      }
      {}
    }
  }
  return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)((_2096)->size(0)))}),_2100,_2099)).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__antidiag(int _2107) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__antidiag(_2107); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::antidiag(int _2107) { return __mosek_2fusion_2BaseVariable__antidiag(_2107); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__antidiag(int _2107) { return __mosek_2fusion_2BaseVariable__antidiag(_2107); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__antidiag(int _2107){
  if (((int)((shape)->size(0)) != (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("antidiag() only works on two-dimensional objects"));
    }
  }
  else if(((_2107 >= ((*shape)((int)1))) || ((-_2107) >= ((*shape)((int)2)))))
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Diagonal index out of bounds"));
    }
  }
  {}
  if ((_2107 >= (int)0))
  {
    {
      int _9584;
      bool _9585 = (((*shape)((int)0)) < (((*shape)((int)1)) - _2107));
      if (_9585)
      {
        _9584 = ((*shape)((int)0));
      }
      else
      {
        _9584 = (((*shape)((int)1)) - _2107);
      }
      return __mosek_2fusion_2BaseVariable__general_diag(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)0),(int)(((((*shape)((int)1)) - (int)1) - _2107))}),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)1),(int)((-(int)1))}),_9584);
    }
  }
  else
  {
    {
      int _9586;
      bool _9587 = (((*shape)((int)1)) < safe_add( ((*shape)((int)0)),_2107 ));
      if (_9587)
      {
        _9586 = ((*shape)((int)1));
      }
      else
      {
        _9586 = safe_add( ((*shape)((int)0)),_2107 );
      }
      return __mosek_2fusion_2BaseVariable__general_diag(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((-_2107)),(int)((((*shape)((int)1)) - (int)1))}),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)1),(int)((-(int)1))}),_9586);
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__antidiag() { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__antidiag(); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::antidiag() { return __mosek_2fusion_2BaseVariable__antidiag(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__antidiag() { return __mosek_2fusion_2BaseVariable__antidiag(); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__antidiag(){
  if (((int)((shape)->size(0)) != (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("antidiag() only works on two-dimensional objects"));
    }
  }
  {}
  int _9588;
  bool _9589 = (((*shape)((int)0)) < ((*shape)((int)1)));
  if (_9589)
  {
    _9588 = ((*shape)((int)0));
  }
  else
  {
    _9588 = ((*shape)((int)1));
  }
  return __mosek_2fusion_2BaseVariable__general_diag(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)0),(int)((((*shape)((int)1)) - (int)1))}),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)1),(int)((-(int)1))}),_9588);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__diag(int _2108) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__diag(_2108); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::diag(int _2108) { return __mosek_2fusion_2BaseVariable__diag(_2108); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__diag(int _2108) { return __mosek_2fusion_2BaseVariable__diag(_2108); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__diag(int _2108){
  if (((int)((shape)->size(0)) != (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("diag() only works on two-dimensional objects"));
    }
  }
  else if(((_2108 >= ((*shape)((int)1))) || ((-_2108) >= ((*shape)((int)2)))))
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Diagonal index out of bounds"));
    }
  }
  {}
  if ((_2108 >= (int)0))
  {
    {
      int _9590;
      bool _9591 = (((*shape)((int)0)) < (((*shape)((int)1)) - _2108));
      if (_9591)
      {
        _9590 = ((*shape)((int)0));
      }
      else
      {
        _9590 = (((*shape)((int)1)) - _2108);
      }
      return __mosek_2fusion_2BaseVariable__general_diag(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)0),(int)(_2108)}),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)1),(int)((int)1)}),_9590);
    }
  }
  else
  {
    {
      int _9592;
      bool _9593 = (((*shape)((int)1)) < safe_add( ((*shape)((int)0)),_2108 ));
      if (_9593)
      {
        _9592 = ((*shape)((int)1));
      }
      else
      {
        _9592 = safe_add( ((*shape)((int)0)),_2108 );
      }
      return __mosek_2fusion_2BaseVariable__general_diag(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((-_2108)),(int)((int)0)}),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)1),(int)((int)1)}),_9592);
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__diag() { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__diag(); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::diag() { return __mosek_2fusion_2BaseVariable__diag(); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__diag() { return __mosek_2fusion_2BaseVariable__diag(); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__diag(){
  if (((int)((shape)->size(0)) != (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("diag() only works on two-dimensional objects"));
    }
  }
  {}
  int _9594;
  bool _9595 = (((*shape)((int)0)) < ((*shape)((int)1)));
  if (_9595)
  {
    _9594 = ((*shape)((int)0));
  }
  else
  {
    _9594 = ((*shape)((int)1));
  }
  return __mosek_2fusion_2BaseVariable__general_diag(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)0),(int)((int)0)}),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)1),(int)((int)1)}),_9594);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__general_diag(std::shared_ptr< monty::ndarray< int,1 > > _2109,std::shared_ptr< monty::ndarray< int,1 > > _2110,int _2111){
  _checked_ptr_1<int> _ptr__2109(_2109 ? _2109->raw() : nullptr, _2109 ? _2109->size(0) : 0);
  _checked_ptr_1<int> _ptr__2110(_2110 ? _2110->raw() : nullptr, _2110 ? _2110->size(0) : 0);
  int _2112 = (int)((shape)->size(0));
  if (((_2112 != (int)((_2109)->size(0))) || (_2112 != (int)((_2110)->size(0)))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid start or step definition"));
    }
  }
  {}
  int _9596 = (int)0;
  int _9597 = _2112;
  for (int _2113 = _9596; _2113 < _9597; ++_2113)
  {
    {
      if (((_ptr__2109[_2113] < (int)0) || (_ptr__2109[_2113] >= ((*shape)(_2113)))))
      {
        {
          throw ::mosek::fusion::LengthError(std::string ("Start element is out of bounds"));
        }
      }
      {}
    }
  }
  std::shared_ptr< monty::ndarray< long long,1 > > _2114 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2112)));
  _checked_ptr_1<long long> _ptr__2114(_2114 ? _2114->raw() : nullptr,_2114 ? _2114->size(0) : 0);
  _ptr__2114[(_2112 - (int)1)] = (int)1;
  int _9598 = (int)1;
  int _9599 = _2112;
  for (int _2115 = _9598; _2115 < _9599; ++_2115)
  {
    {
      _ptr__2114[((_2112 - _2115) - (int)1)] = safe_mul( _ptr__2114[(_2112 - _2115)],((*shape)((_2112 - _2115))) );
    }
  }
  long long _2116 = (long long)0;
  int _9600 = (int)0;
  int _9601 = (int)((_2110)->size(0));
  for (int _2117 = _9600; _2117 < _9601; ++_2117)
  {
    {
      _2116 += safe_mul( _ptr__2109[_2117],_ptr__2114[_2117] );
    }
  }
  long long _2118 = (long long)0;
  int _9602 = (int)0;
  int _9603 = (int)((_2110)->size(0));
  for (int _2119 = _9602; _2119 < _9603; ++_2119)
  {
    {
      _2118 += safe_mul( _ptr__2110[_2119],_ptr__2114[_2119] );
    }
  }
  if ((NULL == sparsity.get()))
  {
    {
      std::shared_ptr< monty::ndarray< long long,1 > > _2120 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2111)));
      _checked_ptr_1<long long> _ptr__2120(_2120 ? _2120->raw() : nullptr,_2120 ? _2120->size(0) : 0);
      int _9604 = (int)0;
      int _9605 = _2111;
      for (int _2121 = _9604; _2121 < _9605; ++_2121)
      {
        {
          _ptr__2120[_2121] = ((*nativeidxs)(safe_add( _2116,safe_mul( _2118,_2121 ) )));
        }
      }
      return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2111)}),nullptr,_2120)).as<::mosek::fusion::Variable>();
    }
  }
  else
  {
    {
      int _2122 = (int)0;
      int _9606 = (int)0;
      int _9607 = _2111;
      for (int _2123 = _9606; _2123 < _9607; ++_2123)
      {
        {
          long long _2124 = safe_add( _2116,safe_mul( _2118,_2123 ) );
          int _2125 = ::mosek::fusion::p_CommonTools::binarySearch(sparsity,_2124);
          if ((_2125 >= (int)0))
          {
            {
              ++ _2122;
            }
          }
          {}
        }
      }
      std::shared_ptr< monty::ndarray< long long,1 > > _2126 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2122)));
      _checked_ptr_1<long long> _ptr__2126(_2126 ? _2126->raw() : nullptr,_2126 ? _2126->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _2127 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2122)));
      _checked_ptr_1<long long> _ptr__2127(_2127 ? _2127->raw() : nullptr,_2127 ? _2127->size(0) : 0);
      int _2128 = (int)0;
      int _9608 = (int)0;
      int _9609 = _2111;
      for (int _2129 = _9608; _2129 < _9609; ++_2129)
      {
        {
          _ptr__2126[_2129] = ((*nativeidxs)(safe_add( _2116,safe_mul( _2118,_2129 ) )));
          long long _2130 = safe_add( _2116,safe_mul( _2118,_2129 ) );
          int _2131 = ::mosek::fusion::p_CommonTools::binarySearch(sparsity,_2130);
          if ((_2131 >= (int)0))
          {
            {
              _ptr__2127[_2128] = _2129;
              _ptr__2126[_2128] = ((*nativeidxs)(_2131));
              ++ _2128;
            }
          }
          {}
        }
      }
      return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2111)}),_2127,_2126)).as<::mosek::fusion::Variable>();
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__slice(std::shared_ptr< monty::ndarray< int,1 > > _2132,std::shared_ptr< monty::ndarray< int,1 > > _2133) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__slice(_2132,_2133); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::slice(std::shared_ptr< monty::ndarray< int,1 > > _2132,std::shared_ptr< monty::ndarray< int,1 > > _2133) { return __mosek_2fusion_2BaseVariable__slice(_2132,_2133); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__slice(std::shared_ptr< monty::ndarray< int,1 > > _2132,std::shared_ptr< monty::ndarray< int,1 > > _2133) { return __mosek_2fusion_2BaseVariable__slice(_2132,_2133); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__slice(std::shared_ptr< monty::ndarray< int,1 > > _2132,std::shared_ptr< monty::ndarray< int,1 > > _2133){
  _checked_ptr_1<int> _ptr__2132(_2132 ? _2132->raw() : nullptr, _2132 ? _2132->size(0) : 0);
  _checked_ptr_1<int> _ptr__2133(_2133 ? _2133->raw() : nullptr, _2133 ? _2133->size(0) : 0);
  if (((int)((_2132)->size(0)) != (int)((_2133)->size(0))))
  {
    {
      throw ::mosek::fusion::SliceError(std::string ("Invalid slice"));
    }
  }
  else if(((int)((_2132)->size(0)) != (int)((shape)->size(0))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Variable shape and slice do not match"));
    }
  }
  else
  {
    {
      int _9610 = (int)0;
      int _9611 = (int)((shape)->size(0));
      for (int _2134 = _9610; _2134 < _9611; ++_2134)
      {
        {
          if (((_ptr__2132[_2134] < (int)0) || (_ptr__2133[_2134] > ((*shape)(_2134)))))
          {
            {
              throw ::mosek::fusion::IndexError(std::string ("Slice is out of bounds"));
            }
          }
          else if((_ptr__2132[_2134] > _ptr__2133[_2134]))
          {
            {
              throw ::mosek::fusion::SliceError(std::string ("Invalid slice"));
            }
          }
          {}
        }
      }
      int _2135 = (int)((shape)->size(0));
      std::vector<int> _9612;
      for (int _2137 = (int)0, _9613 = _2135; _2137 < _9613 ; ++_2137)
      {
        _9612.push_back((_ptr__2133[_2137] - _ptr__2132[_2137]));
      }
      auto _9614 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9612.size()),_9612.begin(),_9612.end()));
      std::shared_ptr< monty::ndarray< int,1 > > _2136 = _9614;
      _checked_ptr_1<int> _ptr__2136(_2136 ? _2136->raw() : nullptr,_2136 ? _2136->size(0) : 0);
      int _2138 = (int)1;
      int _9615 = (int)0;
      int _9616 = _2135;
      for (int _2139 = _9615; _2139 < _9616; ++_2139)
      {
        {
          _2138 *= (_ptr__2133[_2139] - _ptr__2132[_2139]);
        }
      }
      if ((_2138 == (int)0))
      {
        {
          return (::mosek::fusion::p_NilVariable::_new_NilVariable()).as<::mosek::fusion::Variable>();
        }
      }
      else if((NULL != sparsity.get()))
      {
        {
          int _2140 = (int)0;
          std::shared_ptr< monty::ndarray< int,1 > > _2141 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2135)));
          _checked_ptr_1<int> _ptr__2141(_2141 ? _2141->raw() : nullptr,_2141 ? _2141->size(0) : 0);
          int _9617 = (int)0;
          int _9618 = (int)((sparsity)->size(0));
          for (int _2142 = _9617; _2142 < _9618; ++_2142)
          {
            {
              long long _2143 = ((*sparsity)(_2142));
              int _9619 = (int)1;
              int _9620 = _2135;
              for (int _2144 = _9619; _2144 < _9620; ++_2144)
              {
                {
                  _ptr__2141[(_2135 - _2144)] = (int)(_2143 % ((*shape)((_2135 - _2144))));
                  _2143 /= ((*shape)((_2135 - _2144)));
                }
              }
              _ptr__2141[(int)0] = (int)_2143;
              int _2145 = (int)0;
              while ( ((_ptr__2141[_2145] >= _ptr__2132[_2145]) && (_ptr__2141[_2145] < _ptr__2133[_2145])) )
              {
                {
                  ++ _2145;
                }
              }
              if ((_2145 == _2135))
              {
                {
                  ++ _2140;
                }
              }
              {}
            }
          }
          int _2146 = (int)0;
          std::shared_ptr< monty::ndarray< long long,1 > > _2147 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2140)));
          _checked_ptr_1<long long> _ptr__2147(_2147 ? _2147->raw() : nullptr,_2147 ? _2147->size(0) : 0);
          std::shared_ptr< monty::ndarray< long long,1 > > _2148 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2140)));
          _checked_ptr_1<long long> _ptr__2148(_2148 ? _2148->raw() : nullptr,_2148 ? _2148->size(0) : 0);
          int _9621 = (int)0;
          int _9622 = (int)((sparsity)->size(0));
          for (int _2149 = _9621; _2149 < _9622; ++_2149)
          {
            {
              long long _2150 = ((*sparsity)(_2149));
              int _9623 = (int)1;
              int _9624 = _2135;
              for (int _2151 = _9623; _2151 < _9624; ++_2151)
              {
                {
                  _ptr__2141[(_2135 - _2151)] = (int)(_2150 % ((*shape)((_2135 - _2151))));
                  _2150 /= ((*shape)((_2135 - _2151)));
                }
              }
              _ptr__2141[(int)0] = (int)_2150;
              int _2152 = (int)0;
              while ( ((_ptr__2141[_2152] >= _ptr__2132[_2152]) && (_ptr__2141[_2152] < _ptr__2133[_2152])) )
              {
                {
                  ++ _2152;
                }
              }
              if ((_2152 == _2135))
              {
                {
                  _ptr__2147[_2146] = ((*nativeidxs)(_2149));
                  int _2153 = (int)0;
                  int _9625 = (int)0;
                  int _9626 = _2135;
                  for (int _2154 = _9625; _2154 < _9626; ++_2154)
                  {
                    {
                      _2153 = safe_add( safe_mul( _2153,_ptr__2136[_2154] ),(_ptr__2141[_2154] - _ptr__2132[_2154]) );
                    }
                  }
                  _ptr__2148[_2146] = _2153;
                  ++ _2146;
                }
              }
              {}
            }
          }
          return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),_2136,_2148,_2147)).as<::mosek::fusion::Variable>();
        }
      }
      else
      {
        {
          std::shared_ptr< monty::ndarray< long long,1 > > _2155 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2138)));
          _checked_ptr_1<long long> _ptr__2155(_2155 ? _2155->raw() : nullptr,_2155 ? _2155->size(0) : 0);
          {
            std::shared_ptr< monty::ndarray< int,1 > > _2156 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2135)));
            _checked_ptr_1<int> _ptr__2156(_2156 ? _2156->raw() : nullptr,_2156 ? _2156->size(0) : 0);
            _ptr__2156[(_2135 - (int)1)] = (int)1;
            int _9627 = (int)1;
            int _9628 = _2135;
            for (int _2157 = _9627; _2157 < _9628; ++_2157)
            {
              {
                _ptr__2156[((_2135 - _2157) - (int)1)] = safe_mul( _ptr__2156[(_2135 - _2157)],((*shape)((_2135 - _2157))) );
              }
            }
            int _2158 = (int)0;
            int _9629 = (int)0;
            int _9630 = _2135;
            for (int _2159 = _9629; _2159 < _9630; ++_2159)
            {
              {
                _2158 += safe_mul( _ptr__2132[_2159],_ptr__2156[_2159] );
              }
            }
            std::vector<int> _9631;
            for (int _2161 = (int)0, _9632 = _2135; _2161 < _9632 ; ++_2161)
            {
              _9631.push_back(_2158);
            }
            auto _9633 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9631.size()),_9631.begin(),_9631.end()));
            std::shared_ptr< monty::ndarray< int,1 > > _2160 = _9633;
            _checked_ptr_1<int> _ptr__2160(_2160 ? _2160->raw() : nullptr,_2160 ? _2160->size(0) : 0);
            std::vector<int> _9634;
            for (int _2163 = (int)0, _9635 = _2135; _2163 < _9635 ; ++_2163)
            {
              _9634.push_back(_ptr__2132[_2163]);
            }
            auto _9636 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9634.size()),_9634.begin(),_9634.end()));
            std::shared_ptr< monty::ndarray< int,1 > > _2162 = _9636;
            _checked_ptr_1<int> _ptr__2162(_2162 ? _2162->raw() : nullptr,_2162 ? _2162->size(0) : 0);
            int _9637 = (int)0;
            int _9638 = _2138;
            for (int _2164 = _9637; _2164 < _9638; ++_2164)
            {
              {
                _ptr__2155[_2164] = ((*nativeidxs)(_ptr__2160[(_2135 - (int)1)]));
                _ptr__2162[(_2135 - (int)1)] += (int)1;
                _ptr__2160[(_2135 - (int)1)] += _ptr__2156[(_2135 - (int)1)];
                if ((_ptr__2162[(_2135 - (int)1)] >= _ptr__2133[(_2135 - (int)1)]))
                {
                  {
                    int _2165 = (_2135 - (int)1);
                    while ( ((_2165 > (int)0) && (_ptr__2162[_2165] >= _ptr__2133[_2165])) )
                    {
                      {
                        _ptr__2162[_2165] = _ptr__2132[_2165];
                        _ptr__2162[(_2165 - (int)1)] += (int)1;
                        _ptr__2160[(_2165 - (int)1)] += _ptr__2156[(_2165 - (int)1)];
                        -- _2165;
                      }
                    }
                    int _9639 = safe_add( _2165,(int)1 );
                    int _9640 = _2135;
                    for (int _2166 = _9639; _2166 < _9640; ++_2166)
                    {
                      {
                        _ptr__2160[_2166] = _ptr__2160[_2165];
                      }
                    }
                  }
                }
                {}
              }
            }
          }
          return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),_2136,nullptr,_2155)).as<::mosek::fusion::Variable>();
        }
      }
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__slice(int _2167,int _2168) { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__slice(_2167,_2168); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::slice(int _2167,int _2168) { return __mosek_2fusion_2BaseVariable__slice(_2167,_2168); }
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__slice(int _2167,int _2168) { return __mosek_2fusion_2BaseVariable__slice(_2167,_2168); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__slice(int _2167,int _2168){
  if (((int)((shape)->size(0)) != (int)1))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Variable shape and slice do not match"));
    }
  }
  {}
  if (((_2167 == (int)0) && (_2168 == ((*shape)((int)0)))))
  {
    {
      return (::mosek::fusion::BaseVariable::t(_pubthis)).as<::mosek::fusion::Variable>();
    }
  }
  else if(((_2167 < (int)0) || (_2168 > ((*shape)((int)0)))))
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Slice is out of bounds"));
    }
  }
  else if((_2167 > _2168))
  {
    {
      throw ::mosek::fusion::SliceError(std::string ("Invalid slice"));
    }
  }
  else if((_2167 == _2168))
  {
    {
      return (::mosek::fusion::p_NilVariable::_new_NilVariable()).as<::mosek::fusion::Variable>();
    }
  }
  else if((NULL != sparsity.get()))
  {
    {
      int _2169 = (_2168 - _2167);
      int _2170 = (int)0;
      int _2171 = ::mosek::fusion::p_CommonTools::binarySearchL(sparsity,(long long)(_2167));
      int _2172 = ::mosek::fusion::p_CommonTools::binarySearchL(sparsity,(long long)(_2168));
      std::vector<long long> _9641;
      for (int _2173 = _2171, _9642 = _2172; _2173 < _9642 ; ++_2173)
      {
        _9641.push_back((((*sparsity)(_2173)) - _2167));
      }
      auto _9643 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9641.size()),_9641.begin(),_9641.end()));
      std::vector<long long> _9644;
      for (int _2174 = _2171, _9645 = _2172; _2174 < _9645 ; ++_2174)
      {
        _9644.push_back(((*nativeidxs)(_2174)));
      }
      auto _9646 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9644.size()),_9644.begin(),_9644.end()));
      return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2169)}),_9643,_9646)).as<::mosek::fusion::Variable>();
    }
  }
  else
  {
    {
      int _2175 = (_2168 - _2167);
      std::shared_ptr< monty::ndarray< long long,1 > > _2176 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2175)));
      _checked_ptr_1<long long> _ptr__2176(_2176 ? _2176->raw() : nullptr,_2176 ? _2176->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(nativeidxs,_2167,_2176,(int)0,_2175);
      return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_pubthis->__mosek_2fusion_2BaseVariable__getModel(),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2175)}),nullptr,_2176)).as<::mosek::fusion::Variable>();
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseVariable :: __mosek_2fusion_2BaseVariable__asExpr() { return mosek::fusion::p_BaseVariable::_get_impl(this)->__mosek_2fusion_2BaseVariable__asExpr(); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseVariable::asExpr() { return __mosek_2fusion_2BaseVariable__asExpr(); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseVariable::__mosek_2fusion_2Variable__asExpr() { return __mosek_2fusion_2BaseVariable__asExpr(); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_BaseVariable::__mosek_2fusion_2BaseVariable__asExpr(){
  return (::mosek::fusion::p_ExprFromVar::_new_ExprFromVar((::mosek::fusion::BaseVariable::t(_pubthis)).as<::mosek::fusion::Variable>())).as<::mosek::fusion::Expression>();
}
int mosek::fusion::BaseVariable :: inst(int _2177,std::shared_ptr< monty::ndarray< long long,1 > > _2178,int _2179,std::shared_ptr< monty::ndarray< long long,1 > > _2180) { return mosek::fusion::p_BaseVariable::_get_impl(this)->inst(_2177,_2178,_2179,_2180); }int mosek::fusion::p_BaseVariable::inst(int _2177,std::shared_ptr< monty::ndarray< long long,1 > > _2178,int _2179,std::shared_ptr< monty::ndarray< long long,1 > > _2180){
  _checked_ptr_1<long long> _ptr__2178(_2178 ? _2178->raw() : nullptr, _2178 ? _2178->size(0) : 0);
  _checked_ptr_1<long long> _ptr__2180(_2180 ? _2180->raw() : nullptr, _2180 ? _2180->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _2181 = mosek::fusion::p_BaseVariable::_get_impl(::mosek::fusion::BaseVariable::t(_pubthis))->nativeidxs;
  _checked_ptr_1<long long> _ptr__2181(_2181 ? _2181->raw() : nullptr,_2181 ? _2181->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _2182 = mosek::fusion::p_BaseVariable::_get_impl(::mosek::fusion::BaseVariable::t(_pubthis))->sparsity;
  _checked_ptr_1<long long> _ptr__2182(_2182 ? _2182->raw() : nullptr,_2182 ? _2182->size(0) : 0);
  if ((NULL == _2182.get()))
  {
    {
      int _9647 = (int)0;
      int _9648 = (int)((_2181)->size(0));
      for (int _2183 = _9647; _2183 < _9648; ++_2183)
      {
        {
          _ptr__2178[safe_add( _2183,_2177 )] = _2183;
          _ptr__2180[safe_add( _2183,_2179 )] = _ptr__2181[_2183];
        }
      }
    }
  }
  else
  {
    {
      int _9649 = (int)0;
      int _9650 = (int)((mosek::fusion::p_BaseVariable::_get_impl(::mosek::fusion::BaseVariable::t(_pubthis))->sparsity)->size(0));
      for (int _2184 = _9649; _2184 < _9650; ++_2184)
      {
        {
          _ptr__2178[safe_add( _2177,_2184 )] = _ptr__2182[_2184];
          _ptr__2180[safe_add( _2184,_2179 )] = _ptr__2181[_2184];
        }
      }
    }
  }
  return (int)((mosek::fusion::p_BaseVariable::_get_impl(::mosek::fusion::BaseVariable::t(_pubthis))->nativeidxs)->size(0));
}
int mosek::fusion::BaseVariable :: numInst() { return mosek::fusion::p_BaseVariable::_get_impl(this)->numInst(); }int mosek::fusion::p_BaseVariable::numInst(){
  return (int)((nativeidxs)->size(0));
}
void mosek::fusion::BaseVariable :: inst(int _2185,std::shared_ptr< monty::ndarray< long long,1 > > _2186) { mosek::fusion::p_BaseVariable::_get_impl(this)->inst(_2185,_2186); }void mosek::fusion::p_BaseVariable::inst(int _2185,std::shared_ptr< monty::ndarray< long long,1 > > _2186){
  _checked_ptr_1<long long> _ptr__2186(_2186 ? _2186->raw() : nullptr, _2186 ? _2186->size(0) : 0);
  if ((NULL == sparsity.get()))
  {
    {
      int _9651 = (int)0;
      int _9652 = (int)((nativeidxs)->size(0));
      for (int _2187 = _9651; _2187 < _9652; ++_2187)
      {
        {
          _ptr__2186[safe_add( _2185,_2187 )] = ((*nativeidxs)(_2187));
        }
      }
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _2188 = _pubthis->getShape();
      _checked_ptr_1<int> _ptr__2188(_2188 ? _2188->raw() : nullptr,_2188 ? _2188->size(0) : 0);
      int _2189 = (int)1;
      int _9653 = (int)0;
      int _9654 = (int)((_2188)->size(0));
      for (int _2190 = _9653; _2190 < _9654; ++_2190)
      {
        {
          _2189 *= _ptr__2188[_2190];
        }
      }
      int _9655 = (int)0;
      int _9656 = _2189;
      for (int _2191 = _9655; _2191 < _9656; ++_2191)
      {
        {
          _ptr__2186[safe_add( _2185,_2191 )] = (int)0;
        }
      }
      int _9657 = (int)0;
      int _9658 = (int)((sparsity)->size(0));
      for (int _2192 = _9657; _2192 < _9658; ++_2192)
      {
        {
          _ptr__2186[safe_add( _2185,((*sparsity)(_2192)) )] = ((*nativeidxs)(_2192));
        }
      }
    }
  }
}
void mosek::fusion::BaseVariable :: set_values(std::shared_ptr< monty::ndarray< double,1 > > _2193,bool _2194) { mosek::fusion::p_BaseVariable::_get_impl(this)->set_values(_2193,_2194); }void mosek::fusion::p_BaseVariable::set_values(std::shared_ptr< monty::ndarray< double,1 > > _2193,bool _2194){
  _checked_ptr_1<double> _ptr__2193(_2193 ? _2193->raw() : nullptr, _2193 ? _2193->size(0) : 0);
  if ((NULL == sparsity.get()))
  {
    {
      _pubthis->__mosek_2fusion_2BaseVariable__getModel()->setVariableValues(_2194,nativeidxs,_2193);
    }
  }
  else
  {
    {
      int _2195 = (int)1;
      int _9659 = (int)0;
      int _9660 = (int)((shape)->size(0));
      for (int _2196 = _9659; _2196 < _9660; ++_2196)
      {
        {
          _2195 *= ((*shape)(_2196));
        }
      }
      std::shared_ptr< monty::ndarray< long long,1 > > _2197 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2195)));
      _checked_ptr_1<long long> _ptr__2197(_2197 ? _2197->raw() : nullptr,_2197 ? _2197->size(0) : 0);
      int _9661 = (int)0;
      int _9662 = (int)((nativeidxs)->size(0));
      for (int _2198 = _9661; _2198 < _9662; ++_2198)
      {
        {
          _ptr__2197[((*sparsity)(_2198))] = ((*nativeidxs)(_2198));
        }
      }
      _pubthis->__mosek_2fusion_2BaseVariable__getModel()->setVariableValues(_2194,_2197,_2193);
    }
  }
}
void mosek::fusion::p_BaseVariable::dual_lu(int _2199,std::shared_ptr< monty::ndarray< double,1 > > _2200,bool _2201){
  _checked_ptr_1<double> _ptr__2200(_2200 ? _2200->raw() : nullptr, _2200 ? _2200->size(0) : 0);
  if ((NULL == sparsity.get()))
  {
    {
      model->getVariableDuals(_2201,nativeidxs,_2200,_2199);
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< long long,1 > > _2202 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_pubthis->getSize())));
      _checked_ptr_1<long long> _ptr__2202(_2202 ? _2202->raw() : nullptr,_2202 ? _2202->size(0) : 0);
      int _9663 = (int)0;
      int _9664 = (int)((sparsity)->size(0));
      for (int _2203 = _9663; _2203 < _9664; ++_2203)
      {
        {
          _ptr__2202[((*sparsity)(_2203))] = ((*nativeidxs)(_2203));
        }
      }
      model->getVariableDuals(_2201,_2202,_2200,_2199);
    }
  }
}
void mosek::fusion::BaseVariable :: values(int _2204,std::shared_ptr< monty::ndarray< double,1 > > _2205,bool _2206) { mosek::fusion::p_BaseVariable::_get_impl(this)->values(_2204,_2205,_2206); }void mosek::fusion::p_BaseVariable::values(int _2204,std::shared_ptr< monty::ndarray< double,1 > > _2205,bool _2206){
  _checked_ptr_1<double> _ptr__2205(_2205 ? _2205->raw() : nullptr, _2205 ? _2205->size(0) : 0);
  if ((NULL == sparsity.get()))
  {
    {
      model->getVariableValues(_2206,nativeidxs,_2205,_2204);
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< long long,1 > > _2207 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_pubthis->getSize())));
      _checked_ptr_1<long long> _ptr__2207(_2207 ? _2207->raw() : nullptr,_2207 ? _2207->size(0) : 0);
      int _9665 = (int)0;
      int _9666 = (int)((sparsity)->size(0));
      for (int _2208 = _9665; _2208 < _9666; ++_2208)
      {
        {
          _ptr__2207[((*sparsity)(_2208))] = ((*nativeidxs)(_2208));
        }
      }
      model->getVariableValues(_2206,_2207,_2205,_2204);
    }
  }
}
void mosek::fusion::BaseVariable :: make_continuous() { mosek::fusion::p_BaseVariable::_get_impl(this)->make_continuous(); }void mosek::fusion::p_BaseVariable::make_continuous(){
  mosek::fusion::p_Model::_get_impl(_pubthis->__mosek_2fusion_2BaseVariable__getModel().get())->make_continuous(nativeidxs);
}
void mosek::fusion::BaseVariable :: make_integer() { mosek::fusion::p_BaseVariable::_get_impl(this)->make_integer(); }void mosek::fusion::p_BaseVariable::make_integer(){
  mosek::fusion::p_Model::_get_impl(_pubthis->__mosek_2fusion_2BaseVariable__getModel().get())->make_integer(nativeidxs);
}
void mosek::fusion::p_BaseVariable::destroy(){sparsity.reset();nativeidxs.reset();model.reset();shape.reset();}void mosek::fusion::BaseVariable::destroy() { mosek::fusion::p_BaseVariable::_get_impl(this)->destroy(); }monty::rc_ptr< mosek::fusion::Model > mosek::fusion::Variable::getModel() { return __mosek_2fusion_2Variable__getModel(); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::fromTril(int _2216) { return __mosek_2fusion_2Variable__fromTril(_2216); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::tril() { return __mosek_2fusion_2Variable__tril(); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::reshape(int _2217,int _2218,int _2219) { return __mosek_2fusion_2Variable__reshape(_2217,_2218,_2219); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::reshape(int _2220,int _2221) { return __mosek_2fusion_2Variable__reshape(_2220,_2221); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::reshape(int _2222) { return __mosek_2fusion_2Variable__reshape(_2222); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::reshape(std::shared_ptr< monty::ndarray< int,1 > > _2223) { return __mosek_2fusion_2Variable__reshape(_2223); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::transpose() { return __mosek_2fusion_2Variable__transpose(); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::pick(std::shared_ptr< monty::ndarray< int,1 > > _2229,std::shared_ptr< monty::ndarray< int,1 > > _2230,std::shared_ptr< monty::ndarray< int,1 > > _2231) { return __mosek_2fusion_2Variable__pick(_2229,_2230,_2231); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::pick(std::shared_ptr< monty::ndarray< int,1 > > _2232,std::shared_ptr< monty::ndarray< int,1 > > _2233) { return __mosek_2fusion_2Variable__pick(_2232,_2233); }
monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Variable::__mosek_2fusion_2Expression__pick(std::shared_ptr< monty::ndarray< int,2 > > _2234) { return __mosek_2fusion_2Variable__pick(_2234); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::pick(std::shared_ptr< monty::ndarray< int,2 > > _2234) { return __mosek_2fusion_2Variable__pick(_2234); }
monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Variable::__mosek_2fusion_2Expression__pick(std::shared_ptr< monty::ndarray< int,1 > > _2235) { return __mosek_2fusion_2Variable__pick(_2235); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::pick(std::shared_ptr< monty::ndarray< int,1 > > _2235) { return __mosek_2fusion_2Variable__pick(_2235); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::antidiag() { return __mosek_2fusion_2Variable__antidiag(); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::antidiag(int _2236) { return __mosek_2fusion_2Variable__antidiag(_2236); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::diag() { return __mosek_2fusion_2Variable__diag(); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::diag(int _2237) { return __mosek_2fusion_2Variable__diag(_2237); }
monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Variable::__mosek_2fusion_2Expression__index(std::shared_ptr< monty::ndarray< int,1 > > _2238) { return __mosek_2fusion_2Variable__index(_2238); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::index(std::shared_ptr< monty::ndarray< int,1 > > _2238) { return __mosek_2fusion_2Variable__index(_2238); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::index(int _2239,int _2240,int _2241) { return __mosek_2fusion_2Variable__index(_2239,_2240,_2241); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::index(int _2242,int _2243) { return __mosek_2fusion_2Variable__index(_2242,_2243); }
monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Variable::__mosek_2fusion_2Expression__index(int _2244) { return __mosek_2fusion_2Variable__index(_2244); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::index(int _2244) { return __mosek_2fusion_2Variable__index(_2244); }
monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Variable::__mosek_2fusion_2Expression__slice(std::shared_ptr< monty::ndarray< int,1 > > _2245,std::shared_ptr< monty::ndarray< int,1 > > _2246) { return __mosek_2fusion_2Variable__slice(_2245,_2246); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::slice(std::shared_ptr< monty::ndarray< int,1 > > _2245,std::shared_ptr< monty::ndarray< int,1 > > _2246) { return __mosek_2fusion_2Variable__slice(_2245,_2246); }
monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Variable::__mosek_2fusion_2Expression__slice(int _2247,int _2248) { return __mosek_2fusion_2Variable__slice(_2247,_2248); }
monty::rc_ptr< mosek::fusion::Variable > mosek::fusion::Variable::slice(int _2247,int _2248) { return __mosek_2fusion_2Variable__slice(_2247,_2248); }
monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Variable::asExpr() { return __mosek_2fusion_2Variable__asExpr(); }
mosek::fusion::Var::Var(mosek::fusion::p_Var *_impl) : _impl(_impl) { /*std::cout << "Var() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::Var::~Var() { delete _impl; _impl = nullptr; }mosek::fusion::p_Var::p_Var  (::mosek::fusion::Var * _pubthis) :     _pubthis(_pubthis){}monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::empty  ( std::shared_ptr< monty::ndarray< int,1 > > _2249) { return mosek::fusion::p_Var::empty(_2249); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::empty(std::shared_ptr< monty::ndarray< int,1 > > _2249){
  _checked_ptr_1<int> _ptr__2249(_2249 ? _2249->raw() : nullptr, _2249 ? _2249->size(0) : 0);
  int _9667 = (int)0;
  int _9668 = (int)((_2249)->size(0));
  for (int _2250 = _9667; _2250 < _9668; ++_2250)
  {
    {
      if ((_ptr__2249[_2250] < (int)0))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Invalid shape"));
        }
      }
      {}
    }
  }
  return (::mosek::fusion::p_NilVariable::_new_NilVariable(_2249)).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::compress  ( monty::rc_ptr< ::mosek::fusion::Variable > _2251) { return mosek::fusion::p_Var::compress(_2251); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::compress(monty::rc_ptr< ::mosek::fusion::Variable > _2251){
  std::shared_ptr< monty::ndarray< int,1 > > _2252 = _2251->getShape();
  _checked_ptr_1<int> _ptr__2252(_2252 ? _2252->raw() : nullptr,_2252 ? _2252->size(0) : 0);
  int _2253 = (int)((_2252)->size(0));
  int _2254 = (int)0;
  int _9669 = (int)0;
  int _9670 = _2253;
  for (int _2255 = _9669; _2255 < _9670; ++_2255)
  {
    {
      if ((_ptr__2252[_2255] != (int)1))
      {
        {
          ++ _2254;
        }
      }
      {}
    }
  }
  std::shared_ptr< monty::ndarray< int,1 > > _2256 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2254)));
  _checked_ptr_1<int> _ptr__2256(_2256 ? _2256->raw() : nullptr,_2256 ? _2256->size(0) : 0);
  {
    int _2257 = (int)0;
    int _9671 = (int)0;
    int _9672 = _2253;
    for (int _2258 = _9671; _2258 < _9672; ++_2258)
    {
      {
        if ((_ptr__2252[_2258] != (int)1))
        {
          {
            _ptr__2256[_2257] = _ptr__2252[_2258];
            ++ _2257;
          }
        }
        {}
      }
    }
  }
  return ::mosek::fusion::p_Var::reshape(_2251,_2256);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::reshape  ( monty::rc_ptr< ::mosek::fusion::Variable > _2259,    int _2260) { return mosek::fusion::p_Var::reshape(_2259,_2260); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::reshape(monty::rc_ptr< ::mosek::fusion::Variable > _2259,int _2260){
  return ::mosek::fusion::p_Var::reshape(_2259,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2260)}));
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::reshape  ( monty::rc_ptr< ::mosek::fusion::Variable > _2261,    int _2262,    int _2263) { return mosek::fusion::p_Var::reshape(_2261,_2262,_2263); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::reshape(monty::rc_ptr< ::mosek::fusion::Variable > _2261,int _2262,int _2263){
  return ::mosek::fusion::p_Var::reshape(_2261,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2262),(int)(_2263)}));
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::flatten  ( monty::rc_ptr< ::mosek::fusion::Variable > _2264) { return mosek::fusion::p_Var::flatten(_2264); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::flatten(monty::rc_ptr< ::mosek::fusion::Variable > _2264){
  return ::mosek::fusion::p_Var::reshape(_2264,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)::mosek::fusion::p_Set::size(_2264->getShape()))}));
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::reshape  ( monty::rc_ptr< ::mosek::fusion::Variable > _2265,    std::shared_ptr< monty::ndarray< int,1 > > _2266) { return mosek::fusion::p_Var::reshape(_2265,_2266); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::reshape(monty::rc_ptr< ::mosek::fusion::Variable > _2265,std::shared_ptr< monty::ndarray< int,1 > > _2266){
  _checked_ptr_1<int> _ptr__2266(_2266 ? _2266->raw() : nullptr, _2266 ? _2266->size(0) : 0);
  return _2265->__mosek_2fusion_2Variable__reshape(_2266);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::index_permute_(monty::rc_ptr< ::mosek::fusion::Variable > _2267,std::shared_ptr< monty::ndarray< int,1 > > _2268){
  _checked_ptr_1<int> _ptr__2268(_2268 ? _2268->raw() : nullptr, _2268 ? _2268->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _2269;
  _checked_ptr_1<long long> _ptr__2269(_2269 ? _2269->raw() : nullptr,_2269 ? _2269->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _2270;
  _checked_ptr_1<long long> _ptr__2270(_2270 ? _2270->raw() : nullptr,_2270 ? _2270->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _2271 = _2267->getShape();
  _checked_ptr_1<int> _ptr__2271(_2271 ? _2271->raw() : nullptr,_2271 ? _2271->size(0) : 0);
  int _2272 = (int)((_2271)->size(0));
  int _2273 = (int)1;
  int _9673 = (int)0;
  int _9674 = _2272;
  for (int _2274 = _9673; _2274 < _9674; ++_2274)
  {
    {
      _2273 *= _ptr__2271[_2274];
    }
  }
  int _2275 = _2267->numInst();
  std::shared_ptr< monty::ndarray< long long,1 > > _2276 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2272)));
  _checked_ptr_1<long long> _ptr__2276(_2276 ? _2276->raw() : nullptr,_2276 ? _2276->size(0) : 0);
  _ptr__2276[(_2272 - (int)1)] = (int)1;
  int _9675 = (int)1;
  int _9676 = _2272;
  for (int _2277 = _9675; _2277 < _9676; ++_2277)
  {
    {
      _ptr__2276[((_2272 - _2277) - (int)1)] = safe_mul( _ptr__2276[(_2272 - _2277)],_ptr__2271[_ptr__2268[(_2272 - _2277)]] );
    }
  }
  if ((_2275 < _2273))
  {
    {
      _2269 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2275)));
      _ptr__2269.update(_2269 ? _2269->raw() : nullptr, _2269 ? _2269->size(0) : 0);
      _2270 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2275)));
      _ptr__2270.update(_2270 ? _2270->raw() : nullptr, _2270 ? _2270->size(0) : 0);
      _2267->inst((int)0,_2269,(int)0,_2270);
    }
  }
  else
  {
    {
      _2269 = nullptr;
      _ptr__2269.update(_2269 ? _2269->raw() : nullptr, _2269 ? _2269->size(0) : 0);
      _2270 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2275)));
      _ptr__2270.update(_2270 ? _2270->raw() : nullptr, _2270 ? _2270->size(0) : 0);
      _2267->inst((int)0,_2270);
    }
  }
  if ((NULL == _2269.get()))
  {
    {
      std::shared_ptr< monty::ndarray< long long,1 > > _2278 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2275)));
      _checked_ptr_1<long long> _ptr__2278(_2278 ? _2278->raw() : nullptr,_2278 ? _2278->size(0) : 0);
      {
        std::shared_ptr< monty::ndarray< int,1 > > _2279 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2272)));
        _checked_ptr_1<int> _ptr__2279(_2279 ? _2279->raw() : nullptr,_2279 ? _2279->size(0) : 0);
        int _9677 = (int)0;
        int _9678 = _2275;
        for (int _2280 = _9677; _2280 < _9678; ++_2280)
        {
          {
            int _2281 = _2280;
            int _9679 = (int)0;
            int _9680 = _2272;
            for (int _2282 = _9679; _2282 < _9680; ++_2282)
            {
              {
                _ptr__2279[((_2272 - _2280) - (int)1)] = (_2281 % _ptr__2271[((_2272 - _2280) - (int)1)]);
                _2281 /= _ptr__2271[((_2272 - _2280) - (int)1)];
              }
            }
            int _2283 = (int)0;
            int _9681 = (int)0;
            int _9682 = _2272;
            for (int _2284 = _9681; _2284 < _9682; ++_2284)
            {
              {
                _2283 += (int)safe_mul( _ptr__2279[_ptr__2268[_2284]],_ptr__2276[_2284] );
              }
            }
            _ptr__2278[_2283] = _ptr__2270[_2280];
          }
        }
      }
      _2270 = _2278;
      _ptr__2270.update(_2270 ? _2270->raw() : nullptr, _2270 ? _2270->size(0) : 0);
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< long long,1 > > _2285 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2275)));
      _checked_ptr_1<long long> _ptr__2285(_2285 ? _2285->raw() : nullptr,_2285 ? _2285->size(0) : 0);
      {
        std::shared_ptr< monty::ndarray< int,1 > > _2286 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2272)));
        _checked_ptr_1<int> _ptr__2286(_2286 ? _2286->raw() : nullptr,_2286 ? _2286->size(0) : 0);
        int _9683 = (int)0;
        int _9684 = _2275;
        for (int _2287 = _9683; _2287 < _9684; ++_2287)
        {
          {
            int _2288 = _2287;
            int _9685 = (int)0;
            int _9686 = _2272;
            for (int _2289 = _9685; _2289 < _9686; ++_2289)
            {
              {
                _ptr__2286[((_2272 - _2287) - (int)1)] = (_2288 % _ptr__2271[((_2272 - _2287) - (int)1)]);
                _2288 /= _ptr__2271[((_2272 - _2287) - (int)1)];
              }
            }
            int _2290 = (int)0;
            int _9687 = (int)0;
            int _9688 = _2272;
            for (int _2291 = _9687; _2291 < _9688; ++_2291)
            {
              {
                _2290 += (int)safe_mul( _ptr__2286[_ptr__2268[_2291]],_ptr__2276[_2291] );
              }
            }
            _ptr__2285[_2287] = _2290;
          }
        }
      }
      std::vector<long long> _9689;
      for (int _2293 = (int)0, _9690 = _2275; _2293 < _9690 ; ++_2293)
      {
        _9689.push_back(_2293);
      }
      auto _9691 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9689.size()),_9689.begin(),_9689.end()));
      std::shared_ptr< monty::ndarray< long long,1 > > _2292 = _9691;
      _checked_ptr_1<long long> _ptr__2292(_2292 ? _2292->raw() : nullptr,_2292 ? _2292->size(0) : 0);
      ::mosek::fusion::p_CommonTools::argQsort(_2292,_2285,std::shared_ptr< monty::ndarray< long long,1 > >(nullptr),(long long)((int)0),(long long)(_2275));
      std::vector<long long> _9692;
      for (int _2294 = (int)0, _9693 = _2275; _2294 < _9693 ; ++_2294)
      {
        _9692.push_back(_ptr__2269[_ptr__2292[_2294]]);
      }
      auto _9694 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9692.size()),_9692.begin(),_9692.end()));
      _2269 = _9694;
      _ptr__2269.update(_2269 ? _2269->raw() : nullptr, _2269 ? _2269->size(0) : 0);
      std::vector<long long> _9695;
      for (int _2295 = (int)0, _9696 = _2275; _2295 < _9696 ; ++_2295)
      {
        _9695.push_back(_ptr__2270[_ptr__2292[_2295]]);
      }
      auto _9697 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9695.size()),_9695.begin(),_9695.end()));
      _2270 = _9697;
      _ptr__2270.update(_2270 ? _2270->raw() : nullptr, _2270 ? _2270->size(0) : 0);
    }
  }
  std::vector<int> _9698;
  for (int _2296 = (int)0, _9699 = _2272; _2296 < _9699 ; ++_2296)
  {
    _9698.push_back(_ptr__2271[_ptr__2268[_2296]]);
  }
  auto _9700 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9698.size()),_9698.begin(),_9698.end()));
  return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_2267->__mosek_2fusion_2Variable__getModel(),_9700,_2269,_2270)).as<::mosek::fusion::Variable>();
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::hrepeat  ( monty::rc_ptr< ::mosek::fusion::Variable > _2297,    int _2298) { return mosek::fusion::p_Var::hrepeat(_2297,_2298); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::hrepeat(monty::rc_ptr< ::mosek::fusion::Variable > _2297,int _2298){
  return ::mosek::fusion::p_Var::drepeat(_2297,(int)1,_2298);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::vrepeat  ( monty::rc_ptr< ::mosek::fusion::Variable > _2299,    int _2300) { return mosek::fusion::p_Var::vrepeat(_2299,_2300); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::vrepeat(monty::rc_ptr< ::mosek::fusion::Variable > _2299,int _2300){
  return ::mosek::fusion::p_Var::drepeat(_2299,(int)0,_2300);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::repeat  ( monty::rc_ptr< ::mosek::fusion::Variable > _2301,    int _2302) { return mosek::fusion::p_Var::repeat(_2301,_2302); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::repeat(monty::rc_ptr< ::mosek::fusion::Variable > _2301,int _2302){
  return ::mosek::fusion::p_Var::drepeat(_2301,(int)0,_2302);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::repeat  ( monty::rc_ptr< ::mosek::fusion::Variable > _2303,    int _2304,    int _2305) { return mosek::fusion::p_Var::repeat(_2303,_2304,_2305); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::repeat(monty::rc_ptr< ::mosek::fusion::Variable > _2303,int _2304,int _2305){
  return ::mosek::fusion::p_Var::drepeat(_2303,_2304,_2305);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::drepeat(monty::rc_ptr< ::mosek::fusion::Variable > _2306,int _2307,int _2308){
  if ((_2308 < (int)0))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Cannot repeat less than 0 times"));
    }
  }
  else if((_2308 == (int)0))
  {
    {
      return (::mosek::fusion::p_NilVariable::_new_NilVariable()).as<::mosek::fusion::Variable>();
    }
  }
  else if((_2308 == (int)1))
  {
    {
      return _2306;
    }
  }
  else
  {
    {
      monty::rc_ptr< ::mosek::fusion::Model > _2309 = _2306->__mosek_2fusion_2Variable__getModel();
      std::shared_ptr< monty::ndarray< int,1 > > _2310 = _2306->getShape();
      _checked_ptr_1<int> _ptr__2310(_2310 ? _2310->raw() : nullptr,_2310 ? _2310->size(0) : 0);
      int _2311 = (int)((_2310)->size(0));
      if (((_2307 < (int)0) || (_2307 > _2311)))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Invalid stacking dimension"));
        }
      }
      {}
      long long _2312 = ::mosek::fusion::p_Set::size(_2310);
      int _2313 = _2306->numInst();
      int _2314 = safe_mul( _2313,_2308 );
      int _2315 = (int)1;
      int _9701 = (int)0;
      int _9702 = _2307;
      for (int _2316 = _9701; _2316 < _9702; ++_2316)
      {
        {
          _2315 *= _ptr__2310[_2316];
        }
      }
      int _9703;
      bool _9704 = (_2307 < _2311);
      if (_9704)
      {
        _9703 = _ptr__2310[_2307];
      }
      else
      {
        _9703 = (int)1;
      }
      int _2317 = _9703;
      int _2318 = safe_mul( _2317,_2308 );
      int _2319 = (int)1;
      int _9705 = safe_add( _2307,(int)1 );
      int _9706 = _2311;
      for (int _2320 = _9705; _2320 < _9706; ++_2320)
      {
        {
          _2319 *= _ptr__2310[_2320];
        }
      }
      int _9707;
      bool _9708 = (_2307 < _2311);
      if (_9708)
      {
        _9707 = _2311;
      }
      else
      {
        _9707 = safe_add( _2307,(int)1 );
      }
      int _2321 = _9707;
      std::shared_ptr< monty::ndarray< int,1 > > _2322 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2321)));
      _checked_ptr_1<int> _ptr__2322(_2322 ? _2322->raw() : nullptr,_2322 ? _2322->size(0) : 0);
      int _9709 = (int)0;
      int _9710 = _2311;
      for (int _2323 = _9709; _2323 < _9710; ++_2323)
      {
        {
          _ptr__2322[_2323] = _ptr__2310[_2323];
        }
      }
      int _9711 = _2311;
      int _9712 = _2321;
      for (int _2324 = _9711; _2324 < _9712; ++_2324)
      {
        {
          _ptr__2322[_2324] = (int)1;
        }
      }
      _ptr__2322[_2307] = _2318;
      if ((_2313 < _2312))
      {
        {
          std::shared_ptr< monty::ndarray< long long,1 > > _2325 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2313)));
          _checked_ptr_1<long long> _ptr__2325(_2325 ? _2325->raw() : nullptr,_2325 ? _2325->size(0) : 0);
          std::shared_ptr< monty::ndarray< long long,1 > > _2326 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2313)));
          _checked_ptr_1<long long> _ptr__2326(_2326 ? _2326->raw() : nullptr,_2326 ? _2326->size(0) : 0);
          std::shared_ptr< monty::ndarray< long long,1 > > _2327 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2314)));
          _checked_ptr_1<long long> _ptr__2327(_2327 ? _2327->raw() : nullptr,_2327 ? _2327->size(0) : 0);
          std::shared_ptr< monty::ndarray< long long,1 > > _2328 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2314)));
          _checked_ptr_1<long long> _ptr__2328(_2328 ? _2328->raw() : nullptr,_2328 ? _2328->size(0) : 0);
          _2306->inst((int)0,_2326,(int)0,_2325);
          {
            int _2329 = safe_mul( _2318,_2319 );
            int _2330 = safe_mul( _2317,_2319 );
            int _2331 = _2319;
            if ((_2307 == (int)0))
            {
              {
                int _2332 = (int)0;
                int _9713 = (int)0;
                int _9714 = _2308;
                for (int _2333 = _9713; _2333 < _9714; ++_2333)
                {
                  {
                    int _9715 = (int)0;
                    int _9716 = _2313;
                    for (int _2334 = _9715; _2334 < _9716; ++_2334)
                    {
                      {
                        _ptr__2328[_2332] = safe_add( _ptr__2326[_2334],safe_mul( _2333,_2312 ) );
                        _ptr__2327[_2332] = _ptr__2325[_2334];
                        ++ _2332;
                      }
                    }
                  }
                }
                return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_2309,_2322,_2328,_2327)).as<::mosek::fusion::Variable>();
              }
            }
            else if((_2307 >= _2311))
            {
              {
                int _2335 = (int)0;
                int _9717 = (int)0;
                int _9718 = _2313;
                for (int _2336 = _9717; _2336 < _9718; ++_2336)
                {
                  {
                    int _9719 = (int)0;
                    int _9720 = _2308;
                    for (int _2337 = _9719; _2337 < _9720; ++_2337)
                    {
                      {
                        _ptr__2328[_2335] = safe_add( safe_mul( _ptr__2326[_2336],_2308 ),_2337 );
                        _ptr__2327[_2335] = _ptr__2325[_2336];
                        ++ _2335;
                      }
                    }
                  }
                }
                return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_2309,_2322,_2328,_2327)).as<::mosek::fusion::Variable>();
              }
            }
            else
            {
              {
                int _2338 = (int)0;
                int _9721 = (int)0;
                int _9722 = _2313;
                for (int _2339 = _9721; _2339 < _9722; ++_2339)
                {
                  {
                    long long _2340 = (_ptr__2326[_2339] / _2330);
                    long long _2341 = ((_ptr__2326[_2339] / _2331) % _2317);
                    long long _2342 = (_ptr__2326[_2339] % _2319);
                    int _9723 = (int)0;
                    int _9724 = _2308;
                    for (int _2343 = _9723; _2343 < _9724; ++_2343)
                    {
                      {
                        _ptr__2328[_2338] = safe_add( safe_add( safe_mul( _2340,_2329 ),safe_mul( safe_add( _2341,safe_mul( _2317,_2343 ) ),_2319 ) ),_2342 );
                        _ptr__2327[_2338] = _ptr__2325[_2339];
                        ++ _2338;
                      }
                    }
                  }
                }
                int _2344 = (int)1;
                int _9725 = (int)0;
                int _9726 = _2321;
                for (int _2345 = _9725; _2345 < _9726; ++_2345)
                {
                  {
                    if ((_2344 < _ptr__2322[_2345]))
                    {
                      {
                        _2344 = _ptr__2322[_2345];
                      }
                    }
                    {}
                  }
                }
                std::shared_ptr< monty::ndarray< int,1 > > _2346 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2314)));
                _checked_ptr_1<int> _ptr__2346(_2346 ? _2346->raw() : nullptr,_2346 ? _2346->size(0) : 0);
                std::shared_ptr< monty::ndarray< int,1 > > _2347 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2314)));
                _checked_ptr_1<int> _ptr__2347(_2347 ? _2347->raw() : nullptr,_2347 ? _2347->size(0) : 0);
                {
                  std::shared_ptr< monty::ndarray< int,1 > > _2348 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(safe_add( _2344,(int)1 ))));
                  _checked_ptr_1<int> _ptr__2348(_2348 ? _2348->raw() : nullptr,_2348 ? _2348->size(0) : 0);
                  std::shared_ptr< monty::ndarray< long long,1 > > _2349 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2321)));
                  _checked_ptr_1<long long> _ptr__2349(_2349 ? _2349->raw() : nullptr,_2349 ? _2349->size(0) : 0);
                  _ptr__2349[(_2321 - (int)1)] = (int)1;
                  int _9727 = (int)1;
                  int _9728 = _2321;
                  for (int _2350 = _9727; _2350 < _9728; ++_2350)
                  {
                    {
                      _ptr__2349[((_2321 - _2350) - (int)1)] = safe_mul( _ptr__2349[(_2321 - _2350)],_ptr__2322[(_2321 - _2350)] );
                    }
                  }
                  int _9729 = (int)0;
                  int _9730 = _2314;
                  for (int _2351 = _9729; _2351 < _9730; ++_2351)
                  {
                    {
                      _ptr__2346[_2351] = _2351;
                    }
                  }
                  int _9731 = (int)0;
                  int _9732 = _2321;
                  for (int _2352 = _9731; _2352 < _9732; ++_2352)
                  {
                    {
                      int _2353 = ((_2321 - _2352) - (int)1);
                      int _9733 = (int)0;
                      int _9734 = safe_add( _ptr__2322[_2353],(int)1 );
                      for (int _2354 = _9733; _2354 < _9734; ++_2354)
                      {
                        {
                          _ptr__2348[_2354] = (int)0;
                        }
                      }
                      int _9735 = (int)0;
                      int _9736 = _2314;
                      for (int _2355 = _9735; _2355 < _9736; ++_2355)
                      {
                        {
                          ++ _ptr__2348[safe_add( ((_ptr__2328[_2355] / _ptr__2349[_2353]) % _ptr__2322[_2353]),(int)1 )];
                        }
                      }
                      int _9737 = (int)0;
                      int _9738 = _ptr__2322[_2353];
                      for (int _2356 = _9737; _2356 < _9738; ++_2356)
                      {
                        {
                          _ptr__2348[safe_add( _2356,(int)1 )] += _ptr__2348[_2356];
                        }
                      }
                      int _9739 = (int)0;
                      int _9740 = _2314;
                      for (int _2357 = _9739; _2357 < _9740; ++_2357)
                      {
                        {
                          int _2358 = _ptr__2346[_2357];
                          long long _2359 = ((_ptr__2328[_2358] / _ptr__2349[_2353]) % _ptr__2322[_2353]);
                          _ptr__2347[_ptr__2348[_2359]] = _2358;
                          ++ _ptr__2348[_2359];
                        }
                      }
                      std::shared_ptr< monty::ndarray< int,1 > > _2360 = _2346;
                      _checked_ptr_1<int> _ptr__2360(_2360 ? _2360->raw() : nullptr,_2360 ? _2360->size(0) : 0);
                      _2346 = _2347;
                      _ptr__2346.update(_2346 ? _2346->raw() : nullptr, _2346 ? _2346->size(0) : 0);
                      _2347 = _2360;
                      _ptr__2347.update(_2347 ? _2347->raw() : nullptr, _2347 ? _2347->size(0) : 0);
                    }
                  }
                }
                std::vector<long long> _9741;
                for (int _2361 = (int)0, _9742 = _2314; _2361 < _9742 ; ++_2361)
                {
                  _9741.push_back(_ptr__2328[_ptr__2346[_2361]]);
                }
                auto _9743 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9741.size()),_9741.begin(),_9741.end()));
                std::vector<long long> _9744;
                for (int _2362 = (int)0, _9745 = _2314; _2362 < _9745 ; ++_2362)
                {
                  _9744.push_back(_ptr__2327[_ptr__2346[_2362]]);
                }
                auto _9746 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9744.size()),_9744.begin(),_9744.end()));
                return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_2309,_2322,_9743,_9746)).as<::mosek::fusion::Variable>();
              }
            }
          }
        }
      }
      else
      {
        {
          std::shared_ptr< monty::ndarray< long long,1 > > _2363 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2313)));
          _checked_ptr_1<long long> _ptr__2363(_2363 ? _2363->raw() : nullptr,_2363 ? _2363->size(0) : 0);
          std::shared_ptr< monty::ndarray< long long,1 > > _2364 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_mul( _2313,_2308 ))));
          _checked_ptr_1<long long> _ptr__2364(_2364 ? _2364->raw() : nullptr,_2364 ? _2364->size(0) : 0);
          _2306->inst((int)0,_2363);
          int _2365 = safe_mul( _2318,_2319 );
          int _2366 = _2319;
          int _2367 = (int)0;
          int _9747 = (int)0;
          int _9748 = _2315;
          for (int _2368 = _9747; _2368 < _9748; ++_2368)
          {
            {
              int _9749 = (int)0;
              int _9750 = _2317;
              for (int _2369 = _9749; _2369 < _9750; ++_2369)
              {
                {
                  int _9751 = (int)0;
                  int _9752 = _2319;
                  for (int _2370 = _9751; _2370 < _9752; ++_2370)
                  {
                    {
                      int _9753 = (int)0;
                      int _9754 = _2308;
                      for (int _2371 = _9753; _2371 < _9754; ++_2371)
                      {
                        {
                          _ptr__2364[safe_add( safe_add( safe_mul( _2368,_2365 ),safe_mul( safe_add( _2369,safe_mul( _2371,_2317 ) ),_2366 ) ),_2370 )] = _ptr__2363[_2367];
                        }
                      }
                      ++ _2367;
                    }
                  }
                }
              }
            }
          }
          return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_2309,_2322,nullptr,_2364)).as<::mosek::fusion::Variable>();
        }
      }
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::stack  ( std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >,1 > > _2372) { return mosek::fusion::p_Var::stack(_2372); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::stack(std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >,1 > > _2372){
  std::vector<monty::rc_ptr< ::mosek::fusion::Variable >> _9755;
  for (int _2373 = (int)0, _9756 = (int)((_2372)->size(0)); _2373 < _9756 ; ++_2373)
  {
    _9755.push_back(::mosek::fusion::p_Var::dstack(((*_2372)(_2373)),(int)1));
  }
  auto _9757 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >(monty::shape(_9755.size()),_9755.begin(),_9755.end()));
  return ::mosek::fusion::p_Var::dstack(_9757,(int)0);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::vstack  ( monty::rc_ptr< ::mosek::fusion::Variable > _2374,    monty::rc_ptr< ::mosek::fusion::Variable > _2375,    monty::rc_ptr< ::mosek::fusion::Variable > _2376) { return mosek::fusion::p_Var::vstack(_2374,_2375,_2376); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::vstack(monty::rc_ptr< ::mosek::fusion::Variable > _2374,monty::rc_ptr< ::mosek::fusion::Variable > _2375,monty::rc_ptr< ::mosek::fusion::Variable > _2376){
  return ::mosek::fusion::p_Var::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{::monty::rc_ptr<::mosek::fusion::Variable>(_2374.get()),::monty::rc_ptr<::mosek::fusion::Variable>(_2375.get()),::monty::rc_ptr<::mosek::fusion::Variable>(_2376.get())}),(int)0);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::vstack  ( monty::rc_ptr< ::mosek::fusion::Variable > _2377,    monty::rc_ptr< ::mosek::fusion::Variable > _2378) { return mosek::fusion::p_Var::vstack(_2377,_2378); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::vstack(monty::rc_ptr< ::mosek::fusion::Variable > _2377,monty::rc_ptr< ::mosek::fusion::Variable > _2378){
  return ::mosek::fusion::p_Var::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{::monty::rc_ptr<::mosek::fusion::Variable>(_2377.get()),::monty::rc_ptr<::mosek::fusion::Variable>(_2378.get())}),(int)0);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::vstack  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _2379) { return mosek::fusion::p_Var::vstack(_2379); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::vstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _2379){
  return ::mosek::fusion::p_Var::dstack(_2379,(int)0);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::hstack  ( monty::rc_ptr< ::mosek::fusion::Variable > _2380,    monty::rc_ptr< ::mosek::fusion::Variable > _2381,    monty::rc_ptr< ::mosek::fusion::Variable > _2382) { return mosek::fusion::p_Var::hstack(_2380,_2381,_2382); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::hstack(monty::rc_ptr< ::mosek::fusion::Variable > _2380,monty::rc_ptr< ::mosek::fusion::Variable > _2381,monty::rc_ptr< ::mosek::fusion::Variable > _2382){
  return ::mosek::fusion::p_Var::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{::monty::rc_ptr<::mosek::fusion::Variable>(_2380.get()),::monty::rc_ptr<::mosek::fusion::Variable>(_2381.get()),::monty::rc_ptr<::mosek::fusion::Variable>(_2382.get())}),(int)1);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::hstack  ( monty::rc_ptr< ::mosek::fusion::Variable > _2383,    monty::rc_ptr< ::mosek::fusion::Variable > _2384) { return mosek::fusion::p_Var::hstack(_2383,_2384); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::hstack(monty::rc_ptr< ::mosek::fusion::Variable > _2383,monty::rc_ptr< ::mosek::fusion::Variable > _2384){
  return ::mosek::fusion::p_Var::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{::monty::rc_ptr<::mosek::fusion::Variable>(_2383.get()),::monty::rc_ptr<::mosek::fusion::Variable>(_2384.get())}),(int)1);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::hstack  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _2385) { return mosek::fusion::p_Var::hstack(_2385); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::hstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _2385){
  return ::mosek::fusion::p_Var::dstack(_2385,(int)1);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::stack  ( monty::rc_ptr< ::mosek::fusion::Variable > _2386,    monty::rc_ptr< ::mosek::fusion::Variable > _2387,    monty::rc_ptr< ::mosek::fusion::Variable > _2388,    int _2389) { return mosek::fusion::p_Var::stack(_2386,_2387,_2388,_2389); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::stack(monty::rc_ptr< ::mosek::fusion::Variable > _2386,monty::rc_ptr< ::mosek::fusion::Variable > _2387,monty::rc_ptr< ::mosek::fusion::Variable > _2388,int _2389){
  return ::mosek::fusion::p_Var::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{::monty::rc_ptr<::mosek::fusion::Variable>(_2386.get()),::monty::rc_ptr<::mosek::fusion::Variable>(_2387.get()),::monty::rc_ptr<::mosek::fusion::Variable>(_2388.get())}),_2389);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::stack  ( monty::rc_ptr< ::mosek::fusion::Variable > _2390,    monty::rc_ptr< ::mosek::fusion::Variable > _2391,    int _2392) { return mosek::fusion::p_Var::stack(_2390,_2391,_2392); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::stack(monty::rc_ptr< ::mosek::fusion::Variable > _2390,monty::rc_ptr< ::mosek::fusion::Variable > _2391,int _2392){
  return ::mosek::fusion::p_Var::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >{::monty::rc_ptr<::mosek::fusion::Variable>(_2390.get()),::monty::rc_ptr<::mosek::fusion::Variable>(_2391.get())}),_2392);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::stack  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _2393,    int _2394) { return mosek::fusion::p_Var::stack(_2393,_2394); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::stack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _2393,int _2394){
  int _2395 = _2394;
  int _9758 = (int)0;
  int _9759 = (int)((_2393)->size(0));
  for (int _2396 = _9758; _2396 < _9759; ++_2396)
  {
    {
      if ((_2395 < ((*_2393)(_2396))->getND()))
      {
        {
          _2395 = ((*_2393)(_2396))->getND();
        }
      }
      {}
    }
  }
  return ::mosek::fusion::p_Var::dstack(_2393,_2394);
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::Var::promote  ( monty::rc_ptr< ::mosek::fusion::Variable > _2397,    int _2398) { return mosek::fusion::p_Var::promote(_2397,_2398); }monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::promote(monty::rc_ptr< ::mosek::fusion::Variable > _2397,int _2398){
  if ((_2398 > _2397->getND()))
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _2399 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2398)));
      _checked_ptr_1<int> _ptr__2399(_2399 ? _2399->raw() : nullptr,_2399 ? _2399->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _2400 = _2397->getShape();
      _checked_ptr_1<int> _ptr__2400(_2400 ? _2400->raw() : nullptr,_2400 ? _2400->size(0) : 0);
      int _9760 = (int)0;
      int _9761 = (int)((_2400)->size(0));
      for (int _2401 = _9760; _2401 < _9761; ++_2401)
      {
        {
          _ptr__2399[_2401] = _ptr__2400[_2401];
        }
      }
      int _9762 = (int)((_2400)->size(0));
      int _9763 = _2398;
      for (int _2402 = _9762; _2402 < _9763; ++_2402)
      {
        {
          _ptr__2399[_2402] = (int)1;
        }
      }
      return _2397->__mosek_2fusion_2Variable__reshape(_2399);
    }
  }
  else
  {
    {
      return _2397;
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Variable > mosek::fusion::p_Var::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _2403,int _2404){
  if ((_2404 < (int)0))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid stacking dimension"));
    }
  }
  {}
  monty::rc_ptr< ::mosek::fusion::Model > _2405 = nullptr;
  {
    int _9764 = (int)0;
    int _9765 = (int)((_2403)->size(0));
    for (int _2406 = _9764; _2406 < _9765; ++_2406)
    {
      {
        if ((NULL == _2405.get()))
        {
          {
            _2405 = ((*_2403)(_2406))->__mosek_2fusion_2Variable__getModel();
          }
        }
        else if(((NULL != ((*_2403)(_2406))->__mosek_2fusion_2Variable__getModel().get()) && (((*_2403)(_2406))->__mosek_2fusion_2Variable__getModel() != _2405)))
        {
          {
            monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2407 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
            std::string _9766;
            bool _9767 = ((int)((mosek::fusion::p_Model::_get_impl(_2405.get())->getName()).size()) > (int)0);
            if (_9767)
            {
              _9766 = mosek::fusion::p_Model::_get_impl(_2405.get())->getName();
            }
            else
            {
              _9766 = std::string ("?");
            }
            std::string _2408 = _9766;
            std::string _9768;
            bool _9769 = ((int)((mosek::fusion::p_Model::_get_impl(((*_2403)(_2406))->__mosek_2fusion_2Variable__getModel().get())->getName()).size()) > (int)0);
            if (_9769)
            {
              _9768 = mosek::fusion::p_Model::_get_impl(((*_2403)(_2406))->__mosek_2fusion_2Variable__getModel().get())->getName();
            }
            else
            {
              _9768 = std::string ("?");
            }
            std::string _2409 = _9768;
            _2407->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Variables belong to different models: '"))->__mosek_2fusion_2Utils_2StringBuffer__a(_2408)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("' and '"))->__mosek_2fusion_2Utils_2StringBuffer__a(_2409)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"));
            throw ::mosek::fusion::ModelError(_2407->toString());
          }
        }
        {}
      }
    }
  }
  if (((int)((_2403)->size(0)) == (int)0))
  {
    {
      return (::mosek::fusion::p_NilVariable::_new_NilVariable()).as<::mosek::fusion::Variable>();
    }
  }
  else if(((int)((_2403)->size(0)) == (int)1))
  {
    {
      return ((*_2403)((int)0));
    }
  }
  else
  {
    {
      int _2410 = (int)((_2403)->size(0));
      std::vector<int> _9770;
      for (int _2412 = (int)0, _9771 = _2410; _2412 < _9771 ; ++_2412)
      {
        _9770.push_back(((*_2403)(_2412))->numInst());
      }
      auto _9772 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9770.size()),_9770.begin(),_9770.end()));
      std::shared_ptr< monty::ndarray< int,1 > > _2411 = _9772;
      _checked_ptr_1<int> _ptr__2411(_2411 ? _2411->raw() : nullptr,_2411 ? _2411->size(0) : 0);
      std::vector<std::shared_ptr< monty::ndarray< int,1 > >> _9773;
      for (int _2414 = (int)0, _9774 = _2410; _2414 < _9774 ; ++_2414)
      {
        _9773.push_back(((*_2403)(_2414))->getShape());
      }
      auto _9775 = std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > >(new monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 >(monty::shape(_9773.size()),_9773.begin(),_9773.end()));
      std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > > _2413 = _9775;
      std::vector<int> _9776;
      for (int _2416 = (int)0, _9777 = _2410; _2416 < _9777 ; ++_2416)
      {
        _9776.push_back((int)((((*_2413)(_2416)))->size(0)));
      }
      auto _9778 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9776.size()),_9776.begin(),_9776.end()));
      std::shared_ptr< monty::ndarray< int,1 > > _2415 = _9778;
      _checked_ptr_1<int> _ptr__2415(_2415 ? _2415->raw() : nullptr,_2415 ? _2415->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _2417 = ((*_2413)((int)0));
      _checked_ptr_1<int> _ptr__2417(_2417 ? _2417->raw() : nullptr,_2417 ? _2417->size(0) : 0);
      int _2418 = _ptr__2415[(int)0];
      int _2419 = (int)0;
      int _9779 = (int)0;
      int _9780 = _2410;
      for (int _2420 = _9779; _2420 < _9780; ++_2420)
      {
        {
          _2419 += _ptr__2411[_2420];
        }
      }
      int _2421 = safe_add( _2404,(int)1 );
      int _9781 = (int)0;
      int _9782 = _2410;
      for (int _2422 = _9781; _2422 < _9782; ++_2422)
      {
        {
          if ((_2421 < _ptr__2415[_2422]))
          {
            {
              _2421 = _ptr__2415[_2422];
            }
          }
          {}
        }
      }
      std::shared_ptr< monty::ndarray< int,1 > > _2423 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2421)));
      _checked_ptr_1<int> _ptr__2423(_2423 ? _2423->raw() : nullptr,_2423 ? _2423->size(0) : 0);
      int _9783 = (int)0;
      int _9784 = _2418;
      for (int _2424 = _9783; _2424 < _9784; ++_2424)
      {
        {
          _ptr__2423[_2424] = _ptr__2417[_2424];
        }
      }
      int _9785 = _2418;
      int _9786 = _2421;
      for (int _2425 = _9785; _2425 < _9786; ++_2425)
      {
        {
          _ptr__2423[_2425] = (int)1;
        }
      }
      _ptr__2423[_2404] = (int)0;
      int _9787 = (int)0;
      int _9788 = _2410;
      for (int _2426 = _9787; _2426 < _9788; ++_2426)
      {
        {
          int _9789;
          bool _9790 = ((int)((((*_2413)(_2426)))->size(0)) > _2404);
          if (_9790)
          {
            _9789 = ((*((*_2413)(_2426)))(_2404));
          }
          else
          {
            _9789 = (int)1;
          }
          _ptr__2423[_2404] += _9789;
        }
      }
      int _9791 = (int)0;
      int _9792 = _2410;
      for (int _2427 = _9791; _2427 < _9792; ++_2427)
      {
        {
          int _9793 = (int)0;
          int _9794 = (int)((((*_2413)(_2427)))->size(0));
          for (int _2428 = _9793; _2428 < _9794; ++_2428)
          {
            {
              if (((_2428 != _2404) && (((*((*_2413)(_2427)))(_2428)) != _ptr__2423[_2428])))
              {
                {
                  throw ::mosek::fusion::DimensionError(std::string ("Variable dimensions do not match"));
                }
              }
              {}
            }
          }
          int _9795 = (int)((((*_2413)(_2427)))->size(0));
          int _9796 = _2421;
          for (int _2429 = _9795; _2429 < _9796; ++_2429)
          {
            {
              if (((_2429 != _2404) && ((int)1 != _ptr__2423[_2429])))
              {
                {
                  throw ::mosek::fusion::DimensionError(std::string ("Variable dimensions do not match"));
                }
              }
              {}
            }
          }
        }
      }
      std::shared_ptr< monty::ndarray< long long,1 > > _2430 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2419)));
      _checked_ptr_1<long long> _ptr__2430(_2430 ? _2430->raw() : nullptr,_2430 ? _2430->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _2431 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2419)));
      _checked_ptr_1<long long> _ptr__2431(_2431 ? _2431->raw() : nullptr,_2431 ? _2431->size(0) : 0);
      std::vector<int> _9797;
      for (int _2433 = (int)0, _9798 = (int)((_2403)->size(0)); _2433 < _9798 ; ++_2433)
      {
        int _9799;
        bool _9800 = (_2404 < (int)((((*_2413)(_2433)))->size(0)));
        if (_9800)
        {
          _9799 = ((*((*_2413)(_2433)))(_2404));
        }
        else
        {
          _9799 = (int)1;
        }
        _9797.push_back(_9799);
      }
      auto _9801 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9797.size()),_9797.begin(),_9797.end()));
      std::shared_ptr< monty::ndarray< int,1 > > _2432 = _9801;
      _checked_ptr_1<int> _ptr__2432(_2432 ? _2432->raw() : nullptr,_2432 ? _2432->size(0) : 0);
      int _2434 = (int)1;
      int _9802 = (int)0;
      int _9803 = _2404;
      for (int _2435 = _9802; _2435 < _9803; ++_2435)
      {
        {
          int _9804;
          bool _9805 = (_2435 < (int)((_2417)->size(0)));
          if (_9805)
          {
            _9804 = _ptr__2417[_2435];
          }
          else
          {
            _9804 = (int)1;
          }
          _2434 *= _9804;
        }
      }
      int _2436 = (int)0;
      int _9806 = (int)0;
      int _9807 = _2410;
      for (int _2437 = _9806; _2437 < _9807; ++_2437)
      {
        {
          _2436 += _ptr__2432[_2437];
        }
      }
      int _2438 = (int)1;
      int _9808 = safe_add( _2404,(int)1 );
      int _9809 = (int)((_2417)->size(0));
      for (int _2439 = _9808; _2439 < _9809; ++_2439)
      {
        {
          _2438 *= _ptr__2417[_2439];
        }
      }
      if ((_2434 == (int)1))
      {
        {
          int _2440 = (int)0;
          long long _2441 = (int)0;
          int _9810 = (int)0;
          int _9811 = _2410;
          for (int _2442 = _9810; _2442 < _9811; ++_2442)
          {
            {
              ((*_2403)(_2442))->inst(_2440,_2431,_2440,_2430);
              int _9812 = (int)0;
              int _9813 = _ptr__2411[_2442];
              for (int _2443 = _9812; _2443 < _9813; ++_2443)
              {
                {
                  _ptr__2431[_2440] += _2441;
                  ++ _2440;
                }
              }
              _2441 += ::mosek::fusion::p_Set::size(((*_2413)(_2442)));
            }
          }
          std::shared_ptr< monty::ndarray< long long,1 > > _9814;
          bool _9815 = (_2419 < safe_mul( safe_mul( _2434,_2436 ),_2438 ));
          if (_9815)
          {
            _9814 = _2431;
          }
          else
          {
            _9814 = nullptr;
          }
          return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_2405,_2423,_9814,_2430)).as<::mosek::fusion::Variable>();
        }
      }
      else
      {
        {
          int _2444 = (int)0;
          int _9816 = (int)0;
          int _9817 = _2410;
          for (int _2445 = _9816; _2445 < _9817; ++_2445)
          {
            {
              _2444 += ((*_2403)(_2445))->inst(_2444,_2431,_2444,_2430);
            }
          }
          std::shared_ptr< monty::ndarray< int,1 > > _2446 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2419)));
          _checked_ptr_1<int> _ptr__2446(_2446 ? _2446->raw() : nullptr,_2446 ? _2446->size(0) : 0);
          std::shared_ptr< monty::ndarray< int,1 > > _2447 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2419)));
          _checked_ptr_1<int> _ptr__2447(_2447 ? _2447->raw() : nullptr,_2447 ? _2447->size(0) : 0);
          std::shared_ptr< monty::ndarray< int,1 > > _2448 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2410)));
          _checked_ptr_1<int> _ptr__2448(_2448 ? _2448->raw() : nullptr,_2448 ? _2448->size(0) : 0);
          int _9818 = (int)0;
          int _9819 = (_2410 - (int)1);
          for (int _2449 = _9818; _2449 < _9819; ++_2449)
          {
            {
              _ptr__2448[safe_add( _2449,(int)1 )] = safe_add( _ptr__2448[_2449],_ptr__2432[_2449] );
            }
          }
          int _9820 = (int)0;
          int _9821 = _2419;
          for (int _2450 = _9820; _2450 < _9821; ++_2450)
          {
            {
              _ptr__2446[_2450] = _2450;
            }
          }
          int _2451 = (int)0;
          int _9822 = (int)0;
          int _9823 = _2410;
          for (int _2452 = _9822; _2452 < _9823; ++_2452)
          {
            {
              int _9824 = (int)0;
              int _9825 = _ptr__2411[_2452];
              for (int _2453 = _9824; _2453 < _9825; ++_2453)
              {
                {
                  long long _2454 = (_ptr__2431[_2451] / safe_mul( _ptr__2432[_2452],_2438 ));
                  long long _2455 = ((_ptr__2431[_2451] / _2438) % _ptr__2432[_2452]);
                  long long _2456 = (_ptr__2431[_2451] % _2438);
                  _ptr__2431[_2451] = safe_add( safe_mul( safe_add( safe_add( safe_mul( _2454,_2436 ),_2455 ),_ptr__2448[_2452] ),_2438 ),_2456 );
                  ++ _2451;
                }
              }
            }
          }
          int _2457 = (int)1;
          int _9826 = (int)0;
          int _9827 = _2421;
          for (int _2458 = _9826; _2458 < _9827; ++_2458)
          {
            {
              int _9828;
              bool _9829 = (_2457 < _ptr__2423[_2458]);
              if (_9829)
              {
                _9828 = _ptr__2423[_2458];
              }
              else
              {
                _9828 = _2457;
              }
              _2457 = _9828;
            }
          }
          std::shared_ptr< monty::ndarray< long long,1 > > _2459 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2421)));
          _checked_ptr_1<long long> _ptr__2459(_2459 ? _2459->raw() : nullptr,_2459 ? _2459->size(0) : 0);
          _ptr__2459[(_2421 - (int)1)] = (int)1;
          int _9830 = (int)1;
          int _9831 = _2421;
          for (int _2460 = _9830; _2460 < _9831; ++_2460)
          {
            {
              _ptr__2459[((_2421 - _2460) - (int)1)] = safe_mul( _ptr__2459[(_2421 - _2460)],_ptr__2423[(_2421 - _2460)] );
            }
          }
          std::shared_ptr< monty::ndarray< int,1 > > _2461 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(safe_add( _2457,(int)1 ))));
          _checked_ptr_1<int> _ptr__2461(_2461 ? _2461->raw() : nullptr,_2461 ? _2461->size(0) : 0);
          int _9832 = (int)0;
          int _9833 = _2421;
          for (int _2462 = _9832; _2462 < _9833; ++_2462)
          {
            {
              int _2463 = ((_2421 - _2462) - (int)1);
              int _9834 = (int)0;
              int _9835 = safe_add( _ptr__2423[_2463],(int)1 );
              for (int _2464 = _9834; _2464 < _9835; ++_2464)
              {
                {
                  _ptr__2461[_2464] = (int)0;
                }
              }
              int _9836 = (int)0;
              int _9837 = _2419;
              for (int _2465 = _9836; _2465 < _9837; ++_2465)
              {
                {
                  ++ _ptr__2461[safe_add( ((_ptr__2431[_2465] / _ptr__2459[_2463]) % _ptr__2423[_2463]),(int)1 )];
                }
              }
              int _9838 = (int)0;
              int _9839 = _ptr__2423[_2463];
              for (int _2466 = _9838; _2466 < _9839; ++_2466)
              {
                {
                  _ptr__2461[safe_add( _2466,(int)1 )] += _ptr__2461[_2466];
                }
              }
              int _9840 = (int)0;
              int _9841 = _2419;
              for (int _2467 = _9840; _2467 < _9841; ++_2467)
              {
                {
                  int _2468 = _ptr__2446[_2467];
                  long long _2469 = ((_ptr__2431[_2468] / _ptr__2459[_2463]) % _ptr__2423[_2463]);
                  _ptr__2447[_ptr__2461[_2469]] = _2468;
                  ++ _ptr__2461[_2469];
                }
              }
              std::shared_ptr< monty::ndarray< int,1 > > _2470 = _2446;
              _checked_ptr_1<int> _ptr__2470(_2470 ? _2470->raw() : nullptr,_2470 ? _2470->size(0) : 0);
              _2446 = _2447;
              _ptr__2446.update(_2446 ? _2446->raw() : nullptr, _2446 ? _2446->size(0) : 0);
              _2447 = _2470;
              _ptr__2447.update(_2447 ? _2447->raw() : nullptr, _2447 ? _2447->size(0) : 0);
            }
          }
          std::shared_ptr< monty::ndarray< long long,1 > > _9842;
          bool _9843 = (_2419 < safe_mul( safe_mul( _2434,_2436 ),_2438 ));
          if (_9843)
          {
            std::vector<long long> _9844;
            for (int _2471 = (int)0, _9845 = _2419; _2471 < _9845 ; ++_2471)
            {
              _9844.push_back(_ptr__2431[_ptr__2446[_2471]]);
            }
            auto _9846 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9844.size()),_9844.begin(),_9844.end()));
            _9842 = _9846;
          }
          else
          {
            _9842 = nullptr;
          }
          std::vector<long long> _9847;
          for (int _2472 = (int)0, _9848 = _2419; _2472 < _9848 ; ++_2472)
          {
            _9847.push_back(_ptr__2430[_ptr__2446[_2472]]);
          }
          auto _9849 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9847.size()),_9847.begin(),_9847.end()));
          return (::mosek::fusion::p_SliceVariable::_new_SliceVariable(_2405,_2423,_9842,_9849)).as<::mosek::fusion::Variable>();
        }
      }
    }
  }
}
void mosek::fusion::p_Var::destroy(){}void mosek::fusion::Var::destroy() { mosek::fusion::p_Var::_get_impl(this)->destroy(); }mosek::fusion::LinearPSDConstraint::LinearPSDConstraint(mosek::fusion::p_LinearPSDConstraint *_impl) : mosek::fusion::ModelConstraint(_impl) { /*std::cout << "LinearPSDConstraint()" << this << std::endl; */ }mosek::fusion::LinearPSDConstraint::~LinearPSDConstraint() {  /* std::cout << "~LinearPSDConstraint()" << this << std::endl << std::flush; */ }mosek::fusion::p_LinearPSDConstraint::p_LinearPSDConstraint  (::mosek::fusion::LinearPSDConstraint * _pubthis) :     mosek::fusion::p_ModelConstraint(_pubthis),    _pubthis(_pubthis){}mosek::fusion::LinearPSDConstraint::t mosek::fusion::p_LinearPSDConstraint::_new_LinearPSDConstraint  (monty::rc_ptr< ::mosek::fusion::LinearPSDConstraint > _2473,    monty::rc_ptr< ::mosek::fusion::Model > _2474){ return new mosek::fusion::LinearPSDConstraint(_2473,_2474); }mosek::fusion::LinearPSDConstraint::LinearPSDConstraint  (monty::rc_ptr< ::mosek::fusion::LinearPSDConstraint > _2473,    monty::rc_ptr< ::mosek::fusion::Model > _2474) :    LinearPSDConstraint(new mosek::fusion::p_LinearPSDConstraint(this)){ mosek::fusion::p_LinearPSDConstraint::_get_impl(this)->_initialize(_2473,_2474); }void mosek::fusion::p_LinearPSDConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::LinearPSDConstraint > _2473,    monty::rc_ptr< ::mosek::fusion::Model > _2474){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_ModelConstraint::_initialize(_2473,_2474);
    conid = mosek::fusion::p_LinearPSDConstraint::_get_impl(_2473)->conid;
    slackidxs = mosek::fusion::p_LinearPSDConstraint::_get_impl(_2473)->slackidxs;
    nativeidxs = mosek::fusion::p_LinearPSDConstraint::_get_impl(_2473)->nativeidxs;
    conedim = mosek::fusion::p_LinearPSDConstraint::_get_impl(_2473)->conedim;
    shape = mosek::fusion::p_LinearPSDConstraint::_get_impl(_2473)->shape;
  }
}mosek::fusion::LinearPSDConstraint::t mosek::fusion::p_LinearPSDConstraint::_new_LinearPSDConstraint  (monty::rc_ptr< ::mosek::fusion::Model > _2475,    const std::string &  _2476,    int _2477,    std::shared_ptr< monty::ndarray< int,1 > > _2478,    int _2479,    std::shared_ptr< monty::ndarray< int,1 > > _2480,    std::shared_ptr< monty::ndarray< long long,1 > > _2481){ return new mosek::fusion::LinearPSDConstraint(_2475,_2476,_2477,_2478,_2479,_2480,_2481); }mosek::fusion::LinearPSDConstraint::LinearPSDConstraint  (monty::rc_ptr< ::mosek::fusion::Model > _2475,    const std::string &  _2476,    int _2477,    std::shared_ptr< monty::ndarray< int,1 > > _2478,    int _2479,    std::shared_ptr< monty::ndarray< int,1 > > _2480,    std::shared_ptr< monty::ndarray< long long,1 > > _2481) :    LinearPSDConstraint(new mosek::fusion::p_LinearPSDConstraint(this)){ mosek::fusion::p_LinearPSDConstraint::_get_impl(this)->_initialize(_2475,_2476,_2477,_2478,_2479,_2480,_2481); }void mosek::fusion::p_LinearPSDConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _2475,    const std::string &  _2476,    int _2477,    std::shared_ptr< monty::ndarray< int,1 > > _2478,    int _2479,    std::shared_ptr< monty::ndarray< int,1 > > _2480,    std::shared_ptr< monty::ndarray< long long,1 > > _2481){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__2478(_2478 ? _2478->raw() : nullptr, _2478 ? _2478->size(0) : 0);
    _checked_ptr_1<int> _ptr__2480(_2480 ? _2480->raw() : nullptr, _2480 ? _2480->size(0) : 0);
    _checked_ptr_1<long long> _ptr__2481(_2481 ? _2481->raw() : nullptr, _2481 ? _2481->size(0) : 0);
    mosek::fusion::p_ModelConstraint::_initialize(_2475,_2476,_2478,_2480,_2477);
    mosek::fusion::p_LinearPSDConstraint::_get_impl(::mosek::fusion::LinearPSDConstraint::t(_pubthis))->conid = _2477;
    mosek::fusion::p_LinearPSDConstraint::_get_impl(::mosek::fusion::LinearPSDConstraint::t(_pubthis))->slackidxs = _2481;
    mosek::fusion::p_LinearPSDConstraint::_get_impl(::mosek::fusion::LinearPSDConstraint::t(_pubthis))->nativeidxs = _2480;
    mosek::fusion::p_LinearPSDConstraint::_get_impl(::mosek::fusion::LinearPSDConstraint::t(_pubthis))->conedim = _2479;
    mosek::fusion::p_LinearPSDConstraint::_get_impl(::mosek::fusion::LinearPSDConstraint::t(_pubthis))->shape = _2478;
  }
}void mosek::fusion::p_LinearPSDConstraint::domainToString(long long _2482,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2483){
  std::shared_ptr< monty::ndarray< int,1 > > _2484 = ::mosek::fusion::p_Set::idxtokey(shape,_2482);
  _checked_ptr_1<int> _ptr__2484(_2484 ? _2484->raw() : nullptr,_2484 ? _2484->size(0) : 0);
  _2483->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (" : element ("))->__mosek_2fusion_2Utils_2StringBuffer__a(_ptr__2484[(int)0]);
  int _9850 = (int)1;
  int _9851 = (int)((_2484)->size(0));
  for (int _2485 = _9850; _2485 < _9851; ++_2485)
  {
    {
      _2483->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(_ptr__2484[_2485]);
    }
  }
  _2483->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (") in a positive semi-definite cone of size ("))->__mosek_2fusion_2Utils_2StringBuffer__a(((*shape)((int)0)));
  int _9852 = (int)1;
  int _9853 = (int)((_2484)->size(0));
  for (int _2486 = _9852; _2486 < _9853; ++_2486)
  {
    {
      _2483->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(((*shape)(_2486)));
    }
  }
  _2483->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"));
}
monty::rc_ptr< ::mosek::fusion::ModelConstraint > mosek::fusion::p_LinearPSDConstraint::__mosek_2fusion_2LinearPSDConstraint__clone(monty::rc_ptr< ::mosek::fusion::Model > _2487){
  return (::mosek::fusion::p_LinearPSDConstraint::_new_LinearPSDConstraint(::mosek::fusion::LinearPSDConstraint::t(_pubthis),_2487)).as<::mosek::fusion::ModelConstraint>();
}
void mosek::fusion::p_LinearPSDConstraint::destroy(){shape.reset();slackidxs.reset();nativeidxs.reset();}void mosek::fusion::LinearPSDConstraint::destroy() { mosek::fusion::p_LinearPSDConstraint::_get_impl(this)->destroy(); }mosek::fusion::PSDConstraint::PSDConstraint(mosek::fusion::p_PSDConstraint *_impl) : mosek::fusion::ModelConstraint(_impl) { /*std::cout << "PSDConstraint()" << this << std::endl; */ }mosek::fusion::PSDConstraint::~PSDConstraint() {  /* std::cout << "~PSDConstraint()" << this << std::endl << std::flush; */ }mosek::fusion::p_PSDConstraint::p_PSDConstraint  (::mosek::fusion::PSDConstraint * _pubthis) :     mosek::fusion::p_ModelConstraint(_pubthis),    _pubthis(_pubthis){}mosek::fusion::PSDConstraint::t mosek::fusion::p_PSDConstraint::_new_PSDConstraint  (monty::rc_ptr< ::mosek::fusion::PSDConstraint > _2488,    monty::rc_ptr< ::mosek::fusion::Model > _2489){ return new mosek::fusion::PSDConstraint(_2488,_2489); }mosek::fusion::PSDConstraint::PSDConstraint  (monty::rc_ptr< ::mosek::fusion::PSDConstraint > _2488,    monty::rc_ptr< ::mosek::fusion::Model > _2489) :    PSDConstraint(new mosek::fusion::p_PSDConstraint(this)){ mosek::fusion::p_PSDConstraint::_get_impl(this)->_initialize(_2488,_2489); }void mosek::fusion::p_PSDConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::PSDConstraint > _2488,    monty::rc_ptr< ::mosek::fusion::Model > _2489){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_ModelConstraint::_initialize(_2488,_2489);
    conid = mosek::fusion::p_PSDConstraint::_get_impl(_2488)->conid;
    name = mosek::fusion::p_PSDConstraint::_get_impl(_2488)->name;
    shape = mosek::fusion::p_PSDConstraint::_get_impl(_2488)->shape;
    slackidxs = mosek::fusion::p_PSDConstraint::_get_impl(_2488)->slackidxs;
    nativeidxs = mosek::fusion::p_PSDConstraint::_get_impl(_2488)->nativeidxs;
    names_flushed = mosek::fusion::p_PSDConstraint::_get_impl(_2488)->names_flushed;
    conedim0 = mosek::fusion::p_PSDConstraint::_get_impl(_2488)->conedim0;
    conedim1 = mosek::fusion::p_PSDConstraint::_get_impl(_2488)->conedim1;
  }
}mosek::fusion::PSDConstraint::t mosek::fusion::p_PSDConstraint::_new_PSDConstraint  (monty::rc_ptr< ::mosek::fusion::Model > _2490,    const std::string &  _2491,    int _2492,    std::shared_ptr< monty::ndarray< int,1 > > _2493,    int _2494,    int _2495,    std::shared_ptr< monty::ndarray< long long,1 > > _2496,    std::shared_ptr< monty::ndarray< int,1 > > _2497){ return new mosek::fusion::PSDConstraint(_2490,_2491,_2492,_2493,_2494,_2495,_2496,_2497); }mosek::fusion::PSDConstraint::PSDConstraint  (monty::rc_ptr< ::mosek::fusion::Model > _2490,    const std::string &  _2491,    int _2492,    std::shared_ptr< monty::ndarray< int,1 > > _2493,    int _2494,    int _2495,    std::shared_ptr< monty::ndarray< long long,1 > > _2496,    std::shared_ptr< monty::ndarray< int,1 > > _2497) :    PSDConstraint(new mosek::fusion::p_PSDConstraint(this)){ mosek::fusion::p_PSDConstraint::_get_impl(this)->_initialize(_2490,_2491,_2492,_2493,_2494,_2495,_2496,_2497); }void mosek::fusion::p_PSDConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _2490,    const std::string &  _2491,    int _2492,    std::shared_ptr< monty::ndarray< int,1 > > _2493,    int _2494,    int _2495,    std::shared_ptr< monty::ndarray< long long,1 > > _2496,    std::shared_ptr< monty::ndarray< int,1 > > _2497){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__2493(_2493 ? _2493->raw() : nullptr, _2493 ? _2493->size(0) : 0);
    _checked_ptr_1<long long> _ptr__2496(_2496 ? _2496->raw() : nullptr, _2496 ? _2496->size(0) : 0);
    _checked_ptr_1<int> _ptr__2497(_2497 ? _2497->raw() : nullptr, _2497 ? _2497->size(0) : 0);
    mosek::fusion::p_ModelConstraint::_initialize(_2490,_2491,_2493,::mosek::fusion::p_PSDConstraint::computenidxs(_2493,_2494,_2495,_2497),_2492);
    mosek::fusion::p_PSDConstraint::_get_impl(::mosek::fusion::PSDConstraint::t(_pubthis))->conid = _2492;
    mosek::fusion::p_PSDConstraint::_get_impl(::mosek::fusion::PSDConstraint::t(_pubthis))->nativeidxs = _2497;
    mosek::fusion::p_PSDConstraint::_get_impl(::mosek::fusion::PSDConstraint::t(_pubthis))->slackidxs = _2496;
    mosek::fusion::p_PSDConstraint::_get_impl(::mosek::fusion::PSDConstraint::t(_pubthis))->name = _2491;
    mosek::fusion::p_PSDConstraint::_get_impl(::mosek::fusion::PSDConstraint::t(_pubthis))->shape = _2493;
    mosek::fusion::p_PSDConstraint::_get_impl(::mosek::fusion::PSDConstraint::t(_pubthis))->conedim0 = _2494;
    mosek::fusion::p_PSDConstraint::_get_impl(::mosek::fusion::PSDConstraint::t(_pubthis))->conedim1 = _2495;
    names_flushed = false;
  }
}std::string mosek::fusion::PSDConstraint :: toString() { return mosek::fusion::p_PSDConstraint::_get_impl(this)->toString(); }std::string mosek::fusion::p_PSDConstraint::toString(){
  throw ::mosek::fusion::UnimplementedError(std::string ("PSDConstraint.toString not implemented"));
}
monty::rc_ptr< ::mosek::fusion::ModelConstraint > mosek::fusion::p_PSDConstraint::__mosek_2fusion_2PSDConstraint__clone(monty::rc_ptr< ::mosek::fusion::Model > _2498){
  return (::mosek::fusion::p_PSDConstraint::_new_PSDConstraint(::mosek::fusion::PSDConstraint::t(_pubthis),_2498)).as<::mosek::fusion::ModelConstraint>();
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_PSDConstraint::computenidxs(std::shared_ptr< monty::ndarray< int,1 > > _2499,int _2500,int _2501,std::shared_ptr< monty::ndarray< int,1 > > _2502){
  _checked_ptr_1<int> _ptr__2499(_2499 ? _2499->raw() : nullptr, _2499 ? _2499->size(0) : 0);
  _checked_ptr_1<int> _ptr__2502(_2502 ? _2502->raw() : nullptr, _2502 ? _2502->size(0) : 0);
  int _2503 = (int)((_2499)->size(0));
  bool _2504 = (_2500 < _2501);
  int _9854;
  bool _9855 = _2504;
  if (_9855)
  {
    _9854 = _2500;
  }
  else
  {
    _9854 = _2501;
  }
  int _2505 = _9854;
  int _9856;
  bool _9857 = _2504;
  if (_9857)
  {
    _9856 = _2501;
  }
  else
  {
    _9856 = _2500;
  }
  int _2506 = _9856;
  std::shared_ptr< monty::ndarray< int,1 > > _2507 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)1),(int)((int)1),(int)((int)1),(int)((int)1),(int)((int)1)});
  _checked_ptr_1<int> _ptr__2507(_2507 ? _2507->raw() : nullptr,_2507 ? _2507->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _2508 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)5)));
  _checked_ptr_1<int> _ptr__2508(_2508 ? _2508->raw() : nullptr,_2508 ? _2508->size(0) : 0);
  int _2509 = (int)1;
  int _9858 = (int)0;
  int _9859 = (int)((_2499)->size(0));
  for (int _2510 = _9858; _2510 < _9859; ++_2510)
  {
    {
      _2509 *= _ptr__2499[_2510];
    }
  }
  int _9860 = (int)0;
  int _9861 = _2505;
  for (int _2511 = _9860; _2511 < _9861; ++_2511)
  {
    {
      _ptr__2507[(int)0] *= _ptr__2499[_2511];
    }
  }
  _ptr__2507[(int)1] = _ptr__2499[_2505];
  int _9862 = safe_add( _2505,(int)1 );
  int _9863 = _2506;
  for (int _2512 = _9862; _2512 < _9863; ++_2512)
  {
    {
      _ptr__2507[(int)2] *= _ptr__2499[_2512];
    }
  }
  _ptr__2507[(int)3] = _ptr__2499[_2506];
  int _9864 = safe_add( _2506,(int)1 );
  int _9865 = _2503;
  for (int _2513 = _9864; _2513 < _9865; ++_2513)
  {
    {
      _ptr__2507[(int)4] *= _ptr__2499[_2513];
    }
  }
  _ptr__2508[(int)4] = (int)1;
  int _9866 = (int)1;
  int _9867 = (int)5;
  for (int _2514 = _9866; _2514 < _9867; ++_2514)
  {
    {
      _ptr__2508[(((int)5 - _2514) - (int)1)] = safe_mul( _ptr__2508[((int)5 - _2514)],_ptr__2507[((int)5 - _2514)] );
    }
  }
  std::shared_ptr< monty::ndarray< int,1 > > _2515 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2509)));
  _checked_ptr_1<int> _ptr__2515(_2515 ? _2515->raw() : nullptr,_2515 ? _2515->size(0) : 0);
  int _2516 = (int)0;
  if (_2504)
  {
    {
      int _9868 = (int)0;
      int _9869 = _ptr__2507[(int)0];
      for (int _2517 = _9868; _2517 < _9869; ++_2517)
      {
        {
          int _9870 = (int)0;
          int _9871 = _ptr__2507[(int)1];
          for (int _2518 = _9870; _2518 < _9871; ++_2518)
          {
            {
              int _9872 = (int)0;
              int _9873 = _ptr__2507[(int)2];
              for (int _2519 = _9872; _2519 < _9873; ++_2519)
              {
                {
                  int _9874 = _2518;
                  int _9875 = _ptr__2507[(int)1];
                  for (int _2520 = _9874; _2520 < _9875; ++_2520)
                  {
                    {
                      int _9876 = (int)0;
                      int _9877 = _ptr__2507[(int)4];
                      for (int _2521 = _9876; _2521 < _9877; ++_2521)
                      {
                        {
                          _ptr__2515[safe_add( safe_add( safe_add( safe_add( safe_mul( _2517,_ptr__2508[(int)0] ),safe_mul( _2518,_ptr__2508[(int)1] ) ),safe_mul( _2519,_ptr__2508[(int)2] ) ),safe_mul( _2520,_ptr__2508[(int)3] ) ),safe_mul( _2521,_ptr__2508[(int)4] ) )] = _ptr__2502[_2516];
                          _ptr__2515[safe_add( safe_add( safe_add( safe_add( safe_mul( _2517,_ptr__2508[(int)0] ),safe_mul( _2520,_ptr__2508[(int)1] ) ),safe_mul( _2519,_ptr__2508[(int)2] ) ),safe_mul( _2518,_ptr__2508[(int)3] ) ),safe_mul( _2521,_ptr__2508[(int)4] ) )] = _ptr__2502[_2516];
                          ++ _2516;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  else
  {
    {
      int _9878 = (int)0;
      int _9879 = _ptr__2507[(int)0];
      for (int _2522 = _9878; _2522 < _9879; ++_2522)
      {
        {
          int _9880 = (int)0;
          int _9881 = _ptr__2507[(int)1];
          for (int _2523 = _9880; _2523 < _9881; ++_2523)
          {
            {
              int _9882 = (int)0;
              int _9883 = _ptr__2507[(int)2];
              for (int _2524 = _9882; _2524 < _9883; ++_2524)
              {
                {
                  int _9884 = (int)0;
                  int _9885 = safe_add( _2523,(int)1 );
                  for (int _2525 = _9884; _2525 < _9885; ++_2525)
                  {
                    {
                      int _9886 = (int)0;
                      int _9887 = _ptr__2507[(int)4];
                      for (int _2526 = _9886; _2526 < _9887; ++_2526)
                      {
                        {
                          _ptr__2515[safe_add( safe_add( safe_add( safe_add( safe_mul( _2522,_ptr__2508[(int)0] ),safe_mul( _2523,_ptr__2508[(int)1] ) ),safe_mul( _2524,_ptr__2508[(int)2] ) ),safe_mul( _2525,_ptr__2508[(int)3] ) ),safe_mul( _2526,_ptr__2508[(int)4] ) )] = _ptr__2502[_2516];
                          _ptr__2515[safe_add( safe_add( safe_add( safe_add( safe_mul( _2522,_ptr__2508[(int)0] ),safe_mul( _2525,_ptr__2508[(int)1] ) ),safe_mul( _2524,_ptr__2508[(int)2] ) ),safe_mul( _2523,_ptr__2508[(int)3] ) ),safe_mul( _2526,_ptr__2508[(int)4] ) )] = _ptr__2502[_2516];
                          ++ _2516;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return _2515;
}
void mosek::fusion::p_PSDConstraint::destroy(){shape.reset();slackidxs.reset();nativeidxs.reset();}void mosek::fusion::PSDConstraint::destroy() { mosek::fusion::p_PSDConstraint::_get_impl(this)->destroy(); }mosek::fusion::ConstraintCache::ConstraintCache(mosek::fusion::p_ConstraintCache *_impl) : _impl(_impl) { /*std::cout << "ConstraintCache() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::ConstraintCache::~ConstraintCache() { delete _impl; _impl = nullptr; }mosek::fusion::p_ConstraintCache::p_ConstraintCache  (::mosek::fusion::ConstraintCache * _pubthis) :     _pubthis(_pubthis){}std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::ConstraintCache::get_barmatidx() { return _impl->barmatidx; }
void mosek::fusion::ConstraintCache::set_barmatidx(std::shared_ptr< monty::ndarray< int,1 > > _val) { _impl->barmatidx = _val; }
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::ConstraintCache::get_barsubj() { return _impl->barsubj; }
void mosek::fusion::ConstraintCache::set_barsubj(std::shared_ptr< monty::ndarray< int,1 > > _val) { _impl->barsubj = _val; }
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::ConstraintCache::get_barsubi() { return _impl->barsubi; }
void mosek::fusion::ConstraintCache::set_barsubi(std::shared_ptr< monty::ndarray< int,1 > > _val) { _impl->barsubi = _val; }
long long mosek::fusion::ConstraintCache::get_nbarnz() { return _impl->nbarnz; }
void mosek::fusion::ConstraintCache::set_nbarnz(long long _val) { _impl->nbarnz = _val; }
long long mosek::fusion::ConstraintCache::get_nunordered() { return _impl->nunordered; }
void mosek::fusion::ConstraintCache::set_nunordered(long long _val) { _impl->nunordered = _val; }
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::ConstraintCache::get_buffer_subi() { return _impl->buffer_subi; }
void mosek::fusion::ConstraintCache::set_buffer_subi(std::shared_ptr< monty::ndarray< int,1 > > _val) { _impl->buffer_subi = _val; }
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::ConstraintCache::get_buffer_subj() { return _impl->buffer_subj; }
void mosek::fusion::ConstraintCache::set_buffer_subj(std::shared_ptr< monty::ndarray< int,1 > > _val) { _impl->buffer_subj = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::ConstraintCache::get_buffer_cof() { return _impl->buffer_cof; }
void mosek::fusion::ConstraintCache::set_buffer_cof(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->buffer_cof = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::ConstraintCache::get_bfix() { return _impl->bfix; }
void mosek::fusion::ConstraintCache::set_bfix(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->bfix = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::ConstraintCache::get_cof() { return _impl->cof; }
void mosek::fusion::ConstraintCache::set_cof(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->cof = _val; }
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::ConstraintCache::get_subi() { return _impl->subi; }
void mosek::fusion::ConstraintCache::set_subi(std::shared_ptr< monty::ndarray< int,1 > > _val) { _impl->subi = _val; }
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::ConstraintCache::get_subj() { return _impl->subj; }
void mosek::fusion::ConstraintCache::set_subj(std::shared_ptr< monty::ndarray< int,1 > > _val) { _impl->subj = _val; }
long long mosek::fusion::ConstraintCache::get_nnz() { return _impl->nnz; }
void mosek::fusion::ConstraintCache::set_nnz(long long _val) { _impl->nnz = _val; }
int mosek::fusion::ConstraintCache::get_nrows() { return _impl->nrows; }
void mosek::fusion::ConstraintCache::set_nrows(int _val) { _impl->nrows = _val; }
mosek::fusion::ConstraintCache::t mosek::fusion::p_ConstraintCache::_new_ConstraintCache  (monty::rc_ptr< ::mosek::fusion::ConstraintCache > _2527){ return new mosek::fusion::ConstraintCache(_2527); }mosek::fusion::ConstraintCache::ConstraintCache  (monty::rc_ptr< ::mosek::fusion::ConstraintCache > _2527) :    ConstraintCache(new mosek::fusion::p_ConstraintCache(this)){ mosek::fusion::p_ConstraintCache::_get_impl(this)->_initialize(_2527); }void mosek::fusion::p_ConstraintCache::_initialize  (monty::rc_ptr< ::mosek::fusion::ConstraintCache > _2527){monty::rc_reserve __reserve_this(_pubthis);   {
    nrows = mosek::fusion::p_ConstraintCache::_get_impl(_2527)->nrows;
    nnz = mosek::fusion::p_ConstraintCache::_get_impl(_2527)->nnz;
    std::shared_ptr< monty::ndarray< int,1 > > _9888;
    bool _9889 = (NULL != mosek::fusion::p_ConstraintCache::_get_impl(_2527)->subj.get());
    if (_9889)
    {
      _9888 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_ConstraintCache::_get_impl(_2527)->subj);
    }
    else
    {
      _9888 = nullptr;
    }
    subj = _9888;
    std::shared_ptr< monty::ndarray< int,1 > > _9890;
    bool _9891 = (NULL != mosek::fusion::p_ConstraintCache::_get_impl(_2527)->subi.get());
    if (_9891)
    {
      _9890 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_ConstraintCache::_get_impl(_2527)->subi);
    }
    else
    {
      _9890 = nullptr;
    }
    subi = _9890;
    std::shared_ptr< monty::ndarray< double,1 > > _9892;
    bool _9893 = (NULL != mosek::fusion::p_ConstraintCache::_get_impl(_2527)->cof.get());
    if (_9893)
    {
      _9892 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_ConstraintCache::_get_impl(_2527)->cof);
    }
    else
    {
      _9892 = nullptr;
    }
    cof = _9892;
    std::shared_ptr< monty::ndarray< double,1 > > _9894;
    bool _9895 = (NULL != mosek::fusion::p_ConstraintCache::_get_impl(_2527)->bfix.get());
    if (_9895)
    {
      _9894 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_ConstraintCache::_get_impl(_2527)->bfix);
    }
    else
    {
      _9894 = nullptr;
    }
    bfix = _9894;
    std::shared_ptr< monty::ndarray< double,1 > > _9896;
    bool _9897 = (NULL != mosek::fusion::p_ConstraintCache::_get_impl(_2527)->buffer_cof.get());
    if (_9897)
    {
      _9896 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_ConstraintCache::_get_impl(_2527)->buffer_cof);
    }
    else
    {
      _9896 = nullptr;
    }
    buffer_cof = _9896;
    std::shared_ptr< monty::ndarray< int,1 > > _9898;
    bool _9899 = (NULL != mosek::fusion::p_ConstraintCache::_get_impl(_2527)->buffer_subj.get());
    if (_9899)
    {
      _9898 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_ConstraintCache::_get_impl(_2527)->buffer_subj);
    }
    else
    {
      _9898 = nullptr;
    }
    buffer_subj = _9898;
    std::shared_ptr< monty::ndarray< int,1 > > _9900;
    bool _9901 = (NULL != mosek::fusion::p_ConstraintCache::_get_impl(_2527)->buffer_subi.get());
    if (_9901)
    {
      _9900 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_ConstraintCache::_get_impl(_2527)->buffer_subi);
    }
    else
    {
      _9900 = nullptr;
    }
    buffer_subi = _9900;
    nunordered = mosek::fusion::p_ConstraintCache::_get_impl(_2527)->nunordered;
    nbarnz = mosek::fusion::p_ConstraintCache::_get_impl(_2527)->nbarnz;
    std::shared_ptr< monty::ndarray< int,1 > > _9902;
    bool _9903 = (NULL != mosek::fusion::p_ConstraintCache::_get_impl(_2527)->barsubi.get());
    if (_9903)
    {
      _9902 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_ConstraintCache::_get_impl(_2527)->barsubi);
    }
    else
    {
      _9902 = nullptr;
    }
    barsubi = _9902;
    std::shared_ptr< monty::ndarray< int,1 > > _9904;
    bool _9905 = (NULL != mosek::fusion::p_ConstraintCache::_get_impl(_2527)->barsubj.get());
    if (_9905)
    {
      _9904 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_ConstraintCache::_get_impl(_2527)->barsubj);
    }
    else
    {
      _9904 = nullptr;
    }
    barsubj = _9904;
    std::shared_ptr< monty::ndarray< int,1 > > _9906;
    bool _9907 = (NULL != mosek::fusion::p_ConstraintCache::_get_impl(_2527)->barmatidx.get());
    if (_9907)
    {
      _9906 = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_ConstraintCache::_get_impl(_2527)->barmatidx);
    }
    else
    {
      _9906 = nullptr;
    }
    barmatidx = _9906;
  }
}mosek::fusion::ConstraintCache::t mosek::fusion::p_ConstraintCache::_new_ConstraintCache  (std::shared_ptr< monty::ndarray< long long,1 > > _2528,    std::shared_ptr< monty::ndarray< double,1 > > _2529,    std::shared_ptr< monty::ndarray< int,1 > > _2530,    std::shared_ptr< monty::ndarray< double,1 > > _2531,    std::shared_ptr< monty::ndarray< int,1 > > _2532,    std::shared_ptr< monty::ndarray< int,1 > > _2533,    std::shared_ptr< monty::ndarray< int,1 > > _2534){ return new mosek::fusion::ConstraintCache(_2528,_2529,_2530,_2531,_2532,_2533,_2534); }mosek::fusion::ConstraintCache::ConstraintCache  (std::shared_ptr< monty::ndarray< long long,1 > > _2528,    std::shared_ptr< monty::ndarray< double,1 > > _2529,    std::shared_ptr< monty::ndarray< int,1 > > _2530,    std::shared_ptr< monty::ndarray< double,1 > > _2531,    std::shared_ptr< monty::ndarray< int,1 > > _2532,    std::shared_ptr< monty::ndarray< int,1 > > _2533,    std::shared_ptr< monty::ndarray< int,1 > > _2534) :    ConstraintCache(new mosek::fusion::p_ConstraintCache(this)){ mosek::fusion::p_ConstraintCache::_get_impl(this)->_initialize(_2528,_2529,_2530,_2531,_2532,_2533,_2534); }void mosek::fusion::p_ConstraintCache::_initialize  (std::shared_ptr< monty::ndarray< long long,1 > > _2528,    std::shared_ptr< monty::ndarray< double,1 > > _2529,    std::shared_ptr< monty::ndarray< int,1 > > _2530,    std::shared_ptr< monty::ndarray< double,1 > > _2531,    std::shared_ptr< monty::ndarray< int,1 > > _2532,    std::shared_ptr< monty::ndarray< int,1 > > _2533,    std::shared_ptr< monty::ndarray< int,1 > > _2534){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<long long> _ptr__2528(_2528 ? _2528->raw() : nullptr, _2528 ? _2528->size(0) : 0);
    _checked_ptr_1<double> _ptr__2529(_2529 ? _2529->raw() : nullptr, _2529 ? _2529->size(0) : 0);
    _checked_ptr_1<int> _ptr__2530(_2530 ? _2530->raw() : nullptr, _2530 ? _2530->size(0) : 0);
    _checked_ptr_1<double> _ptr__2531(_2531 ? _2531->raw() : nullptr, _2531 ? _2531->size(0) : 0);
    _checked_ptr_1<int> _ptr__2532(_2532 ? _2532->raw() : nullptr, _2532 ? _2532->size(0) : 0);
    _checked_ptr_1<int> _ptr__2533(_2533 ? _2533->raw() : nullptr, _2533 ? _2533->size(0) : 0);
    _checked_ptr_1<int> _ptr__2534(_2534 ? _2534->raw() : nullptr, _2534 ? _2534->size(0) : 0);
    nrows = ((int)((_2528)->size(0)) - (int)1);
    nnz = _ptr__2528[((int)((_2528)->size(0)) - (int)1)];
    subj = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(nnz)));
    subi = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(nnz)));
    cof = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(nnz)));
    if ((NULL != _2531.get()))
    {
      {
        bfix = _2531;
      }
    }
    else
    {
      {
        bfix = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(nrows)));
      }
    }
    if (((NULL != _2532.get()) && ((NULL != _2533.get()) && (NULL != _2534.get()))))
    {
      {
        nbarnz = (int)((_2532)->size(0));
        if ((nbarnz > (int)((_2533)->size(0))))
        {
          {
            nbarnz = (int)((_2533)->size(0));
          }
        }
        {}
        if ((nbarnz > (int)((_2534)->size(0))))
        {
          {
            nbarnz = (int)((_2534)->size(0));
          }
        }
        {}
        barsubi = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(nbarnz)));
        barsubj = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(nbarnz)));
        barmatidx = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(nbarnz)));
        ::mosek::fusion::Utils::Tools::arraycopy(_2532,(long long)((int)0),barsubi,(long long)((int)0),nbarnz);
        ::mosek::fusion::Utils::Tools::arraycopy(_2533,(long long)((int)0),barsubj,(long long)((int)0),nbarnz);
        ::mosek::fusion::Utils::Tools::arraycopy(_2534,(long long)((int)0),barmatidx,(long long)((int)0),nbarnz);
      }
    }
    else
    {
      {
        nbarnz = (int)0;
        barsubi = nullptr;
        barsubj = nullptr;
        barmatidx = nullptr;
      }
    }
    ::mosek::fusion::Utils::Tools::arraycopy(_2530,(long long)0,subj,(long long)0,nnz);
    ::mosek::fusion::Utils::Tools::arraycopy(_2529,(long long)0,cof,(long long)0,nnz);
    int _9908 = (int)0;
    int _9909 = nrows;
    for (int _2535 = _9908; _2535 < _9909; ++_2535)
    {
      {
        long long _9910 = _ptr__2528[_2535];
        long long _9911 = _ptr__2528[safe_add( _2535,(int)1 )];
        for (long long _2536 = _9910; _2536 < _9911; ++_2536)
        {
          {
            ((*subi)(_2536)) = _2535;
          }
        }
      }
    }
    buffer_cof = nullptr;
    buffer_subj = nullptr;
    buffer_subi = nullptr;
    nunordered = (long long)0;
  }
}void mosek::fusion::p_ConstraintCache::unchecked_add_fx(std::shared_ptr< monty::ndarray< double,1 > > _2537){
  _checked_ptr_1<double> _ptr__2537(_2537 ? _2537->raw() : nullptr, _2537 ? _2537->size(0) : 0);
  int _9912 = (int)0;
  int _9913 = nrows;
  for (int _2538 = _9912; _2538 < _9913; ++_2538)
  {
    {
      ((*bfix)(_2538)) = (((*bfix)(_2538)) + _ptr__2537[_2538]);
    }
  }
}
long long mosek::fusion::p_ConstraintCache::order_barentries(){
  std::vector<long long> _9914;
  for (long long _2540 = (long long)0, _9915 = nbarnz; _2540 < _9915 ; ++_2540)
  {
    _9914.push_back(_2540);
  }
  auto _9916 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9914.size()),_9914.begin(),_9914.end()));
  std::shared_ptr< monty::ndarray< long long,1 > > _2539 = _9916;
  _checked_ptr_1<long long> _ptr__2539(_2539 ? _2539->raw() : nullptr,_2539 ? _2539->size(0) : 0);
  if ((!::mosek::fusion::p_Sort::issorted(_2539,barsubi,barsubj,(long long)((int)0),nbarnz,false)))
  {
    {
      ::mosek::fusion::p_Sort::argsort(_2539,barsubi,barsubj,(long long)((int)0),nbarnz,false);
      std::shared_ptr< monty::ndarray< int,1 > > _2541 = barsubi;
      _checked_ptr_1<int> _ptr__2541(_2541 ? _2541->raw() : nullptr,_2541 ? _2541->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _2542 = barsubj;
      _checked_ptr_1<int> _ptr__2542(_2542 ? _2542->raw() : nullptr,_2542 ? _2542->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _2543 = barmatidx;
      _checked_ptr_1<int> _ptr__2543(_2543 ? _2543->raw() : nullptr,_2543 ? _2543->size(0) : 0);
      std::vector<int> _9917;
      for (long long _2544 = (int)0, _9918 = nbarnz; _2544 < _9918 ; ++_2544)
      {
        _9917.push_back(_ptr__2541[_ptr__2539[_2544]]);
      }
      auto _9919 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9917.size()),_9917.begin(),_9917.end()));
      barsubi = _9919;
      std::vector<int> _9920;
      for (long long _2545 = (int)0, _9921 = nbarnz; _2545 < _9921 ; ++_2545)
      {
        _9920.push_back(_ptr__2542[_ptr__2539[_2545]]);
      }
      auto _9922 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9920.size()),_9920.begin(),_9920.end()));
      barsubj = _9922;
      std::vector<int> _9923;
      for (long long _2546 = (int)0, _9924 = nbarnz; _2546 < _9924 ; ++_2546)
      {
        _9923.push_back(_ptr__2543[_ptr__2539[_2546]]);
      }
      auto _9925 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9923.size()),_9923.begin(),_9923.end()));
      barmatidx = _9925;
    }
  }
  {}
  return nbarnz;
}
void mosek::fusion::p_ConstraintCache::add_bar(std::shared_ptr< monty::ndarray< int,1 > > _2547,std::shared_ptr< monty::ndarray< int,1 > > _2548,std::shared_ptr< monty::ndarray< int,1 > > _2549){
  _checked_ptr_1<int> _ptr__2547(_2547 ? _2547->raw() : nullptr, _2547 ? _2547->size(0) : 0);
  _checked_ptr_1<int> _ptr__2548(_2548 ? _2548->raw() : nullptr, _2548 ? _2548->size(0) : 0);
  _checked_ptr_1<int> _ptr__2549(_2549 ? _2549->raw() : nullptr, _2549 ? _2549->size(0) : 0);
  if ((NULL != _2547.get()))
  {
    {
      int _2550 = (int)((_2547)->size(0));
      if (((int)((_2547)->size(0)) <= safe_add( nbarnz,_2550 )))
      {
        {
          std::shared_ptr< monty::ndarray< int,1 > > _2551 = barsubi;
          _checked_ptr_1<int> _ptr__2551(_2551 ? _2551->raw() : nullptr,_2551 ? _2551->size(0) : 0);
          std::shared_ptr< monty::ndarray< int,1 > > _2552 = barsubj;
          _checked_ptr_1<int> _ptr__2552(_2552 ? _2552->raw() : nullptr,_2552 ? _2552->size(0) : 0);
          std::shared_ptr< monty::ndarray< int,1 > > _2553 = barmatidx;
          _checked_ptr_1<int> _ptr__2553(_2553 ? _2553->raw() : nullptr,_2553 ? _2553->size(0) : 0);
          long long _9926;
          bool _9927 = (safe_mul( (int)2,nbarnz ) > safe_add( nbarnz,_2550 ));
          if (_9927)
          {
            _9926 = safe_mul( (int)2,nbarnz );
          }
          else
          {
            _9926 = safe_add( nbarnz,safe_mul( _2550,(int)2 ) );
          }
          long long _2554 = _9926;
          barsubi = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2554)));
          barsubj = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2554)));
          barmatidx = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2554)));
          if ((nbarnz > (int)0))
          {
            {
              ::mosek::fusion::Utils::Tools::arraycopy(_2551,(long long)((int)0),barsubi,(long long)((int)0),nbarnz);
              ::mosek::fusion::Utils::Tools::arraycopy(_2552,(long long)((int)0),barsubj,(long long)((int)0),nbarnz);
              ::mosek::fusion::Utils::Tools::arraycopy(_2553,(long long)((int)0),barmatidx,(long long)((int)0),nbarnz);
            }
          }
          {}
        }
      }
      {}
      ::mosek::fusion::Utils::Tools::arraycopy(_2547,(long long)((int)0),barsubi,nbarnz,(long long)(_2550));
      ::mosek::fusion::Utils::Tools::arraycopy(_2548,(long long)((int)0),barsubj,nbarnz,(long long)(_2550));
      ::mosek::fusion::Utils::Tools::arraycopy(_2549,(long long)((int)0),barmatidx,nbarnz,(long long)(_2550));
      nbarnz += _2550;
    }
  }
  {}
}
void mosek::fusion::p_ConstraintCache::unchecked_add_l(std::shared_ptr< monty::ndarray< long long,1 > > _2555,std::shared_ptr< monty::ndarray< int,1 > > _2556,std::shared_ptr< monty::ndarray< double,1 > > _2557,std::shared_ptr< monty::ndarray< double,1 > > _2558){
  _checked_ptr_1<long long> _ptr__2555(_2555 ? _2555->raw() : nullptr, _2555 ? _2555->size(0) : 0);
  _checked_ptr_1<int> _ptr__2556(_2556 ? _2556->raw() : nullptr, _2556 ? _2556->size(0) : 0);
  _checked_ptr_1<double> _ptr__2557(_2557 ? _2557->raw() : nullptr, _2557 ? _2557->size(0) : 0);
  _checked_ptr_1<double> _ptr__2558(_2558 ? _2558->raw() : nullptr, _2558 ? _2558->size(0) : 0);
  long long _2559 = safe_add( nunordered,_ptr__2555[nrows] );
  long long _2560 = _ptr__2555[nrows];
  std::shared_ptr< monty::ndarray< int,1 > > _2561;
  _checked_ptr_1<int> _ptr__2561(_2561 ? _2561->raw() : nullptr,_2561 ? _2561->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _2562;
  _checked_ptr_1<int> _ptr__2562(_2562 ? _2562->raw() : nullptr,_2562 ? _2562->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _2563;
  _checked_ptr_1<double> _ptr__2563(_2563 ? _2563->raw() : nullptr,_2563 ? _2563->size(0) : 0);
  if (((NULL == buffer_cof.get()) || ((int)((buffer_cof)->size(0)) < _2559)))
  {
    {
      _2561 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2559)));
      _ptr__2561.update(_2561 ? _2561->raw() : nullptr, _2561 ? _2561->size(0) : 0);
      _2562 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2559)));
      _ptr__2562.update(_2562 ? _2562->raw() : nullptr, _2562 ? _2562->size(0) : 0);
      _2563 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_2559)));
      _ptr__2563.update(_2563 ? _2563->raw() : nullptr, _2563 ? _2563->size(0) : 0);
      if ((NULL != buffer_cof.get()))
      {
        {
          ::mosek::fusion::Utils::Tools::arraycopy(buffer_subi,(long long)0,_2561,(long long)0,nunordered);
          ::mosek::fusion::Utils::Tools::arraycopy(buffer_subj,(long long)0,_2562,(long long)0,nunordered);
          ::mosek::fusion::Utils::Tools::arraycopy(buffer_cof,(long long)0,_2563,(long long)0,nunordered);
        }
      }
      {}
    }
  }
  else
  {
    {
      _2561 = buffer_subi;
      _ptr__2561.update(_2561 ? _2561->raw() : nullptr, _2561 ? _2561->size(0) : 0);
      _2562 = buffer_subj;
      _ptr__2562.update(_2562 ? _2562->raw() : nullptr, _2562 ? _2562->size(0) : 0);
      _2563 = buffer_cof;
      _ptr__2563.update(_2563 ? _2563->raw() : nullptr, _2563 ? _2563->size(0) : 0);
    }
  }
  int _9928 = (int)0;
  int _9929 = nrows;
  for (int _2564 = _9928; _2564 < _9929; ++_2564)
  {
    {
      long long _9930 = _ptr__2555[_2564];
      long long _9931 = _ptr__2555[safe_add( _2564,(int)1 )];
      for (long long _2565 = _9930; _2565 < _9931; ++_2565)
      {
        {
          _ptr__2561[safe_add( nunordered,_2565 )] = _2564;
        }
      }
    }
  }
  ::mosek::fusion::Utils::Tools::arraycopy(_2556,(long long)0,_2562,nunordered,_2560);
  ::mosek::fusion::Utils::Tools::arraycopy(_2557,(long long)0,_2563,nunordered,_2560);
  buffer_subi = _2561;
  buffer_subj = _2562;
  buffer_cof = _2563;
  if ((NULL != _2558.get()))
  {
    {
      int _9932 = (int)0;
      int _9933 = nrows;
      for (int _2566 = _9932; _2566 < _9933; ++_2566)
      {
        {
          ((*bfix)(_2566)) = (((*bfix)(_2566)) + _ptr__2558[_2566]);
        }
      }
    }
  }
  {}
  nunordered = _2559;
}
void mosek::fusion::ConstraintCache :: add(std::shared_ptr< monty::ndarray< long long,1 > > _2567,std::shared_ptr< monty::ndarray< int,1 > > _2568,std::shared_ptr< monty::ndarray< double,1 > > _2569,std::shared_ptr< monty::ndarray< double,1 > > _2570) { mosek::fusion::p_ConstraintCache::_get_impl(this)->add(_2567,_2568,_2569,_2570); }void mosek::fusion::p_ConstraintCache::add(std::shared_ptr< monty::ndarray< long long,1 > > _2567,std::shared_ptr< monty::ndarray< int,1 > > _2568,std::shared_ptr< monty::ndarray< double,1 > > _2569,std::shared_ptr< monty::ndarray< double,1 > > _2570){
  _checked_ptr_1<long long> _ptr__2567(_2567 ? _2567->raw() : nullptr, _2567 ? _2567->size(0) : 0);
  _checked_ptr_1<int> _ptr__2568(_2568 ? _2568->raw() : nullptr, _2568 ? _2568->size(0) : 0);
  _checked_ptr_1<double> _ptr__2569(_2569 ? _2569->raw() : nullptr, _2569 ? _2569->size(0) : 0);
  _checked_ptr_1<double> _ptr__2570(_2570 ? _2570->raw() : nullptr, _2570 ? _2570->size(0) : 0);
  if ((((int)((_2567)->size(0)) != safe_add( nrows,(int)1 )) || ((NULL != _2570.get()) && ((int)((_2570)->size(0)) != nrows))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Mismatching expression lengths"));
    }
  }
  {}
  unchecked_add_l(_2567,_2568,_2569,_2570);
}
long long mosek::fusion::ConstraintCache :: flush(std::shared_ptr< monty::ndarray< int,1 > > _2571,std::shared_ptr< monty::ndarray< int,1 > > _2572,std::shared_ptr< monty::ndarray< double,1 > > _2573,std::shared_ptr< monty::ndarray< double,1 > > _2574) { return mosek::fusion::p_ConstraintCache::_get_impl(this)->flush(_2571,_2572,_2573,_2574); }long long mosek::fusion::p_ConstraintCache::flush(std::shared_ptr< monty::ndarray< int,1 > > _2571,std::shared_ptr< monty::ndarray< int,1 > > _2572,std::shared_ptr< monty::ndarray< double,1 > > _2573,std::shared_ptr< monty::ndarray< double,1 > > _2574){
  _checked_ptr_1<int> _ptr__2571(_2571 ? _2571->raw() : nullptr, _2571 ? _2571->size(0) : 0);
  _checked_ptr_1<int> _ptr__2572(_2572 ? _2572->raw() : nullptr, _2572 ? _2572->size(0) : 0);
  _checked_ptr_1<double> _ptr__2573(_2573 ? _2573->raw() : nullptr, _2573 ? _2573->size(0) : 0);
  _checked_ptr_1<double> _ptr__2574(_2574 ? _2574->raw() : nullptr, _2574 ? _2574->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _2575 = nullptr;
  _checked_ptr_1<long long> _ptr__2575(_2575 ? _2575->raw() : nullptr,_2575 ? _2575->size(0) : 0);
  if (((NULL != bfix.get()) && (NULL != _2574.get())))
  {
    {
      int _9934 = (int)0;
      int _9935 = nrows;
      for (int _2576 = _9934; _2576 < _9935; ++_2576)
      {
        {
          _ptr__2574[_2576] = ((*bfix)(_2576));
        }
      }
    }
  }
  {}
  if ((nunordered == (long long)0))
  {
    {
      return (long long)0;
    }
  }
  {}
  bool _2577 = false;
  {
    int _2578 = (int)1;
    while ( ((_2578 < nunordered) && ((((*buffer_subi)((_2578 - (int)1))) < ((*buffer_subi)(_2578))) || ((((*buffer_subi)((_2578 - (int)1))) == ((*buffer_subi)(_2578))) && (((*buffer_subj)((_2578 - (int)1))) <= ((*buffer_subj)(_2578)))))) )
    {
      {
        ++ _2578;
      }
    }
    _2577 = (_2578 == nunordered);
  }
  if ((!_2577))
  {
    {
      std::vector<long long> _9936;
      for (long long _2579 = (int)0, _9937 = nunordered; _2579 < _9937 ; ++_2579)
      {
        _9936.push_back(_2579);
      }
      auto _9938 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9936.size()),_9936.begin(),_9936.end()));
      _2575 = _9938;
      _ptr__2575.update(_2575 ? _2575->raw() : nullptr, _2575 ? _2575->size(0) : 0);
      ::mosek::fusion::p_CommonTools::argQsort(_2575,buffer_subi,buffer_subj,(long long)0,nunordered);
    }
  }
  {}
  long long _2580 = nnz;
  std::shared_ptr< monty::ndarray< int,1 > > _2581 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(safe_add( nunordered,_2580 ))));
  _checked_ptr_1<int> _ptr__2581(_2581 ? _2581->raw() : nullptr,_2581 ? _2581->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _2582 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(safe_add( nunordered,_2580 ))));
  _checked_ptr_1<int> _ptr__2582(_2582 ? _2582->raw() : nullptr,_2582 ? _2582->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _2583 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(safe_add( nunordered,_2580 ))));
  _checked_ptr_1<double> _ptr__2583(_2583 ? _2583->raw() : nullptr,_2583 ? _2583->size(0) : 0);
  long long _2584 = (long long)0;
  if (_2577)
  {
    {
      long long _2585 = (long long)0;
      int _2586 = (int)0;
      long long _2587 = nunordered;
      long long _2588 = _2580;
      int _2589 = (int)0;
      int _2590 = (int)0;
      while ( ((_2590 < _2588) && (_2589 < _2587)) )
      {
        {
          if (((((*subi)(_2590)) < ((*buffer_subi)(_2589))) || ((((*subi)(_2590)) == ((*buffer_subi)(_2589))) && (((*subj)(_2590)) < ((*buffer_subj)(_2589))))))
          {
            {
              _ptr__2581[_2586] = ((*subi)(_2590));
              _ptr__2582[_2586] = ((*subj)(_2590));
              _ptr__2583[_2586] = ((*cof)(_2590));
              ++ _2590;
              ++ _2586;
            }
          }
          else if(((((*subi)(_2590)) > ((*buffer_subi)(_2589))) || ((((*subi)(_2590)) == ((*buffer_subi)(_2589))) && (((*subj)(_2590)) > ((*buffer_subj)(_2589))))))
          {
            {
              _ptr__2581[_2586] = ((*buffer_subi)(_2589));
              _ptr__2582[_2586] = ((*buffer_subj)(_2589));
              _ptr__2583[_2586] = ((*buffer_cof)(_2589));
              _ptr__2571[_2584] = _ptr__2581[_2586];
              _ptr__2572[_2584] = _ptr__2582[_2586];
              _ptr__2573[_2584] = _ptr__2583[_2586];
              ++ _2584;
              ++ _2589;
              ++ _2586;
            }
          }
          else
          {
            {
              _ptr__2581[_2586] = ((*subi)(_2590));
              _ptr__2582[_2586] = ((*subj)(_2590));
              _ptr__2583[_2586] = ((*cof)(_2590));
              while ( ((_2590 < (int)((subi)->size(0))) && ((_2589 < (int)((buffer_subi)->size(0))) && ((((*subi)(_2590)) == ((*buffer_subi)(_2589))) && (((*subj)(_2590)) == ((*buffer_subj)(_2589)))))) )
              {
                {
                  _ptr__2583[_2586] = (_ptr__2583[_2586] + ((*buffer_cof)(_2589)));
                  ++ _2589;
                }
              }
              _ptr__2571[_2584] = _ptr__2581[_2586];
              _ptr__2572[_2584] = _ptr__2582[_2586];
              _ptr__2573[_2584] = _ptr__2583[_2586];
              ++ _2584;
              ++ _2590;
              ++ _2586;
            }
          }
        }
      }
      while ( (_2590 < _2588) )
      {
        {
          _ptr__2581[_2586] = ((*subi)(_2590));
          _ptr__2582[_2586] = ((*subj)(_2590));
          _ptr__2583[_2586] = ((*cof)(_2590));
          ++ _2590;
          ++ _2586;
        }
      }
      while ( (_2589 < _2587) )
      {
        {
          _ptr__2581[_2586] = ((*buffer_subi)(_2589));
          _ptr__2582[_2586] = ((*buffer_subj)(_2589));
          _ptr__2583[_2586] = ((*buffer_cof)(_2589));
          _ptr__2571[_2584] = _ptr__2581[_2586];
          _ptr__2572[_2584] = _ptr__2582[_2586];
          _ptr__2573[_2584] = _ptr__2583[_2586];
          ++ _2584;
          ++ _2589;
          ++ _2586;
        }
      }
      nnz = _2586;
    }
  }
  else
  {
    {
      long long _2591 = (long long)0;
      int _2592 = (int)0;
      long long _2593 = nunordered;
      long long _2594 = _2580;
      int _2595 = (int)0;
      int _2596 = (int)0;
      while ( ((_2596 < _2594) && (_2595 < _2593)) )
      {
        {
          if (((((*subi)(_2596)) < ((*buffer_subi)(_ptr__2575[_2595]))) || ((((*subi)(_2596)) == ((*buffer_subi)(_ptr__2575[_2595]))) && (((*subj)(_2596)) < ((*buffer_subj)(_ptr__2575[_2595]))))))
          {
            {
              _ptr__2581[_2592] = ((*subi)(_2596));
              _ptr__2582[_2592] = ((*subj)(_2596));
              _ptr__2583[_2592] = ((*cof)(_2596));
              ++ _2596;
              ++ _2592;
            }
          }
          else if(((((*subi)(_2596)) > ((*buffer_subi)(_ptr__2575[_2595]))) || ((((*subi)(_2596)) == ((*buffer_subi)(_ptr__2575[_2595]))) && (((*subj)(_2596)) > ((*buffer_subj)(_ptr__2575[_2595]))))))
          {
            {
              _ptr__2581[_2592] = ((*buffer_subi)(_ptr__2575[_2595]));
              _ptr__2582[_2592] = ((*buffer_subj)(_ptr__2575[_2595]));
              _ptr__2583[_2592] = ((*buffer_cof)(_ptr__2575[_2595]));
              _ptr__2571[_2584] = _ptr__2581[_2592];
              _ptr__2572[_2584] = _ptr__2582[_2592];
              _ptr__2573[_2584] = _ptr__2583[_2592];
              ++ _2584;
              ++ _2595;
              ++ _2592;
            }
          }
          else
          {
            {
              _ptr__2581[_2592] = ((*subi)(_2596));
              _ptr__2582[_2592] = ((*subj)(_2596));
              _ptr__2583[_2592] = ((*cof)(_2596));
              while ( ((((*subi)(_2596)) == ((*buffer_subi)(_ptr__2575[_2595]))) && (((*subj)(_2596)) == ((*buffer_subj)(_ptr__2575[_2595])))) )
              {
                {
                  _ptr__2583[_2592] = (_ptr__2583[_2592] + ((*buffer_cof)(_ptr__2575[_2595])));
                  ++ _2595;
                }
              }
              _ptr__2571[_2584] = _ptr__2581[_2592];
              _ptr__2572[_2584] = _ptr__2582[_2592];
              _ptr__2573[_2584] = _ptr__2583[_2592];
              ++ _2584;
              ++ _2596;
              ++ _2592;
            }
          }
        }
      }
      nnz = _2592;
    }
  }
  subi = _2581;
  subj = _2582;
  cof = _2583;
  nunordered = (long long)0;
  return _2584;
}
long long mosek::fusion::ConstraintCache :: numUnsorted() { return mosek::fusion::p_ConstraintCache::_get_impl(this)->numUnsorted(); }long long mosek::fusion::p_ConstraintCache::numUnsorted(){
  return nunordered;
}
monty::rc_ptr< ::mosek::fusion::ConstraintCache > mosek::fusion::p_ConstraintCache::__mosek_2fusion_2ConstraintCache__clone(){
  return ::mosek::fusion::p_ConstraintCache::_new_ConstraintCache(::mosek::fusion::ConstraintCache::t(_pubthis));
}
void mosek::fusion::p_ConstraintCache::destroy(){barmatidx.reset();barsubj.reset();barsubi.reset();buffer_subi.reset();buffer_subj.reset();buffer_cof.reset();bfix.reset();cof.reset();subi.reset();subj.reset();}void mosek::fusion::ConstraintCache::destroy() { mosek::fusion::p_ConstraintCache::_get_impl(this)->destroy(); }mosek::fusion::BoundInterfaceConstraint::BoundInterfaceConstraint(mosek::fusion::p_BoundInterfaceConstraint *_impl) : mosek::fusion::SliceConstraint(_impl) { /*std::cout << "BoundInterfaceConstraint()" << this << std::endl; */ }mosek::fusion::BoundInterfaceConstraint::~BoundInterfaceConstraint() {  /* std::cout << "~BoundInterfaceConstraint()" << this << std::endl << std::flush; */ }mosek::fusion::p_BoundInterfaceConstraint::p_BoundInterfaceConstraint  (::mosek::fusion::BoundInterfaceConstraint * _pubthis) :     mosek::fusion::p_SliceConstraint(_pubthis),    _pubthis(_pubthis){}mosek::fusion::BoundInterfaceConstraint::t mosek::fusion::p_BoundInterfaceConstraint::_new_BoundInterfaceConstraint  (monty::rc_ptr< ::mosek::fusion::Model > _2597,    std::shared_ptr< monty::ndarray< int,1 > > _2598,    std::shared_ptr< monty::ndarray< int,1 > > _2599,    bool _2600){ return new mosek::fusion::BoundInterfaceConstraint(_2597,_2598,_2599,_2600); }mosek::fusion::BoundInterfaceConstraint::BoundInterfaceConstraint  (monty::rc_ptr< ::mosek::fusion::Model > _2597,    std::shared_ptr< monty::ndarray< int,1 > > _2598,    std::shared_ptr< monty::ndarray< int,1 > > _2599,    bool _2600) :    BoundInterfaceConstraint(new mosek::fusion::p_BoundInterfaceConstraint(this)){ mosek::fusion::p_BoundInterfaceConstraint::_get_impl(this)->_initialize(_2597,_2598,_2599,_2600); }void mosek::fusion::p_BoundInterfaceConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _2597,    std::shared_ptr< monty::ndarray< int,1 > > _2598,    std::shared_ptr< monty::ndarray< int,1 > > _2599,    bool _2600){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__2598(_2598 ? _2598->raw() : nullptr, _2598 ? _2598->size(0) : 0);
    _checked_ptr_1<int> _ptr__2599(_2599 ? _2599->raw() : nullptr, _2599 ? _2599->size(0) : 0);
    mosek::fusion::p_SliceConstraint::_initialize(_2597,_2598,_2599);
    mosek::fusion::p_BoundInterfaceConstraint::_get_impl(::mosek::fusion::BoundInterfaceConstraint::t(_pubthis))->islower = _2600;
  }
}mosek::fusion::BoundInterfaceConstraint::t mosek::fusion::p_BoundInterfaceConstraint::_new_BoundInterfaceConstraint  (monty::rc_ptr< ::mosek::fusion::SliceConstraint > _2601,    bool _2602){ return new mosek::fusion::BoundInterfaceConstraint(_2601,_2602); }mosek::fusion::BoundInterfaceConstraint::BoundInterfaceConstraint  (monty::rc_ptr< ::mosek::fusion::SliceConstraint > _2601,    bool _2602) :    BoundInterfaceConstraint(new mosek::fusion::p_BoundInterfaceConstraint(this)){ mosek::fusion::p_BoundInterfaceConstraint::_get_impl(this)->_initialize(_2601,_2602); }void mosek::fusion::p_BoundInterfaceConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::SliceConstraint > _2601,    bool _2602){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_SliceConstraint::_initialize(_2601);
    mosek::fusion::p_BoundInterfaceConstraint::_get_impl(::mosek::fusion::BoundInterfaceConstraint::t(_pubthis))->islower = _2602;
  }
}std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::BoundInterfaceConstraint :: dual() { return mosek::fusion::p_BoundInterfaceConstraint::_get_impl(this)->dual(); }std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_BoundInterfaceConstraint::dual(){
  std::shared_ptr< monty::ndarray< double,1 > > _2603 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_pubthis->getSize())));
  _checked_ptr_1<double> _ptr__2603(_2603 ? _2603->raw() : nullptr,_2603 ? _2603->size(0) : 0);
  dual_lu((int)0,_2603,islower);
  return _2603;
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::BoundInterfaceConstraint :: __mosek_2fusion_2BoundInterfaceConstraint__slice(std::shared_ptr< monty::ndarray< int,1 > > _2604,std::shared_ptr< monty::ndarray< int,1 > > _2605) { return mosek::fusion::p_BoundInterfaceConstraint::_get_impl(this)->__mosek_2fusion_2BoundInterfaceConstraint__slice(_2604,_2605); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::BoundInterfaceConstraint::slice(std::shared_ptr< monty::ndarray< int,1 > > _2604,std::shared_ptr< monty::ndarray< int,1 > > _2605) { return __mosek_2fusion_2BoundInterfaceConstraint__slice(_2604,_2605); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::BoundInterfaceConstraint::__mosek_2fusion_2Constraint__slice(std::shared_ptr< monty::ndarray< int,1 > > _2604,std::shared_ptr< monty::ndarray< int,1 > > _2605) { return __mosek_2fusion_2BoundInterfaceConstraint__slice(_2604,_2605); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_BoundInterfaceConstraint::__mosek_2fusion_2BoundInterfaceConstraint__slice(std::shared_ptr< monty::ndarray< int,1 > > _2604,std::shared_ptr< monty::ndarray< int,1 > > _2605){
  _checked_ptr_1<int> _ptr__2604(_2604 ? _2604->raw() : nullptr, _2604 ? _2604->size(0) : 0);
  _checked_ptr_1<int> _ptr__2605(_2605 ? _2605->raw() : nullptr, _2605 ? _2605->size(0) : 0);
  monty::rc_ptr< ::mosek::fusion::Constraint > _2606 = ::mosek::fusion::p_Constraint::__mosek_2fusion_2Constraint__slice(_2604,_2605);
  return (__mosek_2fusion_2BoundInterfaceConstraint__from_(_2606)).as<::mosek::fusion::Constraint>();
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::BoundInterfaceConstraint :: __mosek_2fusion_2BoundInterfaceConstraint__slice(int _2607,int _2608) { return mosek::fusion::p_BoundInterfaceConstraint::_get_impl(this)->__mosek_2fusion_2BoundInterfaceConstraint__slice(_2607,_2608); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::BoundInterfaceConstraint::slice(int _2607,int _2608) { return __mosek_2fusion_2BoundInterfaceConstraint__slice(_2607,_2608); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::BoundInterfaceConstraint::__mosek_2fusion_2Constraint__slice(int _2607,int _2608) { return __mosek_2fusion_2BoundInterfaceConstraint__slice(_2607,_2608); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_BoundInterfaceConstraint::__mosek_2fusion_2BoundInterfaceConstraint__slice(int _2607,int _2608){
  monty::rc_ptr< ::mosek::fusion::Constraint > _2609 = ::mosek::fusion::p_Constraint::__mosek_2fusion_2Constraint__slice(_2607,_2608);
  return (__mosek_2fusion_2BoundInterfaceConstraint__from_(_2609)).as<::mosek::fusion::Constraint>();
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::BoundInterfaceConstraint :: __mosek_2fusion_2BoundInterfaceConstraint__index(std::shared_ptr< monty::ndarray< int,1 > > _2610) { return mosek::fusion::p_BoundInterfaceConstraint::_get_impl(this)->__mosek_2fusion_2BoundInterfaceConstraint__index(_2610); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::BoundInterfaceConstraint::index(std::shared_ptr< monty::ndarray< int,1 > > _2610) { return __mosek_2fusion_2BoundInterfaceConstraint__index(_2610); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::BoundInterfaceConstraint::__mosek_2fusion_2Constraint__index(std::shared_ptr< monty::ndarray< int,1 > > _2610) { return __mosek_2fusion_2BoundInterfaceConstraint__index(_2610); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_BoundInterfaceConstraint::__mosek_2fusion_2BoundInterfaceConstraint__index(std::shared_ptr< monty::ndarray< int,1 > > _2610){
  _checked_ptr_1<int> _ptr__2610(_2610 ? _2610->raw() : nullptr, _2610 ? _2610->size(0) : 0);
  monty::rc_ptr< ::mosek::fusion::Constraint > _2611 = ::mosek::fusion::p_Constraint::__mosek_2fusion_2Constraint__index(_2610);
  return (__mosek_2fusion_2BoundInterfaceConstraint__from_(_2611)).as<::mosek::fusion::Constraint>();
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::BoundInterfaceConstraint :: __mosek_2fusion_2BoundInterfaceConstraint__index(int _2612) { return mosek::fusion::p_BoundInterfaceConstraint::_get_impl(this)->__mosek_2fusion_2BoundInterfaceConstraint__index(_2612); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::BoundInterfaceConstraint::index(int _2612) { return __mosek_2fusion_2BoundInterfaceConstraint__index(_2612); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::BoundInterfaceConstraint::__mosek_2fusion_2Constraint__index(int _2612) { return __mosek_2fusion_2BoundInterfaceConstraint__index(_2612); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_BoundInterfaceConstraint::__mosek_2fusion_2BoundInterfaceConstraint__index(int _2612){
  monty::rc_ptr< ::mosek::fusion::Constraint > _2613 = ::mosek::fusion::p_Constraint::__mosek_2fusion_2Constraint__index(_2612);
  return (__mosek_2fusion_2BoundInterfaceConstraint__from_(_2613)).as<::mosek::fusion::Constraint>();
}
monty::rc_ptr< ::mosek::fusion::BoundInterfaceConstraint > mosek::fusion::p_BoundInterfaceConstraint::__mosek_2fusion_2BoundInterfaceConstraint__from_(monty::rc_ptr< ::mosek::fusion::Constraint > _2614){
  monty::rc_ptr< ::mosek::fusion::Constraint > _9939 = _2614;
  if (false) {}
  else if (nullptr != dynamic_cast<::mosek::fusion::SliceConstraint*>(_9939.get()))
  {
    ::mosek::fusion::SliceConstraint::t _2615 (dynamic_cast<::mosek::fusion::SliceConstraint*>(_9939.get()));
    {
      return ::mosek::fusion::p_BoundInterfaceConstraint::_new_BoundInterfaceConstraint(_2615,islower);
    }
  }
  else
  {
    mosek::fusion::Constraint::t _2616 = _9939;
    {
      return nullptr;
    }
  }
}
void mosek::fusion::p_BoundInterfaceConstraint::destroy(){}void mosek::fusion::BoundInterfaceConstraint::destroy() { mosek::fusion::p_BoundInterfaceConstraint::_get_impl(this)->destroy(); }mosek::fusion::SliceConstraint::SliceConstraint(mosek::fusion::p_SliceConstraint *_impl) : mosek::fusion::Constraint(_impl) { /*std::cout << "SliceConstraint()" << this << std::endl; */ }mosek::fusion::SliceConstraint::~SliceConstraint() {  /* std::cout << "~SliceConstraint()" << this << std::endl << std::flush; */ }mosek::fusion::p_SliceConstraint::p_SliceConstraint  (::mosek::fusion::SliceConstraint * _pubthis) :     mosek::fusion::p_Constraint(_pubthis),    _pubthis(_pubthis){}mosek::fusion::SliceConstraint::t mosek::fusion::p_SliceConstraint::_new_SliceConstraint  (monty::rc_ptr< ::mosek::fusion::SliceConstraint > _2617){ return new mosek::fusion::SliceConstraint(_2617); }mosek::fusion::SliceConstraint::SliceConstraint  (monty::rc_ptr< ::mosek::fusion::SliceConstraint > _2617) :    SliceConstraint(new mosek::fusion::p_SliceConstraint(this)){ mosek::fusion::p_SliceConstraint::_get_impl(this)->_initialize(_2617); }void mosek::fusion::p_SliceConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::SliceConstraint > _2617){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_Constraint::_initialize(_2617,_2617->__mosek_2fusion_2Constraint__getModel());
  }
}mosek::fusion::SliceConstraint::t mosek::fusion::p_SliceConstraint::_new_SliceConstraint  (monty::rc_ptr< ::mosek::fusion::Model > _2618,    std::shared_ptr< monty::ndarray< int,1 > > _2619,    std::shared_ptr< monty::ndarray< int,1 > > _2620){ return new mosek::fusion::SliceConstraint(_2618,_2619,_2620); }mosek::fusion::SliceConstraint::SliceConstraint  (monty::rc_ptr< ::mosek::fusion::Model > _2618,    std::shared_ptr< monty::ndarray< int,1 > > _2619,    std::shared_ptr< monty::ndarray< int,1 > > _2620) :    SliceConstraint(new mosek::fusion::p_SliceConstraint(this)){ mosek::fusion::p_SliceConstraint::_get_impl(this)->_initialize(_2618,_2619,_2620); }void mosek::fusion::p_SliceConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _2618,    std::shared_ptr< monty::ndarray< int,1 > > _2619,    std::shared_ptr< monty::ndarray< int,1 > > _2620){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__2619(_2619 ? _2619->raw() : nullptr, _2619 ? _2619->size(0) : 0);
    _checked_ptr_1<int> _ptr__2620(_2620 ? _2620->raw() : nullptr, _2620 ? _2620->size(0) : 0);
    mosek::fusion::p_Constraint::_initialize(_2618,_2619,_2620);
  }
}std::string mosek::fusion::SliceConstraint :: toString() { return mosek::fusion::p_SliceConstraint::_get_impl(this)->toString(); }std::string mosek::fusion::p_SliceConstraint::toString(){
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2621 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  _2621->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("SliceConstraint()"));
  return _2621->toString();
}
void mosek::fusion::p_SliceConstraint::destroy(){}void mosek::fusion::SliceConstraint::destroy() { mosek::fusion::p_SliceConstraint::_get_impl(this)->destroy(); }mosek::fusion::RangedConstraint::RangedConstraint(mosek::fusion::p_RangedConstraint *_impl) : mosek::fusion::ModelConstraint(_impl) { /*std::cout << "RangedConstraint()" << this << std::endl; */ }mosek::fusion::RangedConstraint::~RangedConstraint() {  /* std::cout << "~RangedConstraint()" << this << std::endl << std::flush; */ }mosek::fusion::p_RangedConstraint::p_RangedConstraint  (::mosek::fusion::RangedConstraint * _pubthis) :     mosek::fusion::p_ModelConstraint(_pubthis),    _pubthis(_pubthis){}mosek::fusion::RangedConstraint::t mosek::fusion::p_RangedConstraint::_new_RangedConstraint  (monty::rc_ptr< ::mosek::fusion::RangedConstraint > _2622,    monty::rc_ptr< ::mosek::fusion::Model > _2623){ return new mosek::fusion::RangedConstraint(_2622,_2623); }mosek::fusion::RangedConstraint::RangedConstraint  (monty::rc_ptr< ::mosek::fusion::RangedConstraint > _2622,    monty::rc_ptr< ::mosek::fusion::Model > _2623) :    RangedConstraint(new mosek::fusion::p_RangedConstraint(this)){ mosek::fusion::p_RangedConstraint::_get_impl(this)->_initialize(_2622,_2623); }void mosek::fusion::p_RangedConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::RangedConstraint > _2622,    monty::rc_ptr< ::mosek::fusion::Model > _2623){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_ModelConstraint::_initialize(_2622,_2623);
    shape = mosek::fusion::p_RangedConstraint::_get_impl(_2622)->shape;
    nativeidxs = mosek::fusion::p_RangedConstraint::_get_impl(_2622)->nativeidxs;
  }
}mosek::fusion::RangedConstraint::t mosek::fusion::p_RangedConstraint::_new_RangedConstraint  (monty::rc_ptr< ::mosek::fusion::Model > _2624,    const std::string &  _2625,    std::shared_ptr< monty::ndarray< int,1 > > _2626,    std::shared_ptr< monty::ndarray< int,1 > > _2627,    int _2628){ return new mosek::fusion::RangedConstraint(_2624,_2625,_2626,_2627,_2628); }mosek::fusion::RangedConstraint::RangedConstraint  (monty::rc_ptr< ::mosek::fusion::Model > _2624,    const std::string &  _2625,    std::shared_ptr< monty::ndarray< int,1 > > _2626,    std::shared_ptr< monty::ndarray< int,1 > > _2627,    int _2628) :    RangedConstraint(new mosek::fusion::p_RangedConstraint(this)){ mosek::fusion::p_RangedConstraint::_get_impl(this)->_initialize(_2624,_2625,_2626,_2627,_2628); }void mosek::fusion::p_RangedConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _2624,    const std::string &  _2625,    std::shared_ptr< monty::ndarray< int,1 > > _2626,    std::shared_ptr< monty::ndarray< int,1 > > _2627,    int _2628){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__2626(_2626 ? _2626->raw() : nullptr, _2626 ? _2626->size(0) : 0);
    _checked_ptr_1<int> _ptr__2627(_2627 ? _2627->raw() : nullptr, _2627 ? _2627->size(0) : 0);
    mosek::fusion::p_ModelConstraint::_initialize(_2624,_2625,_2626,_2627,_2628);
    mosek::fusion::p_RangedConstraint::_get_impl(::mosek::fusion::RangedConstraint::t(_pubthis))->shape = _2626;
    mosek::fusion::p_RangedConstraint::_get_impl(::mosek::fusion::RangedConstraint::t(_pubthis))->nativeidxs = _2627;
  }
}monty::rc_ptr< ::mosek::fusion::BoundInterfaceConstraint > mosek::fusion::RangedConstraint :: __mosek_2fusion_2RangedConstraint__upperBoundCon() { return mosek::fusion::p_RangedConstraint::_get_impl(this)->__mosek_2fusion_2RangedConstraint__upperBoundCon(); }monty::rc_ptr< ::mosek::fusion::BoundInterfaceConstraint > mosek::fusion::RangedConstraint::upperBoundCon() { return __mosek_2fusion_2RangedConstraint__upperBoundCon(); }
monty::rc_ptr< ::mosek::fusion::BoundInterfaceConstraint > mosek::fusion::p_RangedConstraint::__mosek_2fusion_2RangedConstraint__upperBoundCon(){
  return ::mosek::fusion::p_BoundInterfaceConstraint::_new_BoundInterfaceConstraint(_pubthis->__mosek_2fusion_2Constraint__getModel(),shape,nativeidxs,false);
}
monty::rc_ptr< ::mosek::fusion::BoundInterfaceConstraint > mosek::fusion::RangedConstraint :: __mosek_2fusion_2RangedConstraint__lowerBoundCon() { return mosek::fusion::p_RangedConstraint::_get_impl(this)->__mosek_2fusion_2RangedConstraint__lowerBoundCon(); }monty::rc_ptr< ::mosek::fusion::BoundInterfaceConstraint > mosek::fusion::RangedConstraint::lowerBoundCon() { return __mosek_2fusion_2RangedConstraint__lowerBoundCon(); }
monty::rc_ptr< ::mosek::fusion::BoundInterfaceConstraint > mosek::fusion::p_RangedConstraint::__mosek_2fusion_2RangedConstraint__lowerBoundCon(){
  return ::mosek::fusion::p_BoundInterfaceConstraint::_new_BoundInterfaceConstraint(_pubthis->__mosek_2fusion_2Constraint__getModel(),shape,nativeidxs,true);
}
monty::rc_ptr< ::mosek::fusion::ModelConstraint > mosek::fusion::p_RangedConstraint::__mosek_2fusion_2RangedConstraint__clone(monty::rc_ptr< ::mosek::fusion::Model > _2629){
  return (::mosek::fusion::p_RangedConstraint::_new_RangedConstraint(::mosek::fusion::RangedConstraint::t(_pubthis),_2629)).as<::mosek::fusion::ModelConstraint>();
}
void mosek::fusion::p_RangedConstraint::destroy(){nativeidxs.reset();shape.reset();}void mosek::fusion::RangedConstraint::destroy() { mosek::fusion::p_RangedConstraint::_get_impl(this)->destroy(); }mosek::fusion::ConicConstraint::ConicConstraint(mosek::fusion::p_ConicConstraint *_impl) : mosek::fusion::ModelConstraint(_impl) { /*std::cout << "ConicConstraint()" << this << std::endl; */ }mosek::fusion::ConicConstraint::~ConicConstraint() {  /* std::cout << "~ConicConstraint()" << this << std::endl << std::flush; */ }mosek::fusion::p_ConicConstraint::p_ConicConstraint  (::mosek::fusion::ConicConstraint * _pubthis) :     mosek::fusion::p_ModelConstraint(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ConicConstraint::t mosek::fusion::p_ConicConstraint::_new_ConicConstraint  (monty::rc_ptr< ::mosek::fusion::ConicConstraint > _2630,    monty::rc_ptr< ::mosek::fusion::Model > _2631){ return new mosek::fusion::ConicConstraint(_2630,_2631); }mosek::fusion::ConicConstraint::ConicConstraint  (monty::rc_ptr< ::mosek::fusion::ConicConstraint > _2630,    monty::rc_ptr< ::mosek::fusion::Model > _2631) :    ConicConstraint(new mosek::fusion::p_ConicConstraint(this)){ mosek::fusion::p_ConicConstraint::_get_impl(this)->_initialize(_2630,_2631); }void mosek::fusion::p_ConicConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::ConicConstraint > _2630,    monty::rc_ptr< ::mosek::fusion::Model > _2631){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_ModelConstraint::_initialize(_2630,_2631);
    dom = mosek::fusion::p_ConicConstraint::_get_impl(_2630)->dom;
    conid = mosek::fusion::p_ConicConstraint::_get_impl(_2630)->conid;
    shape = mosek::fusion::p_ConicConstraint::_get_impl(_2630)->shape;
    name = mosek::fusion::p_ConicConstraint::_get_impl(_2630)->name;
    nativeidxs = mosek::fusion::p_ConicConstraint::_get_impl(_2630)->nativeidxs;
    nativeslack = mosek::fusion::p_ConicConstraint::_get_impl(_2630)->nativeslack;
    names_flushed = mosek::fusion::p_ConicConstraint::_get_impl(_2630)->names_flushed;
  }
}mosek::fusion::ConicConstraint::t mosek::fusion::p_ConicConstraint::_new_ConicConstraint  (monty::rc_ptr< ::mosek::fusion::Model > _2632,    const std::string &  _2633,    monty::rc_ptr< ::mosek::fusion::ConeDomain > _2634,    std::shared_ptr< monty::ndarray< int,1 > > _2635,    int _2636,    std::shared_ptr< monty::ndarray< int,1 > > _2637,    std::shared_ptr< monty::ndarray< int,1 > > _2638){ return new mosek::fusion::ConicConstraint(_2632,_2633,_2634,_2635,_2636,_2637,_2638); }mosek::fusion::ConicConstraint::ConicConstraint  (monty::rc_ptr< ::mosek::fusion::Model > _2632,    const std::string &  _2633,    monty::rc_ptr< ::mosek::fusion::ConeDomain > _2634,    std::shared_ptr< monty::ndarray< int,1 > > _2635,    int _2636,    std::shared_ptr< monty::ndarray< int,1 > > _2637,    std::shared_ptr< monty::ndarray< int,1 > > _2638) :    ConicConstraint(new mosek::fusion::p_ConicConstraint(this)){ mosek::fusion::p_ConicConstraint::_get_impl(this)->_initialize(_2632,_2633,_2634,_2635,_2636,_2637,_2638); }void mosek::fusion::p_ConicConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _2632,    const std::string &  _2633,    monty::rc_ptr< ::mosek::fusion::ConeDomain > _2634,    std::shared_ptr< monty::ndarray< int,1 > > _2635,    int _2636,    std::shared_ptr< monty::ndarray< int,1 > > _2637,    std::shared_ptr< monty::ndarray< int,1 > > _2638){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__2635(_2635 ? _2635->raw() : nullptr, _2635 ? _2635->size(0) : 0);
    _checked_ptr_1<int> _ptr__2637(_2637 ? _2637->raw() : nullptr, _2637 ? _2637->size(0) : 0);
    _checked_ptr_1<int> _ptr__2638(_2638 ? _2638->raw() : nullptr, _2638 ? _2638->size(0) : 0);
    mosek::fusion::p_ModelConstraint::_initialize(_2632,_2633,_2635,_2637,_2636);
    mosek::fusion::p_ConicConstraint::_get_impl(::mosek::fusion::ConicConstraint::t(_pubthis))->dom = _2634;
    mosek::fusion::p_ConicConstraint::_get_impl(::mosek::fusion::ConicConstraint::t(_pubthis))->shape = _2635;
    mosek::fusion::p_ConicConstraint::_get_impl(::mosek::fusion::ConicConstraint::t(_pubthis))->name = _2633;
    mosek::fusion::p_ConicConstraint::_get_impl(::mosek::fusion::ConicConstraint::t(_pubthis))->nativeidxs = _2637;
    mosek::fusion::p_ConicConstraint::_get_impl(::mosek::fusion::ConicConstraint::t(_pubthis))->nativeslack = _2638;
    mosek::fusion::p_ConicConstraint::_get_impl(::mosek::fusion::ConicConstraint::t(_pubthis))->conid = _2636;
    names_flushed = false;
  }
}void mosek::fusion::p_ConicConstraint::flushNames(){
  ::mosek::fusion::p_ModelConstraint::flushNames();
  int _2639 = (int)((nativeslack)->size(0));
  monty::rc_ptr< ::mosek::fusion::Model > _2640 = _pubthis->__mosek_2fusion_2Constraint__getModel();
  if (((!names_flushed) && ((int)((name).size()) > (int)0)))
  {
    {
      if (((int)((name).size()) == (int)0))
      {
        {
          int _9940 = (int)0;
          int _9941 = _2639;
          for (int _2641 = _9940; _2641 < _9941; ++_2641)
          {
            {
              mosek::fusion::p_Model::_get_impl(_2640.get())->task_var_name(((*nativeslack)(_2641)),std::string (""));
            }
          }
        }
      }
      else
      {
        {
          monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2642 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
          int _9942 = (int)0;
          int _9943 = _2639;
          for (int _2643 = _9942; _2643 < _9943; ++_2643)
          {
            {
              mosek::fusion::p_Model::_get_impl(_2640.get())->task_var_name(((*nativeslack)(_2643)),_2642->__mosek_2fusion_2Utils_2StringBuffer__clear()->__mosek_2fusion_2Utils_2StringBuffer__a(name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("["))->__mosek_2fusion_2Utils_2StringBuffer__a(::mosek::fusion::p_Set::indexToString(shape,(long long)(_2643)))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("].coneslack"))->toString());
            }
          }
        }
      }
      names_flushed = true;
    }
  }
  {}
}
std::string mosek::fusion::ConicConstraint :: toString() { return mosek::fusion::p_ConicConstraint::_get_impl(this)->toString(); }std::string mosek::fusion::p_ConicConstraint::toString(){
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2644 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  _2644->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ConicConstraint('"))->__mosek_2fusion_2Utils_2StringBuffer__a(name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("')"));
  return _2644->toString();
}
void mosek::fusion::p_ConicConstraint::domainToString(long long _2645,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2646){
  throw ::mosek::fusion::UnimplementedError(std::string ("ConicConstraint.domainToString"));
}
monty::rc_ptr< ::mosek::fusion::ModelConstraint > mosek::fusion::p_ConicConstraint::__mosek_2fusion_2ConicConstraint__clone(monty::rc_ptr< ::mosek::fusion::Model > _2647){
  return (::mosek::fusion::p_ConicConstraint::_new_ConicConstraint(::mosek::fusion::ConicConstraint::t(_pubthis),_2647)).as<::mosek::fusion::ModelConstraint>();
}
void mosek::fusion::p_ConicConstraint::destroy(){nativeslack.reset();nativeidxs.reset();shape.reset();dom.reset();}void mosek::fusion::ConicConstraint::destroy() { mosek::fusion::p_ConicConstraint::_get_impl(this)->destroy(); }mosek::fusion::LinearConstraint::LinearConstraint(mosek::fusion::p_LinearConstraint *_impl) : mosek::fusion::ModelConstraint(_impl) { /*std::cout << "LinearConstraint()" << this << std::endl; */ }mosek::fusion::LinearConstraint::~LinearConstraint() {  /* std::cout << "~LinearConstraint()" << this << std::endl << std::flush; */ }mosek::fusion::p_LinearConstraint::p_LinearConstraint  (::mosek::fusion::LinearConstraint * _pubthis) :     mosek::fusion::p_ModelConstraint(_pubthis),    _pubthis(_pubthis){}mosek::fusion::LinearConstraint::t mosek::fusion::p_LinearConstraint::_new_LinearConstraint  (monty::rc_ptr< ::mosek::fusion::LinearConstraint > _2648,    monty::rc_ptr< ::mosek::fusion::Model > _2649){ return new mosek::fusion::LinearConstraint(_2648,_2649); }mosek::fusion::LinearConstraint::LinearConstraint  (monty::rc_ptr< ::mosek::fusion::LinearConstraint > _2648,    monty::rc_ptr< ::mosek::fusion::Model > _2649) :    LinearConstraint(new mosek::fusion::p_LinearConstraint(this)){ mosek::fusion::p_LinearConstraint::_get_impl(this)->_initialize(_2648,_2649); }void mosek::fusion::p_LinearConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::LinearConstraint > _2648,    monty::rc_ptr< ::mosek::fusion::Model > _2649){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_ModelConstraint::_initialize(_2648,_2649);
    conid = mosek::fusion::p_LinearConstraint::_get_impl(_2648)->conid;
    name = mosek::fusion::p_LinearConstraint::_get_impl(_2648)->name;
  }
}mosek::fusion::LinearConstraint::t mosek::fusion::p_LinearConstraint::_new_LinearConstraint  (monty::rc_ptr< ::mosek::fusion::Model > _2650,    const std::string &  _2651,    int _2652,    std::shared_ptr< monty::ndarray< int,1 > > _2653,    std::shared_ptr< monty::ndarray< int,1 > > _2654){ return new mosek::fusion::LinearConstraint(_2650,_2651,_2652,_2653,_2654); }mosek::fusion::LinearConstraint::LinearConstraint  (monty::rc_ptr< ::mosek::fusion::Model > _2650,    const std::string &  _2651,    int _2652,    std::shared_ptr< monty::ndarray< int,1 > > _2653,    std::shared_ptr< monty::ndarray< int,1 > > _2654) :    LinearConstraint(new mosek::fusion::p_LinearConstraint(this)){ mosek::fusion::p_LinearConstraint::_get_impl(this)->_initialize(_2650,_2651,_2652,_2653,_2654); }void mosek::fusion::p_LinearConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _2650,    const std::string &  _2651,    int _2652,    std::shared_ptr< monty::ndarray< int,1 > > _2653,    std::shared_ptr< monty::ndarray< int,1 > > _2654){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__2653(_2653 ? _2653->raw() : nullptr, _2653 ? _2653->size(0) : 0);
    _checked_ptr_1<int> _ptr__2654(_2654 ? _2654->raw() : nullptr, _2654 ? _2654->size(0) : 0);
    mosek::fusion::p_ModelConstraint::_initialize(_2650,_2651,_2653,_2654,_2652);
    mosek::fusion::p_LinearConstraint::_get_impl(::mosek::fusion::LinearConstraint::t(_pubthis))->conid = _2652;
    mosek::fusion::p_LinearConstraint::_get_impl(::mosek::fusion::LinearConstraint::t(_pubthis))->name = _2651;
  }
}std::string mosek::fusion::LinearConstraint :: toString() { return mosek::fusion::p_LinearConstraint::_get_impl(this)->toString(); }std::string mosek::fusion::p_LinearConstraint::toString(){
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2655 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  _2655->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("LinearConstraint('"))->__mosek_2fusion_2Utils_2StringBuffer__a(name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("')"));
  return _2655->toString();
}
void mosek::fusion::p_LinearConstraint::domainToString(long long _2656,monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2657){
}
monty::rc_ptr< ::mosek::fusion::ModelConstraint > mosek::fusion::p_LinearConstraint::__mosek_2fusion_2LinearConstraint__clone(monty::rc_ptr< ::mosek::fusion::Model > _2658){
  return (::mosek::fusion::p_LinearConstraint::_new_LinearConstraint(::mosek::fusion::LinearConstraint::t(_pubthis),_2658)).as<::mosek::fusion::ModelConstraint>();
}
void mosek::fusion::p_LinearConstraint::destroy(){}void mosek::fusion::LinearConstraint::destroy() { mosek::fusion::p_LinearConstraint::_get_impl(this)->destroy(); }mosek::fusion::ModelConstraint::ModelConstraint(mosek::fusion::p_ModelConstraint *_impl) : mosek::fusion::Constraint(_impl) { /*std::cout << "ModelConstraint()" << this << std::endl; */ }mosek::fusion::ModelConstraint::~ModelConstraint() {  /* std::cout << "~ModelConstraint()" << this << std::endl << std::flush; */ }mosek::fusion::p_ModelConstraint::p_ModelConstraint  (::mosek::fusion::ModelConstraint * _pubthis) :     mosek::fusion::p_Constraint(_pubthis),    _pubthis(_pubthis){}void mosek::fusion::p_ModelConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::ModelConstraint > _2659,    monty::rc_ptr< ::mosek::fusion::Model > _2660){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_Constraint::_initialize(_2659,_2660);
    mosek::fusion::p_ModelConstraint::_get_impl(::mosek::fusion::ModelConstraint::t(_pubthis))->conid = mosek::fusion::p_ModelConstraint::_get_impl(_2659)->conid;
    name = mosek::fusion::p_ModelConstraint::_get_impl(_2659)->name;
    names_flushed = mosek::fusion::p_ModelConstraint::_get_impl(_2659)->names_flushed;
    nativeidxs = mosek::fusion::p_ModelConstraint::_get_impl(_2659)->nativeidxs;
    shape = mosek::fusion::p_ModelConstraint::_get_impl(_2659)->shape;
  }
}void mosek::fusion::p_ModelConstraint::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _2661,    const std::string &  _2662,    std::shared_ptr< monty::ndarray< int,1 > > _2663,    std::shared_ptr< monty::ndarray< int,1 > > _2664,    int _2665){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__2663(_2663 ? _2663->raw() : nullptr, _2663 ? _2663->size(0) : 0);
    _checked_ptr_1<int> _ptr__2664(_2664 ? _2664->raw() : nullptr, _2664 ? _2664->size(0) : 0);
    mosek::fusion::p_Constraint::_initialize(_2661,_2663,_2664);
    mosek::fusion::p_ModelConstraint::_get_impl(::mosek::fusion::ModelConstraint::t(_pubthis))->name = _2662;
    mosek::fusion::p_ModelConstraint::_get_impl(::mosek::fusion::ModelConstraint::t(_pubthis))->names_flushed = false;
    mosek::fusion::p_ModelConstraint::_get_impl(::mosek::fusion::ModelConstraint::t(_pubthis))->nativeidxs = _2664;
    mosek::fusion::p_ModelConstraint::_get_impl(::mosek::fusion::ModelConstraint::t(_pubthis))->shape = _2663;
    mosek::fusion::p_ModelConstraint::_get_impl(::mosek::fusion::ModelConstraint::t(_pubthis))->conid = _2665;
  }
}std::string mosek::fusion::ModelConstraint :: toString() { return mosek::fusion::p_ModelConstraint::_get_impl(this)->toString(); }std::string mosek::fusion::p_ModelConstraint::toString(){
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2666 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  _2666->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Constraint('"))->__mosek_2fusion_2Utils_2StringBuffer__a(name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("')"));
  return _2666->toString();
}
void mosek::fusion::p_ModelConstraint::flushNames(){
  monty::rc_ptr< ::mosek::fusion::Model > _2667 = _pubthis->__mosek_2fusion_2Constraint__getModel();
  if ((!names_flushed))
  {
    {
      if ((_pubthis->getSize() == (int)0))
      {
        {
          names_flushed = true;
        }
      }
      else
      {
        {
          if (((int)((name).size()) == (int)0))
          {
            {
              mosek::fusion::p_Model::_get_impl(_2667.get())->connames(nativeidxs,std::string (""),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_pubthis->getSize())}),std::shared_ptr< monty::ndarray< long long,1 > >(nullptr));
            }
          }
          else
          {
            {
              monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2668 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
              _2668->__mosek_2fusion_2Utils_2StringBuffer__a(name)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("["));
              if ((_pubthis->getND() > (int)0))
              {
                {
                  _2668->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("%0"));
                  int _9944 = (int)1;
                  int _9945 = _pubthis->getND();
                  for (int _2669 = _9944; _2669 < _9945; ++_2669)
                  {
                    {
                      _2668->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (",%"))->__mosek_2fusion_2Utils_2StringBuffer__a(_2669);
                    }
                  }
                }
              }
              {}
              _2668->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("]"));
              std::shared_ptr< monty::ndarray< int,1 > > _9946;
              bool _9947 = (_pubthis->getND() > (int)0);
              if (_9947)
              {
                _9946 = _pubthis->getShape();
              }
              else
              {
                _9946 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)1)});
              }
              mosek::fusion::p_Model::_get_impl(_2667.get())->connames(nativeidxs,_2668->toString(),_9946,std::shared_ptr< monty::ndarray< long long,1 > >(nullptr));
              names_flushed = true;
            }
          }
        }
      }
    }
  }
  {}
}
void mosek::fusion::ModelConstraint :: remove() { mosek::fusion::p_ModelConstraint::_get_impl(this)->remove(); }void mosek::fusion::p_ModelConstraint::remove(){
  mosek::fusion::p_Model::_get_impl(_pubthis->__mosek_2fusion_2Constraint__getModel().get())->removeConstraintBlock(conid);
}
void mosek::fusion::p_ModelConstraint::destroy(){shape.reset();nativeidxs.reset();}void mosek::fusion::ModelConstraint::destroy() { mosek::fusion::p_ModelConstraint::_get_impl(this)->destroy(); }mosek::fusion::Constraint::Constraint(mosek::fusion::p_Constraint *_impl) : _impl(_impl) { /*std::cout << "Constraint() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::Constraint::~Constraint() { delete _impl; _impl = nullptr; }mosek::fusion::p_Constraint::p_Constraint  (::mosek::fusion::Constraint * _pubthis) :     _pubthis(_pubthis){}void mosek::fusion::p_Constraint::_initialize  (monty::rc_ptr< ::mosek::fusion::Constraint > _2671,    monty::rc_ptr< ::mosek::fusion::Model > _2672){monty::rc_reserve __reserve_this(_pubthis);   {
    model = _2672;
    shape = mosek::fusion::p_Constraint::_get_impl(_2671)->shape;
    nativeidxs = mosek::fusion::p_Constraint::_get_impl(_2671)->nativeidxs;
  }
}void mosek::fusion::p_Constraint::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _2673,    std::shared_ptr< monty::ndarray< int,1 > > _2674,    std::shared_ptr< monty::ndarray< int,1 > > _2675){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__2674(_2674 ? _2674->raw() : nullptr, _2674 ? _2674->size(0) : 0);
    _checked_ptr_1<int> _ptr__2675(_2675 ? _2675->raw() : nullptr, _2675 ? _2675->size(0) : 0);
    mosek::fusion::p_Constraint::_get_impl(::mosek::fusion::Constraint::t(_pubthis))->model = _2673;
    mosek::fusion::p_Constraint::_get_impl(::mosek::fusion::Constraint::t(_pubthis))->shape = _2674;
    mosek::fusion::p_Constraint::_get_impl(::mosek::fusion::Constraint::t(_pubthis))->nativeidxs = _2675;
  }
}std::string mosek::fusion::Constraint :: toString() { return mosek::fusion::p_Constraint::_get_impl(this)->toString(); }std::string mosek::fusion::p_Constraint::toString(){
  throw ::mosek::fusion::UnimplementedError(std::string ("Constraint.toString"));
}
void mosek::fusion::p_Constraint::toStringArray(std::shared_ptr< monty::ndarray< long long,1 > > _2676,long long _2677,std::shared_ptr< monty::ndarray< std::string,1 > > _2678){
  _checked_ptr_1<long long> _ptr__2676(_2676 ? _2676->raw() : nullptr, _2676 ? _2676->size(0) : 0);
}
void mosek::fusion::p_Constraint::dual_lu(int _2679,std::shared_ptr< monty::ndarray< double,1 > > _2680,bool _2681){
  _checked_ptr_1<double> _ptr__2680(_2680 ? _2680->raw() : nullptr, _2680 ? _2680->size(0) : 0);
  model->getConstraintDuals(_2681,nativeidxs,_2680,_2679);
}
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::Constraint :: dual() { return mosek::fusion::p_Constraint::_get_impl(this)->dual(); }std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Constraint::dual(){
  std::shared_ptr< monty::ndarray< double,1 > > _2682 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)((nativeidxs)->size(0)))));
  _checked_ptr_1<double> _ptr__2682(_2682 ? _2682->raw() : nullptr,_2682 ? _2682->size(0) : 0);
  values(false,(int)0,_2682);
  return _2682;
}
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::Constraint :: level() { return mosek::fusion::p_Constraint::_get_impl(this)->level(); }std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_Constraint::level(){
  std::shared_ptr< monty::ndarray< double,1 > > _2683 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)((nativeidxs)->size(0)))));
  _checked_ptr_1<double> _ptr__2683(_2683 ? _2683->raw() : nullptr,_2683 ? _2683->size(0) : 0);
  values(true,(int)0,_2683);
  return _2683;
}
void mosek::fusion::p_Constraint::values(bool _2684,int _2685,std::shared_ptr< monty::ndarray< double,1 > > _2686){
  _checked_ptr_1<double> _ptr__2686(_2686 ? _2686->raw() : nullptr, _2686 ? _2686->size(0) : 0);
  model->getConstraintValues(_2684,nativeidxs,_2686,_2685);
}
void mosek::fusion::Constraint :: remove() { mosek::fusion::p_Constraint::_get_impl(this)->remove(); }void mosek::fusion::p_Constraint::remove(){
  throw ::mosek::fusion::DeletionError(std::string ("Only original constraints can be removed"));
}
void mosek::fusion::Constraint :: update(std::shared_ptr< monty::ndarray< double,1 > > _2687) { mosek::fusion::p_Constraint::_get_impl(this)->update(_2687); }void mosek::fusion::p_Constraint::update(std::shared_ptr< monty::ndarray< double,1 > > _2687){
  _checked_ptr_1<double> _ptr__2687(_2687 ? _2687->raw() : nullptr, _2687 ? _2687->size(0) : 0);
  _pubthis->update(::mosek::fusion::p_Expr::reshape(::mosek::fusion::p_Expr::constTerm(_2687),_pubthis->getShape()),(::mosek::fusion::p_NilVariable::_new_NilVariable()).as<::mosek::fusion::Variable>(),true);
}
void mosek::fusion::Constraint :: update(monty::rc_ptr< ::mosek::fusion::Expression > _2688) { mosek::fusion::p_Constraint::_get_impl(this)->update(_2688); }void mosek::fusion::p_Constraint::update(monty::rc_ptr< ::mosek::fusion::Expression > _2688){
  std::shared_ptr< monty::ndarray< int,1 > > _2689 = _2688->getShape();
  _checked_ptr_1<int> _ptr__2689(_2689 ? _2689->raw() : nullptr,_2689 ? _2689->size(0) : 0);
  if (((int)((shape)->size(0)) < (int)((_2689)->size(0))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Expression shape does not match constraint"));
    }
  }
  {}
  int _9948 = (int)0;
  int _9949 = (int)((_2689)->size(0));
  for (int _2690 = _9948; _2690 < _9949; ++_2690)
  {
    {
      if ((_ptr__2689[_2690] != ((*shape)(_2690))))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Expression shape does not match constraint"));
        }
      }
      {}
    }
  }
  int _9950 = (int)((_2689)->size(0));
  int _9951 = (int)((shape)->size(0));
  for (int _2691 = _9950; _2691 < _9951; ++_2691)
  {
    {
      if ((((*shape)(_2691)) != (int)1))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Expression shape does not match constraint"));
        }
      }
      {}
    }
  }
  mosek::fusion::p_Model::_get_impl(model.get())->update(nativeidxs,_2688);
}
void mosek::fusion::Constraint :: update(monty::rc_ptr< ::mosek::fusion::Expression > _2692,monty::rc_ptr< ::mosek::fusion::Variable > _2693,bool _2694) { mosek::fusion::p_Constraint::_get_impl(this)->update(_2692,_2693,_2694); }void mosek::fusion::p_Constraint::update(monty::rc_ptr< ::mosek::fusion::Expression > _2692,monty::rc_ptr< ::mosek::fusion::Variable > _2693,bool _2694){
  int _2695 = _pubthis->getND();
  std::shared_ptr< monty::ndarray< int,1 > > _2696 = _2692->getShape();
  _checked_ptr_1<int> _ptr__2696(_2696 ? _2696->raw() : nullptr,_2696 ? _2696->size(0) : 0);
  if ((_2695 < (int)((_2696)->size(0))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Expression shape does not match constraint"));
    }
  }
  {}
  int _9952 = (int)0;
  int _9953 = (int)((_2696)->size(0));
  for (int _2697 = _9952; _2697 < _9953; ++_2697)
  {
    {
      if ((_ptr__2696[_2697] != ((*shape)(_2697))))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Expression shape does not match constraint"));
        }
      }
      {}
    }
  }
  int _9954 = (int)((_2696)->size(0));
  int _9955 = (int)((shape)->size(0));
  for (int _2698 = _9954; _2698 < _9955; ++_2698)
  {
    {
      if ((((*shape)(_2698)) != (int)1))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Expression shape does not match constraint"));
        }
      }
      {}
    }
  }
  int _2699 = _2693->numInst();
  std::shared_ptr< monty::ndarray< long long,1 > > _2700 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2699)));
  _checked_ptr_1<long long> _ptr__2700(_2700 ? _2700->raw() : nullptr,_2700 ? _2700->size(0) : 0);
  if ((_2699 < _2693->getSize()))
  {
    {
      std::shared_ptr< monty::ndarray< long long,1 > > _2701 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2699)));
      _checked_ptr_1<long long> _ptr__2701(_2701 ? _2701->raw() : nullptr,_2701 ? _2701->size(0) : 0);
      _2693->inst((int)0,_2701,(int)0,_2700);
    }
  }
  else
  {
    {
      _2693->inst((int)0,_2700);
    }
  }
  int _9956 = (int)0;
  int _9957 = _2699;
  for (int _2702 = _9956; _2702 < _9957; ++_2702)
  {
    {
      if ((_ptr__2700[_2702] < (int)0))
      {
        {
          throw ::mosek::fusion::UpdateError(std::string ("Semidefinite terms cannot be updated"));
        }
      }
      {}
    }
  }
  std::shared_ptr< monty::ndarray< int,1 > > _2703;
  _checked_ptr_1<int> _ptr__2703(_2703 ? _2703->raw() : nullptr,_2703 ? _2703->size(0) : 0);
  {
    bool _2704 = true;
    int _9958 = (int)0;
    int _9959 = (_2699 - (int)1);
    for (int _2705 = _9958; _2705 < _9959; ++_2705)
    {
      {
        _2704 = (_2704 && (_ptr__2700[_2705] < _ptr__2700[safe_add( _2705,(int)1 )]));
      }
    }
    if (_2704)
    {
      {
        if ((!_2694))
        {
          {
            std::vector<int> _9960;
            for (int _2706 = (int)0, _9961 = _2699; _2706 < _9961 ; ++_2706)
            {
              _9960.push_back((int)_ptr__2700[_2706]);
            }
            auto _9962 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9960.size()),_9960.begin(),_9960.end()));
            _2703 = _9962;
            _ptr__2703.update(_2703 ? _2703->raw() : nullptr, _2703 ? _2703->size(0) : 0);
          }
        }
        else
        {
          {
            _2703 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(safe_add( _2699,(int)1 ))));
            _ptr__2703.update(_2703 ? _2703->raw() : nullptr, _2703 ? _2703->size(0) : 0);
            _ptr__2703[(int)0] = (int)0;
            int _9963 = (int)0;
            int _9964 = _2699;
            for (int _2707 = _9963; _2707 < _9964; ++_2707)
            {
              {
                _ptr__2703[safe_add( (int)1,_2707 )] = (int)_ptr__2700[_2707];
              }
            }
          }
        }
      }
    }
    else
    {
      {
        std::vector<long long> _9965;
        for (int _2709 = (int)0, _9966 = _2699; _2709 < _9966 ; ++_2709)
        {
          _9965.push_back(_2709);
        }
        auto _9967 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_9965.size()),_9965.begin(),_9965.end()));
        std::shared_ptr< monty::ndarray< long long,1 > > _2708 = _9967;
        _checked_ptr_1<long long> _ptr__2708(_2708 ? _2708->raw() : nullptr,_2708 ? _2708->size(0) : 0);
        ::mosek::fusion::p_CommonTools::argQsort(_2708,_2700,std::shared_ptr< monty::ndarray< long long,1 > >(nullptr),(long long)((int)0),(long long)(_2699));
        int _2710 = (int)1;
        int _9968 = (int)1;
        int _9969 = _2699;
        for (int _2711 = _9968; _2711 < _9969; ++_2711)
        {
          {
            if ((_ptr__2700[_ptr__2708[(_2711 - (int)1)]] < _ptr__2700[_ptr__2708[_2711]]))
            {
              {
                ++ _2710;
              }
            }
            {}
          }
        }
        if (_2694)
        {
          {
            _2710 += (int)1;
          }
        }
        {}
        _2703 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2710)));
        _ptr__2703.update(_2703 ? _2703->raw() : nullptr, _2703 ? _2703->size(0) : 0);
        int _2712 = (int)0;
        if (_2694)
        {
          {
            _ptr__2703[(int)0] = (int)0;
            ++ _2712;
          }
        }
        {}
        _ptr__2703[_2712] = (int)_ptr__2700[_ptr__2708[(int)0]];
        int _9970 = (int)1;
        int _9971 = _2699;
        for (int _2713 = _9970; _2713 < _9971; ++_2713)
        {
          {
            if ((_ptr__2700[(_2713 - (int)1)] < _ptr__2700[_2713]))
            {
              {
                _ptr__2703[_2712] = (int)_ptr__2700[_ptr__2708[_2713]];
                ++ _2712;
              }
            }
            {}
          }
        }
      }
    }
  }
  mosek::fusion::p_Model::_get_impl(model.get())->update(nativeidxs,_2692,_2703);
}
void mosek::fusion::Constraint :: update(monty::rc_ptr< ::mosek::fusion::Expression > _2714,monty::rc_ptr< ::mosek::fusion::Variable > _2715) { mosek::fusion::p_Constraint::_get_impl(this)->update(_2714,_2715); }void mosek::fusion::p_Constraint::update(monty::rc_ptr< ::mosek::fusion::Expression > _2714,monty::rc_ptr< ::mosek::fusion::Variable > _2715){
  _pubthis->update(_2714,_2715,false);
}
monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::Constraint :: __mosek_2fusion_2Constraint__get_model() { return mosek::fusion::p_Constraint::_get_impl(this)->__mosek_2fusion_2Constraint__get_model(); }monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::Constraint::get_model() { return __mosek_2fusion_2Constraint__get_model(); }
monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::p_Constraint::__mosek_2fusion_2Constraint__get_model(){
  return model;
}
int mosek::fusion::Constraint :: get_nd() { return mosek::fusion::p_Constraint::_get_impl(this)->get_nd(); }int mosek::fusion::p_Constraint::get_nd(){
  return (int)((shape)->size(0));
}
long long mosek::fusion::Constraint :: size() { return mosek::fusion::p_Constraint::_get_impl(this)->size(); }long long mosek::fusion::p_Constraint::size(){
  long long _2716 = (int)1;
  int _9972 = (int)0;
  int _9973 = (int)((shape)->size(0));
  for (int _2717 = _9972; _2717 < _9973; ++_2717)
  {
    {
      _2716 *= ((*shape)(_2717));
    }
  }
  return _2716;
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::stack  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > > _2718,    int _2719) { return mosek::fusion::p_Constraint::stack(_2718,_2719); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::stack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > > _2718,int _2719){
  return ::mosek::fusion::p_Constraint::dstack(_2718,_2719);
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::stack  ( monty::rc_ptr< ::mosek::fusion::Constraint > _2720,    monty::rc_ptr< ::mosek::fusion::Constraint > _2721,    monty::rc_ptr< ::mosek::fusion::Constraint > _2722,    int _2723) { return mosek::fusion::p_Constraint::stack(_2720,_2721,_2722,_2723); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::stack(monty::rc_ptr< ::mosek::fusion::Constraint > _2720,monty::rc_ptr< ::mosek::fusion::Constraint > _2721,monty::rc_ptr< ::mosek::fusion::Constraint > _2722,int _2723){
  return ::mosek::fusion::p_Constraint::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 >{::monty::rc_ptr<::mosek::fusion::Constraint>(_2720.get()),::monty::rc_ptr<::mosek::fusion::Constraint>(_2721.get()),::monty::rc_ptr<::mosek::fusion::Constraint>(_2722.get())}),_2723);
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::stack  ( monty::rc_ptr< ::mosek::fusion::Constraint > _2724,    monty::rc_ptr< ::mosek::fusion::Constraint > _2725,    int _2726) { return mosek::fusion::p_Constraint::stack(_2724,_2725,_2726); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::stack(monty::rc_ptr< ::mosek::fusion::Constraint > _2724,monty::rc_ptr< ::mosek::fusion::Constraint > _2725,int _2726){
  return ::mosek::fusion::p_Constraint::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 >{::monty::rc_ptr<::mosek::fusion::Constraint>(_2724.get()),::monty::rc_ptr<::mosek::fusion::Constraint>(_2725.get())}),_2726);
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::hstack  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > > _2727) { return mosek::fusion::p_Constraint::hstack(_2727); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::hstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > > _2727){
  return ::mosek::fusion::p_Constraint::dstack(_2727,(int)1);
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::vstack  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > > _2728) { return mosek::fusion::p_Constraint::vstack(_2728); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::vstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > > _2728){
  return ::mosek::fusion::p_Constraint::dstack(_2728,(int)0);
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::hstack  ( monty::rc_ptr< ::mosek::fusion::Constraint > _2729,    monty::rc_ptr< ::mosek::fusion::Constraint > _2730,    monty::rc_ptr< ::mosek::fusion::Constraint > _2731) { return mosek::fusion::p_Constraint::hstack(_2729,_2730,_2731); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::hstack(monty::rc_ptr< ::mosek::fusion::Constraint > _2729,monty::rc_ptr< ::mosek::fusion::Constraint > _2730,monty::rc_ptr< ::mosek::fusion::Constraint > _2731){
  return ::mosek::fusion::p_Constraint::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 >{::monty::rc_ptr<::mosek::fusion::Constraint>(_2729.get()),::monty::rc_ptr<::mosek::fusion::Constraint>(_2730.get()),::monty::rc_ptr<::mosek::fusion::Constraint>(_2731.get())}),(int)1);
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::vstack  ( monty::rc_ptr< ::mosek::fusion::Constraint > _2732,    monty::rc_ptr< ::mosek::fusion::Constraint > _2733,    monty::rc_ptr< ::mosek::fusion::Constraint > _2734) { return mosek::fusion::p_Constraint::vstack(_2732,_2733,_2734); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::vstack(monty::rc_ptr< ::mosek::fusion::Constraint > _2732,monty::rc_ptr< ::mosek::fusion::Constraint > _2733,monty::rc_ptr< ::mosek::fusion::Constraint > _2734){
  return ::mosek::fusion::p_Constraint::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 >{::monty::rc_ptr<::mosek::fusion::Constraint>(_2732.get()),::monty::rc_ptr<::mosek::fusion::Constraint>(_2733.get()),::monty::rc_ptr<::mosek::fusion::Constraint>(_2734.get())}),(int)0);
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::hstack  ( monty::rc_ptr< ::mosek::fusion::Constraint > _2735,    monty::rc_ptr< ::mosek::fusion::Constraint > _2736) { return mosek::fusion::p_Constraint::hstack(_2735,_2736); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::hstack(monty::rc_ptr< ::mosek::fusion::Constraint > _2735,monty::rc_ptr< ::mosek::fusion::Constraint > _2736){
  return ::mosek::fusion::p_Constraint::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 >{::monty::rc_ptr<::mosek::fusion::Constraint>(_2735.get()),::monty::rc_ptr<::mosek::fusion::Constraint>(_2736.get())}),(int)1);
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::vstack  ( monty::rc_ptr< ::mosek::fusion::Constraint > _2737,    monty::rc_ptr< ::mosek::fusion::Constraint > _2738) { return mosek::fusion::p_Constraint::vstack(_2737,_2738); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::vstack(monty::rc_ptr< ::mosek::fusion::Constraint > _2737,monty::rc_ptr< ::mosek::fusion::Constraint > _2738){
  return ::mosek::fusion::p_Constraint::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 >{::monty::rc_ptr<::mosek::fusion::Constraint>(_2737.get()),::monty::rc_ptr<::mosek::fusion::Constraint>(_2738.get())}),(int)0);
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Constraint >,1 > > _2739,int _2740){
  monty::rc_ptr< ::mosek::fusion::Model > _2741 = nullptr;
  {
    int _9974 = (int)0;
    int _9975 = (int)((_2739)->size(0));
    for (int _2742 = _9974; _2742 < _9975; ++_2742)
    {
      {
        if ((NULL == _2741.get()))
        {
          {
            _2741 = ((*_2739)(_2742))->__mosek_2fusion_2Constraint__getModel();
          }
        }
        else if(((NULL != mosek::fusion::p_Constraint::_get_impl(((*_2739)(_2742)))->model.get()) && (mosek::fusion::p_Constraint::_get_impl(((*_2739)(_2742)))->model != _2741)))
        {
          {
            monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2743 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
            std::string _9976;
            bool _9977 = ((int)((mosek::fusion::p_Model::_get_impl(_2741.get())->getName()).size()) > (int)0);
            if (_9977)
            {
              _9976 = mosek::fusion::p_Model::_get_impl(_2741.get())->getName();
            }
            else
            {
              _9976 = std::string ("?");
            }
            std::string _2744 = _9976;
            std::string _9978;
            bool _9979 = ((int)((mosek::fusion::p_Model::_get_impl(((*_2739)(_2742))->__mosek_2fusion_2Constraint__getModel().get())->getName()).size()) > (int)0);
            if (_9979)
            {
              _9978 = mosek::fusion::p_Model::_get_impl(((*_2739)(_2742))->__mosek_2fusion_2Constraint__getModel().get())->getName();
            }
            else
            {
              _9978 = std::string ("?");
            }
            std::string _2745 = _9978;
            _2743->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Constraints belong to different models: '"))->__mosek_2fusion_2Utils_2StringBuffer__a(_2744)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("' and '"))->__mosek_2fusion_2Utils_2StringBuffer__a(_2745)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("'"));
            throw ::mosek::fusion::ModelError(_2743->toString());
          }
        }
        {}
      }
    }
  }
  if (((int)((_2739)->size(0)) == (int)0))
  {
    {
      return (::mosek::fusion::p_SliceConstraint::_new_SliceConstraint(nullptr,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)0)}),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))))).as<::mosek::fusion::Constraint>();
    }
  }
  else if(((int)((_2739)->size(0)) == (int)1))
  {
    {
      return ((*_2739)((int)1));
    }
  }
  else
  {
    {
      int _2746 = (int)((_2739)->size(0));
      int _2747 = (int)1;
      int _9980 = (int)0;
      int _9981 = _2746;
      for (int _2748 = _9980; _2748 < _9981; ++_2748)
      {
        {
          int _9982;
          bool _9983 = (((*_2739)(_2748))->getND() > _2747);
          if (_9983)
          {
            _9982 = ((*_2739)(_2748))->getND();
          }
          else
          {
            _9982 = _2747;
          }
          _2747 = _9982;
        }
      }
      if ((_2740 == _2747))
      {
        {
          ++ _2747;
        }
      }
      {}
      std::shared_ptr< monty::ndarray< int,2 > > _2749 = std::shared_ptr< monty::ndarray< int,2 > >(new monty::ndarray< int,2 >(monty::shape(_2746,_2747)));
      int _9984 = (int)0;
      int _9985 = _2746;
      for (int _2750 = _9984; _2750 < _9985; ++_2750)
      {
        {
          int _9986 = (int)0;
          int _9987 = _2747;
          for (int _2751 = _9986; _2751 < _9987; ++_2751)
          {
            {
              ((*_2749)(_2750,_2751)) = (int)1;
            }
          }
        }
      }
      std::vector<int> _9988;
      for (int _2753 = (int)0, _9989 = _2746; _2753 < _9989 ; ++_2753)
      {
        _9988.push_back(((*_2739)(_2753))->getSize());
      }
      auto _9990 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_9988.size()),_9988.begin(),_9988.end()));
      std::shared_ptr< monty::ndarray< int,1 > > _2752 = _9990;
      _checked_ptr_1<int> _ptr__2752(_2752 ? _2752->raw() : nullptr,_2752 ? _2752->size(0) : 0);
      int _2754 = (int)0;
      int _9991 = (int)0;
      int _9992 = _2746;
      for (int _2755 = _9991; _2755 < _9992; ++_2755)
      {
        {
          _2754 += _ptr__2752[_2755];
        }
      }
      int _9993 = (int)0;
      int _9994 = _2746;
      for (int _2756 = _9993; _2756 < _9994; ++_2756)
      {
        {
          std::shared_ptr< monty::ndarray< int,1 > > _2757 = ((*_2739)(_2756))->getShape();
          _checked_ptr_1<int> _ptr__2757(_2757 ? _2757->raw() : nullptr,_2757 ? _2757->size(0) : 0);
          int _9995 = (int)0;
          int _9996 = (int)((_2757)->size(0));
          for (int _2758 = _9995; _2758 < _9996; ++_2758)
          {
            {
              ((*_2749)(_2756,_2758)) = _ptr__2757[_2758];
            }
          }
        }
      }
      if (((_2740 < (int)0) || (_2740 > _2747)))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Invalid stacking dimension"));
        }
      }
      {}
      int _9997 = (int)0;
      int _9998 = _2740;
      for (int _2759 = _9997; _2759 < _9998; ++_2759)
      {
        {
          int _9999 = (int)1;
          int _10000 = _2746;
          for (int _2760 = _9999; _2760 < _10000; ++_2760)
          {
            {
              if ((((*_2749)((int)0,_2759)) != ((*_2749)(_2760,_2759))))
              {
                {
                  throw ::mosek::fusion::DimensionError(std::string ("Constraint dimensions do not match"));
                }
              }
              {}
            }
          }
        }
      }
      int _10001 = safe_add( _2740,(int)1 );
      int _10002 = _2747;
      for (int _2761 = _10001; _2761 < _10002; ++_2761)
      {
        {
          int _10003 = (int)1;
          int _10004 = _2746;
          for (int _2762 = _10003; _2762 < _10004; ++_2762)
          {
            {
              if ((((*_2749)((int)0,_2761)) != ((*_2749)(_2762,_2761))))
              {
                {
                  throw ::mosek::fusion::DimensionError(std::string ("Constraint dimensions do not match"));
                }
              }
              {}
            }
          }
        }
      }
      std::shared_ptr< monty::ndarray< int,1 > > _2763 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2754)));
      _checked_ptr_1<int> _ptr__2763(_2763 ? _2763->raw() : nullptr,_2763 ? _2763->size(0) : 0);
      std::vector<int> _10005;
      for (int _2765 = (int)0, _10006 = _2747; _2765 < _10006 ; ++_2765)
      {
        _10005.push_back(((*_2749)((int)0,_2765)));
      }
      auto _10007 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_10005.size()),_10005.begin(),_10005.end()));
      std::shared_ptr< monty::ndarray< int,1 > > _2764 = _10007;
      _checked_ptr_1<int> _ptr__2764(_2764 ? _2764->raw() : nullptr,_2764 ? _2764->size(0) : 0);
      int _10008 = (int)1;
      int _10009 = _2746;
      for (int _2766 = _10008; _2766 < _10009; ++_2766)
      {
        {
          _ptr__2764[_2740] += ((*_2749)(_2766,_2740));
        }
      }
      {
        int _2767 = (int)((_2764)->size(0));
        std::shared_ptr< monty::ndarray< long long,1 > > _2768 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_add( (int)((_2739)->size(0)),(int)1 ))));
        _checked_ptr_1<long long> _ptr__2768(_2768 ? _2768->raw() : nullptr,_2768 ? _2768->size(0) : 0);
        int _10010 = (int)0;
        int _10011 = (int)((_2739)->size(0));
        for (int _2769 = _10010; _2769 < _10011; ++_2769)
        {
          {
            _ptr__2768[safe_add( _2769,(int)1 )] = safe_add( _ptr__2768[_2769],((*_2749)(_2769,_2740)) );
          }
        }
        if ((_2740 == (int)0))
        {
          {
            int _2770 = (int)0;
            int _10012 = (int)0;
            int _10013 = _2746;
            for (int _2771 = _10012; _2771 < _10013; ++_2771)
            {
              {
                int _2772 = (int)((mosek::fusion::p_Constraint::_get_impl(((*_2739)(_2771)))->nativeidxs)->size(0));
                ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_Constraint::_get_impl(((*_2739)(_2771)))->nativeidxs,(int)0,_2763,_2770,_2772);
                _2770 += _2772;
              }
            }
          }
        }
        else
        {
          {
            std::vector<std::shared_ptr< monty::ndarray< int,1 > >> _10014;
            for (int _2774 = (int)0, _10015 = _2746; _2774 < _10015 ; ++_2774)
            {
              _10014.push_back(mosek::fusion::p_Constraint::_get_impl(((*_2739)(_2774)))->nativeidxs);
            }
            auto _10016 = std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > >(new monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 >(monty::shape(_10014.size()),_10014.begin(),_10014.end()));
            std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > > _2773 = _10016;
            if ((_2740 < _2747))
            {
              {
                int _2775 = (int)1;
                int _10017 = (int)0;
                int _10018 = _2740;
                for (int _2776 = _10017; _2776 < _10018; ++_2776)
                {
                  {
                    _2775 *= _ptr__2764[_2776];
                  }
                }
                int _2777 = (int)1;
                int _10019 = safe_add( _2740,(int)1 );
                int _10020 = _2747;
                for (int _2778 = _10019; _2778 < _10020; ++_2778)
                {
                  {
                    _2777 *= _ptr__2764[_2778];
                  }
                }
                int _2779 = (int)0;
                int _10021 = (int)0;
                int _10022 = _2775;
                for (int _2780 = _10021; _2780 < _10022; ++_2780)
                {
                  {
                    int _10023 = (int)0;
                    int _10024 = _2746;
                    for (int _2781 = _10023; _2781 < _10024; ++_2781)
                    {
                      {
                        int _2782 = (int)0;
                        int _2783 = ((*_2749)(_2781,_2740));
                        int _10025 = (int)0;
                        int _10026 = _2783;
                        for (int _2784 = _10025; _2784 < _10026; ++_2784)
                        {
                          {
                            int _10027 = (int)0;
                            int _10028 = _2777;
                            for (int _2785 = _10027; _2785 < _10028; ++_2785)
                            {
                              {
                                _ptr__2763[_2779] = ((*mosek::fusion::p_Constraint::_get_impl(((*_2739)(_2746)))->nativeidxs)(safe_add( safe_mul( safe_mul( _2780,_2777 ),_2783 ),_2782 )));
                                ++ _2779;
                                ++ _2782;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            else
            {
              {
                int _2786 = (int)1;
                int _10029 = (int)0;
                int _10030 = _2747;
                for (int _2787 = _10029; _2787 < _10030; ++_2787)
                {
                  {
                    _2786 *= _ptr__2764[_2787];
                  }
                }
                int _2788 = (int)0;
                int _10031 = (int)0;
                int _10032 = _2786;
                for (int _2789 = _10031; _2789 < _10032; ++_2789)
                {
                  {
                    int _10033 = (int)0;
                    int _10034 = _2746;
                    for (int _2790 = _10033; _2790 < _10034; ++_2790)
                    {
                      {
                        _ptr__2763[_2788] = ((*((*_2773)(_2790)))(_2789));
                        ++ _2788;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      return (::mosek::fusion::p_SliceConstraint::_new_SliceConstraint(_2741,_2764,_2763)).as<::mosek::fusion::Constraint>();
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint :: __mosek_2fusion_2Constraint__index(std::shared_ptr< monty::ndarray< int,1 > > _2791) { return mosek::fusion::p_Constraint::_get_impl(this)->__mosek_2fusion_2Constraint__index(_2791); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::index(std::shared_ptr< monty::ndarray< int,1 > > _2791) { return __mosek_2fusion_2Constraint__index(_2791); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::__mosek_2fusion_2Constraint__index(std::shared_ptr< monty::ndarray< int,1 > > _2791){
  _checked_ptr_1<int> _ptr__2791(_2791 ? _2791->raw() : nullptr, _2791 ? _2791->size(0) : 0);
  if (((int)((_2791)->size(0)) != (int)((shape)->size(0))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("variable shape and slice do not match"));
    }
  }
  else
  {
    {
      int _10035 = (int)0;
      int _10036 = (int)((shape)->size(0));
      for (int _2792 = _10035; _2792 < _10036; ++_2792)
      {
        {
          if (((_ptr__2791[_2792] < (int)0) || (_ptr__2791[_2792] > ((*shape)(_2792)))))
          {
            {
              throw ::mosek::fusion::IndexError(std::string ("index is out of bounds"));
            }
          }
          {}
        }
      }
      int _2793 = (int)((shape)->size(0));
      std::shared_ptr< monty::ndarray< long long,1 > > _2794 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2793)));
      _checked_ptr_1<long long> _ptr__2794(_2794 ? _2794->raw() : nullptr,_2794 ? _2794->size(0) : 0);
      _ptr__2794[(_2793 - (int)1)] = (int)1;
      int _10037 = (int)1;
      int _10038 = _2793;
      for (int _2795 = _10037; _2795 < _10038; ++_2795)
      {
        {
          _ptr__2794[((_2793 - _2795) - (int)1)] = safe_mul( _ptr__2794[(_2793 - _2795)],((*shape)(_2795)) );
        }
      }
      int _2796 = (int)0;
      int _10039 = (int)0;
      int _10040 = _2793;
      for (int _2797 = _10039; _2797 < _10040; ++_2797)
      {
        {
          _2796 += (int)safe_mul( _ptr__2794[_2797],_ptr__2791[_2797] );
        }
      }
      return (::mosek::fusion::p_SliceConstraint::_new_SliceConstraint(model,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(((*nativeidxs)(_2796)))}))).as<::mosek::fusion::Constraint>();
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint :: __mosek_2fusion_2Constraint__index(int _2798) { return mosek::fusion::p_Constraint::_get_impl(this)->__mosek_2fusion_2Constraint__index(_2798); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::index(int _2798) { return __mosek_2fusion_2Constraint__index(_2798); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::__mosek_2fusion_2Constraint__index(int _2798){
  if ((((int)((shape)->size(0)) == (int)0) && (_2798 == (int)0)))
  {
    {
      return ::mosek::fusion::Constraint::t(_pubthis);
    }
  }
  else if(((int)((shape)->size(0)) != (int)1))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Variable shape and slice do not match"));
    }
  }
  else if(((_2798 < (int)0) || (_2798 > ((*shape)((int)0)))))
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Index is out of bounds"));
    }
  }
  else
  {
    {
      return (::mosek::fusion::p_SliceConstraint::_new_SliceConstraint(model,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(((*nativeidxs)(_2798)))}))).as<::mosek::fusion::Constraint>();
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint :: __mosek_2fusion_2Constraint__slice(std::shared_ptr< monty::ndarray< int,1 > > _2799,std::shared_ptr< monty::ndarray< int,1 > > _2800) { return mosek::fusion::p_Constraint::_get_impl(this)->__mosek_2fusion_2Constraint__slice(_2799,_2800); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::slice(std::shared_ptr< monty::ndarray< int,1 > > _2799,std::shared_ptr< monty::ndarray< int,1 > > _2800) { return __mosek_2fusion_2Constraint__slice(_2799,_2800); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::__mosek_2fusion_2Constraint__slice(std::shared_ptr< monty::ndarray< int,1 > > _2799,std::shared_ptr< monty::ndarray< int,1 > > _2800){
  _checked_ptr_1<int> _ptr__2799(_2799 ? _2799->raw() : nullptr, _2799 ? _2799->size(0) : 0);
  _checked_ptr_1<int> _ptr__2800(_2800 ? _2800->raw() : nullptr, _2800 ? _2800->size(0) : 0);
  if (((int)((_2799)->size(0)) != (int)((_2800)->size(0))))
  {
    {
      throw ::mosek::fusion::SliceError(std::string ("invalid slice"));
    }
  }
  else if(((int)((_2799)->size(0)) != (int)((shape)->size(0))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("variable shape and slice do not match"));
    }
  }
  else
  {
    {
      int _10041 = (int)0;
      int _10042 = (int)((shape)->size(0));
      for (int _2801 = _10041; _2801 < _10042; ++_2801)
      {
        {
          if (((_ptr__2799[_2801] < (int)0) || (_ptr__2800[_2801] > ((*shape)(_2801)))))
          {
            {
              throw ::mosek::fusion::IndexError(std::string ("slice is out of bounds"));
            }
          }
          else if((_ptr__2799[_2801] > _ptr__2800[_2801]))
          {
            {
              throw ::mosek::fusion::SliceError(std::string ("invalid slice"));
            }
          }
          {}
        }
      }
      int _2802 = (int)((shape)->size(0));
      std::vector<int> _10043;
      for (int _2804 = (int)0, _10044 = _2802; _2804 < _10044 ; ++_2804)
      {
        _10043.push_back((_ptr__2800[_2804] - _ptr__2799[_2804]));
      }
      auto _10045 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_10043.size()),_10043.begin(),_10043.end()));
      std::shared_ptr< monty::ndarray< int,1 > > _2803 = _10045;
      _checked_ptr_1<int> _ptr__2803(_2803 ? _2803->raw() : nullptr,_2803 ? _2803->size(0) : 0);
      int _2805 = (int)1;
      int _10046 = (int)0;
      int _10047 = _2802;
      for (int _2806 = _10046; _2806 < _10047; ++_2806)
      {
        {
          _2805 *= (_ptr__2800[_2806] - _ptr__2799[_2806]);
        }
      }
      if ((_2805 == (int)0))
      {
        {
          return (::mosek::fusion::p_SliceConstraint::_new_SliceConstraint(model,_2803,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))))).as<::mosek::fusion::Constraint>();
        }
      }
      else
      {
        {
          std::shared_ptr< monty::ndarray< int,1 > > _2807 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2805)));
          _checked_ptr_1<int> _ptr__2807(_2807 ? _2807->raw() : nullptr,_2807 ? _2807->size(0) : 0);
          {
            std::shared_ptr< monty::ndarray< int,1 > > _2808 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2802)));
            _checked_ptr_1<int> _ptr__2808(_2808 ? _2808->raw() : nullptr,_2808 ? _2808->size(0) : 0);
            _ptr__2808[(_2802 - (int)1)] = (int)1;
            int _10048 = (int)1;
            int _10049 = _2802;
            for (int _2809 = _10048; _2809 < _10049; ++_2809)
            {
              {
                _ptr__2808[((_2802 - _2809) - (int)1)] = safe_mul( _ptr__2808[(_2802 - _2809)],((*shape)((_2802 - _2809))) );
              }
            }
            int _2810 = (int)0;
            int _10050 = (int)0;
            int _10051 = _2802;
            for (int _2811 = _10050; _2811 < _10051; ++_2811)
            {
              {
                _2810 += safe_mul( _ptr__2799[_2811],_ptr__2808[_2811] );
              }
            }
            std::vector<int> _10052;
            for (int _2813 = (int)0, _10053 = _2802; _2813 < _10053 ; ++_2813)
            {
              _10052.push_back(_2810);
            }
            auto _10054 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_10052.size()),_10052.begin(),_10052.end()));
            std::shared_ptr< monty::ndarray< int,1 > > _2812 = _10054;
            _checked_ptr_1<int> _ptr__2812(_2812 ? _2812->raw() : nullptr,_2812 ? _2812->size(0) : 0);
            std::vector<int> _10055;
            for (int _2815 = (int)0, _10056 = _2802; _2815 < _10056 ; ++_2815)
            {
              _10055.push_back(_ptr__2799[_2815]);
            }
            auto _10057 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_10055.size()),_10055.begin(),_10055.end()));
            std::shared_ptr< monty::ndarray< int,1 > > _2814 = _10057;
            _checked_ptr_1<int> _ptr__2814(_2814 ? _2814->raw() : nullptr,_2814 ? _2814->size(0) : 0);
            int _10058 = (int)0;
            int _10059 = _2805;
            for (int _2816 = _10058; _2816 < _10059; ++_2816)
            {
              {
                _ptr__2807[_2816] = ((*nativeidxs)(_ptr__2812[(_2802 - (int)1)]));
                _ptr__2814[(_2802 - (int)1)] += (int)1;
                _ptr__2812[(_2802 - (int)1)] += _ptr__2808[(_2802 - (int)1)];
                if ((_ptr__2814[(_2802 - (int)1)] >= _ptr__2800[(_2802 - (int)1)]))
                {
                  {
                    int _2817 = (_2802 - (int)1);
                    while ( ((_2817 > (int)0) && (_ptr__2814[_2817] >= _ptr__2800[_2817])) )
                    {
                      {
                        _ptr__2814[_2817] = _ptr__2799[_2817];
                        _ptr__2814[(_2817 - (int)1)] += (int)1;
                        _ptr__2812[(_2817 - (int)1)] += _ptr__2808[(_2817 - (int)1)];
                        -- _2817;
                      }
                    }
                    int _10060 = safe_add( _2817,(int)1 );
                    int _10061 = _2802;
                    for (int _2818 = _10060; _2818 < _10061; ++_2818)
                    {
                      {
                        _ptr__2812[_2818] = _ptr__2812[_2817];
                      }
                    }
                  }
                }
                {}
              }
            }
          }
          return (::mosek::fusion::p_SliceConstraint::_new_SliceConstraint(_pubthis->__mosek_2fusion_2Constraint__getModel(),_2803,_2807)).as<::mosek::fusion::Constraint>();
        }
      }
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint :: __mosek_2fusion_2Constraint__slice(int _2819,int _2820) { return mosek::fusion::p_Constraint::_get_impl(this)->__mosek_2fusion_2Constraint__slice(_2819,_2820); }monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::Constraint::slice(int _2819,int _2820) { return __mosek_2fusion_2Constraint__slice(_2819,_2820); }
monty::rc_ptr< ::mosek::fusion::Constraint > mosek::fusion::p_Constraint::__mosek_2fusion_2Constraint__slice(int _2819,int _2820){
  if (((int)((shape)->size(0)) != (int)1))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Variable shape and slice do not match"));
    }
  }
  {}
  if (((_2819 == (int)0) && (_2820 == ((*shape)((int)0)))))
  {
    {
      return ::mosek::fusion::Constraint::t(_pubthis);
    }
  }
  else if(((_2819 < (int)0) || (_2820 > ((*shape)((int)0)))))
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Slice is out of bounds"));
    }
  }
  else if((_2819 > _2820))
  {
    {
      throw ::mosek::fusion::SliceError(std::string ("Invalid slice"));
    }
  }
  else
  {
    {
      std::vector<int> _10062;
      for (int _2821 = _2819, _10063 = _2820; _2821 < _10063 ; ++_2821)
      {
        _10062.push_back(((*nativeidxs)(_2821)));
      }
      auto _10064 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_10062.size()),_10062.begin(),_10062.end()));
      return (::mosek::fusion::p_SliceConstraint::_new_SliceConstraint(model,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((_2820 - _2819))}),_10064)).as<::mosek::fusion::Constraint>();
    }
  }
}
int mosek::fusion::Constraint :: getND() { return mosek::fusion::p_Constraint::_get_impl(this)->getND(); }int mosek::fusion::p_Constraint::getND(){
  return (int)((shape)->size(0));
}
int mosek::fusion::Constraint :: getSize() { return mosek::fusion::p_Constraint::_get_impl(this)->getSize(); }int mosek::fusion::p_Constraint::getSize(){
  int _2822 = (int)1;
  int _10065 = (int)0;
  int _10066 = (int)((shape)->size(0));
  for (int _2823 = _10065; _2823 < _10066; ++_2823)
  {
    {
      _2822 *= ((*shape)(_2823));
    }
  }
  return _2822;
}
monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::Constraint :: __mosek_2fusion_2Constraint__getModel() { return mosek::fusion::p_Constraint::_get_impl(this)->__mosek_2fusion_2Constraint__getModel(); }monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::Constraint::getModel() { return __mosek_2fusion_2Constraint__getModel(); }
monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::p_Constraint::__mosek_2fusion_2Constraint__getModel(){
  return model;
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::Constraint :: getShape() { return mosek::fusion::p_Constraint::_get_impl(this)->getShape(); }std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_Constraint::getShape(){
  std::vector<int> _10067;
  for (int _2824 = (int)0, _10068 = (int)((shape)->size(0)); _2824 < _10068 ; ++_2824)
  {
    _10067.push_back(((*shape)(_2824)));
  }
  auto _10069 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_10067.size()),_10067.begin(),_10067.end()));
  return _10069;
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_Constraint::getNativeidxs(){
  return nativeidxs;
}
void mosek::fusion::p_Constraint::destroy(){nativeidxs.reset();shape.reset();model.reset();}void mosek::fusion::Constraint::destroy() { mosek::fusion::p_Constraint::_get_impl(this)->destroy(); }mosek::fusion::Set::Set(mosek::fusion::p_Set *_impl) : _impl(_impl) { /*std::cout << "Set() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::Set::~Set() { delete _impl; _impl = nullptr; }mosek::fusion::p_Set::p_Set  (::mosek::fusion::Set * _pubthis) :     _pubthis(_pubthis){}long long mosek::fusion::Set::size  ( std::shared_ptr< monty::ndarray< int,1 > > _2825) { return mosek::fusion::p_Set::size(_2825); }long long mosek::fusion::p_Set::size(std::shared_ptr< monty::ndarray< int,1 > > _2825){
  _checked_ptr_1<int> _ptr__2825(_2825 ? _2825->raw() : nullptr, _2825 ? _2825->size(0) : 0);
  long long _2826 = (long long)1;
  int _10070 = (int)0;
  int _10071 = (int)((_2825)->size(0));
  for (int _2827 = _10070; _2827 < _10071; ++_2827)
  {
    {
      _2826 *= _ptr__2825[_2827];
    }
  }
  return _2826;
}
bool mosek::fusion::Set::match  ( std::shared_ptr< monty::ndarray< int,1 > > _2828,    std::shared_ptr< monty::ndarray< int,1 > > _2829) { return mosek::fusion::p_Set::match(_2828,_2829); }bool mosek::fusion::p_Set::match(std::shared_ptr< monty::ndarray< int,1 > > _2828,std::shared_ptr< monty::ndarray< int,1 > > _2829){
  _checked_ptr_1<int> _ptr__2828(_2828 ? _2828->raw() : nullptr, _2828 ? _2828->size(0) : 0);
  _checked_ptr_1<int> _ptr__2829(_2829 ? _2829->raw() : nullptr, _2829 ? _2829->size(0) : 0);
  if (((int)((_2828)->size(0)) != (int)((_2829)->size(0))))
  {
    {
      return false;
    }
  }
  {}
  int _10072 = (int)0;
  int _10073 = (int)((_2828)->size(0));
  for (int _2830 = _10072; _2830 < _10073; ++_2830)
  {
    {
      if ((_ptr__2828[_2830] != _ptr__2829[_2830]))
      {
        {
          return false;
        }
      }
      {}
    }
  }
  return true;
}
long long mosek::fusion::Set::linearidx  ( std::shared_ptr< monty::ndarray< int,1 > > _2831,    std::shared_ptr< monty::ndarray< int,1 > > _2832) { return mosek::fusion::p_Set::linearidx(_2831,_2832); }long long mosek::fusion::p_Set::linearidx(std::shared_ptr< monty::ndarray< int,1 > > _2831,std::shared_ptr< monty::ndarray< int,1 > > _2832){
  _checked_ptr_1<int> _ptr__2831(_2831 ? _2831->raw() : nullptr, _2831 ? _2831->size(0) : 0);
  _checked_ptr_1<int> _ptr__2832(_2832 ? _2832->raw() : nullptr, _2832 ? _2832->size(0) : 0);
  long long _2833 = _ptr__2832[(int)0];
  int _10074 = (int)1;
  int _10075 = (int)((_2832)->size(0));
  for (int _2834 = _10074; _2834 < _10075; ++_2834)
  {
    {
      _2833 = safe_add( safe_mul( _2833,_ptr__2831[_2834] ),_ptr__2832[_2834] );
    }
  }
  return _2833;
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::Set::idxtokey  ( std::shared_ptr< monty::ndarray< int,1 > > _2835,    long long _2836) { return mosek::fusion::p_Set::idxtokey(_2835,_2836); }std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_Set::idxtokey(std::shared_ptr< monty::ndarray< int,1 > > _2835,long long _2836){
  _checked_ptr_1<int> _ptr__2835(_2835 ? _2835->raw() : nullptr, _2835 ? _2835->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _2837 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)((_2835)->size(0)))));
  _checked_ptr_1<int> _ptr__2837(_2837 ? _2837->raw() : nullptr,_2837 ? _2837->size(0) : 0);
  ::mosek::fusion::p_Set::idxtokey(_2835,_2836,_2837);
  return _2837;
}
void mosek::fusion::Set::idxtokey  ( std::shared_ptr< monty::ndarray< int,1 > > _2838,    long long _2839,    std::shared_ptr< monty::ndarray< int,1 > > _2840) { mosek::fusion::p_Set::idxtokey(_2838,_2839,_2840); }void mosek::fusion::p_Set::idxtokey(std::shared_ptr< monty::ndarray< int,1 > > _2838,long long _2839,std::shared_ptr< monty::ndarray< int,1 > > _2840){
  _checked_ptr_1<int> _ptr__2838(_2838 ? _2838->raw() : nullptr, _2838 ? _2838->size(0) : 0);
  _checked_ptr_1<int> _ptr__2840(_2840 ? _2840->raw() : nullptr, _2840 ? _2840->size(0) : 0);
  int _2841 = (int)((_2838)->size(0));
  if ((_2841 > (int)0))
  {
    {
      long long _2842 = _2839;
      int _10076 = (int)0;
      int _10077 = (_2841 - (int)1);
      for (int _2843 = _10076; _2843 < _10077; ++_2843)
      {
        {
          _ptr__2840[((_2841 - _2843) - (int)1)] = (int)(_2842 % _ptr__2838[((_2841 - _2843) - (int)1)]);
          _2842 /= _ptr__2838[((_2841 - _2843) - (int)1)];
        }
      }
      _ptr__2840[(int)0] = (int)_2842;
    }
  }
  {}
}
std::string mosek::fusion::Set::indexToString  ( std::shared_ptr< monty::ndarray< int,1 > > _2844,    long long _2845) { return mosek::fusion::p_Set::indexToString(_2844,_2845); }std::string mosek::fusion::p_Set::indexToString(std::shared_ptr< monty::ndarray< int,1 > > _2844,long long _2845){
  _checked_ptr_1<int> _ptr__2844(_2844 ? _2844->raw() : nullptr, _2844 ? _2844->size(0) : 0);
  int _2846 = (int)((_2844)->size(0));
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2847 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  if ((_2846 == (int)0))
  {
    {
      return std::string ("0");
    }
  }
  else if((_2846 == (int)1))
  {
    {
      return _2847->__mosek_2fusion_2Utils_2StringBuffer__a(_2845)->toString();
    }
  }
  else
  {
    {
      long long _2848 = _2845;
      std::shared_ptr< monty::ndarray< int,1 > > _2849 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2846)));
      _checked_ptr_1<int> _ptr__2849(_2849 ? _2849->raw() : nullptr,_2849 ? _2849->size(0) : 0);
      int _10078 = (int)1;
      int _10079 = _2846;
      for (int _2850 = _10078; _2850 < _10079; ++_2850)
      {
        {
          _ptr__2849[(_2846 - _2850)] = (int)(_2848 % _ptr__2844[(_2846 - _2850)]);
          _2848 /= _ptr__2844[(_2846 - _2850)];
        }
      }
      _ptr__2849[(int)0] = (int)_2848;
      _2847->__mosek_2fusion_2Utils_2StringBuffer__a(_ptr__2849[(int)0]);
      int _10080 = (int)1;
      int _10081 = _2846;
      for (int _2851 = _10080; _2851 < _10081; ++_2851)
      {
        {
          _2847->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(_ptr__2849[_2851]);
        }
      }
      return _2847->toString();
    }
  }
}
std::string mosek::fusion::Set::keyToString  ( std::shared_ptr< monty::ndarray< int,1 > > _2852) { return mosek::fusion::p_Set::keyToString(_2852); }std::string mosek::fusion::p_Set::keyToString(std::shared_ptr< monty::ndarray< int,1 > > _2852){
  _checked_ptr_1<int> _ptr__2852(_2852 ? _2852->raw() : nullptr, _2852 ? _2852->size(0) : 0);
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _2853 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  _2853->__mosek_2fusion_2Utils_2StringBuffer__a(_ptr__2852[(int)0]);
  int _10082 = (int)1;
  int _10083 = (int)((_2852)->size(0));
  for (int _2854 = _10082; _2854 < _10083; ++_2854)
  {
    {
      _2853->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(_ptr__2852[_2854]);
    }
  }
  return _2853->toString();
}
void mosek::fusion::Set::indexToKey  ( std::shared_ptr< monty::ndarray< int,1 > > _2855,    long long _2856,    std::shared_ptr< monty::ndarray< int,1 > > _2857) { mosek::fusion::p_Set::indexToKey(_2855,_2856,_2857); }void mosek::fusion::p_Set::indexToKey(std::shared_ptr< monty::ndarray< int,1 > > _2855,long long _2856,std::shared_ptr< monty::ndarray< int,1 > > _2857){
  _checked_ptr_1<int> _ptr__2855(_2855 ? _2855->raw() : nullptr, _2855 ? _2855->size(0) : 0);
  _checked_ptr_1<int> _ptr__2857(_2857 ? _2857->raw() : nullptr, _2857 ? _2857->size(0) : 0);
  int _2858 = (int)((_2855)->size(0));
  if ((_2858 == (int)1))
  {
    {
      _ptr__2857[(int)0] = (int)_2856;
    }
  }
  else
  {
    {
      long long _2859 = _2856;
      int _10084 = (int)1;
      int _10085 = _2858;
      for (int _2860 = _10084; _2860 < _10085; ++_2860)
      {
        {
          _ptr__2857[(_2858 - _2860)] = (int)(_2859 % _ptr__2855[(_2858 - _2860)]);
          _2859 /= _ptr__2855[(_2858 - _2860)];
        }
      }
      _ptr__2857[(int)0] = (int)_2859;
    }
  }
}
std::shared_ptr< monty::ndarray< long long,1 > > mosek::fusion::Set::strides  ( std::shared_ptr< monty::ndarray< int,1 > > _2861) { return mosek::fusion::p_Set::strides(_2861); }std::shared_ptr< monty::ndarray< long long,1 > > mosek::fusion::p_Set::strides(std::shared_ptr< monty::ndarray< int,1 > > _2861){
  _checked_ptr_1<int> _ptr__2861(_2861 ? _2861->raw() : nullptr, _2861 ? _2861->size(0) : 0);
  int _2862 = (int)((_2861)->size(0));
  std::shared_ptr< monty::ndarray< long long,1 > > _2863 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_2862)));
  _checked_ptr_1<long long> _ptr__2863(_2863 ? _2863->raw() : nullptr,_2863 ? _2863->size(0) : 0);
  _ptr__2863[(_2862 - (int)1)] = (int)1;
  int _10086 = (int)1;
  int _10087 = _2862;
  for (int _2864 = _10086; _2864 < _10087; ++_2864)
  {
    {
      _ptr__2863[((_2862 - _2864) - (int)1)] = safe_mul( _ptr__2863[(_2862 - _2864)],_ptr__2861[(_2862 - _2864)] );
    }
  }
  return _2863;
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::Set::make  ( std::shared_ptr< monty::ndarray< int,1 > > _2865,    std::shared_ptr< monty::ndarray< int,1 > > _2866) { return mosek::fusion::p_Set::make(_2865,_2866); }std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_Set::make(std::shared_ptr< monty::ndarray< int,1 > > _2865,std::shared_ptr< monty::ndarray< int,1 > > _2866){
  _checked_ptr_1<int> _ptr__2865(_2865 ? _2865->raw() : nullptr, _2865 ? _2865->size(0) : 0);
  _checked_ptr_1<int> _ptr__2866(_2866 ? _2866->raw() : nullptr, _2866 ? _2866->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _2867 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(safe_add( (int)((_2865)->size(0)),(int)((_2866)->size(0)) ))));
  _checked_ptr_1<int> _ptr__2867(_2867 ? _2867->raw() : nullptr,_2867 ? _2867->size(0) : 0);
  int _10088 = (int)0;
  int _10089 = (int)((_2865)->size(0));
  for (int _2868 = _10088; _2868 < _10089; ++_2868)
  {
    {
      _ptr__2867[_2868] = _ptr__2865[_2868];
    }
  }
  int _10090 = (int)0;
  int _10091 = (int)((_2866)->size(0));
  for (int _2869 = _10090; _2869 < _10091; ++_2869)
  {
    {
      _ptr__2867[safe_add( (int)((_2865)->size(0)),_2869 )] = _ptr__2866[_2869];
    }
  }
  return _2867;
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::Set::make  ( std::shared_ptr< monty::ndarray< int,1 > > _2870) { return mosek::fusion::p_Set::make(_2870); }std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_Set::make(std::shared_ptr< monty::ndarray< int,1 > > _2870){
  _checked_ptr_1<int> _ptr__2870(_2870 ? _2870->raw() : nullptr, _2870 ? _2870->size(0) : 0);
  std::vector<int> _10092;
  for (int _2871 = (int)0, _10093 = (int)((_2870)->size(0)); _2871 < _10093 ; ++_2871)
  {
    _10092.push_back(_ptr__2870[_2871]);
  }
  auto _10094 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_10092.size()),_10092.begin(),_10092.end()));
  return _10094;
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::Set::make  ( int _2872,    int _2873,    int _2874) { return mosek::fusion::p_Set::make(_2872,_2873,_2874); }std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_Set::make(int _2872,int _2873,int _2874){
  return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2872),(int)(_2873),(int)(_2874)});
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::Set::make  ( int _2875,    int _2876) { return mosek::fusion::p_Set::make(_2875,_2876); }std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_Set::make(int _2875,int _2876){
  return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2875),(int)(_2876)});
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::Set::make  ( int _2877) { return mosek::fusion::p_Set::make(_2877); }std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_Set::make(int _2877){
  return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2877)});
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::Set::scalar  ( ) { return mosek::fusion::p_Set::scalar(); }std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_Set::scalar(){
  return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0)));
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::Set::make  ( std::shared_ptr< monty::ndarray< std::string,1 > > _2878) { return mosek::fusion::p_Set::make(_2878); }std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_Set::make(std::shared_ptr< monty::ndarray< std::string,1 > > _2878){
  return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)((_2878)->size(0)))});
}
void mosek::fusion::p_Set::destroy(){}void mosek::fusion::Set::destroy() { mosek::fusion::p_Set::_get_impl(this)->destroy(); }mosek::fusion::ConeDomain::ConeDomain(mosek::fusion::p_ConeDomain *_impl) : _impl(_impl) { /*std::cout << "ConeDomain() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::ConeDomain::~ConeDomain() { delete _impl; _impl = nullptr; }mosek::fusion::p_ConeDomain::p_ConeDomain  (::mosek::fusion::ConeDomain * _pubthis) :     _pubthis(_pubthis){}mosek::fusion::ConeDomain::t mosek::fusion::p_ConeDomain::_new_ConeDomain  (mosek::fusion::QConeKey _2879,    double _2880,    std::shared_ptr< monty::ndarray< int,1 > > _2881){ return new mosek::fusion::ConeDomain(_2879,_2880,_2881); }mosek::fusion::ConeDomain::ConeDomain  (mosek::fusion::QConeKey _2879,    double _2880,    std::shared_ptr< monty::ndarray< int,1 > > _2881) :    ConeDomain(new mosek::fusion::p_ConeDomain(this)){ mosek::fusion::p_ConeDomain::_get_impl(this)->_initialize(_2879,_2880,_2881); }void mosek::fusion::p_ConeDomain::_initialize  (mosek::fusion::QConeKey _2879,    double _2880,    std::shared_ptr< monty::ndarray< int,1 > > _2881){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__2881(_2881 ? _2881->raw() : nullptr, _2881 ? _2881->size(0) : 0);
    std::shared_ptr< monty::ndarray< int,1 > > _10095;
    bool _10096 = (NULL != _2881.get());
    if (_10096)
    {
      _10095 = ::mosek::fusion::p_Set::make(_2881);
    }
    else
    {
      _10095 = nullptr;
    }
    shape = _10095;
    mosek::fusion::p_ConeDomain::_get_impl(::mosek::fusion::ConeDomain::t(_pubthis))->alpha = _2880;
    key = _2879;
    axisidx = (int)0;
    axisset = false;
    int_flag = false;
    mosek::fusion::p_ConeDomain::_get_impl(::mosek::fusion::ConeDomain::t(_pubthis))->alpha = _2880;
  }
}mosek::fusion::ConeDomain::t mosek::fusion::p_ConeDomain::_new_ConeDomain  (mosek::fusion::QConeKey _2882,    std::shared_ptr< monty::ndarray< int,1 > > _2883){ return new mosek::fusion::ConeDomain(_2882,_2883); }mosek::fusion::ConeDomain::ConeDomain  (mosek::fusion::QConeKey _2882,    std::shared_ptr< monty::ndarray< int,1 > > _2883) :    ConeDomain(new mosek::fusion::p_ConeDomain(this)){ mosek::fusion::p_ConeDomain::_get_impl(this)->_initialize(_2882,_2883); }void mosek::fusion::p_ConeDomain::_initialize  (mosek::fusion::QConeKey _2882,    std::shared_ptr< monty::ndarray< int,1 > > _2883){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__2883(_2883 ? _2883->raw() : nullptr, _2883 ? _2883->size(0) : 0);
    mosek::fusion::p_ConeDomain::_initialize(_2882,1.0,_2883);
  }
}bool mosek::fusion::p_ConeDomain::match_shape(std::shared_ptr< monty::ndarray< int,1 > > _2884){
  _checked_ptr_1<int> _ptr__2884(_2884 ? _2884->raw() : nullptr, _2884 ? _2884->size(0) : 0);
  return ((NULL == shape.get()) || ::mosek::fusion::p_Set::match(_2884,shape));
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::ConeDomain :: __mosek_2fusion_2ConeDomain__integral() { return mosek::fusion::p_ConeDomain::_get_impl(this)->__mosek_2fusion_2ConeDomain__integral(); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::ConeDomain::integral() { return __mosek_2fusion_2ConeDomain__integral(); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_ConeDomain::__mosek_2fusion_2ConeDomain__integral(){
  int_flag = true;
  return ::mosek::fusion::ConeDomain::t(_pubthis);
}
bool mosek::fusion::ConeDomain :: axisIsSet() { return mosek::fusion::p_ConeDomain::_get_impl(this)->axisIsSet(); }bool mosek::fusion::p_ConeDomain::axisIsSet(){
  return axisset;
}
int mosek::fusion::ConeDomain :: getAxis() { return mosek::fusion::p_ConeDomain::_get_impl(this)->getAxis(); }int mosek::fusion::p_ConeDomain::getAxis(){
  return axisidx;
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::ConeDomain :: __mosek_2fusion_2ConeDomain__axis(int _2885) { return mosek::fusion::p_ConeDomain::_get_impl(this)->__mosek_2fusion_2ConeDomain__axis(_2885); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::ConeDomain::axis(int _2885) { return __mosek_2fusion_2ConeDomain__axis(_2885); }
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_ConeDomain::__mosek_2fusion_2ConeDomain__axis(int _2885){
  axisidx = _2885;
  axisset = true;
  return ::mosek::fusion::ConeDomain::t(_pubthis);
}
void mosek::fusion::p_ConeDomain::destroy(){shape.reset();}void mosek::fusion::ConeDomain::destroy() { mosek::fusion::p_ConeDomain::_get_impl(this)->destroy(); }mosek::fusion::LinPSDDomain::LinPSDDomain(mosek::fusion::p_LinPSDDomain *_impl) : _impl(_impl) { /*std::cout << "LinPSDDomain() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::LinPSDDomain::~LinPSDDomain() { delete _impl; _impl = nullptr; }mosek::fusion::p_LinPSDDomain::p_LinPSDDomain  (::mosek::fusion::LinPSDDomain * _pubthis) :     _pubthis(_pubthis){}mosek::fusion::LinPSDDomain::t mosek::fusion::p_LinPSDDomain::_new_LinPSDDomain  (std::shared_ptr< monty::ndarray< int,1 > > _2886,    int _2887){ return new mosek::fusion::LinPSDDomain(_2886,_2887); }mosek::fusion::LinPSDDomain::LinPSDDomain  (std::shared_ptr< monty::ndarray< int,1 > > _2886,    int _2887) :    LinPSDDomain(new mosek::fusion::p_LinPSDDomain(this)){ mosek::fusion::p_LinPSDDomain::_get_impl(this)->_initialize(_2886,_2887); }void mosek::fusion::p_LinPSDDomain::_initialize  (std::shared_ptr< monty::ndarray< int,1 > > _2886,    int _2887){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__2886(_2886 ? _2886->raw() : nullptr, _2886 ? _2886->size(0) : 0);
    mosek::fusion::p_LinPSDDomain::_get_impl(::mosek::fusion::LinPSDDomain::t(_pubthis))->conedim = _2887;
    shape = ::mosek::fusion::Utils::Tools::arraycopy(_2886);
  }
}mosek::fusion::LinPSDDomain::t mosek::fusion::p_LinPSDDomain::_new_LinPSDDomain  (std::shared_ptr< monty::ndarray< int,1 > > _2888){ return new mosek::fusion::LinPSDDomain(_2888); }mosek::fusion::LinPSDDomain::LinPSDDomain  (std::shared_ptr< monty::ndarray< int,1 > > _2888) :    LinPSDDomain(new mosek::fusion::p_LinPSDDomain(this)){ mosek::fusion::p_LinPSDDomain::_get_impl(this)->_initialize(_2888); }void mosek::fusion::p_LinPSDDomain::_initialize  (std::shared_ptr< monty::ndarray< int,1 > > _2888){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__2888(_2888 ? _2888->raw() : nullptr, _2888 ? _2888->size(0) : 0);
    shape = ::mosek::fusion::Utils::Tools::arraycopy(_2888);
    conedim = ((int)((shape)->size(0)) - (int)1);
  }
}mosek::fusion::LinPSDDomain::t mosek::fusion::p_LinPSDDomain::_new_LinPSDDomain  (){ return new mosek::fusion::LinPSDDomain(); }mosek::fusion::LinPSDDomain::LinPSDDomain  () :    LinPSDDomain(new mosek::fusion::p_LinPSDDomain(this)){ mosek::fusion::p_LinPSDDomain::_get_impl(this)->_initialize(); }void mosek::fusion::p_LinPSDDomain::_initialize  (){monty::rc_reserve __reserve_this(_pubthis);   {
    conedim = (int)0;
    shape = nullptr;
  }
}void mosek::fusion::p_LinPSDDomain::destroy(){shape.reset();}void mosek::fusion::LinPSDDomain::destroy() { mosek::fusion::p_LinPSDDomain::_get_impl(this)->destroy(); }mosek::fusion::PSDDomain::PSDDomain(mosek::fusion::p_PSDDomain *_impl) : _impl(_impl) { /*std::cout << "PSDDomain() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::PSDDomain::~PSDDomain() { delete _impl; _impl = nullptr; }mosek::fusion::p_PSDDomain::p_PSDDomain  (::mosek::fusion::PSDDomain * _pubthis) :     _pubthis(_pubthis){}mosek::fusion::PSDDomain::t mosek::fusion::p_PSDDomain::_new_PSDDomain  (mosek::fusion::PSDKey _2889,    std::shared_ptr< monty::ndarray< int,1 > > _2890,    int _2891,    int _2892){ return new mosek::fusion::PSDDomain(_2889,_2890,_2891,_2892); }mosek::fusion::PSDDomain::PSDDomain  (mosek::fusion::PSDKey _2889,    std::shared_ptr< monty::ndarray< int,1 > > _2890,    int _2891,    int _2892) :    PSDDomain(new mosek::fusion::p_PSDDomain(this)){ mosek::fusion::p_PSDDomain::_get_impl(this)->_initialize(_2889,_2890,_2891,_2892); }void mosek::fusion::p_PSDDomain::_initialize  (mosek::fusion::PSDKey _2889,    std::shared_ptr< monty::ndarray< int,1 > > _2890,    int _2891,    int _2892){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__2890(_2890 ? _2890->raw() : nullptr, _2890 ? _2890->size(0) : 0);
    axisIsSet = true;
    shape = _2890;
    key = _2889;
    mosek::fusion::p_PSDDomain::_get_impl(::mosek::fusion::PSDDomain::t(_pubthis))->conedim1 = _2891;
    mosek::fusion::p_PSDDomain::_get_impl(::mosek::fusion::PSDDomain::t(_pubthis))->conedim2 = _2892;
    int _2893 = (int)((shape)->size(0));
    if (((!(((int)((shape)->size(0)) > _2891) && (((int)((shape)->size(0)) > _2892) && ((_2891 >= (int)0) && ((_2892 >= (int)0) && (_2891 != _2892)))))) && (((*shape)(_2891)) == ((*shape)(_2892)))))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Mismatching shape or cone dimensions"));
      }
    }
    {}
  }
}mosek::fusion::PSDDomain::t mosek::fusion::p_PSDDomain::_new_PSDDomain  (mosek::fusion::PSDKey _2894,    std::shared_ptr< monty::ndarray< int,1 > > _2895){ return new mosek::fusion::PSDDomain(_2894,_2895); }mosek::fusion::PSDDomain::PSDDomain  (mosek::fusion::PSDKey _2894,    std::shared_ptr< monty::ndarray< int,1 > > _2895) :    PSDDomain(new mosek::fusion::p_PSDDomain(this)){ mosek::fusion::p_PSDDomain::_get_impl(this)->_initialize(_2894,_2895); }void mosek::fusion::p_PSDDomain::_initialize  (mosek::fusion::PSDKey _2894,    std::shared_ptr< monty::ndarray< int,1 > > _2895){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__2895(_2895 ? _2895->raw() : nullptr, _2895 ? _2895->size(0) : 0);
    mosek::fusion::p_PSDDomain::_initialize(_2894,_2895,((int)((_2895)->size(0)) - (int)2),((int)((_2895)->size(0)) - (int)1));
  }
}mosek::fusion::PSDDomain::t mosek::fusion::p_PSDDomain::_new_PSDDomain  (mosek::fusion::PSDKey _2896){ return new mosek::fusion::PSDDomain(_2896); }mosek::fusion::PSDDomain::PSDDomain  (mosek::fusion::PSDKey _2896) :    PSDDomain(new mosek::fusion::p_PSDDomain(this)){ mosek::fusion::p_PSDDomain::_get_impl(this)->_initialize(_2896); }void mosek::fusion::p_PSDDomain::_initialize  (mosek::fusion::PSDKey _2896){monty::rc_reserve __reserve_this(_pubthis);   {
    shape = nullptr;
    key = _2896;
    conedim1 = (int)0;
    conedim2 = (int)0;
    axisIsSet = false;
  }
}monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::PSDDomain :: __mosek_2fusion_2PSDDomain__axis(int _2897,int _2898) { return mosek::fusion::p_PSDDomain::_get_impl(this)->__mosek_2fusion_2PSDDomain__axis(_2897,_2898); }monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::PSDDomain::axis(int _2897,int _2898) { return __mosek_2fusion_2PSDDomain__axis(_2897,_2898); }
monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::p_PSDDomain::__mosek_2fusion_2PSDDomain__axis(int _2897,int _2898){
  mosek::fusion::p_PSDDomain::_get_impl(::mosek::fusion::PSDDomain::t(_pubthis))->conedim1 = _2897;
  mosek::fusion::p_PSDDomain::_get_impl(::mosek::fusion::PSDDomain::t(_pubthis))->conedim2 = _2898;
  axisIsSet = true;
  if (((NULL == shape.get()) && (!((_2897 >= (int)0) && ((_2898 >= (int)0) && (_2897 != _2898))))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching shape or cone dimensions"));
    }
  }
  else if(((NULL != shape.get()) && ((!(((int)((shape)->size(0)) > _2897) && (((int)((shape)->size(0)) > _2898) && ((_2897 >= (int)0) && ((_2898 >= (int)0) && (_2897 != _2898)))))) && (((*shape)(_2897)) == ((*shape)(_2898))))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching shape or cone dimensions"));
    }
  }
  {}
  return ::mosek::fusion::PSDDomain::t(_pubthis);
}
void mosek::fusion::p_PSDDomain::destroy(){shape.reset();}void mosek::fusion::PSDDomain::destroy() { mosek::fusion::p_PSDDomain::_get_impl(this)->destroy(); }mosek::fusion::SymmetricRangeDomain::SymmetricRangeDomain(mosek::fusion::p_SymmetricRangeDomain *_impl) : mosek::fusion::RangeDomain(_impl) { /*std::cout << "SymmetricRangeDomain()" << this << std::endl; */ }mosek::fusion::SymmetricRangeDomain::~SymmetricRangeDomain() {  /* std::cout << "~SymmetricRangeDomain()" << this << std::endl << std::flush; */ }mosek::fusion::p_SymmetricRangeDomain::p_SymmetricRangeDomain  (::mosek::fusion::SymmetricRangeDomain * _pubthis) :     mosek::fusion::p_RangeDomain(_pubthis),    _pubthis(_pubthis){}mosek::fusion::SymmetricRangeDomain::t mosek::fusion::p_SymmetricRangeDomain::_new_SymmetricRangeDomain  (monty::rc_ptr< ::mosek::fusion::RangeDomain > _2899){ return new mosek::fusion::SymmetricRangeDomain(_2899); }mosek::fusion::SymmetricRangeDomain::SymmetricRangeDomain  (monty::rc_ptr< ::mosek::fusion::RangeDomain > _2899) :    SymmetricRangeDomain(new mosek::fusion::p_SymmetricRangeDomain(this)){ mosek::fusion::p_SymmetricRangeDomain::_get_impl(this)->_initialize(_2899); }void mosek::fusion::p_SymmetricRangeDomain::_initialize  (monty::rc_ptr< ::mosek::fusion::RangeDomain > _2899){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_RangeDomain::_initialize(_2899);
    if (((NULL != shape.get()) && (((int)((shape)->size(0)) != (int)2) || (((*shape)((int)0)) != ((*shape)((int)1))))))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Only square domains can be symmetric"));
      }
    }
    {}
    int _10097;
    bool _10098 = (NULL == shape.get());
    if (_10098)
    {
      _10097 = (int)0;
    }
    else
    {
      _10097 = ((*shape)((int)0));
    }
    dim = _10097;
  }
}void mosek::fusion::p_SymmetricRangeDomain::destroy(){}void mosek::fusion::SymmetricRangeDomain::destroy() { mosek::fusion::p_SymmetricRangeDomain::_get_impl(this)->destroy(); }mosek::fusion::RangeDomain::RangeDomain(mosek::fusion::p_RangeDomain *_impl) : _impl(_impl) { /*std::cout << "RangeDomain() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::RangeDomain::~RangeDomain() { delete _impl; _impl = nullptr; }mosek::fusion::p_RangeDomain::p_RangeDomain  (::mosek::fusion::RangeDomain * _pubthis) :     _pubthis(_pubthis){}mosek::fusion::RangeDomain::t mosek::fusion::p_RangeDomain::_new_RangeDomain  (bool _2900,    std::shared_ptr< monty::ndarray< double,1 > > _2901,    std::shared_ptr< monty::ndarray< double,1 > > _2902,    std::shared_ptr< monty::ndarray< int,1 > > _2903){ return new mosek::fusion::RangeDomain(_2900,_2901,_2902,_2903); }mosek::fusion::RangeDomain::RangeDomain  (bool _2900,    std::shared_ptr< monty::ndarray< double,1 > > _2901,    std::shared_ptr< monty::ndarray< double,1 > > _2902,    std::shared_ptr< monty::ndarray< int,1 > > _2903) :    RangeDomain(new mosek::fusion::p_RangeDomain(this)){ mosek::fusion::p_RangeDomain::_get_impl(this)->_initialize(_2900,_2901,_2902,_2903); }void mosek::fusion::p_RangeDomain::_initialize  (bool _2900,    std::shared_ptr< monty::ndarray< double,1 > > _2901,    std::shared_ptr< monty::ndarray< double,1 > > _2902,    std::shared_ptr< monty::ndarray< int,1 > > _2903){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<double> _ptr__2901(_2901 ? _2901->raw() : nullptr, _2901 ? _2901->size(0) : 0);
    _checked_ptr_1<double> _ptr__2902(_2902 ? _2902->raw() : nullptr, _2902 ? _2902->size(0) : 0);
    _checked_ptr_1<int> _ptr__2903(_2903 ? _2903->raw() : nullptr, _2903 ? _2903->size(0) : 0);
    mosek::fusion::p_RangeDomain::_initialize(_2900,_2901,_2902,_2903,nullptr,(int)1);
  }
}mosek::fusion::RangeDomain::t mosek::fusion::p_RangeDomain::_new_RangeDomain  (bool _2904,    std::shared_ptr< monty::ndarray< double,1 > > _2905,    std::shared_ptr< monty::ndarray< double,1 > > _2906,    std::shared_ptr< monty::ndarray< int,1 > > _2907,    std::shared_ptr< monty::ndarray< int,2 > > _2908){ return new mosek::fusion::RangeDomain(_2904,_2905,_2906,_2907,_2908); }mosek::fusion::RangeDomain::RangeDomain  (bool _2904,    std::shared_ptr< monty::ndarray< double,1 > > _2905,    std::shared_ptr< monty::ndarray< double,1 > > _2906,    std::shared_ptr< monty::ndarray< int,1 > > _2907,    std::shared_ptr< monty::ndarray< int,2 > > _2908) :    RangeDomain(new mosek::fusion::p_RangeDomain(this)){ mosek::fusion::p_RangeDomain::_get_impl(this)->_initialize(_2904,_2905,_2906,_2907,_2908); }void mosek::fusion::p_RangeDomain::_initialize  (bool _2904,    std::shared_ptr< monty::ndarray< double,1 > > _2905,    std::shared_ptr< monty::ndarray< double,1 > > _2906,    std::shared_ptr< monty::ndarray< int,1 > > _2907,    std::shared_ptr< monty::ndarray< int,2 > > _2908){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<double> _ptr__2905(_2905 ? _2905->raw() : nullptr, _2905 ? _2905->size(0) : 0);
    _checked_ptr_1<double> _ptr__2906(_2906 ? _2906->raw() : nullptr, _2906 ? _2906->size(0) : 0);
    _checked_ptr_1<int> _ptr__2907(_2907 ? _2907->raw() : nullptr, _2907 ? _2907->size(0) : 0);
    mosek::fusion::p_RangeDomain::_initialize(_2904,_2905,_2906,_2907,_2908,(int)1);
  }
}mosek::fusion::RangeDomain::t mosek::fusion::p_RangeDomain::_new_RangeDomain  (bool _2909,    std::shared_ptr< monty::ndarray< double,1 > > _2910,    std::shared_ptr< monty::ndarray< double,1 > > _2911,    std::shared_ptr< monty::ndarray< int,1 > > _2912,    std::shared_ptr< monty::ndarray< int,2 > > _2913,    int _2914){ return new mosek::fusion::RangeDomain(_2909,_2910,_2911,_2912,_2913,_2914); }mosek::fusion::RangeDomain::RangeDomain  (bool _2909,    std::shared_ptr< monty::ndarray< double,1 > > _2910,    std::shared_ptr< monty::ndarray< double,1 > > _2911,    std::shared_ptr< monty::ndarray< int,1 > > _2912,    std::shared_ptr< monty::ndarray< int,2 > > _2913,    int _2914) :    RangeDomain(new mosek::fusion::p_RangeDomain(this)){ mosek::fusion::p_RangeDomain::_get_impl(this)->_initialize(_2909,_2910,_2911,_2912,_2913,_2914); }void mosek::fusion::p_RangeDomain::_initialize  (bool _2909,    std::shared_ptr< monty::ndarray< double,1 > > _2910,    std::shared_ptr< monty::ndarray< double,1 > > _2911,    std::shared_ptr< monty::ndarray< int,1 > > _2912,    std::shared_ptr< monty::ndarray< int,2 > > _2913,    int _2914){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<double> _ptr__2910(_2910 ? _2910->raw() : nullptr, _2910 ? _2910->size(0) : 0);
    _checked_ptr_1<double> _ptr__2911(_2911 ? _2911->raw() : nullptr, _2911 ? _2911->size(0) : 0);
    _checked_ptr_1<int> _ptr__2912(_2912 ? _2912->raw() : nullptr, _2912 ? _2912->size(0) : 0);
    cardinal_flag = false;
    shape = _2912;
    sparsity = nullptr;
    mosek::fusion::p_RangeDomain::_get_impl(::mosek::fusion::RangeDomain::t(_pubthis))->scalable = _2909;
    mosek::fusion::p_RangeDomain::_get_impl(::mosek::fusion::RangeDomain::t(_pubthis))->ub = _2911;
    mosek::fusion::p_RangeDomain::_get_impl(::mosek::fusion::RangeDomain::t(_pubthis))->lb = _2910;
    mosek::fusion::p_RangeDomain::_get_impl(::mosek::fusion::RangeDomain::t(_pubthis))->sparsity = _2913;
    mosek::fusion::p_RangeDomain::_get_impl(::mosek::fusion::RangeDomain::t(_pubthis))->empty = false;
  }
}mosek::fusion::RangeDomain::t mosek::fusion::p_RangeDomain::_new_RangeDomain  (monty::rc_ptr< ::mosek::fusion::RangeDomain > _2915){ return new mosek::fusion::RangeDomain(_2915); }mosek::fusion::RangeDomain::RangeDomain  (monty::rc_ptr< ::mosek::fusion::RangeDomain > _2915) :    RangeDomain(new mosek::fusion::p_RangeDomain(this)){ mosek::fusion::p_RangeDomain::_get_impl(this)->_initialize(_2915); }void mosek::fusion::p_RangeDomain::_initialize  (monty::rc_ptr< ::mosek::fusion::RangeDomain > _2915){monty::rc_reserve __reserve_this(_pubthis);   {
    cardinal_flag = mosek::fusion::p_RangeDomain::_get_impl(_2915)->cardinal_flag;
    sparsity = mosek::fusion::p_RangeDomain::_get_impl(_2915)->sparsity;
    scalable = mosek::fusion::p_RangeDomain::_get_impl(_2915)->scalable;
    shape = mosek::fusion::p_RangeDomain::_get_impl(_2915)->shape;
    ub = mosek::fusion::p_RangeDomain::_get_impl(_2915)->ub;
    lb = mosek::fusion::p_RangeDomain::_get_impl(_2915)->lb;
    empty = mosek::fusion::p_RangeDomain::_get_impl(_2915)->empty;
  }
}monty::rc_ptr< ::mosek::fusion::SymmetricRangeDomain > mosek::fusion::RangeDomain :: __mosek_2fusion_2RangeDomain__symmetric() { return mosek::fusion::p_RangeDomain::_get_impl(this)->__mosek_2fusion_2RangeDomain__symmetric(); }monty::rc_ptr< ::mosek::fusion::SymmetricRangeDomain > mosek::fusion::RangeDomain::symmetric() { return __mosek_2fusion_2RangeDomain__symmetric(); }
monty::rc_ptr< ::mosek::fusion::SymmetricRangeDomain > mosek::fusion::p_RangeDomain::__mosek_2fusion_2RangeDomain__symmetric(){
  return ::mosek::fusion::p_SymmetricRangeDomain::_new_SymmetricRangeDomain(::mosek::fusion::RangeDomain::t(_pubthis));
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain :: __mosek_2fusion_2RangeDomain__sparse(std::shared_ptr< monty::ndarray< int,2 > > _2916) { return mosek::fusion::p_RangeDomain::_get_impl(this)->__mosek_2fusion_2RangeDomain__sparse(_2916); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain::sparse(std::shared_ptr< monty::ndarray< int,2 > > _2916) { return __mosek_2fusion_2RangeDomain__sparse(_2916); }
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_RangeDomain::__mosek_2fusion_2RangeDomain__sparse(std::shared_ptr< monty::ndarray< int,2 > > _2916){
  mosek::fusion::p_RangeDomain::_get_impl(::mosek::fusion::RangeDomain::t(_pubthis))->sparsity = std::shared_ptr< monty::ndarray< int,2 > >(new monty::ndarray< int,2 >(monty::shape((int)((_2916)->size(0)),(int)((_2916)->size(1)))));
  {
    int _2917 = (int)0;
    for(;(_2917 < (int)((_2916)->size(0)));++ _2917)
    {
      {
        {
          int _2918 = (int)0;
          for(;(_2918 < (int)((_2916)->size(1)));++ _2918)
          {
            {
              ((*mosek::fusion::p_RangeDomain::_get_impl(::mosek::fusion::RangeDomain::t(_pubthis))->sparsity)(_2917,_2918)) = ((*_2916)(_2917,_2918));
            }
          }
        }
      }
    }
  }
  return ::mosek::fusion::RangeDomain::t(_pubthis);
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain :: __mosek_2fusion_2RangeDomain__sparse(std::shared_ptr< monty::ndarray< int,1 > > _2919) { return mosek::fusion::p_RangeDomain::_get_impl(this)->__mosek_2fusion_2RangeDomain__sparse(_2919); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain::sparse(std::shared_ptr< monty::ndarray< int,1 > > _2919) { return __mosek_2fusion_2RangeDomain__sparse(_2919); }
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_RangeDomain::__mosek_2fusion_2RangeDomain__sparse(std::shared_ptr< monty::ndarray< int,1 > > _2919){
  _checked_ptr_1<int> _ptr__2919(_2919 ? _2919->raw() : nullptr, _2919 ? _2919->size(0) : 0);
  mosek::fusion::p_RangeDomain::_get_impl(::mosek::fusion::RangeDomain::t(_pubthis))->sparsity = std::shared_ptr< monty::ndarray< int,2 > >(new monty::ndarray< int,2 >(monty::shape((int)((_2919)->size(0)),(int)1)));
  int _10099 = (int)0;
  int _10100 = (int)((_2919)->size(0));
  for (int _2920 = _10099; _2920 < _10100; ++_2920)
  {
    {
      ((*mosek::fusion::p_RangeDomain::_get_impl(::mosek::fusion::RangeDomain::t(_pubthis))->sparsity)(_2920,(int)0)) = _ptr__2919[_2920];
    }
  }
  return ::mosek::fusion::RangeDomain::t(_pubthis);
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain :: __mosek_2fusion_2RangeDomain__sparse() { return mosek::fusion::p_RangeDomain::_get_impl(this)->__mosek_2fusion_2RangeDomain__sparse(); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain::sparse() { return __mosek_2fusion_2RangeDomain__sparse(); }
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_RangeDomain::__mosek_2fusion_2RangeDomain__sparse(){
  mosek::fusion::p_RangeDomain::_get_impl(::mosek::fusion::RangeDomain::t(_pubthis))->empty = true;
  mosek::fusion::p_RangeDomain::_get_impl(::mosek::fusion::RangeDomain::t(_pubthis))->sparsity = nullptr;
  return ::mosek::fusion::RangeDomain::t(_pubthis);
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain :: __mosek_2fusion_2RangeDomain__integral() { return mosek::fusion::p_RangeDomain::_get_impl(this)->__mosek_2fusion_2RangeDomain__integral(); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain::integral() { return __mosek_2fusion_2RangeDomain__integral(); }
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_RangeDomain::__mosek_2fusion_2RangeDomain__integral(){
  cardinal_flag = true;
  return ::mosek::fusion::RangeDomain::t(_pubthis);
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain :: __mosek_2fusion_2RangeDomain__withShape(int _2921,int _2922,int _2923) { return mosek::fusion::p_RangeDomain::_get_impl(this)->__mosek_2fusion_2RangeDomain__withShape(_2921,_2922,_2923); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain::withShape(int _2921,int _2922,int _2923) { return __mosek_2fusion_2RangeDomain__withShape(_2921,_2922,_2923); }
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_RangeDomain::__mosek_2fusion_2RangeDomain__withShape(int _2921,int _2922,int _2923){
  shape = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2921),(int)(_2922),(int)(_2923)});
  return ::mosek::fusion::RangeDomain::t(_pubthis);
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain :: __mosek_2fusion_2RangeDomain__withShape(int _2924,int _2925) { return mosek::fusion::p_RangeDomain::_get_impl(this)->__mosek_2fusion_2RangeDomain__withShape(_2924,_2925); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain::withShape(int _2924,int _2925) { return __mosek_2fusion_2RangeDomain__withShape(_2924,_2925); }
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_RangeDomain::__mosek_2fusion_2RangeDomain__withShape(int _2924,int _2925){
  shape = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2924),(int)(_2925)});
  return ::mosek::fusion::RangeDomain::t(_pubthis);
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain :: __mosek_2fusion_2RangeDomain__withShape(int _2926) { return mosek::fusion::p_RangeDomain::_get_impl(this)->__mosek_2fusion_2RangeDomain__withShape(_2926); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain::withShape(int _2926) { return __mosek_2fusion_2RangeDomain__withShape(_2926); }
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_RangeDomain::__mosek_2fusion_2RangeDomain__withShape(int _2926){
  shape = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2926)});
  return ::mosek::fusion::RangeDomain::t(_pubthis);
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain :: __mosek_2fusion_2RangeDomain__withShape(std::shared_ptr< monty::ndarray< int,1 > > _2927) { return mosek::fusion::p_RangeDomain::_get_impl(this)->__mosek_2fusion_2RangeDomain__withShape(_2927); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::RangeDomain::withShape(std::shared_ptr< monty::ndarray< int,1 > > _2927) { return __mosek_2fusion_2RangeDomain__withShape(_2927); }
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_RangeDomain::__mosek_2fusion_2RangeDomain__withShape(std::shared_ptr< monty::ndarray< int,1 > > _2927){
  _checked_ptr_1<int> _ptr__2927(_2927 ? _2927->raw() : nullptr, _2927 ? _2927->size(0) : 0);
  shape = _2927;
  return ::mosek::fusion::RangeDomain::t(_pubthis);
}
bool mosek::fusion::p_RangeDomain::match_shape(std::shared_ptr< monty::ndarray< int,1 > > _2928){
  _checked_ptr_1<int> _ptr__2928(_2928 ? _2928->raw() : nullptr, _2928 ? _2928->size(0) : 0);
  if (scalable)
  {
    {
      return true;
    }
  }
  else if(((int)((shape)->size(0)) != (int)((_2928)->size(0))))
  {
    {
      return false;
    }
  }
  else
  {
    {
      int _10101 = (int)0;
      int _10102 = (int)((shape)->size(0));
      for (int _2929 = _10101; _2929 < _10102; ++_2929)
      {
        {
          if ((((*shape)(_2929)) != _ptr__2928[_2929]))
          {
            {
              return false;
            }
          }
          {}
        }
      }
    }
  }
  return true;
}
void mosek::fusion::p_RangeDomain::destroy(){ub.reset();lb.reset();sparsity.reset();shape.reset();}void mosek::fusion::RangeDomain::destroy() { mosek::fusion::p_RangeDomain::_get_impl(this)->destroy(); }mosek::fusion::SymmetricLinearDomain::SymmetricLinearDomain(mosek::fusion::p_SymmetricLinearDomain *_impl) : _impl(_impl) { /*std::cout << "SymmetricLinearDomain() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::SymmetricLinearDomain::~SymmetricLinearDomain() { delete _impl; _impl = nullptr; }mosek::fusion::p_SymmetricLinearDomain::p_SymmetricLinearDomain  (::mosek::fusion::SymmetricLinearDomain * _pubthis) :     _pubthis(_pubthis){}mosek::fusion::SymmetricLinearDomain::t mosek::fusion::p_SymmetricLinearDomain::_new_SymmetricLinearDomain  (monty::rc_ptr< ::mosek::fusion::LinearDomain > _2930){ return new mosek::fusion::SymmetricLinearDomain(_2930); }mosek::fusion::SymmetricLinearDomain::SymmetricLinearDomain  (monty::rc_ptr< ::mosek::fusion::LinearDomain > _2930) :    SymmetricLinearDomain(new mosek::fusion::p_SymmetricLinearDomain(this)){ mosek::fusion::p_SymmetricLinearDomain::_get_impl(this)->_initialize(_2930); }void mosek::fusion::p_SymmetricLinearDomain::_initialize  (monty::rc_ptr< ::mosek::fusion::LinearDomain > _2930){monty::rc_reserve __reserve_this(_pubthis);   {
    dom = _2930;
    shape = mosek::fusion::p_LinearDomain::_get_impl(_2930)->shape;
    key = mosek::fusion::p_LinearDomain::_get_impl(_2930)->key;
    cardinal_flag = mosek::fusion::p_LinearDomain::_get_impl(_2930)->cardinal_flag;
    sparsity = mosek::fusion::p_LinearDomain::_get_impl(_2930)->sparsity;
    if (((NULL != shape.get()) && (((int)((shape)->size(0)) != (int)2) || (((*shape)((int)0)) != ((*shape)((int)1))))))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Only square domains can be symmetric"));
      }
    }
    {}
    int _10103;
    bool _10104 = (NULL == shape.get());
    if (_10104)
    {
      _10103 = (int)0;
    }
    else
    {
      _10103 = ((*shape)((int)0));
    }
    dim = _10103;
  }
}monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::SymmetricLinearDomain :: __mosek_2fusion_2SymmetricLinearDomain__sparse(std::shared_ptr< monty::ndarray< int,2 > > _2931) { return mosek::fusion::p_SymmetricLinearDomain::_get_impl(this)->__mosek_2fusion_2SymmetricLinearDomain__sparse(_2931); }monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::SymmetricLinearDomain::sparse(std::shared_ptr< monty::ndarray< int,2 > > _2931) { return __mosek_2fusion_2SymmetricLinearDomain__sparse(_2931); }
monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::p_SymmetricLinearDomain::__mosek_2fusion_2SymmetricLinearDomain__sparse(std::shared_ptr< monty::ndarray< int,2 > > _2931){
  mosek::fusion::p_SymmetricLinearDomain::_get_impl(::mosek::fusion::SymmetricLinearDomain::t(_pubthis))->sparsity = std::shared_ptr< monty::ndarray< int,2 > >(new monty::ndarray< int,2 >(monty::shape((int)((_2931)->size(0)),(int)((_2931)->size(1)))));
  {
    int _2932 = (int)0;
    for(;(_2932 < (int)((_2931)->size(0)));++ _2932)
    {
      {
        {
          int _2933 = (int)0;
          for(;(_2933 < (int)((_2931)->size(1)));++ _2933)
          {
            {
              ((*mosek::fusion::p_SymmetricLinearDomain::_get_impl(::mosek::fusion::SymmetricLinearDomain::t(_pubthis))->sparsity)(_2932,_2933)) = ((*_2931)(_2932,_2933));
            }
          }
        }
      }
    }
  }
  return ::mosek::fusion::SymmetricLinearDomain::t(_pubthis);
}
monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::SymmetricLinearDomain :: __mosek_2fusion_2SymmetricLinearDomain__sparse(std::shared_ptr< monty::ndarray< int,1 > > _2934) { return mosek::fusion::p_SymmetricLinearDomain::_get_impl(this)->__mosek_2fusion_2SymmetricLinearDomain__sparse(_2934); }monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::SymmetricLinearDomain::sparse(std::shared_ptr< monty::ndarray< int,1 > > _2934) { return __mosek_2fusion_2SymmetricLinearDomain__sparse(_2934); }
monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::p_SymmetricLinearDomain::__mosek_2fusion_2SymmetricLinearDomain__sparse(std::shared_ptr< monty::ndarray< int,1 > > _2934){
  _checked_ptr_1<int> _ptr__2934(_2934 ? _2934->raw() : nullptr, _2934 ? _2934->size(0) : 0);
  mosek::fusion::p_SymmetricLinearDomain::_get_impl(::mosek::fusion::SymmetricLinearDomain::t(_pubthis))->sparsity = std::shared_ptr< monty::ndarray< int,2 > >(new monty::ndarray< int,2 >(monty::shape((int)((_2934)->size(0)),(int)1)));
  int _10105 = (int)0;
  int _10106 = (int)((_2934)->size(0));
  for (int _2935 = _10105; _2935 < _10106; ++_2935)
  {
    {
      ((*mosek::fusion::p_SymmetricLinearDomain::_get_impl(::mosek::fusion::SymmetricLinearDomain::t(_pubthis))->sparsity)(_2935,(int)0)) = _ptr__2934[_2935];
    }
  }
  return ::mosek::fusion::SymmetricLinearDomain::t(_pubthis);
}
monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::SymmetricLinearDomain :: __mosek_2fusion_2SymmetricLinearDomain__integral() { return mosek::fusion::p_SymmetricLinearDomain::_get_impl(this)->__mosek_2fusion_2SymmetricLinearDomain__integral(); }monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::SymmetricLinearDomain::integral() { return __mosek_2fusion_2SymmetricLinearDomain__integral(); }
monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::p_SymmetricLinearDomain::__mosek_2fusion_2SymmetricLinearDomain__integral(){
  cardinal_flag = true;
  return ::mosek::fusion::SymmetricLinearDomain::t(_pubthis);
}
bool mosek::fusion::p_SymmetricLinearDomain::match_shape(std::shared_ptr< monty::ndarray< int,1 > > _2936){
  _checked_ptr_1<int> _ptr__2936(_2936 ? _2936->raw() : nullptr, _2936 ? _2936->size(0) : 0);
  int _10107 = (int)0;
  int _10108 = (int)((_2936)->size(0));
  for (int _2937 = _10107; _2937 < _10108; ++_2937)
  {
    {
      if ((_ptr__2936[_2937] == ((*shape)(_2937))))
      {
        {
          return false;
        }
      }
      {}
    }
  }
  return true;
}
void mosek::fusion::p_SymmetricLinearDomain::destroy(){sparsity.reset();shape.reset();dom.reset();}void mosek::fusion::SymmetricLinearDomain::destroy() { mosek::fusion::p_SymmetricLinearDomain::_get_impl(this)->destroy(); }mosek::fusion::LinearDomain::LinearDomain(mosek::fusion::p_LinearDomain *_impl) : _impl(_impl) { /*std::cout << "LinearDomain() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::LinearDomain::~LinearDomain() { delete _impl; _impl = nullptr; }mosek::fusion::p_LinearDomain::p_LinearDomain  (::mosek::fusion::LinearDomain * _pubthis) :     _pubthis(_pubthis){}mosek::fusion::LinearDomain::t mosek::fusion::p_LinearDomain::_new_LinearDomain  (mosek::fusion::RelationKey _2938,    bool _2939,    std::shared_ptr< monty::ndarray< double,1 > > _2940,    std::shared_ptr< monty::ndarray< int,1 > > _2941){ return new mosek::fusion::LinearDomain(_2938,_2939,_2940,_2941); }mosek::fusion::LinearDomain::LinearDomain  (mosek::fusion::RelationKey _2938,    bool _2939,    std::shared_ptr< monty::ndarray< double,1 > > _2940,    std::shared_ptr< monty::ndarray< int,1 > > _2941) :    LinearDomain(new mosek::fusion::p_LinearDomain(this)){ mosek::fusion::p_LinearDomain::_get_impl(this)->_initialize(_2938,_2939,_2940,_2941); }void mosek::fusion::p_LinearDomain::_initialize  (mosek::fusion::RelationKey _2938,    bool _2939,    std::shared_ptr< monty::ndarray< double,1 > > _2940,    std::shared_ptr< monty::ndarray< int,1 > > _2941){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<double> _ptr__2940(_2940 ? _2940->raw() : nullptr, _2940 ? _2940->size(0) : 0);
    _checked_ptr_1<int> _ptr__2941(_2941 ? _2941->raw() : nullptr, _2941 ? _2941->size(0) : 0);
    mosek::fusion::p_LinearDomain::_initialize(_2938,_2939,_2940,_2941,nullptr,(int)1);
  }
}mosek::fusion::LinearDomain::t mosek::fusion::p_LinearDomain::_new_LinearDomain  (mosek::fusion::RelationKey _2942,    bool _2943,    std::shared_ptr< monty::ndarray< double,1 > > _2944,    std::shared_ptr< monty::ndarray< int,1 > > _2945,    std::shared_ptr< monty::ndarray< int,2 > > _2946,    int _2947){ return new mosek::fusion::LinearDomain(_2942,_2943,_2944,_2945,_2946,_2947); }mosek::fusion::LinearDomain::LinearDomain  (mosek::fusion::RelationKey _2942,    bool _2943,    std::shared_ptr< monty::ndarray< double,1 > > _2944,    std::shared_ptr< monty::ndarray< int,1 > > _2945,    std::shared_ptr< monty::ndarray< int,2 > > _2946,    int _2947) :    LinearDomain(new mosek::fusion::p_LinearDomain(this)){ mosek::fusion::p_LinearDomain::_get_impl(this)->_initialize(_2942,_2943,_2944,_2945,_2946,_2947); }void mosek::fusion::p_LinearDomain::_initialize  (mosek::fusion::RelationKey _2942,    bool _2943,    std::shared_ptr< monty::ndarray< double,1 > > _2944,    std::shared_ptr< monty::ndarray< int,1 > > _2945,    std::shared_ptr< monty::ndarray< int,2 > > _2946,    int _2947){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<double> _ptr__2944(_2944 ? _2944->raw() : nullptr, _2944 ? _2944->size(0) : 0);
    _checked_ptr_1<int> _ptr__2945(_2945 ? _2945->raw() : nullptr, _2945 ? _2945->size(0) : 0);
    mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->scalable = _2943;
    mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->shape = _2945;
    mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->key = _2942;
    mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->bnd = _2944;
    mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->sparsity = _2946;
    mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->cardinal_flag = false;
    mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->empty = false;
  }
}mosek::fusion::LinearDomain::t mosek::fusion::p_LinearDomain::_new_LinearDomain  (monty::rc_ptr< ::mosek::fusion::LinearDomain > _2948){ return new mosek::fusion::LinearDomain(_2948); }mosek::fusion::LinearDomain::LinearDomain  (monty::rc_ptr< ::mosek::fusion::LinearDomain > _2948) :    LinearDomain(new mosek::fusion::p_LinearDomain(this)){ mosek::fusion::p_LinearDomain::_get_impl(this)->_initialize(_2948); }void mosek::fusion::p_LinearDomain::_initialize  (monty::rc_ptr< ::mosek::fusion::LinearDomain > _2948){monty::rc_reserve __reserve_this(_pubthis);   {
    scalable = mosek::fusion::p_LinearDomain::_get_impl(_2948)->scalable;
    shape = mosek::fusion::p_LinearDomain::_get_impl(_2948)->shape;
    key = mosek::fusion::p_LinearDomain::_get_impl(_2948)->key;
    bnd = mosek::fusion::p_LinearDomain::_get_impl(_2948)->bnd;
    sparsity = mosek::fusion::p_LinearDomain::_get_impl(_2948)->sparsity;
    cardinal_flag = mosek::fusion::p_LinearDomain::_get_impl(_2948)->cardinal_flag;
    empty = mosek::fusion::p_LinearDomain::_get_impl(_2948)->empty;
  }
}monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::LinearDomain :: __mosek_2fusion_2LinearDomain__symmetric() { return mosek::fusion::p_LinearDomain::_get_impl(this)->__mosek_2fusion_2LinearDomain__symmetric(); }monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::LinearDomain::symmetric() { return __mosek_2fusion_2LinearDomain__symmetric(); }
monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::p_LinearDomain::__mosek_2fusion_2LinearDomain__symmetric(){
  return ::mosek::fusion::p_SymmetricLinearDomain::_new_SymmetricLinearDomain(::mosek::fusion::LinearDomain::t(_pubthis));
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain :: __mosek_2fusion_2LinearDomain__sparse(std::shared_ptr< monty::ndarray< int,2 > > _2949) { return mosek::fusion::p_LinearDomain::_get_impl(this)->__mosek_2fusion_2LinearDomain__sparse(_2949); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain::sparse(std::shared_ptr< monty::ndarray< int,2 > > _2949) { return __mosek_2fusion_2LinearDomain__sparse(_2949); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_LinearDomain::__mosek_2fusion_2LinearDomain__sparse(std::shared_ptr< monty::ndarray< int,2 > > _2949){
  mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->sparsity = std::shared_ptr< monty::ndarray< int,2 > >(new monty::ndarray< int,2 >(monty::shape((int)((_2949)->size(0)),(int)((_2949)->size(1)))));
  mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->empty = false;
  {
    int _2950 = (int)0;
    for(;(_2950 < (int)((_2949)->size(0)));++ _2950)
    {
      {
        {
          int _2951 = (int)0;
          for(;(_2951 < (int)((_2949)->size(1)));++ _2951)
          {
            {
              ((*mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->sparsity)(_2950,_2951)) = ((*_2949)(_2950,_2951));
            }
          }
        }
      }
    }
  }
  return ::mosek::fusion::LinearDomain::t(_pubthis);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain :: __mosek_2fusion_2LinearDomain__sparse(std::shared_ptr< monty::ndarray< int,1 > > _2952) { return mosek::fusion::p_LinearDomain::_get_impl(this)->__mosek_2fusion_2LinearDomain__sparse(_2952); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain::sparse(std::shared_ptr< monty::ndarray< int,1 > > _2952) { return __mosek_2fusion_2LinearDomain__sparse(_2952); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_LinearDomain::__mosek_2fusion_2LinearDomain__sparse(std::shared_ptr< monty::ndarray< int,1 > > _2952){
  _checked_ptr_1<int> _ptr__2952(_2952 ? _2952->raw() : nullptr, _2952 ? _2952->size(0) : 0);
  mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->sparsity = std::shared_ptr< monty::ndarray< int,2 > >(new monty::ndarray< int,2 >(monty::shape((int)((_2952)->size(0)),(int)1)));
  mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->empty = false;
  int _10109 = (int)0;
  int _10110 = (int)((_2952)->size(0));
  for (int _2953 = _10109; _2953 < _10110; ++_2953)
  {
    {
      ((*mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->sparsity)(_2953,(int)0)) = _ptr__2952[_2953];
    }
  }
  return ::mosek::fusion::LinearDomain::t(_pubthis);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain :: __mosek_2fusion_2LinearDomain__sparse() { return mosek::fusion::p_LinearDomain::_get_impl(this)->__mosek_2fusion_2LinearDomain__sparse(); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain::sparse() { return __mosek_2fusion_2LinearDomain__sparse(); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_LinearDomain::__mosek_2fusion_2LinearDomain__sparse(){
  mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->empty = true;
  mosek::fusion::p_LinearDomain::_get_impl(::mosek::fusion::LinearDomain::t(_pubthis))->sparsity = nullptr;
  return ::mosek::fusion::LinearDomain::t(_pubthis);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain :: __mosek_2fusion_2LinearDomain__integral() { return mosek::fusion::p_LinearDomain::_get_impl(this)->__mosek_2fusion_2LinearDomain__integral(); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain::integral() { return __mosek_2fusion_2LinearDomain__integral(); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_LinearDomain::__mosek_2fusion_2LinearDomain__integral(){
  cardinal_flag = true;
  return ::mosek::fusion::LinearDomain::t(_pubthis);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain :: __mosek_2fusion_2LinearDomain__withShape(int _2954,int _2955,int _2956) { return mosek::fusion::p_LinearDomain::_get_impl(this)->__mosek_2fusion_2LinearDomain__withShape(_2954,_2955,_2956); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain::withShape(int _2954,int _2955,int _2956) { return __mosek_2fusion_2LinearDomain__withShape(_2954,_2955,_2956); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_LinearDomain::__mosek_2fusion_2LinearDomain__withShape(int _2954,int _2955,int _2956){
  shape = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2954),(int)(_2955),(int)(_2956)});
  return ::mosek::fusion::LinearDomain::t(_pubthis);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain :: __mosek_2fusion_2LinearDomain__withShape(int _2957,int _2958) { return mosek::fusion::p_LinearDomain::_get_impl(this)->__mosek_2fusion_2LinearDomain__withShape(_2957,_2958); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain::withShape(int _2957,int _2958) { return __mosek_2fusion_2LinearDomain__withShape(_2957,_2958); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_LinearDomain::__mosek_2fusion_2LinearDomain__withShape(int _2957,int _2958){
  shape = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2957),(int)(_2958)});
  return ::mosek::fusion::LinearDomain::t(_pubthis);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain :: __mosek_2fusion_2LinearDomain__withShape(int _2959) { return mosek::fusion::p_LinearDomain::_get_impl(this)->__mosek_2fusion_2LinearDomain__withShape(_2959); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain::withShape(int _2959) { return __mosek_2fusion_2LinearDomain__withShape(_2959); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_LinearDomain::__mosek_2fusion_2LinearDomain__withShape(int _2959){
  shape = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2959)});
  return ::mosek::fusion::LinearDomain::t(_pubthis);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain :: __mosek_2fusion_2LinearDomain__withShape(std::shared_ptr< monty::ndarray< int,1 > > _2960) { return mosek::fusion::p_LinearDomain::_get_impl(this)->__mosek_2fusion_2LinearDomain__withShape(_2960); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::LinearDomain::withShape(std::shared_ptr< monty::ndarray< int,1 > > _2960) { return __mosek_2fusion_2LinearDomain__withShape(_2960); }
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_LinearDomain::__mosek_2fusion_2LinearDomain__withShape(std::shared_ptr< monty::ndarray< int,1 > > _2960){
  _checked_ptr_1<int> _ptr__2960(_2960 ? _2960->raw() : nullptr, _2960 ? _2960->size(0) : 0);
  shape = _2960;
  return ::mosek::fusion::LinearDomain::t(_pubthis);
}
bool mosek::fusion::p_LinearDomain::match_shape(std::shared_ptr< monty::ndarray< int,1 > > _2961){
  _checked_ptr_1<int> _ptr__2961(_2961 ? _2961->raw() : nullptr, _2961 ? _2961->size(0) : 0);
  if ((!scalable))
  {
    {
      int _10111 = (int)0;
      int _10112 = (int)((_2961)->size(0));
      for (int _2962 = _10111; _2962 < _10112; ++_2962)
      {
        {
          if ((_ptr__2961[_2962] == ((*shape)(_2962))))
          {
            {
              return false;
            }
          }
          {}
        }
      }
    }
  }
  {}
  return true;
}
void mosek::fusion::p_LinearDomain::destroy(){sparsity.reset();bnd.reset();shape.reset();}void mosek::fusion::LinearDomain::destroy() { mosek::fusion::p_LinearDomain::_get_impl(this)->destroy(); }mosek::fusion::Domain::Domain(mosek::fusion::p_Domain *_impl) : _impl(_impl) { /*std::cout << "Domain() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::Domain::~Domain() { delete _impl; _impl = nullptr; }mosek::fusion::p_Domain::p_Domain  (::mosek::fusion::Domain * _pubthis) :     _pubthis(_pubthis){}long long mosek::fusion::p_Domain::dimsize(std::shared_ptr< monty::ndarray< int,1 > > _2963){
  _checked_ptr_1<int> _ptr__2963(_2963 ? _2963->raw() : nullptr, _2963 ? _2963->size(0) : 0);
  long long _2964 = (long long)1;
  int _10113 = (int)0;
  int _10114 = (int)((_2963)->size(0));
  for (int _2965 = _10113; _2965 < _10114; ++_2965)
  {
    {
      _2964 *= _ptr__2963[_2965];
    }
  }
  return _2964;
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::mkRangedDomain(monty::rc_ptr< ::mosek::fusion::Matrix > _2966,monty::rc_ptr< ::mosek::fusion::Matrix > _2967){
  if (((mosek::fusion::p_Matrix::_get_impl(_2966)->dimi != mosek::fusion::p_Matrix::_get_impl(_2967)->dimi) || (mosek::fusion::p_Matrix::_get_impl(_2966)->dimj != mosek::fusion::p_Matrix::_get_impl(_2967)->dimj)))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching dimensions in domain"));
    }
  }
  {}
  if ((_2966->isSparse() && _2967->isSparse()))
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _2968 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2966->numNonzeros())));
      _checked_ptr_1<int> _ptr__2968(_2968 ? _2968->raw() : nullptr,_2968 ? _2968->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _2969 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2966->numNonzeros())));
      _checked_ptr_1<int> _ptr__2969(_2969 ? _2969->raw() : nullptr,_2969 ? _2969->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _2970 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_2966->numNonzeros())));
      _checked_ptr_1<double> _ptr__2970(_2970 ? _2970->raw() : nullptr,_2970 ? _2970->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _2971 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2967->numNonzeros())));
      _checked_ptr_1<int> _ptr__2971(_2971 ? _2971->raw() : nullptr,_2971 ? _2971->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _2972 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2967->numNonzeros())));
      _checked_ptr_1<int> _ptr__2972(_2972 ? _2972->raw() : nullptr,_2972 ? _2972->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _2973 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_2967->numNonzeros())));
      _checked_ptr_1<double> _ptr__2973(_2973 ? _2973->raw() : nullptr,_2973 ? _2973->size(0) : 0);
      _2966->getDataAsTriplets(_2968,_2969,_2970);
      _2967->getDataAsTriplets(_2971,_2972,_2973);
      long long _2974 = (int)0;
      {
        int _2975 = (int)0;
        int _2976 = (int)0;
        while ( ((_2976 < (int)((_2968)->size(0))) && (_2975 < (int)((_2971)->size(0)))) )
        {
          {
            if (((_ptr__2968[_2976] < _ptr__2971[_2975]) || ((_ptr__2968[_2976] == _ptr__2971[_2975]) && (_ptr__2969[_2976] < _ptr__2972[_2975]))))
            {
              {
                ++ _2974;
                ++ _2976;
              }
            }
            else
            {
              {
                if (((_ptr__2968[_2976] > _ptr__2971[_2975]) || ((_ptr__2968[_2976] == _ptr__2971[_2975]) && (_ptr__2969[_2976] > _ptr__2972[_2975]))))
                {
                  {
                    ++ _2974;
                    ++ _2975;
                  }
                }
                else
                {
                  {
                    ++ _2974;
                    ++ _2976;
                    ++ _2975;
                  }
                }
              }
            }
          }
        }
        _2974 += ((int)((_2968)->size(0)) - _2976);
        _2974 += ((int)((_2971)->size(0)) - _2975);
      }
      std::shared_ptr< monty::ndarray< int,2 > > _2977 = std::shared_ptr< monty::ndarray< int,2 > >(new monty::ndarray< int,2 >(monty::shape(_2974,(int)2)));
      std::shared_ptr< monty::ndarray< double,1 > > _2978 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_2974)));
      _checked_ptr_1<double> _ptr__2978(_2978 ? _2978->raw() : nullptr,_2978 ? _2978->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _2979 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_2974)));
      _checked_ptr_1<double> _ptr__2979(_2979 ? _2979->raw() : nullptr,_2979 ? _2979->size(0) : 0);
      {
        int _2980 = (int)0;
        int _2981 = (int)0;
        int _2982 = (int)0;
        while ( ((_2982 < (int)((_2968)->size(0))) && (_2981 < (int)((_2971)->size(0)))) )
        {
          {
            if (((_ptr__2968[_2982] < _ptr__2971[_2981]) || ((_ptr__2968[_2982] == _ptr__2971[_2981]) && (_ptr__2969[_2982] < _ptr__2972[_2981]))))
            {
              {
                ((*_2977)(_2980,(int)0)) = _ptr__2968[_2982];
                ((*_2977)(_2980,(int)1)) = _ptr__2969[_2982];
                _ptr__2978[_2980] = _ptr__2970[_2982];
                _ptr__2979[_2980] = 0.0;
                ++ _2980;
                ++ _2982;
              }
            }
            else
            {
              {
                if (((_ptr__2968[_2982] > _ptr__2971[_2981]) || ((_ptr__2968[_2982] == _ptr__2971[_2981]) && (_ptr__2969[_2982] > _ptr__2972[_2981]))))
                {
                  {
                    ((*_2977)(_2980,(int)0)) = _ptr__2971[_2981];
                    ((*_2977)(_2980,(int)1)) = _ptr__2972[_2981];
                    _ptr__2978[_2980] = 0.0;
                    _ptr__2979[_2980] = _ptr__2973[_2981];
                    ++ _2980;
                    ++ _2981;
                  }
                }
                else
                {
                  {
                    ((*_2977)(_2980,(int)0)) = _ptr__2971[_2981];
                    ((*_2977)(_2980,(int)1)) = _ptr__2972[_2981];
                    _ptr__2978[_2980] = _ptr__2970[_2981];
                    _ptr__2979[_2980] = _ptr__2973[_2981];
                    ++ _2980;
                    ++ _2982;
                    ++ _2981;
                  }
                }
              }
            }
          }
        }
        while ( (_2982 < (int)((_2968)->size(0))) )
        {
          {
            ((*_2977)(_2980,(int)0)) = _ptr__2968[_2982];
            ((*_2977)(_2980,(int)1)) = _ptr__2969[_2982];
            _ptr__2978[_2980] = _ptr__2970[_2982];
            _ptr__2979[_2980] = 0.0;
            ++ _2980;
            ++ _2982;
          }
        }
        while ( (_2981 < (int)((_2971)->size(0))) )
        {
          {
            ((*_2977)(_2980,(int)0)) = _ptr__2971[_2981];
            ((*_2977)(_2980,(int)1)) = _ptr__2972[_2981];
            _ptr__2978[_2980] = 0.0;
            _ptr__2979[_2980] = _ptr__2973[_2981];
            ++ _2980;
            ++ _2981;
          }
        }
      }
      return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(false,_2978,_2979,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(mosek::fusion::p_Matrix::_get_impl(_2966)->dimi),(int)(mosek::fusion::p_Matrix::_get_impl(_2966)->dimj)}),_2977,(int)1);
    }
  }
  else
  {
    {
      int _2983 = mosek::fusion::p_Matrix::_get_impl(_2966)->dimj;
      int _2984 = mosek::fusion::p_Matrix::_get_impl(_2966)->dimi;
      int _2985 = safe_mul( _2984,_2983 );
      std::shared_ptr< monty::ndarray< double,1 > > _2986;
      _checked_ptr_1<double> _ptr__2986(_2986 ? _2986->raw() : nullptr,_2986 ? _2986->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _2987;
      _checked_ptr_1<double> _ptr__2987(_2987 ? _2987->raw() : nullptr,_2987 ? _2987->size(0) : 0);
      if (_2966->isSparse())
      {
        {
          _2986 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_2985)));
          _ptr__2986.update(_2986 ? _2986->raw() : nullptr, _2986 ? _2986->size(0) : 0);
          std::shared_ptr< monty::ndarray< int,1 > > _2988 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2966->numNonzeros())));
          _checked_ptr_1<int> _ptr__2988(_2988 ? _2988->raw() : nullptr,_2988 ? _2988->size(0) : 0);
          std::shared_ptr< monty::ndarray< int,1 > > _2989 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2966->numNonzeros())));
          _checked_ptr_1<int> _ptr__2989(_2989 ? _2989->raw() : nullptr,_2989 ? _2989->size(0) : 0);
          std::shared_ptr< monty::ndarray< double,1 > > _2990 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_2966->numNonzeros())));
          _checked_ptr_1<double> _ptr__2990(_2990 ? _2990->raw() : nullptr,_2990 ? _2990->size(0) : 0);
          _2966->getDataAsTriplets(_2988,_2989,_2990);
          int _10115 = (int)0;
          int _10116 = (int)((_2988)->size(0));
          for (int _2991 = _10115; _2991 < _10116; ++_2991)
          {
            {
              _ptr__2986[safe_add( safe_mul( _ptr__2988[_2991],_2983 ),_ptr__2989[_2991] )] = _ptr__2990[_2991];
            }
          }
        }
      }
      else
      {
        {
          _2986 = _2966->getDataAsArray();
          _ptr__2986.update(_2986 ? _2986->raw() : nullptr, _2986 ? _2986->size(0) : 0);
        }
      }
      if (_2967->isSparse())
      {
        {
          _2987 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_2985)));
          _ptr__2987.update(_2987 ? _2987->raw() : nullptr, _2987 ? _2987->size(0) : 0);
          std::shared_ptr< monty::ndarray< int,1 > > _2992 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2967->numNonzeros())));
          _checked_ptr_1<int> _ptr__2992(_2992 ? _2992->raw() : nullptr,_2992 ? _2992->size(0) : 0);
          std::shared_ptr< monty::ndarray< int,1 > > _2993 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_2967->numNonzeros())));
          _checked_ptr_1<int> _ptr__2993(_2993 ? _2993->raw() : nullptr,_2993 ? _2993->size(0) : 0);
          std::shared_ptr< monty::ndarray< double,1 > > _2994 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_2967->numNonzeros())));
          _checked_ptr_1<double> _ptr__2994(_2994 ? _2994->raw() : nullptr,_2994 ? _2994->size(0) : 0);
          _2967->getDataAsTriplets(_2992,_2993,_2994);
          int _10117 = (int)0;
          int _10118 = (int)((_2992)->size(0));
          for (int _2995 = _10117; _2995 < _10118; ++_2995)
          {
            {
              _ptr__2987[safe_add( safe_mul( _ptr__2992[_2995],_2983 ),_ptr__2993[_2995] )] = _ptr__2994[_2995];
            }
          }
        }
      }
      else
      {
        {
          _2987 = _2967->getDataAsArray();
          _ptr__2987.update(_2987 ? _2987->raw() : nullptr, _2987 ? _2987->size(0) : 0);
        }
      }
      return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(false,_2986,_2987,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(mosek::fusion::p_Matrix::_get_impl(_2966)->dimi),(int)(mosek::fusion::p_Matrix::_get_impl(_2966)->dimj)}),nullptr,(int)1);
    }
  }
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::mkRangedDomain(std::shared_ptr< monty::ndarray< double,2 > > _2996,std::shared_ptr< monty::ndarray< double,2 > > _2997){
  if ((((int)((_2996)->size(0)) != (int)((_2997)->size(0))) || ((int)((_2996)->size(1)) != (int)((_2997)->size(1)))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching dimensions in domain"));
    }
  }
  {}
  int _2998 = (int)((_2996)->size(1));
  int _2999 = (int)((_2996)->size(0));
  int _3000 = safe_mul( _2999,_2998 );
  std::shared_ptr< monty::ndarray< double,1 > > _3001 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_3000)));
  _checked_ptr_1<double> _ptr__3001(_3001 ? _3001->raw() : nullptr,_3001 ? _3001->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _3002 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_3000)));
  _checked_ptr_1<double> _ptr__3002(_3002 ? _3002->raw() : nullptr,_3002 ? _3002->size(0) : 0);
  int _3003 = (int)0;
  int _10119 = (int)0;
  int _10120 = _2999;
  for (int _3004 = _10119; _3004 < _10120; ++_3004)
  {
    {
      int _10121 = (int)0;
      int _10122 = _2998;
      for (int _3005 = _10121; _3005 < _10122; ++_3005)
      {
        {
          _ptr__3001[_3003] = ((*_2996)(_3004,_3005));
          _ptr__3002[_3003] = ((*_2997)(_3004,_3005));
          ++ _3003;
        }
      }
    }
  }
  return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(false,_3001,_3002,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_2999),(int)(_2998)}),nullptr,(int)1);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::mkLinearDomain(mosek::fusion::RelationKey _3006,monty::rc_ptr< ::mosek::fusion::Matrix > _3007){
  if (_3007->isSparse())
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _3008 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_3007->numNonzeros())));
      _checked_ptr_1<int> _ptr__3008(_3008 ? _3008->raw() : nullptr,_3008 ? _3008->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _3009 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_3007->numNonzeros())));
      _checked_ptr_1<int> _ptr__3009(_3009 ? _3009->raw() : nullptr,_3009 ? _3009->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _3010 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_3007->numNonzeros())));
      _checked_ptr_1<double> _ptr__3010(_3010 ? _3010->raw() : nullptr,_3010 ? _3010->size(0) : 0);
      _3007->getDataAsTriplets(_3008,_3009,_3010);
      std::shared_ptr< monty::ndarray< int,2 > > _3011 = std::shared_ptr< monty::ndarray< int,2 > >(new monty::ndarray< int,2 >(monty::shape((int)((_3008)->size(0)),(int)2)));
      int _10123 = (int)0;
      int _10124 = (int)((_3008)->size(0));
      for (int _3012 = _10123; _3012 < _10124; ++_3012)
      {
        {
          ((*_3011)(_3012,(int)0)) = _ptr__3008[_3012];
          ((*_3011)(_3012,(int)1)) = _ptr__3009[_3012];
        }
      }
      return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(_3006,false,_3010,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(mosek::fusion::p_Matrix::_get_impl(_3007)->dimi),(int)(mosek::fusion::p_Matrix::_get_impl(_3007)->dimj)}),_3011,(int)1);
    }
  }
  else
  {
    {
      return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(_3006,false,_3007->getDataAsArray(),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(mosek::fusion::p_Matrix::_get_impl(_3007)->dimi),(int)(mosek::fusion::p_Matrix::_get_impl(_3007)->dimj)}),nullptr,(int)1);
    }
  }
}
long long mosek::fusion::p_Domain::prod(std::shared_ptr< monty::ndarray< int,1 > > _3013){
  _checked_ptr_1<int> _ptr__3013(_3013 ? _3013->raw() : nullptr, _3013 ? _3013->size(0) : 0);
  long long _3014 = (int)1;
  int _10125 = (int)0;
  int _10126 = (int)((_3013)->size(0));
  for (int _3015 = _10125; _3015 < _10126; ++_3015)
  {
    {
      _3014 *= _ptr__3013[_3015];
    }
  }
  return _3014;
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::inRange(bool _3016,std::shared_ptr< monty::ndarray< double,1 > > _3017,std::shared_ptr< monty::ndarray< double,1 > > _3018,std::shared_ptr< monty::ndarray< int,2 > > _3019,std::shared_ptr< monty::ndarray< int,1 > > _3020){
  _checked_ptr_1<double> _ptr__3017(_3017 ? _3017->raw() : nullptr, _3017 ? _3017->size(0) : 0);
  _checked_ptr_1<double> _ptr__3018(_3018 ? _3018->raw() : nullptr, _3018 ? _3018->size(0) : 0);
  _checked_ptr_1<int> _ptr__3020(_3020 ? _3020->raw() : nullptr, _3020 ? _3020->size(0) : 0);
  if (((!_3016) && ((int)((_3017)->size(0)) != (int)((_3018)->size(0)))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Mismatching lengths of upper and lower bounds."));
    }
  }
  {}
  if (((NULL != _3019.get()) && ((int)((_3019)->size(0)) != (int)((_3017)->size(0)))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Mismatching lengths of upper/lower bounds and sparsity."));
    }
  }
  {}
  int _10127 = (int)0;
  int _10128 = (int)((_3018)->size(0));
  for (int _3021 = _10127; _3021 < _10128; ++_3021)
  {
    {
      if ((_ptr__3017[_3021] > _ptr__3018[_3021]))
      {
        {
          throw ::mosek::fusion::DomainError(std::string ("Invalid range specified"));
        }
      }
      {}
    }
  }
  if (((NULL != _3020.get()) && (::mosek::fusion::p_Domain::dimsize(_3020) != (int)((_3017)->size(0)))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Mismatching dimensions."));
    }
  }
  {}
  return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(_3016,_3017,_3018,_3020)->__mosek_2fusion_2RangeDomain__sparse(_3019);
}
monty::rc_ptr< ::mosek::fusion::SymmetricRangeDomain > mosek::fusion::Domain::symmetric  ( monty::rc_ptr< ::mosek::fusion::RangeDomain > _3022) { return mosek::fusion::p_Domain::symmetric(_3022); }monty::rc_ptr< ::mosek::fusion::SymmetricRangeDomain > mosek::fusion::p_Domain::symmetric(monty::rc_ptr< ::mosek::fusion::RangeDomain > _3022){
  return _3022->__mosek_2fusion_2RangeDomain__symmetric();
}
monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::Domain::symmetric  ( monty::rc_ptr< ::mosek::fusion::LinearDomain > _3023) { return mosek::fusion::p_Domain::symmetric(_3023); }monty::rc_ptr< ::mosek::fusion::SymmetricLinearDomain > mosek::fusion::p_Domain::symmetric(monty::rc_ptr< ::mosek::fusion::LinearDomain > _3023){
  return _3023->__mosek_2fusion_2LinearDomain__symmetric();
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::sparse  ( monty::rc_ptr< ::mosek::fusion::RangeDomain > _3024,    std::shared_ptr< monty::ndarray< int,2 > > _3025) { return mosek::fusion::p_Domain::sparse(_3024,_3025); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::sparse(monty::rc_ptr< ::mosek::fusion::RangeDomain > _3024,std::shared_ptr< monty::ndarray< int,2 > > _3025){
  return _3024->__mosek_2fusion_2RangeDomain__sparse(_3025);
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::sparse  ( monty::rc_ptr< ::mosek::fusion::RangeDomain > _3026,    std::shared_ptr< monty::ndarray< int,1 > > _3027) { return mosek::fusion::p_Domain::sparse(_3026,_3027); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::sparse(monty::rc_ptr< ::mosek::fusion::RangeDomain > _3026,std::shared_ptr< monty::ndarray< int,1 > > _3027){
  _checked_ptr_1<int> _ptr__3027(_3027 ? _3027->raw() : nullptr, _3027 ? _3027->size(0) : 0);
  return _3026->__mosek_2fusion_2RangeDomain__sparse(_3027);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::sparse  ( monty::rc_ptr< ::mosek::fusion::LinearDomain > _3028,    std::shared_ptr< monty::ndarray< int,2 > > _3029) { return mosek::fusion::p_Domain::sparse(_3028,_3029); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::sparse(monty::rc_ptr< ::mosek::fusion::LinearDomain > _3028,std::shared_ptr< monty::ndarray< int,2 > > _3029){
  return _3028->__mosek_2fusion_2LinearDomain__sparse(_3029);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::sparse  ( monty::rc_ptr< ::mosek::fusion::LinearDomain > _3030,    std::shared_ptr< monty::ndarray< int,1 > > _3031) { return mosek::fusion::p_Domain::sparse(_3030,_3031); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::sparse(monty::rc_ptr< ::mosek::fusion::LinearDomain > _3030,std::shared_ptr< monty::ndarray< int,1 > > _3031){
  _checked_ptr_1<int> _ptr__3031(_3031 ? _3031->raw() : nullptr, _3031 ? _3031->size(0) : 0);
  return _3030->__mosek_2fusion_2LinearDomain__sparse(_3031);
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::integral  ( monty::rc_ptr< ::mosek::fusion::RangeDomain > _3032) { return mosek::fusion::p_Domain::integral(_3032); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::integral(monty::rc_ptr< ::mosek::fusion::RangeDomain > _3032){
  return _3032->__mosek_2fusion_2RangeDomain__integral();
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::integral  ( monty::rc_ptr< ::mosek::fusion::LinearDomain > _3033) { return mosek::fusion::p_Domain::integral(_3033); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::integral(monty::rc_ptr< ::mosek::fusion::LinearDomain > _3033){
  return _3033->__mosek_2fusion_2LinearDomain__integral();
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::integral  ( monty::rc_ptr< ::mosek::fusion::ConeDomain > _3034) { return mosek::fusion::p_Domain::integral(_3034); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::integral(monty::rc_ptr< ::mosek::fusion::ConeDomain > _3034){
  return _3034->__mosek_2fusion_2ConeDomain__integral();
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::axis  ( monty::rc_ptr< ::mosek::fusion::ConeDomain > _3035,    int _3036) { return mosek::fusion::p_Domain::axis(_3035,_3036); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::axis(monty::rc_ptr< ::mosek::fusion::ConeDomain > _3035,int _3036){
  return _3035->__mosek_2fusion_2ConeDomain__axis(_3036);
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inDPowerCone  ( double _3037,    std::shared_ptr< monty::ndarray< int,1 > > _3038) { return mosek::fusion::p_Domain::inDPowerCone(_3037,_3038); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inDPowerCone(double _3037,std::shared_ptr< monty::ndarray< int,1 > > _3038){
  _checked_ptr_1<int> _ptr__3038(_3038 ? _3038->raw() : nullptr, _3038 ? _3038->size(0) : 0);
  std::vector<int> _10129;
  for (int _3039 = (int)0, _10130 = (int)((_3038)->size(0)); _3039 < _10130 ; ++_3039)
  {
    _10129.push_back(_ptr__3038[_3039]);
  }
  auto _10131 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_10129.size()),_10129.begin(),_10129.end()));
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InDPowCone,_3037,_10131);
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inDPowerCone  ( double _3040,    int _3041) { return mosek::fusion::p_Domain::inDPowerCone(_3040,_3041); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inDPowerCone(double _3040,int _3041){
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InDPowCone,_3040,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_3041),(int)((int)3)}));
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inDPowerCone  ( double _3042) { return mosek::fusion::p_Domain::inDPowerCone(_3042); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inDPowerCone(double _3042){
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InDPowCone,_3042,nullptr);
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inPPowerCone  ( double _3043,    std::shared_ptr< monty::ndarray< int,1 > > _3044) { return mosek::fusion::p_Domain::inPPowerCone(_3043,_3044); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inPPowerCone(double _3043,std::shared_ptr< monty::ndarray< int,1 > > _3044){
  _checked_ptr_1<int> _ptr__3044(_3044 ? _3044->raw() : nullptr, _3044 ? _3044->size(0) : 0);
  std::vector<int> _10132;
  for (int _3045 = (int)0, _10133 = (int)((_3044)->size(0)); _3045 < _10133 ; ++_3045)
  {
    _10132.push_back(_ptr__3044[_3045]);
  }
  auto _10134 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_10132.size()),_10132.begin(),_10132.end()));
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InPPowCone,_3043,_10134);
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inPPowerCone  ( double _3046,    int _3047) { return mosek::fusion::p_Domain::inPPowerCone(_3046,_3047); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inPPowerCone(double _3046,int _3047){
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InPPowCone,_3046,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_3047),(int)((int)3)}));
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inPPowerCone  ( double _3048) { return mosek::fusion::p_Domain::inPPowerCone(_3048); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inPPowerCone(double _3048){
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InPPowCone,_3048,nullptr);
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inDExpCone  ( std::shared_ptr< monty::ndarray< int,1 > > _3049) { return mosek::fusion::p_Domain::inDExpCone(_3049); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inDExpCone(std::shared_ptr< monty::ndarray< int,1 > > _3049){
  _checked_ptr_1<int> _ptr__3049(_3049 ? _3049->raw() : nullptr, _3049 ? _3049->size(0) : 0);
  std::vector<int> _10135;
  for (int _3050 = (int)0, _10136 = (int)((_3049)->size(0)); _3050 < _10136 ; ++_3050)
  {
    _10135.push_back(_ptr__3049[_3050]);
  }
  auto _10137 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_10135.size()),_10135.begin(),_10135.end()));
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InDExpCone,_10137);
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inDExpCone  ( int _3051) { return mosek::fusion::p_Domain::inDExpCone(_3051); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inDExpCone(int _3051){
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InDExpCone,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_3051),(int)((int)3)}));
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inDExpCone  ( ) { return mosek::fusion::p_Domain::inDExpCone(); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inDExpCone(){
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InDExpCone,nullptr);
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inPExpCone  ( std::shared_ptr< monty::ndarray< int,1 > > _3052) { return mosek::fusion::p_Domain::inPExpCone(_3052); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inPExpCone(std::shared_ptr< monty::ndarray< int,1 > > _3052){
  _checked_ptr_1<int> _ptr__3052(_3052 ? _3052->raw() : nullptr, _3052 ? _3052->size(0) : 0);
  std::vector<int> _10138;
  for (int _3053 = (int)0, _10139 = (int)((_3052)->size(0)); _3053 < _10139 ; ++_3053)
  {
    _10138.push_back(_ptr__3052[_3053]);
  }
  auto _10140 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_10138.size()),_10138.begin(),_10138.end()));
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InPExpCone,_10140);
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inPExpCone  ( int _3054) { return mosek::fusion::p_Domain::inPExpCone(_3054); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inPExpCone(int _3054){
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InPExpCone,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_3054),(int)((int)3)}));
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inPExpCone  ( ) { return mosek::fusion::p_Domain::inPExpCone(); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inPExpCone(){
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InPExpCone,nullptr);
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inRotatedQCone  ( std::shared_ptr< monty::ndarray< int,1 > > _3055) { return mosek::fusion::p_Domain::inRotatedQCone(_3055); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inRotatedQCone(std::shared_ptr< monty::ndarray< int,1 > > _3055){
  _checked_ptr_1<int> _ptr__3055(_3055 ? _3055->raw() : nullptr, _3055 ? _3055->size(0) : 0);
  std::vector<int> _10141;
  for (int _3056 = (int)0, _10142 = (int)((_3055)->size(0)); _3056 < _10142 ; ++_3056)
  {
    _10141.push_back(_ptr__3055[_3056]);
  }
  auto _10143 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_10141.size()),_10141.begin(),_10141.end()));
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InRotatedQCone,0.0,_10143);
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inRotatedQCone  ( int _3057,    int _3058) { return mosek::fusion::p_Domain::inRotatedQCone(_3057,_3058); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inRotatedQCone(int _3057,int _3058){
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InRotatedQCone,0.0,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_3057),(int)(_3058)}));
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inRotatedQCone  ( int _3059) { return mosek::fusion::p_Domain::inRotatedQCone(_3059); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inRotatedQCone(int _3059){
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InRotatedQCone,0.0,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_3059)}));
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inRotatedQCone  ( ) { return mosek::fusion::p_Domain::inRotatedQCone(); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inRotatedQCone(){
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InRotatedQCone,0.0,nullptr);
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inQCone  ( std::shared_ptr< monty::ndarray< int,1 > > _3060) { return mosek::fusion::p_Domain::inQCone(_3060); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inQCone(std::shared_ptr< monty::ndarray< int,1 > > _3060){
  _checked_ptr_1<int> _ptr__3060(_3060 ? _3060->raw() : nullptr, _3060 ? _3060->size(0) : 0);
  std::vector<int> _10144;
  for (int _3061 = (int)0, _10145 = (int)((_3060)->size(0)); _3061 < _10145 ; ++_3061)
  {
    _10144.push_back(_ptr__3060[_3061]);
  }
  auto _10146 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_10144.size()),_10144.begin(),_10144.end()));
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InQCone,0.0,_10146);
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inQCone  ( int _3062,    int _3063) { return mosek::fusion::p_Domain::inQCone(_3062,_3063); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inQCone(int _3062,int _3063){
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InQCone,0.0,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_3062),(int)(_3063)}));
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inQCone  ( int _3064) { return mosek::fusion::p_Domain::inQCone(_3064); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inQCone(int _3064){
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InQCone,0.0,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_3064)}));
}
monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::Domain::inQCone  ( ) { return mosek::fusion::p_Domain::inQCone(); }monty::rc_ptr< ::mosek::fusion::ConeDomain > mosek::fusion::p_Domain::inQCone(){
  return ::mosek::fusion::p_ConeDomain::_new_ConeDomain(::mosek::fusion::QConeKey::InQCone,0.0,nullptr);
}
monty::rc_ptr< ::mosek::fusion::LinPSDDomain > mosek::fusion::Domain::isLinPSD  ( int _3065,    int _3066) { return mosek::fusion::p_Domain::isLinPSD(_3065,_3066); }monty::rc_ptr< ::mosek::fusion::LinPSDDomain > mosek::fusion::p_Domain::isLinPSD(int _3065,int _3066){
  return ::mosek::fusion::p_LinPSDDomain::_new_LinPSDDomain(::mosek::fusion::p_Set::make(_3066,(safe_mul( _3065,safe_add( _3065,(int)1 ) ) / (int)2)));
}
monty::rc_ptr< ::mosek::fusion::LinPSDDomain > mosek::fusion::Domain::isLinPSD  ( int _3067) { return mosek::fusion::p_Domain::isLinPSD(_3067); }monty::rc_ptr< ::mosek::fusion::LinPSDDomain > mosek::fusion::p_Domain::isLinPSD(int _3067){
  return ::mosek::fusion::p_LinPSDDomain::_new_LinPSDDomain(::mosek::fusion::p_Set::make((safe_mul( _3067,safe_add( _3067,(int)1 ) ) / (int)2)));
}
monty::rc_ptr< ::mosek::fusion::LinPSDDomain > mosek::fusion::Domain::isLinPSD  ( ) { return mosek::fusion::p_Domain::isLinPSD(); }monty::rc_ptr< ::mosek::fusion::LinPSDDomain > mosek::fusion::p_Domain::isLinPSD(){
  return ::mosek::fusion::p_LinPSDDomain::_new_LinPSDDomain();
}
monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::Domain::isTrilPSD  ( int _3068,    int _3069) { return mosek::fusion::p_Domain::isTrilPSD(_3068,_3069); }monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::p_Domain::isTrilPSD(int _3068,int _3069){
  return ::mosek::fusion::p_PSDDomain::_new_PSDDomain(::mosek::fusion::PSDKey::IsTrilPSD,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_3069),(int)(_3068),(int)(_3068)}),(int)1,(int)2);
}
monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::Domain::isTrilPSD  ( int _3070) { return mosek::fusion::p_Domain::isTrilPSD(_3070); }monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::p_Domain::isTrilPSD(int _3070){
  return ::mosek::fusion::p_PSDDomain::_new_PSDDomain(::mosek::fusion::PSDKey::IsTrilPSD,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_3070),(int)(_3070)}),(int)0,(int)1);
}
monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::Domain::isTrilPSD  ( ) { return mosek::fusion::p_Domain::isTrilPSD(); }monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::p_Domain::isTrilPSD(){
  return ::mosek::fusion::p_PSDDomain::_new_PSDDomain(::mosek::fusion::PSDKey::IsTrilPSD);
}
monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::Domain::inPSDCone  ( int _3071,    int _3072) { return mosek::fusion::p_Domain::inPSDCone(_3071,_3072); }monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::p_Domain::inPSDCone(int _3071,int _3072){
  return ::mosek::fusion::p_PSDDomain::_new_PSDDomain(::mosek::fusion::PSDKey::IsSymPSD,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_3072),(int)(_3071),(int)(_3071)}));
}
monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::Domain::inPSDCone  ( int _3073) { return mosek::fusion::p_Domain::inPSDCone(_3073); }monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::p_Domain::inPSDCone(int _3073){
  return ::mosek::fusion::p_PSDDomain::_new_PSDDomain(::mosek::fusion::PSDKey::IsSymPSD,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_3073),(int)(_3073)}));
}
monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::Domain::inPSDCone  ( ) { return mosek::fusion::p_Domain::inPSDCone(); }monty::rc_ptr< ::mosek::fusion::PSDDomain > mosek::fusion::p_Domain::inPSDCone(){
  return ::mosek::fusion::p_PSDDomain::_new_PSDDomain(::mosek::fusion::PSDKey::IsSymPSD);
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::binary  ( ) { return mosek::fusion::p_Domain::binary(); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::binary(){
  return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(true,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(0.0)}),std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(1.0)}),nullptr)->__mosek_2fusion_2RangeDomain__integral();
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::binary  ( std::shared_ptr< monty::ndarray< int,1 > > _3074) { return mosek::fusion::p_Domain::binary(_3074); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::binary(std::shared_ptr< monty::ndarray< int,1 > > _3074){
  _checked_ptr_1<int> _ptr__3074(_3074 ? _3074->raw() : nullptr, _3074 ? _3074->size(0) : 0);
  return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(true,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(0.0)}),std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(1.0)}),_3074)->__mosek_2fusion_2RangeDomain__integral();
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::binary  ( int _3075,    int _3076) { return mosek::fusion::p_Domain::binary(_3075,_3076); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::binary(int _3075,int _3076){
  return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(true,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(0.0)}),std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(1.0)}),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_3075),(int)(_3076)}))->__mosek_2fusion_2RangeDomain__integral();
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::binary  ( int _3077) { return mosek::fusion::p_Domain::binary(_3077); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::binary(int _3077){
  return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(true,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(0.0)}),std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(1.0)}),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_3077)}))->__mosek_2fusion_2RangeDomain__integral();
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::inRange  ( monty::rc_ptr< ::mosek::fusion::Matrix > _3078,    monty::rc_ptr< ::mosek::fusion::Matrix > _3079) { return mosek::fusion::p_Domain::inRange(_3078,_3079); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::inRange(monty::rc_ptr< ::mosek::fusion::Matrix > _3078,monty::rc_ptr< ::mosek::fusion::Matrix > _3079){
  return ::mosek::fusion::p_Domain::mkRangedDomain(_3078,_3079);
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::inRange  ( std::shared_ptr< monty::ndarray< double,2 > > _3080,    std::shared_ptr< monty::ndarray< double,2 > > _3081) { return mosek::fusion::p_Domain::inRange(_3080,_3081); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::inRange(std::shared_ptr< monty::ndarray< double,2 > > _3080,std::shared_ptr< monty::ndarray< double,2 > > _3081){
  return ::mosek::fusion::p_Domain::mkRangedDomain(_3080,_3081);
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::inRange  ( std::shared_ptr< monty::ndarray< double,1 > > _3082,    std::shared_ptr< monty::ndarray< double,1 > > _3083,    std::shared_ptr< monty::ndarray< int,1 > > _3084) { return mosek::fusion::p_Domain::inRange(_3082,_3083,_3084); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::inRange(std::shared_ptr< monty::ndarray< double,1 > > _3082,std::shared_ptr< monty::ndarray< double,1 > > _3083,std::shared_ptr< monty::ndarray< int,1 > > _3084){
  _checked_ptr_1<double> _ptr__3082(_3082 ? _3082->raw() : nullptr, _3082 ? _3082->size(0) : 0);
  _checked_ptr_1<double> _ptr__3083(_3083 ? _3083->raw() : nullptr, _3083 ? _3083->size(0) : 0);
  _checked_ptr_1<int> _ptr__3084(_3084 ? _3084->raw() : nullptr, _3084 ? _3084->size(0) : 0);
  return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(false,_3082,_3083,_3084);
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::inRange  ( std::shared_ptr< monty::ndarray< double,1 > > _3085,    double _3086,    std::shared_ptr< monty::ndarray< int,1 > > _3087) { return mosek::fusion::p_Domain::inRange(_3085,_3086,_3087); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::inRange(std::shared_ptr< monty::ndarray< double,1 > > _3085,double _3086,std::shared_ptr< monty::ndarray< int,1 > > _3087){
  _checked_ptr_1<double> _ptr__3085(_3085 ? _3085->raw() : nullptr, _3085 ? _3085->size(0) : 0);
  _checked_ptr_1<int> _ptr__3087(_3087 ? _3087->raw() : nullptr, _3087 ? _3087->size(0) : 0);
  std::vector<double> _10147;
  for (int _3088 = (int)0, _10148 = (int)((_3085)->size(0)); _3088 < _10148 ; ++_3088)
  {
    _10147.push_back(_3086);
  }
  auto _10149 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_10147.size()),_10147.begin(),_10147.end()));
  return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(false,_3085,_10149,_3087);
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::inRange  ( double _3089,    std::shared_ptr< monty::ndarray< double,1 > > _3090,    std::shared_ptr< monty::ndarray< int,1 > > _3091) { return mosek::fusion::p_Domain::inRange(_3089,_3090,_3091); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::inRange(double _3089,std::shared_ptr< monty::ndarray< double,1 > > _3090,std::shared_ptr< monty::ndarray< int,1 > > _3091){
  _checked_ptr_1<double> _ptr__3090(_3090 ? _3090->raw() : nullptr, _3090 ? _3090->size(0) : 0);
  _checked_ptr_1<int> _ptr__3091(_3091 ? _3091->raw() : nullptr, _3091 ? _3091->size(0) : 0);
  std::vector<double> _10150;
  for (int _3092 = (int)0, _10151 = (int)((_3090)->size(0)); _3092 < _10151 ; ++_3092)
  {
    _10150.push_back(_3089);
  }
  auto _10152 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_10150.size()),_10150.begin(),_10150.end()));
  return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(false,_10152,_3090,_3091);
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::inRange  ( double _3093,    double _3094,    std::shared_ptr< monty::ndarray< int,1 > > _3095) { return mosek::fusion::p_Domain::inRange(_3093,_3094,_3095); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::inRange(double _3093,double _3094,std::shared_ptr< monty::ndarray< int,1 > > _3095){
  _checked_ptr_1<int> _ptr__3095(_3095 ? _3095->raw() : nullptr, _3095 ? _3095->size(0) : 0);
  return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(true,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(_3093)}),std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(_3094)}),_3095);
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::inRange  ( std::shared_ptr< monty::ndarray< double,1 > > _3096,    std::shared_ptr< monty::ndarray< double,1 > > _3097) { return mosek::fusion::p_Domain::inRange(_3096,_3097); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::inRange(std::shared_ptr< monty::ndarray< double,1 > > _3096,std::shared_ptr< monty::ndarray< double,1 > > _3097){
  _checked_ptr_1<double> _ptr__3096(_3096 ? _3096->raw() : nullptr, _3096 ? _3096->size(0) : 0);
  _checked_ptr_1<double> _ptr__3097(_3097 ? _3097->raw() : nullptr, _3097 ? _3097->size(0) : 0);
  return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(false,_3096,_3097,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)((_3096)->size(0)))}));
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::inRange  ( std::shared_ptr< monty::ndarray< double,1 > > _3098,    double _3099) { return mosek::fusion::p_Domain::inRange(_3098,_3099); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::inRange(std::shared_ptr< monty::ndarray< double,1 > > _3098,double _3099){
  _checked_ptr_1<double> _ptr__3098(_3098 ? _3098->raw() : nullptr, _3098 ? _3098->size(0) : 0);
  std::vector<double> _10153;
  for (int _3100 = (int)0, _10154 = (int)((_3098)->size(0)); _3100 < _10154 ; ++_3100)
  {
    _10153.push_back(_3099);
  }
  auto _10155 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_10153.size()),_10153.begin(),_10153.end()));
  return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(false,_3098,_10155,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)((_3098)->size(0)))}));
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::inRange  ( double _3101,    std::shared_ptr< monty::ndarray< double,1 > > _3102) { return mosek::fusion::p_Domain::inRange(_3101,_3102); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::inRange(double _3101,std::shared_ptr< monty::ndarray< double,1 > > _3102){
  _checked_ptr_1<double> _ptr__3102(_3102 ? _3102->raw() : nullptr, _3102 ? _3102->size(0) : 0);
  std::vector<double> _10156;
  for (int _3103 = (int)0, _10157 = (int)((_3102)->size(0)); _3103 < _10157 ; ++_3103)
  {
    _10156.push_back(_3101);
  }
  auto _10158 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_10156.size()),_10156.begin(),_10156.end()));
  return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(false,_10158,_3102,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)((_3102)->size(0)))}));
}
monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::Domain::inRange  ( double _3104,    double _3105) { return mosek::fusion::p_Domain::inRange(_3104,_3105); }monty::rc_ptr< ::mosek::fusion::RangeDomain > mosek::fusion::p_Domain::inRange(double _3104,double _3105){
  return ::mosek::fusion::p_RangeDomain::_new_RangeDomain(true,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(_3104)}),std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(_3105)}),nullptr);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::greaterThan  ( monty::rc_ptr< ::mosek::fusion::Matrix > _3106) { return mosek::fusion::p_Domain::greaterThan(_3106); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::greaterThan(monty::rc_ptr< ::mosek::fusion::Matrix > _3106){
  return ::mosek::fusion::p_Domain::mkLinearDomain(::mosek::fusion::RelationKey::GreaterThan,_3106);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::greaterThan  ( std::shared_ptr< monty::ndarray< double,1 > > _3107,    std::shared_ptr< monty::ndarray< int,1 > > _3108) { return mosek::fusion::p_Domain::greaterThan(_3107,_3108); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::greaterThan(std::shared_ptr< monty::ndarray< double,1 > > _3107,std::shared_ptr< monty::ndarray< int,1 > > _3108){
  _checked_ptr_1<double> _ptr__3107(_3107 ? _3107->raw() : nullptr, _3107 ? _3107->size(0) : 0);
  _checked_ptr_1<int> _ptr__3108(_3108 ? _3108->raw() : nullptr, _3108 ? _3108->size(0) : 0);
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::GreaterThan,false,::mosek::fusion::Utils::Tools::arraycopy(_3107),_3108);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::greaterThan  ( std::shared_ptr< monty::ndarray< double,2 > > _3109) { return mosek::fusion::p_Domain::greaterThan(_3109); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::greaterThan(std::shared_ptr< monty::ndarray< double,2 > > _3109){
  std::vector<double> _10159;
  for (int _3110 = (int)0, _10160 = (int)((_3109)->size(0)); _3110 < _10160 ; ++_3110)
  {
    for (int _3111 = (int)0, _10161 = (int)((_3109)->size(1)); _3111 < _10161 ; ++_3111)
    {
      _10159.push_back(((*_3109)(_3110,_3111)));
    }
  }
  auto _10162 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_10159.size()),_10159.begin(),_10159.end()));
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::GreaterThan,false,_10162,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)((_3109)->size(0))),(int)((int)((_3109)->size(1)))}));
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::greaterThan  ( std::shared_ptr< monty::ndarray< double,1 > > _3112) { return mosek::fusion::p_Domain::greaterThan(_3112); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::greaterThan(std::shared_ptr< monty::ndarray< double,1 > > _3112){
  _checked_ptr_1<double> _ptr__3112(_3112 ? _3112->raw() : nullptr, _3112 ? _3112->size(0) : 0);
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::GreaterThan,false,::mosek::fusion::Utils::Tools::arraycopy(_3112),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)((_3112)->size(0)))}));
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::greaterThan  ( double _3113,    std::shared_ptr< monty::ndarray< int,1 > > _3114) { return mosek::fusion::p_Domain::greaterThan(_3113,_3114); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::greaterThan(double _3113,std::shared_ptr< monty::ndarray< int,1 > > _3114){
  _checked_ptr_1<int> _ptr__3114(_3114 ? _3114->raw() : nullptr, _3114 ? _3114->size(0) : 0);
  std::vector<double> _10163;
  for (long long _3115 = (int)0, _10164 = ::mosek::fusion::p_Domain::prod(_3114); _3115 < _10164 ; ++_3115)
  {
    _10163.push_back(_3113);
  }
  auto _10165 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_10163.size()),_10163.begin(),_10163.end()));
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::GreaterThan,true,_10165,_3114);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::greaterThan  ( double _3116,    int _3117,    int _3118) { return mosek::fusion::p_Domain::greaterThan(_3116,_3117,_3118); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::greaterThan(double _3116,int _3117,int _3118){
  std::vector<double> _10166;
  for (int _3119 = (int)0, _10167 = safe_mul( _3118,_3117 ); _3119 < _10167 ; ++_3119)
  {
    _10166.push_back(_3116);
  }
  auto _10168 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_10166.size()),_10166.begin(),_10166.end()));
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::GreaterThan,true,_10168,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_3117),(int)(_3118)}));
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::greaterThan  ( double _3120,    int _3121) { return mosek::fusion::p_Domain::greaterThan(_3120,_3121); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::greaterThan(double _3120,int _3121){
  std::vector<double> _10169;
  for (int _3122 = (int)0, _10170 = _3121; _3122 < _10170 ; ++_3122)
  {
    _10169.push_back(_3120);
  }
  auto _10171 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_10169.size()),_10169.begin(),_10169.end()));
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::GreaterThan,true,_10171,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_3121)}));
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::greaterThan  ( double _3123) { return mosek::fusion::p_Domain::greaterThan(_3123); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::greaterThan(double _3123){
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::GreaterThan,true,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(_3123)}),nullptr);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::lessThan  ( monty::rc_ptr< ::mosek::fusion::Matrix > _3124) { return mosek::fusion::p_Domain::lessThan(_3124); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::lessThan(monty::rc_ptr< ::mosek::fusion::Matrix > _3124){
  return ::mosek::fusion::p_Domain::mkLinearDomain(::mosek::fusion::RelationKey::LessThan,_3124);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::lessThan  ( std::shared_ptr< monty::ndarray< double,1 > > _3125,    std::shared_ptr< monty::ndarray< int,1 > > _3126) { return mosek::fusion::p_Domain::lessThan(_3125,_3126); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::lessThan(std::shared_ptr< monty::ndarray< double,1 > > _3125,std::shared_ptr< monty::ndarray< int,1 > > _3126){
  _checked_ptr_1<double> _ptr__3125(_3125 ? _3125->raw() : nullptr, _3125 ? _3125->size(0) : 0);
  _checked_ptr_1<int> _ptr__3126(_3126 ? _3126->raw() : nullptr, _3126 ? _3126->size(0) : 0);
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::LessThan,false,::mosek::fusion::Utils::Tools::arraycopy(_3125),_3126);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::lessThan  ( std::shared_ptr< monty::ndarray< double,2 > > _3127) { return mosek::fusion::p_Domain::lessThan(_3127); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::lessThan(std::shared_ptr< monty::ndarray< double,2 > > _3127){
  std::vector<double> _10172;
  for (int _3128 = (int)0, _10173 = (int)((_3127)->size(0)); _3128 < _10173 ; ++_3128)
  {
    for (int _3129 = (int)0, _10174 = (int)((_3127)->size(1)); _3129 < _10174 ; ++_3129)
    {
      _10172.push_back(((*_3127)(_3128,_3129)));
    }
  }
  auto _10175 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_10172.size()),_10172.begin(),_10172.end()));
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::LessThan,false,_10175,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)((_3127)->size(0))),(int)((int)((_3127)->size(1)))}));
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::lessThan  ( std::shared_ptr< monty::ndarray< double,1 > > _3130) { return mosek::fusion::p_Domain::lessThan(_3130); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::lessThan(std::shared_ptr< monty::ndarray< double,1 > > _3130){
  _checked_ptr_1<double> _ptr__3130(_3130 ? _3130->raw() : nullptr, _3130 ? _3130->size(0) : 0);
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::LessThan,false,::mosek::fusion::Utils::Tools::arraycopy(_3130),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)((_3130)->size(0)))}));
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::lessThan  ( double _3131,    std::shared_ptr< monty::ndarray< int,1 > > _3132) { return mosek::fusion::p_Domain::lessThan(_3131,_3132); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::lessThan(double _3131,std::shared_ptr< monty::ndarray< int,1 > > _3132){
  _checked_ptr_1<int> _ptr__3132(_3132 ? _3132->raw() : nullptr, _3132 ? _3132->size(0) : 0);
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::LessThan,true,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(_3131)}),_3132);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::lessThan  ( double _3133,    int _3134,    int _3135) { return mosek::fusion::p_Domain::lessThan(_3133,_3134,_3135); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::lessThan(double _3133,int _3134,int _3135){
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::LessThan,true,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(_3133)}),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_3134),(int)(_3135)}));
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::lessThan  ( double _3136,    int _3137) { return mosek::fusion::p_Domain::lessThan(_3136,_3137); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::lessThan(double _3136,int _3137){
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::LessThan,true,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(_3136)}),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_3137)}));
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::lessThan  ( double _3138) { return mosek::fusion::p_Domain::lessThan(_3138); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::lessThan(double _3138){
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::LessThan,true,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(_3138)}),nullptr);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::equalsTo  ( monty::rc_ptr< ::mosek::fusion::Matrix > _3139) { return mosek::fusion::p_Domain::equalsTo(_3139); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::equalsTo(monty::rc_ptr< ::mosek::fusion::Matrix > _3139){
  return ::mosek::fusion::p_Domain::mkLinearDomain(::mosek::fusion::RelationKey::EqualsTo,_3139);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::equalsTo  ( std::shared_ptr< monty::ndarray< double,1 > > _3140,    std::shared_ptr< monty::ndarray< int,1 > > _3141) { return mosek::fusion::p_Domain::equalsTo(_3140,_3141); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::equalsTo(std::shared_ptr< monty::ndarray< double,1 > > _3140,std::shared_ptr< monty::ndarray< int,1 > > _3141){
  _checked_ptr_1<double> _ptr__3140(_3140 ? _3140->raw() : nullptr, _3140 ? _3140->size(0) : 0);
  _checked_ptr_1<int> _ptr__3141(_3141 ? _3141->raw() : nullptr, _3141 ? _3141->size(0) : 0);
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::EqualsTo,false,::mosek::fusion::Utils::Tools::arraycopy(_3140),_3141);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::equalsTo  ( std::shared_ptr< monty::ndarray< double,2 > > _3142) { return mosek::fusion::p_Domain::equalsTo(_3142); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::equalsTo(std::shared_ptr< monty::ndarray< double,2 > > _3142){
  std::vector<double> _10176;
  for (int _3143 = (int)0, _10177 = (int)((_3142)->size(0)); _3143 < _10177 ; ++_3143)
  {
    for (int _3144 = (int)0, _10178 = (int)((_3142)->size(1)); _3144 < _10178 ; ++_3144)
    {
      _10176.push_back(((*_3142)(_3143,_3144)));
    }
  }
  auto _10179 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_10176.size()),_10176.begin(),_10176.end()));
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::EqualsTo,false,_10179,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)((_3142)->size(0))),(int)((int)((_3142)->size(1)))}));
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::equalsTo  ( std::shared_ptr< monty::ndarray< double,1 > > _3145) { return mosek::fusion::p_Domain::equalsTo(_3145); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::equalsTo(std::shared_ptr< monty::ndarray< double,1 > > _3145){
  _checked_ptr_1<double> _ptr__3145(_3145 ? _3145->raw() : nullptr, _3145 ? _3145->size(0) : 0);
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::EqualsTo,false,::mosek::fusion::Utils::Tools::arraycopy(_3145),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)((_3145)->size(0)))}));
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::equalsTo  ( double _3146,    std::shared_ptr< monty::ndarray< int,1 > > _3147) { return mosek::fusion::p_Domain::equalsTo(_3146,_3147); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::equalsTo(double _3146,std::shared_ptr< monty::ndarray< int,1 > > _3147){
  _checked_ptr_1<int> _ptr__3147(_3147 ? _3147->raw() : nullptr, _3147 ? _3147->size(0) : 0);
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::EqualsTo,true,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(_3146)}),_3147);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::equalsTo  ( double _3148,    int _3149,    int _3150) { return mosek::fusion::p_Domain::equalsTo(_3148,_3149,_3150); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::equalsTo(double _3148,int _3149,int _3150){
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::EqualsTo,true,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(_3148)}),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_3149),(int)(_3150)}));
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::equalsTo  ( double _3151,    int _3152) { return mosek::fusion::p_Domain::equalsTo(_3151,_3152); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::equalsTo(double _3151,int _3152){
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::EqualsTo,true,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(_3151)}),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_3152)}));
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::equalsTo  ( double _3153) { return mosek::fusion::p_Domain::equalsTo(_3153); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::equalsTo(double _3153){
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::EqualsTo,true,std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >{(double)(_3153)}),nullptr);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::unbounded  ( std::shared_ptr< monty::ndarray< int,1 > > _3154) { return mosek::fusion::p_Domain::unbounded(_3154); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::unbounded(std::shared_ptr< monty::ndarray< int,1 > > _3154){
  _checked_ptr_1<int> _ptr__3154(_3154 ? _3154->raw() : nullptr, _3154 ? _3154->size(0) : 0);
  std::vector<int> _10180;
  for (int _3155 = (int)0, _10181 = (int)((_3154)->size(0)); _3155 < _10181 ; ++_3155)
  {
    _10180.push_back(_ptr__3154[_3155]);
  }
  auto _10182 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_10180.size()),_10180.begin(),_10180.end()));
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::IsFree,false,nullptr,_10182);
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::unbounded  ( int _3156,    int _3157) { return mosek::fusion::p_Domain::unbounded(_3156,_3157); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::unbounded(int _3156,int _3157){
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::IsFree,false,nullptr,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_3156),(int)(_3157)}));
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::unbounded  ( int _3158) { return mosek::fusion::p_Domain::unbounded(_3158); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::unbounded(int _3158){
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::IsFree,false,nullptr,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_3158)}));
}
monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::Domain::unbounded  ( ) { return mosek::fusion::p_Domain::unbounded(); }monty::rc_ptr< ::mosek::fusion::LinearDomain > mosek::fusion::p_Domain::unbounded(){
  return ::mosek::fusion::p_LinearDomain::_new_LinearDomain(::mosek::fusion::RelationKey::IsFree,true,nullptr,nullptr);
}
void mosek::fusion::p_Domain::destroy(){}void mosek::fusion::Domain::destroy() { mosek::fusion::p_Domain::_get_impl(this)->destroy(); }mosek::fusion::ExprCode::ExprCode(mosek::fusion::p_ExprCode *_impl) : _impl(_impl) { /*std::cout << "ExprCode() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::ExprCode::~ExprCode() { delete _impl; _impl = nullptr; }mosek::fusion::p_ExprCode::p_ExprCode  (::mosek::fusion::ExprCode * _pubthis) :     _pubthis(_pubthis){}void mosek::fusion::ExprCode::inplace_relocate  ( std::shared_ptr< monty::ndarray< int,1 > > _3159,    int _3160,    int _3161,    int _3162) { mosek::fusion::p_ExprCode::inplace_relocate(_3159,_3160,_3161,_3162); }void mosek::fusion::p_ExprCode::inplace_relocate(std::shared_ptr< monty::ndarray< int,1 > > _3159,int _3160,int _3161,int _3162){
  _checked_ptr_1<int> _ptr__3159(_3159 ? _3159->raw() : nullptr, _3159 ? _3159->size(0) : 0);
  int _10183 = (int)0;
  int _10184 = _3161;
  int _10185 = (int)2;
  for (int _3163 = _10183; _3163 < _10184; _3163 += _10185)
  {
    {
      if ((_ptr__3159[_3163] == (int)2))
      {
        {
          _ptr__3159[safe_add( _3163,(int)1 )] += _3162;
        }
      }
      {}
    }
  }
}
std::string mosek::fusion::ExprCode::op2str  ( int _3164) { return mosek::fusion::p_ExprCode::op2str(_3164); }std::string mosek::fusion::p_ExprCode::op2str(int _3164){
  if ((_3164 == 0))
  {
    {
      return std::string ("NOP");
    }
  }
  else if((_3164 == 1))
  {
    {
      return std::string ("PARAMREF");
    }
  }
  else if((_3164 == 2))
  {
    {
      return std::string ("CONST");
    }
  }
  else if((_3164 == 3))
  {
    {
      return std::string ("ADD");
    }
  }
  else if((_3164 == 4))
  {
    {
      return std::string ("NEG");
    }
  }
  else if((_3164 == 5))
  {
    {
      return std::string ("MUL");
    }
  }
  else if((_3164 == 6))
  {
    {
      return std::string ("INV");
    }
  }
  else if((_3164 == 8))
  {
    {
      return std::string ("SUM");
    }
  }
  else
  {
    {
      return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("?("))->__mosek_2fusion_2Utils_2StringBuffer__a(_3164)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
    }
  }
}
void mosek::fusion::ExprCode::eval_add_list  ( std::shared_ptr< monty::ndarray< int,1 > > _3165,    std::shared_ptr< monty::ndarray< int,1 > > _3166,    std::shared_ptr< monty::ndarray< double,1 > > _3167,    int _3168,    std::shared_ptr< monty::ndarray< double,1 > > _3169,    std::shared_ptr< monty::ndarray< double,1 > > _3170,    monty::rc_ptr< ::mosek::fusion::WorkStack > _3171) { mosek::fusion::p_ExprCode::eval_add_list(_3165,_3166,_3167,_3168,_3169,_3170,_3171); }void mosek::fusion::p_ExprCode::eval_add_list(std::shared_ptr< monty::ndarray< int,1 > > _3165,std::shared_ptr< monty::ndarray< int,1 > > _3166,std::shared_ptr< monty::ndarray< double,1 > > _3167,int _3168,std::shared_ptr< monty::ndarray< double,1 > > _3169,std::shared_ptr< monty::ndarray< double,1 > > _3170,monty::rc_ptr< ::mosek::fusion::WorkStack > _3171){
  _checked_ptr_1<int> _ptr__3165(_3165 ? _3165->raw() : nullptr, _3165 ? _3165->size(0) : 0);
  _checked_ptr_1<int> _ptr__3166(_3166 ? _3166->raw() : nullptr, _3166 ? _3166->size(0) : 0);
  _checked_ptr_1<double> _ptr__3167(_3167 ? _3167->raw() : nullptr, _3167 ? _3167->size(0) : 0);
  _checked_ptr_1<double> _ptr__3169(_3169 ? _3169->raw() : nullptr, _3169 ? _3169->size(0) : 0);
  _checked_ptr_1<double> _ptr__3170(_3170 ? _3170->raw() : nullptr, _3170 ? _3170->size(0) : 0);
  int _3172 = _3171->allocf64((int)((_3165)->size(0)));
  int _3173 = (int)0;
  std::shared_ptr< monty::ndarray< double,1 > > _3174 = mosek::fusion::p_WorkStack::_get_impl(_3171)->f64;
  _checked_ptr_1<double> _ptr__3174(_3174 ? _3174->raw() : nullptr,_3174 ? _3174->size(0) : 0);
  int _10186 = (int)0;
  int _10187 = ((int)((_3166)->size(0)) - (int)1);
  for (int _3175 = _10186; _3175 < _10187; ++_3175)
  {
    {
      int _10188 = _ptr__3166[_3175];
      int _10189 = _ptr__3166[safe_add( _3175,(int)1 )];
      int _10190 = (int)2;
      for (int _3176 = _10188; _3176 < _10189; _3176 += _10190)
      {
        {
          if ((_ptr__3165[_3176] == 0))
          {
            {
            }
          }
          else if((_ptr__3165[_3176] == 1))
          {
            {
              _ptr__3174[safe_add( _3172,_3173 )] = _ptr__3170[_ptr__3165[safe_add( _3176,(int)1 )]];
              ++ _3173;
            }
          }
          else if((_ptr__3165[_3176] == 2))
          {
            {
              _ptr__3174[safe_add( _3172,_3173 )] = _ptr__3167[(_3176 / (int)2)];
              ++ _3173;
            }
          }
          else if((_ptr__3165[_3176] == 3))
          {
            {
              _ptr__3174[(safe_add( _3172,_3173 ) - (int)2)] = (_ptr__3174[(safe_add( _3172,_3173 ) - (int)1)] + _ptr__3174[(safe_add( _3172,_3173 ) - (int)2)]);
              -- _3173;
            }
          }
          else if((_ptr__3165[_3176] == 4))
          {
            {
              _ptr__3174[(safe_add( _3172,_3173 ) - (int)1)] = (-_ptr__3174[(safe_add( _3172,_3173 ) - (int)1)]);
            }
          }
          else if((_ptr__3165[_3176] == 5))
          {
            {
              _ptr__3174[(safe_add( _3172,_3173 ) - (int)2)] = (_ptr__3174[(safe_add( _3172,_3173 ) - (int)1)] * _ptr__3174[(safe_add( _3172,_3173 ) - (int)2)]);
              -- _3173;
            }
          }
          else if((_ptr__3165[_3176] == 6))
          {
            {
              _ptr__3174[(safe_add( _3172,_3173 ) - (int)1)] = (1.0 / _ptr__3174[(safe_add( _3172,_3173 ) - (int)1)]);
            }
          }
          else if((_ptr__3165[_3176] == 8))
          {
            {
              double _3177 = 0.0;
              int _10191 = (int)0;
              int _10192 = _ptr__3165[safe_add( _3176,(int)1 )];
              for (int _3178 = _10191; _3178 < _10192; ++_3178)
              {
                {
                  -- _3173;
                  _3177 += _ptr__3174[safe_add( _3172,_3173 )];
                }
              }
              _ptr__3174[safe_add( _3172,_3173 )] = _3177;
              ++ _3173;
            }
          }
          {}
        }
      }
      _ptr__3169[safe_add( _3168,_3175 )] += _ptr__3174[(safe_add( _3172,_3173 ) - (int)1)];
    }
  }
  _3171->clear();
}
void mosek::fusion::ExprCode::eval_add_list  ( std::shared_ptr< monty::ndarray< int,1 > > _3179,    std::shared_ptr< monty::ndarray< int,1 > > _3180,    std::shared_ptr< monty::ndarray< double,1 > > _3181,    std::shared_ptr< monty::ndarray< double,1 > > _3182,    std::shared_ptr< monty::ndarray< double,1 > > _3183,    monty::rc_ptr< ::mosek::fusion::WorkStack > _3184) { mosek::fusion::p_ExprCode::eval_add_list(_3179,_3180,_3181,_3182,_3183,_3184); }void mosek::fusion::p_ExprCode::eval_add_list(std::shared_ptr< monty::ndarray< int,1 > > _3179,std::shared_ptr< monty::ndarray< int,1 > > _3180,std::shared_ptr< monty::ndarray< double,1 > > _3181,std::shared_ptr< monty::ndarray< double,1 > > _3182,std::shared_ptr< monty::ndarray< double,1 > > _3183,monty::rc_ptr< ::mosek::fusion::WorkStack > _3184){
  _checked_ptr_1<int> _ptr__3179(_3179 ? _3179->raw() : nullptr, _3179 ? _3179->size(0) : 0);
  _checked_ptr_1<int> _ptr__3180(_3180 ? _3180->raw() : nullptr, _3180 ? _3180->size(0) : 0);
  _checked_ptr_1<double> _ptr__3181(_3181 ? _3181->raw() : nullptr, _3181 ? _3181->size(0) : 0);
  _checked_ptr_1<double> _ptr__3182(_3182 ? _3182->raw() : nullptr, _3182 ? _3182->size(0) : 0);
  _checked_ptr_1<double> _ptr__3183(_3183 ? _3183->raw() : nullptr, _3183 ? _3183->size(0) : 0);
  ::mosek::fusion::p_ExprCode::eval_add_list(_3179,_3180,_3181,(int)0,_3182,_3183,_3184);
}
int mosek::fusion::ExprCode::emit_sum  ( std::shared_ptr< monty::ndarray< int,1 > > _3185,    int _3186,    int _3187) { return mosek::fusion::p_ExprCode::emit_sum(_3185,_3186,_3187); }int mosek::fusion::p_ExprCode::emit_sum(std::shared_ptr< monty::ndarray< int,1 > > _3185,int _3186,int _3187){
  _checked_ptr_1<int> _ptr__3185(_3185 ? _3185->raw() : nullptr, _3185 ? _3185->size(0) : 0);
  _ptr__3185[_3186] = 8;
  _ptr__3185[safe_add( _3186,(int)1 )] = _3187;
  return (int)2;
}
int mosek::fusion::ExprCode::emit_inv  ( std::shared_ptr< monty::ndarray< int,1 > > _3188,    int _3189) { return mosek::fusion::p_ExprCode::emit_inv(_3188,_3189); }int mosek::fusion::p_ExprCode::emit_inv(std::shared_ptr< monty::ndarray< int,1 > > _3188,int _3189){
  _checked_ptr_1<int> _ptr__3188(_3188 ? _3188->raw() : nullptr, _3188 ? _3188->size(0) : 0);
  _ptr__3188[_3189] = 6;
  _ptr__3188[safe_add( _3189,(int)1 )] = (int)0;
  return (int)2;
}
int mosek::fusion::ExprCode::emit_mul  ( std::shared_ptr< monty::ndarray< int,1 > > _3190,    int _3191) { return mosek::fusion::p_ExprCode::emit_mul(_3190,_3191); }int mosek::fusion::p_ExprCode::emit_mul(std::shared_ptr< monty::ndarray< int,1 > > _3190,int _3191){
  _checked_ptr_1<int> _ptr__3190(_3190 ? _3190->raw() : nullptr, _3190 ? _3190->size(0) : 0);
  _ptr__3190[_3191] = 5;
  _ptr__3190[safe_add( _3191,(int)1 )] = (int)0;
  return (int)2;
}
int mosek::fusion::ExprCode::emit_neg  ( std::shared_ptr< monty::ndarray< int,1 > > _3192,    int _3193) { return mosek::fusion::p_ExprCode::emit_neg(_3192,_3193); }int mosek::fusion::p_ExprCode::emit_neg(std::shared_ptr< monty::ndarray< int,1 > > _3192,int _3193){
  _checked_ptr_1<int> _ptr__3192(_3192 ? _3192->raw() : nullptr, _3192 ? _3192->size(0) : 0);
  _ptr__3192[_3193] = 4;
  _ptr__3192[safe_add( _3193,(int)1 )] = (int)0;
  return (int)2;
}
int mosek::fusion::ExprCode::emit_add  ( std::shared_ptr< monty::ndarray< int,1 > > _3194,    int _3195) { return mosek::fusion::p_ExprCode::emit_add(_3194,_3195); }int mosek::fusion::p_ExprCode::emit_add(std::shared_ptr< monty::ndarray< int,1 > > _3194,int _3195){
  _checked_ptr_1<int> _ptr__3194(_3194 ? _3194->raw() : nullptr, _3194 ? _3194->size(0) : 0);
  _ptr__3194[_3195] = 3;
  _ptr__3194[safe_add( _3195,(int)1 )] = (int)0;
  return (int)2;
}
int mosek::fusion::ExprCode::emit_constref  ( std::shared_ptr< monty::ndarray< int,1 > > _3196,    int _3197,    int _3198) { return mosek::fusion::p_ExprCode::emit_constref(_3196,_3197,_3198); }int mosek::fusion::p_ExprCode::emit_constref(std::shared_ptr< monty::ndarray< int,1 > > _3196,int _3197,int _3198){
  _checked_ptr_1<int> _ptr__3196(_3196 ? _3196->raw() : nullptr, _3196 ? _3196->size(0) : 0);
  _ptr__3196[_3197] = 2;
  _ptr__3196[safe_add( _3197,(int)1 )] = _3198;
  return (int)2;
}
int mosek::fusion::ExprCode::emit_paramref  ( std::shared_ptr< monty::ndarray< int,1 > > _3199,    int _3200,    int _3201) { return mosek::fusion::p_ExprCode::emit_paramref(_3199,_3200,_3201); }int mosek::fusion::p_ExprCode::emit_paramref(std::shared_ptr< monty::ndarray< int,1 > > _3199,int _3200,int _3201){
  _checked_ptr_1<int> _ptr__3199(_3199 ? _3199->raw() : nullptr, _3199 ? _3199->size(0) : 0);
  _ptr__3199[_3200] = 1;
  _ptr__3199[safe_add( _3200,(int)1 )] = _3201;
  return (int)2;
}
int mosek::fusion::ExprCode::emit_nop  ( std::shared_ptr< monty::ndarray< int,1 > > _3202,    int _3203) { return mosek::fusion::p_ExprCode::emit_nop(_3202,_3203); }int mosek::fusion::p_ExprCode::emit_nop(std::shared_ptr< monty::ndarray< int,1 > > _3202,int _3203){
  _checked_ptr_1<int> _ptr__3202(_3202 ? _3202->raw() : nullptr, _3202 ? _3202->size(0) : 0);
  _ptr__3202[_3203] = 0;
  _ptr__3202[safe_add( _3203,(int)1 )] = (int)0;
  return (int)2;
}
void mosek::fusion::p_ExprCode::destroy(){}void mosek::fusion::ExprCode::destroy() { mosek::fusion::p_ExprCode::_get_impl(this)->destroy(); }mosek::fusion::ExprParameter::ExprParameter(mosek::fusion::p_ExprParameter *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprParameter()" << this << std::endl; */ }mosek::fusion::ExprParameter::~ExprParameter() {  /* std::cout << "~ExprParameter()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprParameter::p_ExprParameter  (::mosek::fusion::ExprParameter * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprParameter::t mosek::fusion::p_ExprParameter::_new_ExprParameter  (monty::rc_ptr< ::mosek::fusion::Parameter > _3204){ return new mosek::fusion::ExprParameter(_3204); }mosek::fusion::ExprParameter::ExprParameter  (monty::rc_ptr< ::mosek::fusion::Parameter > _3204) :    ExprParameter(new mosek::fusion::p_ExprParameter(this)){ mosek::fusion::p_ExprParameter::_get_impl(this)->_initialize(_3204); }void mosek::fusion::p_ExprParameter::_initialize  (monty::rc_ptr< ::mosek::fusion::Parameter > _3204){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(_3204->getShape());
    mosek::fusion::p_ExprParameter::_get_impl(::mosek::fusion::ExprParameter::t(_pubthis))->p = _3204;
  }
}void mosek::fusion::ExprParameter :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3205,monty::rc_ptr< ::mosek::fusion::WorkStack > _3206,monty::rc_ptr< ::mosek::fusion::WorkStack > _3207) { mosek::fusion::p_ExprParameter::_get_impl(this)->eval(_3205,_3206,_3207); }void mosek::fusion::p_ExprParameter::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3205,monty::rc_ptr< ::mosek::fusion::WorkStack > _3206,monty::rc_ptr< ::mosek::fusion::WorkStack > _3207){
  p->eval(_3205,_3206,_3207);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::ExprParameter :: __mosek_2fusion_2ExprParameter__slice(std::shared_ptr< monty::ndarray< int,1 > > _3208,std::shared_ptr< monty::ndarray< int,1 > > _3209) { return mosek::fusion::p_ExprParameter::_get_impl(this)->__mosek_2fusion_2ExprParameter__slice(_3208,_3209); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::ExprParameter::slice(std::shared_ptr< monty::ndarray< int,1 > > _3208,std::shared_ptr< monty::ndarray< int,1 > > _3209) { return __mosek_2fusion_2ExprParameter__slice(_3208,_3209); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::ExprParameter::__mosek_2fusion_2BaseExpression__slice(std::shared_ptr< monty::ndarray< int,1 > > _3208,std::shared_ptr< monty::ndarray< int,1 > > _3209) { return __mosek_2fusion_2ExprParameter__slice(_3208,_3209); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_ExprParameter::__mosek_2fusion_2ExprParameter__slice(std::shared_ptr< monty::ndarray< int,1 > > _3208,std::shared_ptr< monty::ndarray< int,1 > > _3209){
  _checked_ptr_1<int> _ptr__3208(_3208 ? _3208->raw() : nullptr, _3208 ? _3208->size(0) : 0);
  _checked_ptr_1<int> _ptr__3209(_3209 ? _3209->raw() : nullptr, _3209 ? _3209->size(0) : 0);
  return (::mosek::fusion::p_ExprParameter::_new_ExprParameter(p->__mosek_2fusion_2Parameter__slice(_3208,_3209))).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::ExprParameter :: __mosek_2fusion_2ExprParameter__slice(int _3210,int _3211) { return mosek::fusion::p_ExprParameter::_get_impl(this)->__mosek_2fusion_2ExprParameter__slice(_3210,_3211); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::ExprParameter::slice(int _3210,int _3211) { return __mosek_2fusion_2ExprParameter__slice(_3210,_3211); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::ExprParameter::__mosek_2fusion_2BaseExpression__slice(int _3210,int _3211) { return __mosek_2fusion_2ExprParameter__slice(_3210,_3211); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_ExprParameter::__mosek_2fusion_2ExprParameter__slice(int _3210,int _3211){
  return (::mosek::fusion::p_ExprParameter::_new_ExprParameter(p->__mosek_2fusion_2Parameter__slice(_3210,_3211))).as<::mosek::fusion::Expression>();
}
std::string mosek::fusion::ExprParameter :: toString() { return mosek::fusion::p_ExprParameter::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprParameter::toString(){
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprParameter("))->__mosek_2fusion_2Utils_2StringBuffer__a(p->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
void mosek::fusion::p_ExprParameter::destroy(){p.reset();}void mosek::fusion::ExprParameter::destroy() { mosek::fusion::p_ExprParameter::_get_impl(this)->destroy(); }mosek::fusion::Param::Param(mosek::fusion::p_Param *_impl) : _impl(_impl) { /*std::cout << "Param() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::Param::~Param() { delete _impl; _impl = nullptr; }mosek::fusion::p_Param::p_Param  (::mosek::fusion::Param * _pubthis) :     _pubthis(_pubthis){}monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Param::repeat  ( monty::rc_ptr< ::mosek::fusion::Parameter > _3212,    int _3213,    int _3214) { return mosek::fusion::p_Param::repeat(_3212,_3213,_3214); }monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Param::repeat(monty::rc_ptr< ::mosek::fusion::Parameter > _3212,int _3213,int _3214){
  std::vector<monty::rc_ptr< ::mosek::fusion::Parameter >> _10193;
  for (int _3215 = (int)0, _10194 = _3213; _3215 < _10194 ; ++_3215)
  {
    _10193.push_back(_3212);
  }
  auto _10195 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 >(monty::shape(_10193.size()),_10193.begin(),_10193.end()));
  return ::mosek::fusion::p_Param::stack(_3214,_10195);
}
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Param::stack  ( int _3216,    monty::rc_ptr< ::mosek::fusion::Parameter > _3217,    monty::rc_ptr< ::mosek::fusion::Parameter > _3218,    monty::rc_ptr< ::mosek::fusion::Parameter > _3219) { return mosek::fusion::p_Param::stack(_3216,_3217,_3218,_3219); }monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Param::stack(int _3216,monty::rc_ptr< ::mosek::fusion::Parameter > _3217,monty::rc_ptr< ::mosek::fusion::Parameter > _3218,monty::rc_ptr< ::mosek::fusion::Parameter > _3219){
  return ::mosek::fusion::p_Param::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 >{::monty::rc_ptr<::mosek::fusion::Parameter>(_3217.get()),::monty::rc_ptr<::mosek::fusion::Parameter>(_3218.get()),::monty::rc_ptr<::mosek::fusion::Parameter>(_3219.get())}),_3216);
}
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Param::stack  ( int _3220,    monty::rc_ptr< ::mosek::fusion::Parameter > _3221,    monty::rc_ptr< ::mosek::fusion::Parameter > _3222) { return mosek::fusion::p_Param::stack(_3220,_3221,_3222); }monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Param::stack(int _3220,monty::rc_ptr< ::mosek::fusion::Parameter > _3221,monty::rc_ptr< ::mosek::fusion::Parameter > _3222){
  return ::mosek::fusion::p_Param::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 >{::monty::rc_ptr<::mosek::fusion::Parameter>(_3221.get()),::monty::rc_ptr<::mosek::fusion::Parameter>(_3222.get())}),_3220);
}
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Param::stack  ( int _3223,    std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 > > _3224) { return mosek::fusion::p_Param::stack(_3223,_3224); }monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Param::stack(int _3223,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 > > _3224){
  return ::mosek::fusion::p_Param::dstack(_3224,_3223);
}
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Param::stack  ( std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 > >,1 > > _3225) { return mosek::fusion::p_Param::stack(_3225); }monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Param::stack(std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 > >,1 > > _3225){
  std::vector<monty::rc_ptr< ::mosek::fusion::Parameter >> _10196;
  for (int _3226 = (int)0, _10197 = (int)((_3225)->size(0)); _3226 < _10197 ; ++_3226)
  {
    _10196.push_back(::mosek::fusion::p_Param::hstack(((*_3225)(_3226))));
  }
  auto _10198 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 >(monty::shape(_10196.size()),_10196.begin(),_10196.end()));
  return ::mosek::fusion::p_Param::vstack(_10198);
}
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Param::hstack  ( monty::rc_ptr< ::mosek::fusion::Parameter > _3227,    monty::rc_ptr< ::mosek::fusion::Parameter > _3228,    monty::rc_ptr< ::mosek::fusion::Parameter > _3229) { return mosek::fusion::p_Param::hstack(_3227,_3228,_3229); }monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Param::hstack(monty::rc_ptr< ::mosek::fusion::Parameter > _3227,monty::rc_ptr< ::mosek::fusion::Parameter > _3228,monty::rc_ptr< ::mosek::fusion::Parameter > _3229){
  return ::mosek::fusion::p_Param::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 >{::monty::rc_ptr<::mosek::fusion::Parameter>(_3227.get()),::monty::rc_ptr<::mosek::fusion::Parameter>(_3228.get()),::monty::rc_ptr<::mosek::fusion::Parameter>(_3229.get())}),(int)1);
}
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Param::hstack  ( monty::rc_ptr< ::mosek::fusion::Parameter > _3230,    monty::rc_ptr< ::mosek::fusion::Parameter > _3231) { return mosek::fusion::p_Param::hstack(_3230,_3231); }monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Param::hstack(monty::rc_ptr< ::mosek::fusion::Parameter > _3230,monty::rc_ptr< ::mosek::fusion::Parameter > _3231){
  return ::mosek::fusion::p_Param::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 >{::monty::rc_ptr<::mosek::fusion::Parameter>(_3230.get()),::monty::rc_ptr<::mosek::fusion::Parameter>(_3231.get())}),(int)1);
}
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Param::hstack  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 > > _3232) { return mosek::fusion::p_Param::hstack(_3232); }monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Param::hstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 > > _3232){
  return ::mosek::fusion::p_Param::dstack(_3232,(int)1);
}
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Param::vstack  ( monty::rc_ptr< ::mosek::fusion::Parameter > _3233,    monty::rc_ptr< ::mosek::fusion::Parameter > _3234,    monty::rc_ptr< ::mosek::fusion::Parameter > _3235) { return mosek::fusion::p_Param::vstack(_3233,_3234,_3235); }monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Param::vstack(monty::rc_ptr< ::mosek::fusion::Parameter > _3233,monty::rc_ptr< ::mosek::fusion::Parameter > _3234,monty::rc_ptr< ::mosek::fusion::Parameter > _3235){
  return ::mosek::fusion::p_Param::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 >{::monty::rc_ptr<::mosek::fusion::Parameter>(_3233.get()),::monty::rc_ptr<::mosek::fusion::Parameter>(_3234.get()),::monty::rc_ptr<::mosek::fusion::Parameter>(_3235.get())}),(int)0);
}
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Param::vstack  ( monty::rc_ptr< ::mosek::fusion::Parameter > _3236,    monty::rc_ptr< ::mosek::fusion::Parameter > _3237) { return mosek::fusion::p_Param::vstack(_3236,_3237); }monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Param::vstack(monty::rc_ptr< ::mosek::fusion::Parameter > _3236,monty::rc_ptr< ::mosek::fusion::Parameter > _3237){
  return ::mosek::fusion::p_Param::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 >{::monty::rc_ptr<::mosek::fusion::Parameter>(_3236.get()),::monty::rc_ptr<::mosek::fusion::Parameter>(_3237.get())}),(int)0);
}
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::Param::vstack  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 > > _3238) { return mosek::fusion::p_Param::vstack(_3238); }monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Param::vstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 > > _3238){
  return ::mosek::fusion::p_Param::dstack(_3238,(int)0);
}
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_Param::dstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Parameter >,1 > > _3239,int _3240){
  if ((_3240 < (int)0))
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Invalid stacking dimension"));
    }
  }
  {}
  std::shared_ptr< monty::ndarray< int,1 > > _3241 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)((_3239)->size(0)))));
  _checked_ptr_1<int> _ptr__3241(_3241 ? _3241->raw() : nullptr,_3241 ? _3241->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _3242 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((_3239)->size(0)))));
  _checked_ptr_1<long long> _ptr__3242(_3242 ? _3242->raw() : nullptr,_3242 ? _3242->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _3243;
  _checked_ptr_1<int> _ptr__3243(_3243 ? _3243->raw() : nullptr,_3243 ? _3243->size(0) : 0);
  int _3244 = ((*_3239)((int)0))->getND();
  int _10199 = (int)1;
  int _10200 = (int)((_3239)->size(0));
  for (int _3245 = _10199; _3245 < _10200; ++_3245)
  {
    {
      if ((_3244 < ((*_3239)(_3245))->getND()))
      {
        {
          _3244 = ((*_3239)(_3245))->getND();
        }
      }
      {}
    }
  }
  if ((_3240 < _3244))
  {
    {
      int _3246 = (int)0;
      while ( ((_3246 < (int)((_3239)->size(0))) && (_3244 != ((*_3239)(_3246))->getND())) )
      {
        {
          ++ _3246;
        }
      }
      _3243 = ((*_3239)(_3246))->getShape();
      _ptr__3243.update(_3243 ? _3243->raw() : nullptr, _3243 ? _3243->size(0) : 0);
      {
        int _3247 = (int)0;
        while ( ((_3247 < (int)((_3239)->size(0))) && (_3244 != ((*_3239)(_3247))->getND())) )
        {
          {
            ++ _3247;
          }
        }
        _3243 = ((*_3239)(_3247))->getShape();
        _ptr__3243.update(_3243 ? _3243->raw() : nullptr, _3243 ? _3243->size(0) : 0);
      }
    }
  }
  else
  {
    {
      std::vector<int> _10201;
      for (int _3248 = (int)0, _10202 = safe_add( _3240,(int)1 ); _3248 < _10202 ; ++_3248)
      {
        _10201.push_back((int)1);
      }
      auto _10203 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_10201.size()),_10201.begin(),_10201.end()));
      _3243 = _10203;
      _ptr__3243.update(_3243 ? _3243->raw() : nullptr, _3243 ? _3243->size(0) : 0);
      {
        int _3249 = (int)0;
        while ( ((_3249 < (int)((_3239)->size(0))) && (_3244 != ((*_3239)(_3249))->getND())) )
        {
          {
            ++ _3249;
          }
        }
        int _3250 = ((*_3239)(_3249))->getND();
        std::shared_ptr< monty::ndarray< int,1 > > _3251 = ((*_3239)(_3249))->getShape();
        _checked_ptr_1<int> _ptr__3251(_3251 ? _3251->raw() : nullptr,_3251 ? _3251->size(0) : 0);
        int _10204 = (int)0;
        int _10205 = _3250;
        for (int _3252 = _10204; _3252 < _10205; ++_3252)
        {
          {
            _ptr__3243[_3252] = _ptr__3251[_3252];
          }
        }
      }
    }
  }
  _3244 = (int)((_3243)->size(0));
  int _3253 = (int)0;
  {
    bool _3254 = false;
    int _10206 = (int)0;
    int _10207 = (int)((_3239)->size(0));
    for (int _3255 = _10206; _3255 < _10207; ++_3255)
    {
      {
        std::shared_ptr< monty::ndarray< int,1 > > _3256 = ((*_3239)(_3255))->getShape();
        _checked_ptr_1<int> _ptr__3256(_3256 ? _3256->raw() : nullptr,_3256 ? _3256->size(0) : 0);
        _ptr__3242[_3255] = ::mosek::fusion::p_Set::size(_3256);
        int _10208 = (int)0;
        int _10209 = (int)((_3256)->size(0));
        for (int _3257 = _10208; _3257 < _10209; ++_3257)
        {
          {
            _3254 = (_3254 && ((_3257 == _3240) || (_ptr__3256[_3257] == _ptr__3243[_3257])));
          }
        }
        if ((_3240 < (int)((_3256)->size(0))))
        {
          {
            _ptr__3241[_3255] = _ptr__3256[_3240];
            _3253 += _ptr__3256[_3240];
            int _10210 = (int)((_3256)->size(0));
            int _10211 = _3244;
            for (int _3258 = _10210; _3258 < _10211; ++_3258)
            {
              {
                _3254 = (_3254 && ((_3258 == _3240) || (_ptr__3243[_3258] == (int)1)));
              }
            }
          }
        }
        else
        {
          {
            _3253 += (int)1;
            _ptr__3241[_3255] = (int)1;
          }
        }
      }
    }
    if (_3254)
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Mismatching dimensions for stacking"));
      }
    }
    {}
  }
  _ptr__3243[_3240] = _3253;
  std::vector<int> _10212;
  for (int _3260 = (int)0, _10213 = (int)((_3239)->size(0)); _3260 < _10213 ; ++_3260)
  {
    _10212.push_back(((*_3239)(_3260))->getNumNonzero());
  }
  auto _10214 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_10212.size()),_10212.begin(),_10212.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _3259 = _10214;
  _checked_ptr_1<int> _ptr__3259(_3259 ? _3259->raw() : nullptr,_3259 ? _3259->size(0) : 0);
  int _3261 = (int)0;
  int _10215 = (int)0;
  int _10216 = (int)((_3259)->size(0));
  for (int _3262 = _10215; _3262 < _10216; ++_3262)
  {
    {
      _3261 += _ptr__3259[_3262];
    }
  }
  std::shared_ptr< monty::ndarray< long long,1 > > _3263 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_3261)));
  _checked_ptr_1<long long> _ptr__3263(_3263 ? _3263->raw() : nullptr,_3263 ? _3263->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _3264 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_3261)));
  _checked_ptr_1<int> _ptr__3264(_3264 ? _3264->raw() : nullptr,_3264 ? _3264->size(0) : 0);
  long long _3265 = (int)1;
  int _10217 = (int)0;
  int _10218 = _3240;
  for (int _3266 = _10217; _3266 < _10218; ++_3266)
  {
    {
      _3265 *= _ptr__3243[_3266];
    }
  }
  long long _3267 = _3253;
  long long _3268 = (int)1;
  int _10219 = safe_add( _3240,(int)1 );
  int _10220 = _3244;
  for (int _3269 = _10219; _3269 < _10220; ++_3269)
  {
    {
      _3268 *= _ptr__3243[_3269];
    }
  }
  {
    int _3270 = (int)0;
    long long _3271 = (int)0;
    int _10221 = (int)0;
    int _10222 = (int)((_3239)->size(0));
    for (int _3272 = _10221; _3272 < _10222; ++_3272)
    {
      {
        int _3273 = ((*_3239)(_3272))->getNumNonzero();
        ((*_3239)(_3272))->getSp(_3263,_3270);
        ((*_3239)(_3272))->getAllIndexes(_3264,_3270);
        if ((_3240 == (int)0))
        {
          {
            int _10223 = _3270;
            int _10224 = safe_add( _3270,_3273 );
            for (int _3274 = _10223; _3274 < _10224; ++_3274)
            {
              {
                _ptr__3263[_3274] += _3271;
              }
            }
            _3271 += _ptr__3242[_3272];
          }
        }
        else
        {
          {
            int _10225 = _3270;
            int _10226 = safe_add( _3270,_3273 );
            for (int _3275 = _10225; _3275 < _10226; ++_3275)
            {
              {
                long long _3276 = (_ptr__3263[_3275] / safe_mul( _ptr__3241[_3272],_3268 ));
                long long _3277 = ((_ptr__3263[_3275] / _3268) % _ptr__3241[_3272]);
                long long _3278 = (_ptr__3263[_3275] % _3268);
                _ptr__3263[_3275] = safe_add( safe_add( safe_mul( _3276,safe_mul( _3253,_3268 ) ),safe_mul( safe_add( _3277,_3271 ),_3268 ) ),_3278 );
              }
            }
            _3271 += _ptr__3241[_3272];
          }
        }
        _3270 += _3273;
      }
    }
  }
  int _3279 = _ptr__3243[(int)0];
  int _10227 = (int)1;
  int _10228 = _3244;
  for (int _3280 = _10227; _3280 < _10228; ++_3280)
  {
    {
      if ((_3279 < _ptr__3243[_3280]))
      {
        {
          _3279 = _ptr__3243[_3280];
        }
      }
      {}
    }
  }
  std::shared_ptr< monty::ndarray< int,1 > > _3281 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(safe_add( _3279,(int)1 ))));
  _checked_ptr_1<int> _ptr__3281(_3281 ? _3281->raw() : nullptr,_3281 ? _3281->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _3282 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_3261)));
  _checked_ptr_1<int> _ptr__3282(_3282 ? _3282->raw() : nullptr,_3282 ? _3282->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _3283 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_3261)));
  _checked_ptr_1<int> _ptr__3283(_3283 ? _3283->raw() : nullptr,_3283 ? _3283->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _3284 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_3244)));
  _checked_ptr_1<long long> _ptr__3284(_3284 ? _3284->raw() : nullptr,_3284 ? _3284->size(0) : 0);
  _ptr__3284[(_3244 - (int)1)] = (int)1;
  int _10229 = (int)1;
  int _10230 = _3244;
  for (int _3285 = _10229; _3285 < _10230; ++_3285)
  {
    {
      _ptr__3284[((_3244 - _3285) - (int)1)] = safe_mul( _ptr__3284[(_3244 - _3285)],_ptr__3243[(_3244 - _3285)] );
    }
  }
  int _10231 = (int)0;
  int _10232 = _3261;
  for (int _3286 = _10231; _3286 < _10232; ++_3286)
  {
    {
      _ptr__3282[_3286] = _3286;
    }
  }
  int _10233 = (int)0;
  int _10234 = _3244;
  for (int _3287 = _10233; _3287 < _10234; ++_3287)
  {
    {
      int _3288 = ((_3244 - _3287) - (int)1);
      int _10235 = (int)0;
      int _10236 = safe_add( _3279,(int)1 );
      for (int _3289 = _10235; _3289 < _10236; ++_3289)
      {
        {
          _ptr__3281[_3289] = (int)0;
        }
      }
      int _10237 = (int)0;
      int _10238 = _3261;
      for (int _3290 = _10237; _3290 < _10238; ++_3290)
      {
        {
          ++ _ptr__3281[safe_add( (int)1,((_ptr__3263[_3290] / _ptr__3284[_3288]) % _ptr__3243[_3288]) )];
        }
      }
      int _10239 = (int)0;
      int _10240 = _3279;
      for (int _3291 = _10239; _3291 < _10240; ++_3291)
      {
        {
          _ptr__3281[safe_add( _3291,(int)1 )] += _ptr__3281[_3291];
        }
      }
      int _10241 = (int)0;
      int _10242 = _3261;
      for (int _3292 = _10241; _3292 < _10242; ++_3292)
      {
        {
          long long _3293 = ((_ptr__3263[_ptr__3282[_3292]] / _ptr__3284[_3288]) % _ptr__3243[_3288]);
          _ptr__3283[_ptr__3281[_3293]] = _ptr__3282[_3292];
          ++ _ptr__3281[_3293];
        }
      }
      std::shared_ptr< monty::ndarray< int,1 > > _3294 = _3283;
      _checked_ptr_1<int> _ptr__3294(_3294 ? _3294->raw() : nullptr,_3294 ? _3294->size(0) : 0);
      _3283 = _3282;
      _ptr__3283.update(_3283 ? _3283->raw() : nullptr, _3283 ? _3283->size(0) : 0);
      _3282 = _3294;
      _ptr__3282.update(_3282 ? _3282->raw() : nullptr, _3282 ? _3282->size(0) : 0);
    }
  }
  std::vector<long long> _10243;
  for (int _3296 = (int)0, _10244 = _3261; _3296 < _10244 ; ++_3296)
  {
    _10243.push_back(_ptr__3263[_ptr__3282[_3296]]);
  }
  auto _10245 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_10243.size()),_10243.begin(),_10243.end()));
  std::shared_ptr< monty::ndarray< long long,1 > > _3295 = _10245;
  _checked_ptr_1<long long> _ptr__3295(_3295 ? _3295->raw() : nullptr,_3295 ? _3295->size(0) : 0);
  std::vector<int> _10246;
  for (int _3298 = (int)0, _10247 = _3261; _3298 < _10247 ; ++_3298)
  {
    _10246.push_back(_ptr__3264[_ptr__3282[_3298]]);
  }
  auto _10248 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_10246.size()),_10246.begin(),_10246.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _3297 = _10248;
  _checked_ptr_1<int> _ptr__3297(_3297 ? _3297->raw() : nullptr,_3297 ? _3297->size(0) : 0);
  return (::mosek::fusion::p_ParameterImpl::_new_ParameterImpl(((*_3239)((int)0))->__mosek_2fusion_2Parameter__getModel(),_3243,_3295,_3297)).as<::mosek::fusion::Parameter>();
}
void mosek::fusion::p_Param::destroy(){}void mosek::fusion::Param::destroy() { mosek::fusion::p_Param::_get_impl(this)->destroy(); }mosek::fusion::ExprMulParamScalarExpr::ExprMulParamScalarExpr(mosek::fusion::p_ExprMulParamScalarExpr *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprMulParamScalarExpr()" << this << std::endl; */ }mosek::fusion::ExprMulParamScalarExpr::~ExprMulParamScalarExpr() {  /* std::cout << "~ExprMulParamScalarExpr()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprMulParamScalarExpr::p_ExprMulParamScalarExpr  (::mosek::fusion::ExprMulParamScalarExpr * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprMulParamScalarExpr::t mosek::fusion::p_ExprMulParamScalarExpr::_new_ExprMulParamScalarExpr  (monty::rc_ptr< ::mosek::fusion::Parameter > _3299,    monty::rc_ptr< ::mosek::fusion::Expression > _3300){ return new mosek::fusion::ExprMulParamScalarExpr(_3299,_3300); }mosek::fusion::ExprMulParamScalarExpr::ExprMulParamScalarExpr  (monty::rc_ptr< ::mosek::fusion::Parameter > _3299,    monty::rc_ptr< ::mosek::fusion::Expression > _3300) :    ExprMulParamScalarExpr(new mosek::fusion::p_ExprMulParamScalarExpr(this)){ mosek::fusion::p_ExprMulParamScalarExpr::_get_impl(this)->_initialize(_3299,_3300); }void mosek::fusion::p_ExprMulParamScalarExpr::_initialize  (monty::rc_ptr< ::mosek::fusion::Parameter > _3299,    monty::rc_ptr< ::mosek::fusion::Expression > _3300){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(_3299->getShape());
    mosek::fusion::p_ExprMulParamScalarExpr::_get_impl(::mosek::fusion::ExprMulParamScalarExpr::t(_pubthis))->p = _3299;
    mosek::fusion::p_ExprMulParamScalarExpr::_get_impl(::mosek::fusion::ExprMulParamScalarExpr::t(_pubthis))->e = _3300;
    if ((_3300->getND() != (int)0))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions for multiplication"));
      }
    }
    {}
  }
}void mosek::fusion::ExprMulParamScalarExpr :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3301,monty::rc_ptr< ::mosek::fusion::WorkStack > _3302,monty::rc_ptr< ::mosek::fusion::WorkStack > _3303) { mosek::fusion::p_ExprMulParamScalarExpr::_get_impl(this)->eval(_3301,_3302,_3303); }void mosek::fusion::p_ExprMulParamScalarExpr::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3301,monty::rc_ptr< ::mosek::fusion::WorkStack > _3302,monty::rc_ptr< ::mosek::fusion::WorkStack > _3303){
  e->eval(_3302,_3301,_3303);
  _3302->pop_expr();
  std::shared_ptr< monty::ndarray< int,1 > > _3304 = mosek::fusion::p_WorkStack::_get_impl(_3302)->i32;
  _checked_ptr_1<int> _ptr__3304(_3304 ? _3304->raw() : nullptr,_3304 ? _3304->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _3305 = mosek::fusion::p_WorkStack::_get_impl(_3302)->i64;
  _checked_ptr_1<long long> _ptr__3305(_3305 ? _3305->raw() : nullptr,_3305 ? _3305->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _3306 = mosek::fusion::p_WorkStack::_get_impl(_3302)->f64;
  _checked_ptr_1<double> _ptr__3306(_3306 ? _3306->raw() : nullptr,_3306 ? _3306->size(0) : 0);
  int _3307 = mosek::fusion::p_WorkStack::_get_impl(_3302)->nd;
  if ((_3307 != (int)0))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operator shape for multiplication"));
    }
  }
  {}
  int _3308 = mosek::fusion::p_WorkStack::_get_impl(_3302)->nelem;
  int _3309 = mosek::fusion::p_WorkStack::_get_impl(_3302)->nnz;
  bool _3310 = mosek::fusion::p_WorkStack::_get_impl(_3302)->hassp;
  int _3311 = mosek::fusion::p_WorkStack::_get_impl(_3302)->ptr_base;
  int _3312 = mosek::fusion::p_WorkStack::_get_impl(_3302)->ncodeatom;
  int _3313 = mosek::fusion::p_WorkStack::_get_impl(_3302)->sp_base;
  int _3314 = mosek::fusion::p_WorkStack::_get_impl(_3302)->nidxs_base;
  int _3315 = mosek::fusion::p_WorkStack::_get_impl(_3302)->cof_base;
  int _3316 = mosek::fusion::p_WorkStack::_get_impl(_3302)->cconst_base;
  int _3317 = mosek::fusion::p_WorkStack::_get_impl(_3302)->codeptr_base;
  int _3318 = mosek::fusion::p_WorkStack::_get_impl(_3302)->code_base;
  int _3319 = p->getND();
  int _3320 = p->getNumNonzero();
  int _3321 = safe_mul( _3309,p->getNumNonzero() );
  bool _3322 = (p->getNumNonzero() < p->getSize());
  int _10249;
  bool _10250 = (_3312 > (int)0);
  if (_10250)
  {
    _10249 = safe_add( _3312,safe_mul( _3321,(int)4 ) );
  }
  else
  {
    _10249 = safe_mul( _3321,(int)3 );
  }
  int _3323 = _10249;
  int _3324 = _3303->alloci32(p->getNumNonzero());
  std::shared_ptr< monty::ndarray< int,1 > > _3325 = mosek::fusion::p_WorkStack::_get_impl(_3303)->i32;
  _checked_ptr_1<int> _ptr__3325(_3325 ? _3325->raw() : nullptr,_3325 ? _3325->size(0) : 0);
  p->getAllIndexes(_3325,_3324);
  _3301->alloc_expr(_3319,_3320,_3321,_3322,_3323);
  std::shared_ptr< monty::ndarray< long long,1 > > _3326 = mosek::fusion::p_WorkStack::_get_impl(_3301)->i64;
  _checked_ptr_1<long long> _ptr__3326(_3326 ? _3326->raw() : nullptr,_3326 ? _3326->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _3327 = mosek::fusion::p_WorkStack::_get_impl(_3301)->f64;
  _checked_ptr_1<double> _ptr__3327(_3327 ? _3327->raw() : nullptr,_3327 ? _3327->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _3328 = mosek::fusion::p_WorkStack::_get_impl(_3301)->i32;
  _checked_ptr_1<int> _ptr__3328(_3328 ? _3328->raw() : nullptr,_3328 ? _3328->size(0) : 0);
  int _3329 = mosek::fusion::p_WorkStack::_get_impl(_3301)->ptr_base;
  int _3330 = mosek::fusion::p_WorkStack::_get_impl(_3301)->nidxs_base;
  int _3331 = mosek::fusion::p_WorkStack::_get_impl(_3301)->sp_base;
  int _3332 = mosek::fusion::p_WorkStack::_get_impl(_3301)->cof_base;
  bool _3333 = mosek::fusion::p_WorkStack::_get_impl(_3301)->hassp;
  int _3334 = mosek::fusion::p_WorkStack::_get_impl(_3301)->shape_base;
  int _3335 = mosek::fusion::p_WorkStack::_get_impl(_3301)->codeptr_base;
  int _3336 = mosek::fusion::p_WorkStack::_get_impl(_3301)->code_base;
  int _3337 = mosek::fusion::p_WorkStack::_get_impl(_3301)->cconst_base;
  {
    int _10251 = (int)0;
    int _10252 = _3321;
    for (int _3338 = _10251; _3338 < _10252; ++_3338)
    {
      {
        _ptr__3327[safe_add( _3332,_3338 )] = 0.0;
      }
    }
    int _10253 = (int)0;
    int _10254 = safe_add( _3320,(int)1 );
    for (int _3339 = _10253; _3339 < _10254; ++_3339)
    {
      {
        _ptr__3328[safe_add( _3329,_3339 )] = safe_mul( _3339,_3309 );
      }
    }
    int _10255 = (int)0;
    int _10256 = _3319;
    for (int _3340 = _10255; _3340 < _10256; ++_3340)
    {
      {
        _ptr__3328[safe_add( _3334,_3340 )] = p->getDim(_3340);
      }
    }
    if (_3333)
    {
      {
        p->getSp(_3326,_3331);
      }
    }
    {}
    int _10257 = (int)0;
    int _10258 = _3321;
    for (int _3341 = _10257; _3341 < _10258; ++_3341)
    {
      {
        _ptr__3326[safe_add( _3330,_3341 )] = (-(int)999);
      }
    }
    {
      int _3342 = (int)0;
      int _10259 = (int)0;
      int _10260 = _3320;
      for (int _3343 = _10259; _3343 < _10260; ++_3343)
      {
        {
          int _10261 = (int)0;
          int _10262 = _3309;
          for (int _3344 = _10261; _3344 < _10262; ++_3344)
          {
            {
              _ptr__3326[safe_add( _3330,_3342 )] = _ptr__3305[safe_add( _3314,_3344 )];
              ++ _3342;
            }
          }
        }
      }
    }
    _ptr__3328[_3335] = (int)0;
    {
      if ((_3312 == (int)0))
      {
        {
          int _3345 = (int)0;
          int _3346 = (int)0;
          int _10263 = (int)0;
          int _10264 = _3320;
          for (int _3347 = _10263; _3347 < _10264; ++_3347)
          {
            {
              int _10265 = (int)0;
              int _10266 = _3309;
              for (int _3348 = _10265; _3348 < _10266; ++_3348)
              {
                {
                  _ptr__3328[safe_add( _3336,_3346 )] = 2;
                  _ptr__3327[safe_add( _3337,_3346 )] = _ptr__3306[safe_add( _3315,_3348 )];
                  ++ _3346;
                  _ptr__3328[safe_add( _3336,_3346 )] = 1;
                  _ptr__3327[safe_add( _3337,_3346 )] = _ptr__3325[safe_add( _3324,_3347 )];
                  ++ _3346;
                  _ptr__3328[safe_add( _3336,_3346 )] = 5;
                  ++ _3346;
                  _ptr__3328[safe_add( safe_add( _3335,_3345 ),(int)1 )] = _3346;
                  ++ _3345;
                }
              }
            }
          }
        }
      }
      else
      {
        {
          int _3349 = (int)0;
          int _3350 = (int)0;
          int _10267 = (int)0;
          int _10268 = _3320;
          for (int _3351 = _10267; _3351 < _10268; ++_3351)
          {
            {
              int _10269 = (int)0;
              int _10270 = _3309;
              for (int _3352 = _10269; _3352 < _10270; ++_3352)
              {
                {
                  _ptr__3328[safe_add( _3336,_3349 )] = 2;
                  _ptr__3327[safe_add( _3337,_3349 )] = _ptr__3306[safe_add( _3315,_3352 )];
                  ++ _3349;
                  int _10271 = _ptr__3304[safe_add( _3317,_3352 )];
                  int _10272 = _ptr__3304[safe_add( safe_add( _3317,_3352 ),(int)1 )];
                  for (int _3353 = _10271; _3353 < _10272; ++_3353)
                  {
                    {
                      _ptr__3328[safe_add( _3336,_3349 )] = _ptr__3304[safe_add( _3318,_3353 )];
                      _ptr__3327[safe_add( _3337,_3349 )] = _ptr__3306[safe_add( _3316,_3353 )];
                      ++ _3349;
                    }
                  }
                  _ptr__3328[safe_add( _3336,_3349 )] = 3;
                  ++ _3349;
                  _ptr__3328[safe_add( _3336,_3349 )] = 1;
                  _ptr__3327[safe_add( _3337,_3349 )] = _ptr__3325[safe_add( _3324,_3351 )];
                  ++ _3349;
                  _ptr__3328[safe_add( _3336,_3349 )] = 5;
                  ++ _3349;
                  _ptr__3328[safe_add( safe_add( _3335,_3350 ),(int)1 )] = _3349;
                  ++ _3350;
                }
              }
            }
          }
        }
      }
    }
  }
  _3303->clear();
}
std::string mosek::fusion::ExprMulParamScalarExpr :: toString() { return mosek::fusion::p_ExprMulParamScalarExpr::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprMulParamScalarExpr::toString(){
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprMulParamScalarExpr("))->__mosek_2fusion_2Utils_2StringBuffer__a(p->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(e->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
void mosek::fusion::p_ExprMulParamScalarExpr::destroy(){e.reset();p.reset();}void mosek::fusion::ExprMulParamScalarExpr::destroy() { mosek::fusion::p_ExprMulParamScalarExpr::_get_impl(this)->destroy(); }mosek::fusion::ExprMulParamScalar::ExprMulParamScalar(mosek::fusion::p_ExprMulParamScalar *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprMulParamScalar()" << this << std::endl; */ }mosek::fusion::ExprMulParamScalar::~ExprMulParamScalar() {  /* std::cout << "~ExprMulParamScalar()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprMulParamScalar::p_ExprMulParamScalar  (::mosek::fusion::ExprMulParamScalar * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprMulParamScalar::t mosek::fusion::p_ExprMulParamScalar::_new_ExprMulParamScalar  (monty::rc_ptr< ::mosek::fusion::Parameter > _3354,    monty::rc_ptr< ::mosek::fusion::Expression > _3355){ return new mosek::fusion::ExprMulParamScalar(_3354,_3355); }mosek::fusion::ExprMulParamScalar::ExprMulParamScalar  (monty::rc_ptr< ::mosek::fusion::Parameter > _3354,    monty::rc_ptr< ::mosek::fusion::Expression > _3355) :    ExprMulParamScalar(new mosek::fusion::p_ExprMulParamScalar(this)){ mosek::fusion::p_ExprMulParamScalar::_get_impl(this)->_initialize(_3354,_3355); }void mosek::fusion::p_ExprMulParamScalar::_initialize  (monty::rc_ptr< ::mosek::fusion::Parameter > _3354,    monty::rc_ptr< ::mosek::fusion::Expression > _3355){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(_3355->getShape());
    mosek::fusion::p_ExprMulParamScalar::_get_impl(::mosek::fusion::ExprMulParamScalar::t(_pubthis))->p = _3354;
    mosek::fusion::p_ExprMulParamScalar::_get_impl(::mosek::fusion::ExprMulParamScalar::t(_pubthis))->e = _3355;
    if ((_3354->getND() != (int)0))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions for multiplication"));
      }
    }
    {}
  }
}void mosek::fusion::ExprMulParamScalar :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3356,monty::rc_ptr< ::mosek::fusion::WorkStack > _3357,monty::rc_ptr< ::mosek::fusion::WorkStack > _3358) { mosek::fusion::p_ExprMulParamScalar::_get_impl(this)->eval(_3356,_3357,_3358); }void mosek::fusion::p_ExprMulParamScalar::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3356,monty::rc_ptr< ::mosek::fusion::WorkStack > _3357,monty::rc_ptr< ::mosek::fusion::WorkStack > _3358){
  e->eval(_3357,_3356,_3358);
  _3357->pop_expr();
  std::shared_ptr< monty::ndarray< int,1 > > _3359 = mosek::fusion::p_WorkStack::_get_impl(_3357)->i32;
  _checked_ptr_1<int> _ptr__3359(_3359 ? _3359->raw() : nullptr,_3359 ? _3359->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _3360 = mosek::fusion::p_WorkStack::_get_impl(_3357)->i64;
  _checked_ptr_1<long long> _ptr__3360(_3360 ? _3360->raw() : nullptr,_3360 ? _3360->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _3361 = mosek::fusion::p_WorkStack::_get_impl(_3357)->f64;
  _checked_ptr_1<double> _ptr__3361(_3361 ? _3361->raw() : nullptr,_3361 ? _3361->size(0) : 0);
  int _3362 = mosek::fusion::p_WorkStack::_get_impl(_3357)->nd;
  int _3363 = mosek::fusion::p_WorkStack::_get_impl(_3357)->nelem;
  int _3364 = mosek::fusion::p_WorkStack::_get_impl(_3357)->nnz;
  bool _3365 = mosek::fusion::p_WorkStack::_get_impl(_3357)->hassp;
  int _3366 = mosek::fusion::p_WorkStack::_get_impl(_3357)->ptr_base;
  int _3367 = mosek::fusion::p_WorkStack::_get_impl(_3357)->ncodeatom;
  int _3368 = mosek::fusion::p_WorkStack::_get_impl(_3357)->shape_base;
  int _3369 = mosek::fusion::p_WorkStack::_get_impl(_3357)->sp_base;
  int _3370 = mosek::fusion::p_WorkStack::_get_impl(_3357)->nidxs_base;
  int _3371 = mosek::fusion::p_WorkStack::_get_impl(_3357)->cof_base;
  int _3372 = mosek::fusion::p_WorkStack::_get_impl(_3357)->cconst_base;
  int _3373 = mosek::fusion::p_WorkStack::_get_impl(_3357)->codeptr_base;
  int _3374 = mosek::fusion::p_WorkStack::_get_impl(_3357)->code_base;
  int _3375 = _3362;
  int _3376 = _3363;
  int _3377 = _3364;
  bool _3378 = (p->getNumNonzero() < p->getSize());
  int _10273;
  bool _10274 = (_3367 == (int)0);
  if (_10274)
  {
    _10273 = safe_mul( _3364,(int)3 );
  }
  else
  {
    _10273 = safe_add( safe_mul( _3364,(int)4 ),_3367 );
  }
  int _3379 = _10273;
  _3356->alloc_expr(_3375,_3376,_3377,_3378,_3379);
  std::shared_ptr< monty::ndarray< long long,1 > > _3380 = mosek::fusion::p_WorkStack::_get_impl(_3356)->i64;
  _checked_ptr_1<long long> _ptr__3380(_3380 ? _3380->raw() : nullptr,_3380 ? _3380->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _3381 = mosek::fusion::p_WorkStack::_get_impl(_3356)->f64;
  _checked_ptr_1<double> _ptr__3381(_3381 ? _3381->raw() : nullptr,_3381 ? _3381->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _3382 = mosek::fusion::p_WorkStack::_get_impl(_3356)->i32;
  _checked_ptr_1<int> _ptr__3382(_3382 ? _3382->raw() : nullptr,_3382 ? _3382->size(0) : 0);
  int _3383 = mosek::fusion::p_WorkStack::_get_impl(_3356)->ptr_base;
  int _3384 = mosek::fusion::p_WorkStack::_get_impl(_3356)->nidxs_base;
  int _3385 = mosek::fusion::p_WorkStack::_get_impl(_3356)->sp_base;
  int _3386 = mosek::fusion::p_WorkStack::_get_impl(_3356)->cof_base;
  bool _3387 = mosek::fusion::p_WorkStack::_get_impl(_3356)->hassp;
  int _3388 = mosek::fusion::p_WorkStack::_get_impl(_3356)->shape_base;
  int _3389 = mosek::fusion::p_WorkStack::_get_impl(_3356)->codeptr_base;
  int _3390 = mosek::fusion::p_WorkStack::_get_impl(_3356)->code_base;
  int _3391 = mosek::fusion::p_WorkStack::_get_impl(_3356)->cconst_base;
  int _3392 = p->getIndex((int)0);
  {
    int _10275 = (int)0;
    int _10276 = _3377;
    for (int _3393 = _10275; _3393 < _10276; ++_3393)
    {
      {
        _ptr__3381[safe_add( _3386,_3393 )] = 0.0;
      }
    }
    int _10277 = (int)0;
    int _10278 = safe_add( _3376,(int)1 );
    for (int _3394 = _10277; _3394 < _10278; ++_3394)
    {
      {
        _ptr__3382[safe_add( _3383,_3394 )] = _ptr__3359[safe_add( _3366,_3394 )];
      }
    }
    int _10279 = (int)0;
    int _10280 = _3375;
    for (int _3395 = _10279; _3395 < _10280; ++_3395)
    {
      {
        _ptr__3382[safe_add( _3388,_3395 )] = _ptr__3359[safe_add( _3368,_3395 )];
      }
    }
    int _10281 = (int)0;
    int _10282 = _3364;
    for (int _3396 = _10281; _3396 < _10282; ++_3396)
    {
      {
        _ptr__3380[safe_add( _3384,_3396 )] = _ptr__3360[safe_add( _3370,_3396 )];
      }
    }
    if (_3387)
    {
      {
        int _10283 = (int)0;
        int _10284 = _3376;
        for (int _3397 = _10283; _3397 < _10284; ++_3397)
        {
          {
            _ptr__3380[safe_add( _3385,_3397 )] = _ptr__3360[safe_add( _3369,_3397 )];
          }
        }
      }
    }
    {}
    int _3398 = (int)0;
    _ptr__3382[_3389] = (int)0;
    int _10285 = (int)0;
    int _10286 = _3364;
    for (int _3399 = _10285; _3399 < _10286; ++_3399)
    {
      {
        _ptr__3382[safe_add( _3390,_3398 )] = 2;
        _ptr__3381[safe_add( _3391,_3398 )] = _ptr__3361[safe_add( _3371,_3399 )];
        ++ _3398;
        if ((_3367 > (int)0))
        {
          {
            int _10287 = _ptr__3359[safe_add( _3373,_3399 )];
            int _10288 = _ptr__3359[safe_add( safe_add( _3373,_3399 ),(int)1 )];
            for (int _3400 = _10287; _3400 < _10288; ++_3400)
            {
              {
                _ptr__3382[safe_add( _3390,_3398 )] = _ptr__3359[safe_add( _3374,_3400 )];
                _ptr__3381[safe_add( _3391,_3398 )] = _ptr__3361[safe_add( _3372,_3400 )];
                ++ _3398;
              }
            }
            _ptr__3382[safe_add( _3390,_3398 )] = 3;
            ++ _3398;
          }
        }
        {}
        _ptr__3382[safe_add( _3390,_3398 )] = 1;
        _ptr__3381[safe_add( _3391,_3398 )] = _3392;
        ++ _3398;
        _ptr__3382[safe_add( _3390,_3398 )] = 5;
        ++ _3398;
        _ptr__3382[safe_add( safe_add( _3389,_3399 ),(int)1 )] = _3398;
      }
    }
  }
  _3358->clear();
}
std::string mosek::fusion::ExprMulParamScalar :: toString() { return mosek::fusion::p_ExprMulParamScalar::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprMulParamScalar::toString(){
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprMulParamScalar("))->__mosek_2fusion_2Utils_2StringBuffer__a(p->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(e->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
void mosek::fusion::p_ExprMulParamScalar::destroy(){e.reset();p.reset();}void mosek::fusion::ExprMulParamScalar::destroy() { mosek::fusion::p_ExprMulParamScalar::_get_impl(this)->destroy(); }mosek::fusion::ExprMulParamDiagLeft::ExprMulParamDiagLeft(mosek::fusion::p_ExprMulParamDiagLeft *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprMulParamDiagLeft()" << this << std::endl; */ }mosek::fusion::ExprMulParamDiagLeft::~ExprMulParamDiagLeft() {  /* std::cout << "~ExprMulParamDiagLeft()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprMulParamDiagLeft::p_ExprMulParamDiagLeft  (::mosek::fusion::ExprMulParamDiagLeft * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprMulParamDiagLeft::t mosek::fusion::p_ExprMulParamDiagLeft::_new_ExprMulParamDiagLeft  (monty::rc_ptr< ::mosek::fusion::Parameter > _3401,    monty::rc_ptr< ::mosek::fusion::Expression > _3402){ return new mosek::fusion::ExprMulParamDiagLeft(_3401,_3402); }mosek::fusion::ExprMulParamDiagLeft::ExprMulParamDiagLeft  (monty::rc_ptr< ::mosek::fusion::Parameter > _3401,    monty::rc_ptr< ::mosek::fusion::Expression > _3402) :    ExprMulParamDiagLeft(new mosek::fusion::p_ExprMulParamDiagLeft(this)){ mosek::fusion::p_ExprMulParamDiagLeft::_get_impl(this)->_initialize(_3401,_3402); }void mosek::fusion::p_ExprMulParamDiagLeft::_initialize  (monty::rc_ptr< ::mosek::fusion::Parameter > _3401,    monty::rc_ptr< ::mosek::fusion::Expression > _3402){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_3402->getDim((int)1))}));
    mosek::fusion::p_ExprMulParamDiagLeft::_get_impl(::mosek::fusion::ExprMulParamDiagLeft::t(_pubthis))->p = _3401;
    mosek::fusion::p_ExprMulParamDiagLeft::_get_impl(::mosek::fusion::ExprMulParamDiagLeft::t(_pubthis))->e = _3402;
    if (((_3401->getND() != (int)2) || (_3402->getND() != (int)2)))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions for multiplication"));
      }
    }
    {}
    if (((_3401->getDim((int)1) != _3402->getDim((int)0)) || (_3401->getDim((int)0) != _3402->getDim((int)1))))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions for multiplication"));
      }
    }
    {}
  }
}void mosek::fusion::ExprMulParamDiagLeft :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3403,monty::rc_ptr< ::mosek::fusion::WorkStack > _3404,monty::rc_ptr< ::mosek::fusion::WorkStack > _3405) { mosek::fusion::p_ExprMulParamDiagLeft::_get_impl(this)->eval(_3403,_3404,_3405); }void mosek::fusion::p_ExprMulParamDiagLeft::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3403,monty::rc_ptr< ::mosek::fusion::WorkStack > _3404,monty::rc_ptr< ::mosek::fusion::WorkStack > _3405){
  e->eval(_3404,_3403,_3405);
  _3404->pop_expr();
  std::shared_ptr< monty::ndarray< int,1 > > _3406 = mosek::fusion::p_WorkStack::_get_impl(_3404)->i32;
  _checked_ptr_1<int> _ptr__3406(_3406 ? _3406->raw() : nullptr,_3406 ? _3406->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _3407 = mosek::fusion::p_WorkStack::_get_impl(_3404)->i64;
  _checked_ptr_1<long long> _ptr__3407(_3407 ? _3407->raw() : nullptr,_3407 ? _3407->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _3408 = mosek::fusion::p_WorkStack::_get_impl(_3404)->f64;
  _checked_ptr_1<double> _ptr__3408(_3408 ? _3408->raw() : nullptr,_3408 ? _3408->size(0) : 0);
  int _3409 = mosek::fusion::p_WorkStack::_get_impl(_3404)->nd;
  int _3410 = mosek::fusion::p_WorkStack::_get_impl(_3404)->nelem;
  int _3411 = mosek::fusion::p_WorkStack::_get_impl(_3404)->nnz;
  bool _3412 = mosek::fusion::p_WorkStack::_get_impl(_3404)->hassp;
  int _3413 = mosek::fusion::p_WorkStack::_get_impl(_3404)->ptr_base;
  int _3414 = mosek::fusion::p_WorkStack::_get_impl(_3404)->ncodeatom;
  int _3415 = mosek::fusion::p_WorkStack::_get_impl(_3404)->shape_base;
  int _3416 = mosek::fusion::p_WorkStack::_get_impl(_3404)->sp_base;
  int _3417 = mosek::fusion::p_WorkStack::_get_impl(_3404)->nidxs_base;
  int _3418 = mosek::fusion::p_WorkStack::_get_impl(_3404)->cof_base;
  int _3419 = mosek::fusion::p_WorkStack::_get_impl(_3404)->cconst_base;
  int _3420 = mosek::fusion::p_WorkStack::_get_impl(_3404)->codeptr_base;
  int _3421 = mosek::fusion::p_WorkStack::_get_impl(_3404)->code_base;
  if (((_3409 != (int)2) || ((_ptr__3406[_3415] != p->getDim((int)1)) || (_ptr__3406[safe_add( _3415,(int)1 )] != p->getDim((int)0)))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions for multiplication"));
    }
  }
  {}
  int _3422 = p->getNumNonzero();
  int _3423 = _3405->alloci64(_3422);
  std::shared_ptr< monty::ndarray< long long,1 > > _3424 = mosek::fusion::p_WorkStack::_get_impl(_3405)->i64;
  _checked_ptr_1<long long> _ptr__3424(_3424 ? _3424->raw() : nullptr,_3424 ? _3424->size(0) : 0);
  p->getSp(_3424,_3423);
  int _3425 = p->getDim((int)0);
  int _3426 = p->getDim((int)1);
  int _3427 = _ptr__3406[_3415];
  int _3428 = _ptr__3406[safe_add( _3415,(int)1 )];
  int _3429 = _3405->alloci32(p->getNumNonzero());
  std::shared_ptr< monty::ndarray< int,1 > > _3430 = mosek::fusion::p_WorkStack::_get_impl(_3405)->i32;
  _checked_ptr_1<int> _ptr__3430(_3430 ? _3430->raw() : nullptr,_3430 ? _3430->size(0) : 0);
  p->getAllIndexes(_3430,_3429);
  if (_3412)
  {
    {
      int _3431 = _3405->alloci32(_3410);
      int _3432 = _3405->alloci32(safe_add( _3428,(int)1 ));
      std::shared_ptr< monty::ndarray< int,1 > > _3433 = mosek::fusion::p_WorkStack::_get_impl(_3405)->i32;
      _checked_ptr_1<int> _ptr__3433(_3433 ? _3433->raw() : nullptr,_3433 ? _3433->size(0) : 0);
      int _10289 = (int)0;
      int _10290 = safe_add( _3428,(int)1 );
      for (int _3434 = _10289; _3434 < _10290; ++_3434)
      {
        {
          _ptr__3433[safe_add( _3432,_3434 )] = (int)0;
        }
      }
      int _10291 = (int)0;
      int _10292 = _3410;
      for (int _3435 = _10291; _3435 < _10292; ++_3435)
      {
        {
          ++ _ptr__3433[safe_add( safe_add( _3432,(_ptr__3407[safe_add( _3416,_3435 )] % _3428) ),(int)1 )];
        }
      }
      int _10293 = (int)0;
      int _10294 = _3428;
      for (int _3436 = _10293; _3436 < _10294; ++_3436)
      {
        {
          _ptr__3433[safe_add( safe_add( _3432,_3436 ),(int)1 )] += _ptr__3433[safe_add( _3432,_3436 )];
        }
      }
      int _10295 = (int)0;
      int _10296 = _3410;
      for (int _3437 = _10295; _3437 < _10296; ++_3437)
      {
        {
          long long _3438 = (_ptr__3407[safe_add( _3416,_3437 )] % _3428);
          _ptr__3433[safe_add( _3431,_ptr__3433[safe_add( _3432,_3438 )] )] = _3437;
          ++ _ptr__3433[safe_add( _3432,_3438 )];
        }
      }
      int _3439 = (int)0;
      int _3440 = (int)0;
      int _3441 = (int)0;
      {
        int _3442 = (int)0;
        int _3443 = (int)0;
        while ( ((_3443 < _3422) && (_3442 < _3410)) )
        {
          {
            int _3444 = _ptr__3433[safe_add( _3431,_3442 )];
            long long _3445 = (_ptr__3424[safe_add( _3423,_3443 )] / _3426);
            long long _3446 = (_ptr__3407[safe_add( _3416,_3444 )] % _3428);
            if ((_3445 < _3446))
            {
              {
                while ( ((_3443 < _3422) && (_ptr__3424[safe_add( _3423,_3443 )] < safe_mul( safe_add( _3445,(int)1 ),_3426 ))) )
                {
                  {
                    ++ _3443;
                  }
                }
              }
            }
            else if((_3446 < _3445))
            {
              {
                while ( ((_3442 < _3422) && ((_ptr__3407[safe_add( _3416,_ptr__3433[safe_add( _3431,_3442 )] )] % _3428) == _3446)) )
                {
                  {
                    ++ _3442;
                  }
                }
              }
            }
            else
            {
              {
                int _3447 = _3442;
                int _3448 = _3443;
                while ( ((_3443 < _3422) && (_ptr__3424[safe_add( _3423,_3443 )] < safe_mul( safe_add( _3445,(int)1 ),_3426 ))) )
                {
                  {
                    ++ _3443;
                  }
                }
                while ( ((_3442 < _3422) && ((_ptr__3407[safe_add( _3416,_ptr__3433[safe_add( _3431,_3442 )] )] % _3428) == _3446)) )
                {
                  {
                    ++ _3442;
                  }
                }
                bool _3449 = false;
                while ( ((_3448 < _3443) && (_3447 < _3442)) )
                {
                  {
                    long long _3450 = (_ptr__3424[safe_add( _3423,_3448 )] % _3426);
                    int _3451 = _ptr__3433[safe_add( _3431,_3447 )];
                    long long _3452 = (_ptr__3407[safe_add( _3416,_3451 )] / _3428);
                    if ((_3450 < _3452))
                    {
                      {
                        ++ _3448;
                      }
                    }
                    else if((_3450 > _3452))
                    {
                      {
                        ++ _3447;
                      }
                    }
                    else
                    {
                      {
                        _3440 += (_ptr__3406[safe_add( safe_add( _3413,_3451 ),(int)1 )] - _ptr__3406[safe_add( _3413,_3451 )]);
                        _3449 = true;
                        int _3453 = (_ptr__3406[safe_add( safe_add( _3413,_3451 ),(int)1 )] - _ptr__3406[safe_add( _3413,_3451 )]);
                        int _10297;
                        bool _10298 = (_3414 > (int)0);
                        if (_10298)
                        {
                          _10297 = safe_add( (_ptr__3406[safe_add( _3420,_ptr__3406[safe_add( safe_add( _3413,_3451 ),(int)1 )] )] - _ptr__3406[safe_add( _3420,_ptr__3406[safe_add( _3413,_3451 )] )]),safe_mul( (int)4,_3453 ) );
                        }
                        else
                        {
                          _10297 = safe_mul( (int)3,_3453 );
                        }
                        _3441 += _10297;
                        ++ _3448;
                        ++ _3447;
                      }
                    }
                  }
                }
                if (_3449)
                {
                  {
                    ++ _3439;
                  }
                }
                {}
              }
            }
          }
        }
      }
      int _3454 = (int)1;
      bool _3455 = (_3439 < _3425);
      _3403->alloc_expr(_3454,_3439,_3440,_3455,_3441);
      int _3456 = mosek::fusion::p_WorkStack::_get_impl(_3403)->ptr_base;
      int _3457 = mosek::fusion::p_WorkStack::_get_impl(_3403)->nidxs_base;
      int _10299;
      bool _10300 = _3455;
      if (_10300)
      {
        _10299 = mosek::fusion::p_WorkStack::_get_impl(_3403)->sp_base;
      }
      else
      {
        _10299 = _3403->alloci64(_3439);
      }
      int _3458 = _10299;
      int _3459 = mosek::fusion::p_WorkStack::_get_impl(_3403)->cof_base;
      bool _3460 = mosek::fusion::p_WorkStack::_get_impl(_3403)->hassp;
      int _3461 = mosek::fusion::p_WorkStack::_get_impl(_3403)->shape_base;
      int _3462 = mosek::fusion::p_WorkStack::_get_impl(_3403)->codeptr_base;
      int _3463 = mosek::fusion::p_WorkStack::_get_impl(_3403)->code_base;
      int _3464 = mosek::fusion::p_WorkStack::_get_impl(_3403)->cconst_base;
      std::shared_ptr< monty::ndarray< long long,1 > > _3465 = mosek::fusion::p_WorkStack::_get_impl(_3403)->i64;
      _checked_ptr_1<long long> _ptr__3465(_3465 ? _3465->raw() : nullptr,_3465 ? _3465->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _3466 = mosek::fusion::p_WorkStack::_get_impl(_3403)->f64;
      _checked_ptr_1<double> _ptr__3466(_3466 ? _3466->raw() : nullptr,_3466 ? _3466->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _3467 = mosek::fusion::p_WorkStack::_get_impl(_3403)->i32;
      _checked_ptr_1<int> _ptr__3467(_3467 ? _3467->raw() : nullptr,_3467 ? _3467->size(0) : 0);
      if ((_3439 > (int)0))
      {
        {
          _ptr__3467[_3456] = (int)0;
          if ((_3440 > (int)0))
          {
            {
              _ptr__3467[_3462] = (int)0;
            }
          }
          {}
          _ptr__3467[_3461] = (int)_3425;
          int _3468 = (int)0;
          int _3469 = (int)0;
          int _3470 = (int)0;
          int _3471 = (int)0;
          int _3472 = (int)0;
          while ( ((_3472 < _3422) && (_3471 < _3410)) )
          {
            {
              int _3473 = _ptr__3433[safe_add( _3431,_3471 )];
              long long _3474 = (_ptr__3424[safe_add( _3423,_3472 )] / _3426);
              long long _3475 = (_ptr__3407[safe_add( _3416,_3473 )] % _3428);
              if ((_3474 < _3475))
              {
                {
                  while ( ((_3472 < _3422) && (_ptr__3424[safe_add( _3423,_3472 )] < safe_mul( safe_add( _3474,(int)1 ),_3426 ))) )
                  {
                    {
                      ++ _3472;
                    }
                  }
                }
              }
              else if((_3475 < _3474))
              {
                {
                  while ( ((_3471 < _3422) && ((_ptr__3407[safe_add( _3416,_ptr__3433[safe_add( _3431,_3471 )] )] % _3428) == _3475)) )
                  {
                    {
                      ++ _3471;
                    }
                  }
                }
              }
              else
              {
                {
                  int _3476 = _3471;
                  int _3477 = _3472;
                  while ( ((_3472 < _3422) && (_ptr__3424[safe_add( _3423,_3472 )] < safe_mul( safe_add( _3474,(int)1 ),_3426 ))) )
                  {
                    {
                      ++ _3472;
                    }
                  }
                  while ( ((_3471 < _3422) && ((_ptr__3407[safe_add( _3416,_ptr__3433[safe_add( _3431,_3471 )] )] % _3428) == _3475)) )
                  {
                    {
                      ++ _3471;
                    }
                  }
                  int _3478 = (int)0;
                  while ( ((_3477 < _3472) && (_3476 < _3471)) )
                  {
                    {
                      long long _3479 = (_ptr__3424[safe_add( _3423,_3477 )] % _3426);
                      int _3480 = _ptr__3433[safe_add( _3431,_3476 )];
                      long long _3481 = (_ptr__3407[safe_add( _3416,_3480 )] / _3428);
                      if ((_3479 < _3481))
                      {
                        {
                          ++ _3477;
                        }
                      }
                      else if((_3479 > _3481))
                      {
                        {
                          ++ _3476;
                        }
                      }
                      else
                      {
                        {
                          int _10301 = _ptr__3406[safe_add( _3413,_3480 )];
                          int _10302 = _ptr__3406[safe_add( safe_add( _3413,_3480 ),(int)1 )];
                          for (int _3482 = _10301; _3482 < _10302; ++_3482)
                          {
                            {
                              _ptr__3466[safe_add( _3459,_3470 )] = 0.0;
                              _ptr__3465[safe_add( _3457,_3470 )] = _ptr__3407[safe_add( _3417,_3482 )];
                              _ptr__3467[safe_add( _3463,_3468 )] = 2;
                              _ptr__3466[safe_add( _3464,_3468 )] = _ptr__3408[safe_add( _3418,_3482 )];
                              ++ _3468;
                              if ((_3414 > (int)0))
                              {
                                {
                                  int _10303 = _ptr__3406[safe_add( _3420,_3482 )];
                                  int _10304 = _ptr__3406[safe_add( safe_add( _3420,_3482 ),(int)1 )];
                                  for (int _3483 = _10303; _3483 < _10304; ++_3483)
                                  {
                                    {
                                      _ptr__3467[safe_add( _3463,_3468 )] = _ptr__3406[safe_add( _3421,_3483 )];
                                      _ptr__3466[safe_add( _3464,_3468 )] = _ptr__3408[safe_add( _3419,_3483 )];
                                      ++ _3468;
                                    }
                                  }
                                  _ptr__3467[safe_add( _3463,_3468 )] = 3;
                                  ++ _3468;
                                }
                              }
                              {}
                              _ptr__3467[safe_add( _3463,_3468 )] = 1;
                              _ptr__3466[safe_add( _3464,_3468 )] = _ptr__3433[safe_add( _3429,_3477 )];
                              ++ _3468;
                              _ptr__3467[safe_add( _3463,_3468 )] = 5;
                              ++ _3468;
                              _ptr__3467[safe_add( safe_add( _3462,_3470 ),(int)1 )] = _3468;
                              ++ _3470;
                            }
                          }
                          ++ _3477;
                          ++ _3476;
                          ++ _3478;
                        }
                      }
                    }
                  }
                  if ((_3478 > (int)0))
                  {
                    {
                      _ptr__3465[safe_add( _3458,_3469 )] = _3474;
                      _ptr__3467[safe_add( safe_add( _3456,_3469 ),(int)1 )] = _3470;
                      ++ _3469;
                    }
                  }
                  {}
                }
              }
            }
          }
        }
      }
      {}
      if ((!_3460))
      {
        {
          _3403->popi64(_3439);
        }
      }
      {}
      _3405->clear();
    }
  }
  else
  {
    {
      int _3484 = (int)0;
      int _3485 = (int)0;
      int _3486 = (int)0;
      std::shared_ptr< monty::ndarray< int,1 > > _3487 = mosek::fusion::p_WorkStack::_get_impl(_3405)->i32;
      _checked_ptr_1<int> _ptr__3487(_3487 ? _3487->raw() : nullptr,_3487 ? _3487->size(0) : 0);
      {
        int _3488 = (int)0;
        while ( (_3488 < _3422) )
        {
          {
            long long _3489 = (_ptr__3424[safe_add( _3423,_3488 )] / _3426);
            long long _3490 = safe_mul( safe_add( _3489,(int)1 ),_3426 );
            bool _3491 = false;
            while ( ((_3488 < _3422) && (_ptr__3424[safe_add( _3423,_3488 )] < _3490)) )
            {
              {
                long long _3492 = (_ptr__3424[safe_add( _3423,_3488 )] % _3426);
                long long _3493 = safe_add( safe_mul( _3492,_3428 ),_3489 );
                int _3494 = (_ptr__3406[safe_add( safe_add( _3413,_3493 ),(int)1 )] - _ptr__3406[safe_add( _3413,_3493 )]);
                _3485 += _3494;
                _3491 = true;
                int _10305;
                bool _10306 = (_3414 > (int)0);
                if (_10306)
                {
                  _10305 = safe_add( (_ptr__3406[safe_add( _3420,_ptr__3406[safe_add( safe_add( _3413,_3493 ),(int)1 )] )] - _ptr__3406[safe_add( _3420,_ptr__3406[safe_add( _3413,_3493 )] )]),safe_mul( _3494,(int)4 ) );
                }
                else
                {
                  _10305 = safe_mul( _3494,(int)3 );
                }
                _3486 += _10305;
                ++ _3488;
              }
            }
            if (_3491)
            {
              {
                ++ _3484;
              }
            }
            {}
          }
        }
      }
      int _3495 = (int)1;
      bool _3496 = (_3484 < _3425);
      _3403->alloc_expr(_3495,_3484,_3485,_3496,_3486);
      int _3497 = mosek::fusion::p_WorkStack::_get_impl(_3403)->ptr_base;
      int _3498 = mosek::fusion::p_WorkStack::_get_impl(_3403)->nidxs_base;
      int _10307;
      bool _10308 = _3496;
      if (_10308)
      {
        _10307 = mosek::fusion::p_WorkStack::_get_impl(_3403)->sp_base;
      }
      else
      {
        _10307 = _3403->alloci64(_3484);
      }
      int _3499 = _10307;
      int _3500 = mosek::fusion::p_WorkStack::_get_impl(_3403)->cof_base;
      bool _3501 = mosek::fusion::p_WorkStack::_get_impl(_3403)->hassp;
      int _3502 = mosek::fusion::p_WorkStack::_get_impl(_3403)->shape_base;
      int _3503 = mosek::fusion::p_WorkStack::_get_impl(_3403)->codeptr_base;
      int _3504 = mosek::fusion::p_WorkStack::_get_impl(_3403)->code_base;
      int _3505 = mosek::fusion::p_WorkStack::_get_impl(_3403)->cconst_base;
      std::shared_ptr< monty::ndarray< long long,1 > > _3506 = mosek::fusion::p_WorkStack::_get_impl(_3403)->i64;
      _checked_ptr_1<long long> _ptr__3506(_3506 ? _3506->raw() : nullptr,_3506 ? _3506->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _3507 = mosek::fusion::p_WorkStack::_get_impl(_3403)->f64;
      _checked_ptr_1<double> _ptr__3507(_3507 ? _3507->raw() : nullptr,_3507 ? _3507->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _3508 = mosek::fusion::p_WorkStack::_get_impl(_3403)->i32;
      _checked_ptr_1<int> _ptr__3508(_3508 ? _3508->raw() : nullptr,_3508 ? _3508->size(0) : 0);
      {
        _ptr__3508[_3497] = (int)0;
        _ptr__3508[_3503] = (int)0;
        _ptr__3508[_3502] = (int)_3425;
        int _3509 = (int)0;
        int _3510 = (int)0;
        int _3511 = (int)0;
        int _3512 = (int)0;
        while ( (_3512 < _3422) )
        {
          {
            long long _3513 = (_ptr__3424[safe_add( _3423,_3512 )] / _3426);
            long long _3514 = safe_mul( safe_add( _3513,(int)1 ),_3426 );
            int _3515 = (int)0;
            while ( ((_3512 < _3422) && (_ptr__3424[safe_add( _3423,_3512 )] < _3514)) )
            {
              {
                long long _3516 = (_ptr__3424[safe_add( _3423,_3512 )] % _3426);
                long long _3517 = safe_add( safe_mul( _3516,_3428 ),_3513 );
                int _10309 = _ptr__3406[safe_add( _3413,_3517 )];
                int _10310 = _ptr__3406[safe_add( safe_add( _3413,_3517 ),(int)1 )];
                for (int _3518 = _10309; _3518 < _10310; ++_3518)
                {
                  {
                    _ptr__3506[safe_add( _3498,_3511 )] = _ptr__3407[safe_add( _3417,_3518 )];
                    _ptr__3507[safe_add( _3500,_3511 )] = 0.0;
                    _ptr__3508[safe_add( _3504,_3509 )] = 2;
                    _ptr__3507[safe_add( _3505,_3509 )] = _ptr__3408[safe_add( _3418,_3518 )];
                    ++ _3509;
                    if ((_3414 > (int)0))
                    {
                      {
                        int _10311 = _ptr__3406[safe_add( _3420,_3518 )];
                        int _10312 = _ptr__3406[safe_add( safe_add( _3420,_3518 ),(int)1 )];
                        for (int _3519 = _10311; _3519 < _10312; ++_3519)
                        {
                          {
                            _ptr__3508[safe_add( _3504,_3509 )] = _ptr__3406[safe_add( _3421,_3519 )];
                            _ptr__3507[safe_add( _3505,_3509 )] = _ptr__3408[safe_add( _3419,_3519 )];
                            ++ _3509;
                          }
                        }
                        _ptr__3508[safe_add( _3504,_3509 )] = 3;
                        ++ _3509;
                      }
                    }
                    {}
                    _ptr__3508[safe_add( _3504,_3509 )] = 1;
                    _ptr__3507[safe_add( _3505,_3509 )] = _ptr__3487[safe_add( _3429,_3512 )];
                    ++ _3509;
                    _ptr__3508[safe_add( _3504,_3509 )] = 5;
                    ++ _3509;
                    _ptr__3508[safe_add( safe_add( _3503,_3511 ),(int)1 )] = _3509;
                    ++ _3511;
                  }
                }
                ++ _3515;
                ++ _3512;
              }
            }
            if ((_3515 > (int)0))
            {
              {
                _ptr__3506[safe_add( _3499,_3510 )] = _3513;
                _ptr__3508[safe_add( safe_add( _3497,_3510 ),(int)1 )] = _3511;
                ++ _3510;
              }
            }
            {}
          }
        }
      }
      if ((!_3501))
      {
        {
          _3403->popi64(_3484);
        }
      }
      {}
      _3405->clear();
    }
  }
}
std::string mosek::fusion::ExprMulParamDiagLeft :: toString() { return mosek::fusion::p_ExprMulParamDiagLeft::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprMulParamDiagLeft::toString(){
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprMulParamDiagLeft("))->__mosek_2fusion_2Utils_2StringBuffer__a(p->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(e->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
void mosek::fusion::p_ExprMulParamDiagLeft::destroy(){e.reset();p.reset();}void mosek::fusion::ExprMulParamDiagLeft::destroy() { mosek::fusion::p_ExprMulParamDiagLeft::_get_impl(this)->destroy(); }mosek::fusion::ExprMulParamDiagRight::ExprMulParamDiagRight(mosek::fusion::p_ExprMulParamDiagRight *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprMulParamDiagRight()" << this << std::endl; */ }mosek::fusion::ExprMulParamDiagRight::~ExprMulParamDiagRight() {  /* std::cout << "~ExprMulParamDiagRight()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprMulParamDiagRight::p_ExprMulParamDiagRight  (::mosek::fusion::ExprMulParamDiagRight * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprMulParamDiagRight::t mosek::fusion::p_ExprMulParamDiagRight::_new_ExprMulParamDiagRight  (monty::rc_ptr< ::mosek::fusion::Expression > _3520,    monty::rc_ptr< ::mosek::fusion::Parameter > _3521){ return new mosek::fusion::ExprMulParamDiagRight(_3520,_3521); }mosek::fusion::ExprMulParamDiagRight::ExprMulParamDiagRight  (monty::rc_ptr< ::mosek::fusion::Expression > _3520,    monty::rc_ptr< ::mosek::fusion::Parameter > _3521) :    ExprMulParamDiagRight(new mosek::fusion::p_ExprMulParamDiagRight(this)){ mosek::fusion::p_ExprMulParamDiagRight::_get_impl(this)->_initialize(_3520,_3521); }void mosek::fusion::p_ExprMulParamDiagRight::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _3520,    monty::rc_ptr< ::mosek::fusion::Parameter > _3521){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_3520->getDim((int)0))}));
    mosek::fusion::p_ExprMulParamDiagRight::_get_impl(::mosek::fusion::ExprMulParamDiagRight::t(_pubthis))->p = _3521;
    mosek::fusion::p_ExprMulParamDiagRight::_get_impl(::mosek::fusion::ExprMulParamDiagRight::t(_pubthis))->e = _3520;
    if (((_3521->getND() != (int)2) || (_3520->getND() != (int)2)))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions for multiplication"));
      }
    }
    {}
    if (((_3521->getDim((int)1) != _3520->getDim((int)0)) || (_3521->getDim((int)0) != _3520->getDim((int)1))))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions for multiplication"));
      }
    }
    {}
  }
}void mosek::fusion::ExprMulParamDiagRight :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3522,monty::rc_ptr< ::mosek::fusion::WorkStack > _3523,monty::rc_ptr< ::mosek::fusion::WorkStack > _3524) { mosek::fusion::p_ExprMulParamDiagRight::_get_impl(this)->eval(_3522,_3523,_3524); }void mosek::fusion::p_ExprMulParamDiagRight::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3522,monty::rc_ptr< ::mosek::fusion::WorkStack > _3523,monty::rc_ptr< ::mosek::fusion::WorkStack > _3524){
  e->eval(_3523,_3522,_3524);
  _3523->pop_expr();
  std::shared_ptr< monty::ndarray< int,1 > > _3525 = mosek::fusion::p_WorkStack::_get_impl(_3523)->i32;
  _checked_ptr_1<int> _ptr__3525(_3525 ? _3525->raw() : nullptr,_3525 ? _3525->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _3526 = mosek::fusion::p_WorkStack::_get_impl(_3523)->i64;
  _checked_ptr_1<long long> _ptr__3526(_3526 ? _3526->raw() : nullptr,_3526 ? _3526->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _3527 = mosek::fusion::p_WorkStack::_get_impl(_3523)->f64;
  _checked_ptr_1<double> _ptr__3527(_3527 ? _3527->raw() : nullptr,_3527 ? _3527->size(0) : 0);
  int _3528 = mosek::fusion::p_WorkStack::_get_impl(_3523)->nd;
  int _3529 = mosek::fusion::p_WorkStack::_get_impl(_3523)->nelem;
  int _3530 = mosek::fusion::p_WorkStack::_get_impl(_3523)->nnz;
  bool _3531 = mosek::fusion::p_WorkStack::_get_impl(_3523)->hassp;
  int _3532 = mosek::fusion::p_WorkStack::_get_impl(_3523)->ptr_base;
  int _3533 = mosek::fusion::p_WorkStack::_get_impl(_3523)->ncodeatom;
  int _3534 = mosek::fusion::p_WorkStack::_get_impl(_3523)->shape_base;
  int _3535 = mosek::fusion::p_WorkStack::_get_impl(_3523)->sp_base;
  int _3536 = mosek::fusion::p_WorkStack::_get_impl(_3523)->nidxs_base;
  int _3537 = mosek::fusion::p_WorkStack::_get_impl(_3523)->cof_base;
  int _3538 = mosek::fusion::p_WorkStack::_get_impl(_3523)->cconst_base;
  int _3539 = mosek::fusion::p_WorkStack::_get_impl(_3523)->codeptr_base;
  int _3540 = mosek::fusion::p_WorkStack::_get_impl(_3523)->code_base;
  if (((_3528 != (int)2) || ((_ptr__3525[_3534] != p->getDim((int)1)) || (_ptr__3525[safe_add( _3534,(int)1 )] != p->getDim((int)0)))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions for multiplication"));
    }
  }
  {}
  int _3541 = p->getNumNonzero();
  int _3542 = _3524->alloci64(_3541);
  std::shared_ptr< monty::ndarray< long long,1 > > _3543 = mosek::fusion::p_WorkStack::_get_impl(_3524)->i64;
  _checked_ptr_1<long long> _ptr__3543(_3543 ? _3543->raw() : nullptr,_3543 ? _3543->size(0) : 0);
  int _3544 = _3524->alloci32(p->getNumNonzero());
  std::shared_ptr< monty::ndarray< int,1 > > _3545 = mosek::fusion::p_WorkStack::_get_impl(_3524)->i32;
  _checked_ptr_1<int> _ptr__3545(_3545 ? _3545->raw() : nullptr,_3545 ? _3545->size(0) : 0);
  p->getAllIndexes(_3545,_3544);
  p->getSp(_3543,_3542);
  int _3546 = p->getDim((int)0);
  int _3547 = p->getDim((int)1);
  int _3548 = _ptr__3525[_3534];
  int _3549 = _ptr__3525[safe_add( _3534,(int)1 )];
  int _3550 = _3524->alloci32(_3541);
  int _3551 = _3524->alloci32(safe_add( _3547,(int)1 ));
  std::shared_ptr< monty::ndarray< int,1 > > _3552 = mosek::fusion::p_WorkStack::_get_impl(_3524)->i32;
  _checked_ptr_1<int> _ptr__3552(_3552 ? _3552->raw() : nullptr,_3552 ? _3552->size(0) : 0);
  int _10313 = (int)0;
  int _10314 = safe_add( _3547,(int)1 );
  for (int _3553 = _10313; _3553 < _10314; ++_3553)
  {
    {
      _ptr__3552[safe_add( _3551,_3553 )] = (int)0;
    }
  }
  int _10315 = (int)0;
  int _10316 = _3541;
  for (int _3554 = _10315; _3554 < _10316; ++_3554)
  {
    {
      ++ _ptr__3552[safe_add( safe_add( _3551,(_ptr__3543[safe_add( _3542,_3554 )] % _3547) ),(int)1 )];
    }
  }
  int _10317 = (int)1;
  int _10318 = _3547;
  for (int _3555 = _10317; _3555 < _10318; ++_3555)
  {
    {
      _ptr__3552[safe_add( _3551,_3555 )] += _ptr__3552[(safe_add( _3551,_3555 ) - (int)1)];
    }
  }
  int _10319 = (int)0;
  int _10320 = _3541;
  for (int _3556 = _10319; _3556 < _10320; ++_3556)
  {
    {
      long long _3557 = (_ptr__3543[safe_add( _3542,_3556 )] % _3547);
      _ptr__3552[safe_add( _3550,_ptr__3552[safe_add( _3551,_3557 )] )] = _3556;
      ++ _ptr__3552[safe_add( _3551,_3557 )];
    }
  }
  if (_3531)
  {
    {
      int _3558 = (int)0;
      int _3559 = (int)0;
      int _3560 = (int)0;
      int _3561 = (int)0;
      int _3562 = (int)0;
      while ( ((_3562 < _3529) && (_3561 < _3541)) )
      {
        {
          long long _3563 = (_ptr__3526[safe_add( _3535,_3562 )] / _3549);
          long long _3564 = (_ptr__3543[safe_add( _3542,_ptr__3552[safe_add( _3550,_3561 )] )] % _3547);
          if ((_3563 < _3564))
          {
            {
              ++ _3562;
            }
          }
          else if((_3563 > _3564))
          {
            {
              ++ _3561;
            }
          }
          else
          {
            {
              int _3565 = _3562;
              ++ _3562;
              int _3566 = _3561;
              ++ _3561;
              while ( ((_3562 < _3529) && ((_ptr__3526[safe_add( _3535,_3562 )] / _3549) == _3563)) )
              {
                {
                  ++ _3562;
                }
              }
              while ( ((_3561 < _3541) && ((_ptr__3543[safe_add( _3542,_ptr__3552[safe_add( _3550,_3561 )] )] % _3547) == _3564)) )
              {
                {
                  ++ _3561;
                }
              }
              int _3567 = _3566;
              int _3568 = _3565;
              bool _3569 = false;
              while ( ((_3568 < _3562) && (_3567 < _3561)) )
              {
                {
                  long long _3570 = (_ptr__3526[safe_add( _3535,_3568 )] % _3549);
                  long long _3571 = (_ptr__3543[safe_add( _3542,_ptr__3552[safe_add( _3550,_3567 )] )] / _3547);
                  if ((_3570 < _3571))
                  {
                    {
                      ++ _3568;
                    }
                  }
                  else if((_3570 > _3571))
                  {
                    {
                      ++ _3567;
                    }
                  }
                  else
                  {
                    {
                      _3569 = true;
                      int _3572 = (_ptr__3525[safe_add( safe_add( _3532,_3568 ),(int)1 )] - _ptr__3525[safe_add( _3532,_3568 )]);
                      _3560 += _3572;
                      int _10321;
                      bool _10322 = (_3533 > (int)0);
                      if (_10322)
                      {
                        _10321 = safe_add( (_ptr__3525[safe_add( _3539,_ptr__3525[safe_add( safe_add( _3532,_3568 ),(int)1 )] )] - _ptr__3525[safe_add( _3539,_ptr__3525[safe_add( _3532,_3568 )] )]),safe_mul( _3572,(int)4 ) );
                      }
                      else
                      {
                        _10321 = safe_mul( _3572,(int)3 );
                      }
                      _3558 += _10321;
                      ++ _3568;
                      ++ _3567;
                    }
                  }
                }
              }
              if (_3569)
              {
                {
                  ++ _3559;
                }
              }
              {}
            }
          }
        }
      }
      int _3573 = (int)1;
      bool _3574 = (_3559 < _3548);
      _3522->alloc_expr(_3573,_3559,_3560,_3574,_3558);
      int _3575 = mosek::fusion::p_WorkStack::_get_impl(_3522)->ptr_base;
      int _3576 = mosek::fusion::p_WorkStack::_get_impl(_3522)->nidxs_base;
      int _10323;
      bool _10324 = _3574;
      if (_10324)
      {
        _10323 = mosek::fusion::p_WorkStack::_get_impl(_3522)->sp_base;
      }
      else
      {
        _10323 = _3522->alloci64(_3559);
      }
      int _3577 = _10323;
      int _3578 = mosek::fusion::p_WorkStack::_get_impl(_3522)->cof_base;
      bool _3579 = mosek::fusion::p_WorkStack::_get_impl(_3522)->hassp;
      int _3580 = mosek::fusion::p_WorkStack::_get_impl(_3522)->shape_base;
      int _3581 = mosek::fusion::p_WorkStack::_get_impl(_3522)->codeptr_base;
      int _3582 = mosek::fusion::p_WorkStack::_get_impl(_3522)->code_base;
      int _3583 = mosek::fusion::p_WorkStack::_get_impl(_3522)->cconst_base;
      std::shared_ptr< monty::ndarray< long long,1 > > _3584 = mosek::fusion::p_WorkStack::_get_impl(_3522)->i64;
      _checked_ptr_1<long long> _ptr__3584(_3584 ? _3584->raw() : nullptr,_3584 ? _3584->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _3585 = mosek::fusion::p_WorkStack::_get_impl(_3522)->f64;
      _checked_ptr_1<double> _ptr__3585(_3585 ? _3585->raw() : nullptr,_3585 ? _3585->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _3586 = mosek::fusion::p_WorkStack::_get_impl(_3522)->i32;
      _checked_ptr_1<int> _ptr__3586(_3586 ? _3586->raw() : nullptr,_3586 ? _3586->size(0) : 0);
      if ((_3559 > (int)0))
      {
        {
          _ptr__3586[_3575] = (int)0;
          if ((_3558 > (int)0))
          {
            {
              _ptr__3586[_3581] = (int)0;
            }
          }
          {}
          _ptr__3586[_3580] = (int)_3548;
          int _3587 = (int)0;
          int _3588 = (int)0;
          int _3589 = (int)0;
          int _3590 = (int)0;
          int _3591 = (int)0;
          while ( ((_3591 < _3529) && (_3590 < _3541)) )
          {
            {
              long long _3592 = (_ptr__3526[safe_add( _3535,_3591 )] / _3549);
              long long _3593 = (_ptr__3543[safe_add( _3542,_ptr__3552[safe_add( _3550,_3590 )] )] % _3547);
              if ((_3592 < _3593))
              {
                {
                  while ( ((_3591 < _3529) && ((_ptr__3526[safe_add( _3535,_3591 )] / _3549) == _3592)) )
                  {
                    {
                      ++ _3591;
                    }
                  }
                }
              }
              else if((_3592 > _3593))
              {
                {
                  while ( ((_3590 < _3541) && ((_ptr__3543[safe_add( _3542,_ptr__3552[safe_add( _3550,_3590 )] )] % _3547) == _3593)) )
                  {
                    {
                      ++ _3590;
                    }
                  }
                }
              }
              else
              {
                {
                  int _3594 = _3591;
                  ++ _3591;
                  int _3595 = _3590;
                  ++ _3590;
                  while ( ((_3591 < _3529) && ((_ptr__3526[safe_add( _3535,_3591 )] / _3549) == _3592)) )
                  {
                    {
                      ++ _3591;
                    }
                  }
                  while ( ((_3590 < _3541) && ((_ptr__3543[safe_add( _3542,_ptr__3552[safe_add( _3550,_3590 )] )] % _3547) == _3593)) )
                  {
                    {
                      ++ _3590;
                    }
                  }
                  int _3596 = _3595;
                  int _3597 = _3594;
                  int _3598 = (int)0;
                  while ( ((_3597 < _3591) && (_3596 < _3590)) )
                  {
                    {
                      long long _3599 = (_ptr__3526[safe_add( _3535,_3597 )] % _3549);
                      long long _3600 = (_ptr__3543[safe_add( _3542,_ptr__3552[safe_add( _3550,_3596 )] )] / _3547);
                      if ((_3599 < _3600))
                      {
                        {
                          ++ _3597;
                        }
                      }
                      else if((_3599 > _3600))
                      {
                        {
                          ++ _3596;
                        }
                      }
                      else
                      {
                        {
                          int _10325 = _ptr__3525[safe_add( _3532,_3597 )];
                          int _10326 = _ptr__3525[safe_add( safe_add( _3532,_3597 ),(int)1 )];
                          for (int _3601 = _10325; _3601 < _10326; ++_3601)
                          {
                            {
                              _ptr__3584[safe_add( _3576,_3589 )] = _ptr__3526[safe_add( _3536,_3601 )];
                              _ptr__3585[safe_add( _3578,_3589 )] = 0.0;
                              _ptr__3586[safe_add( _3582,_3587 )] = 2;
                              _ptr__3585[safe_add( _3583,_3587 )] = _ptr__3527[safe_add( _3537,_3601 )];
                              ++ _3587;
                              if ((_3533 > (int)0))
                              {
                                {
                                  int _10327 = _ptr__3525[safe_add( _3539,_3601 )];
                                  int _10328 = _ptr__3525[safe_add( safe_add( _3539,_3601 ),(int)1 )];
                                  for (int _3602 = _10327; _3602 < _10328; ++_3602)
                                  {
                                    {
                                      _ptr__3586[safe_add( _3582,_3587 )] = _ptr__3525[safe_add( _3540,_3602 )];
                                      _ptr__3585[safe_add( _3583,_3587 )] = _ptr__3527[safe_add( _3538,_3602 )];
                                      ++ _3587;
                                    }
                                  }
                                  _ptr__3586[safe_add( _3582,_3587 )] = 3;
                                  ++ _3587;
                                }
                              }
                              {}
                              _ptr__3586[safe_add( _3582,_3587 )] = 1;
                              _ptr__3585[safe_add( _3583,_3587 )] = _ptr__3552[safe_add( _3544,_ptr__3552[safe_add( _3550,_3596 )] )];
                              ++ _3587;
                              _ptr__3586[safe_add( _3582,_3587 )] = 5;
                              ++ _3587;
                              _ptr__3586[safe_add( safe_add( _3581,_3589 ),(int)1 )] = _3587;
                              ++ _3589;
                            }
                          }
                          ++ _3598;
                          ++ _3597;
                          ++ _3596;
                        }
                      }
                    }
                  }
                  if ((_3598 > (int)0))
                  {
                    {
                      _ptr__3584[safe_add( _3577,_3588 )] = _3592;
                      _ptr__3586[safe_add( safe_add( _3575,_3588 ),(int)1 )] = _3589;
                      ++ _3588;
                    }
                  }
                  {}
                }
              }
            }
          }
          if ((_3559 > _ptr__3586[_3580]))
          {
            {
              throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Invalid shape"));
            }
          }
          {}
          if ((_3588 != _3559))
          {
            {
              throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Invalid num elements"));
            }
          }
          {}
          if ((_3589 != _3589))
          {
            {
              throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Invalid num nonzeros"));
            }
          }
          {}
        }
      }
      {}
      if ((!_3579))
      {
        {
          _3522->popi64(_3559);
        }
      }
      {}
      _3524->clear();
    }
  }
  else
  {
    {
      int _3603 = (int)0;
      int _3604 = (int)0;
      int _3605 = (int)0;
      int _3606 = (int)0;
      while ( (_3606 < _3541) )
      {
        {
          long long _3607 = (_ptr__3543[safe_add( _3542,_ptr__3552[safe_add( _3550,_3606 )] )] % _3547);
          int _3608 = _3606;
          ++ _3606;
          while ( ((_3606 < _3541) && ((_ptr__3543[safe_add( _3542,_ptr__3552[safe_add( _3550,_3606 )] )] % _3547) == _3607)) )
          {
            {
              ++ _3606;
            }
          }
          int _10329 = _3608;
          int _10330 = _3606;
          for (int _3609 = _10329; _3609 < _10330; ++_3609)
          {
            {
              long long _3610 = (_ptr__3543[safe_add( _3542,_ptr__3552[safe_add( _3550,_3606 )] )] / _3547);
              long long _3611 = safe_add( safe_mul( _3607,_3549 ),_3610 );
              int _3612 = (_ptr__3525[safe_add( safe_add( _3532,_3611 ),(int)1 )] - _ptr__3525[safe_add( _3532,_3611 )]);
              _3605 += _3612;
              int _10331;
              bool _10332 = (_3533 > (int)0);
              if (_10332)
              {
                _10331 = safe_add( (_ptr__3525[safe_add( _3539,_ptr__3525[safe_add( safe_add( _3532,_3611 ),(int)1 )] )] - _ptr__3525[safe_add( _3539,_ptr__3525[safe_add( _3532,_3611 )] )]),safe_mul( _3612,(int)4 ) );
              }
              else
              {
                _10331 = safe_mul( _3612,(int)3 );
              }
              _3603 += _10331;
            }
          }
          ++ _3604;
        }
      }
      int _3613 = (int)1;
      bool _3614 = (_3604 < _3548);
      _3522->alloc_expr(_3613,_3604,_3605,_3614,_3603);
      int _3615 = mosek::fusion::p_WorkStack::_get_impl(_3522)->ptr_base;
      int _3616 = mosek::fusion::p_WorkStack::_get_impl(_3522)->nidxs_base;
      int _10333;
      bool _10334 = _3614;
      if (_10334)
      {
        _10333 = mosek::fusion::p_WorkStack::_get_impl(_3522)->sp_base;
      }
      else
      {
        _10333 = _3522->alloci64(_3604);
      }
      int _3617 = _10333;
      int _3618 = mosek::fusion::p_WorkStack::_get_impl(_3522)->cof_base;
      bool _3619 = mosek::fusion::p_WorkStack::_get_impl(_3522)->hassp;
      int _3620 = mosek::fusion::p_WorkStack::_get_impl(_3522)->shape_base;
      int _3621 = mosek::fusion::p_WorkStack::_get_impl(_3522)->codeptr_base;
      int _3622 = mosek::fusion::p_WorkStack::_get_impl(_3522)->code_base;
      int _3623 = mosek::fusion::p_WorkStack::_get_impl(_3522)->cconst_base;
      std::shared_ptr< monty::ndarray< long long,1 > > _3624 = mosek::fusion::p_WorkStack::_get_impl(_3522)->i64;
      _checked_ptr_1<long long> _ptr__3624(_3624 ? _3624->raw() : nullptr,_3624 ? _3624->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _3625 = mosek::fusion::p_WorkStack::_get_impl(_3522)->f64;
      _checked_ptr_1<double> _ptr__3625(_3625 ? _3625->raw() : nullptr,_3625 ? _3625->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _3626 = mosek::fusion::p_WorkStack::_get_impl(_3522)->i32;
      _checked_ptr_1<int> _ptr__3626(_3626 ? _3626->raw() : nullptr,_3626 ? _3626->size(0) : 0);
      {
        _ptr__3626[_3615] = (int)0;
        _ptr__3626[_3621] = (int)0;
        _ptr__3626[_3620] = (int)_3548;
        int _3627 = (int)0;
        int _3628 = (int)0;
        int _3629 = (int)0;
        int _3630 = (int)0;
        while ( (_3630 < _3541) )
        {
          {
            long long _3631 = (_ptr__3543[safe_add( _3542,_ptr__3552[safe_add( _3550,_3630 )] )] % _3547);
            int _3632 = _3630;
            ++ _3630;
            while ( ((_3630 < _3541) && ((_ptr__3543[safe_add( _3542,_ptr__3552[safe_add( _3550,_3630 )] )] % _3547) == _3631)) )
            {
              {
                ++ _3630;
              }
            }
            int _10335 = _3632;
            int _10336 = _3630;
            for (int _3633 = _10335; _3633 < _10336; ++_3633)
            {
              {
                long long _3634 = (_ptr__3543[safe_add( _3542,_ptr__3552[safe_add( _3550,_3633 )] )] / _3547);
                long long _3635 = safe_add( safe_mul( _3631,_3549 ),_3634 );
                int _10337 = _ptr__3525[safe_add( _3532,_3635 )];
                int _10338 = _ptr__3525[safe_add( safe_add( _3532,_3635 ),(int)1 )];
                for (int _3636 = _10337; _3636 < _10338; ++_3636)
                {
                  {
                    _ptr__3624[safe_add( _3616,_3629 )] = _ptr__3526[safe_add( _3536,_3636 )];
                    _ptr__3625[safe_add( _3618,_3629 )] = 0.0;
                    _ptr__3626[safe_add( _3622,_3627 )] = 2;
                    _ptr__3625[safe_add( _3623,_3627 )] = _ptr__3527[safe_add( _3537,_3636 )];
                    ++ _3627;
                    if ((_3533 > (int)0))
                    {
                      {
                        int _10339 = _ptr__3525[safe_add( _3539,_3636 )];
                        int _10340 = _ptr__3525[safe_add( safe_add( _3539,_3636 ),(int)1 )];
                        for (int _3637 = _10339; _3637 < _10340; ++_3637)
                        {
                          {
                            _ptr__3626[safe_add( _3622,_3627 )] = _ptr__3525[safe_add( _3540,_3637 )];
                            _ptr__3625[safe_add( _3623,_3627 )] = _ptr__3527[safe_add( _3538,_3637 )];
                            ++ _3627;
                          }
                        }
                        _ptr__3626[safe_add( _3622,_3627 )] = 3;
                        ++ _3627;
                      }
                    }
                    {}
                    _ptr__3626[safe_add( _3622,_3627 )] = 1;
                    _ptr__3625[safe_add( _3623,_3627 )] = _ptr__3552[safe_add( _3544,_ptr__3552[safe_add( _3550,_3633 )] )];
                    ++ _3627;
                    _ptr__3626[safe_add( _3622,_3627 )] = 5;
                    ++ _3627;
                    _ptr__3626[safe_add( safe_add( _3621,_3629 ),(int)1 )] = _3627;
                    ++ _3629;
                  }
                }
              }
            }
            _ptr__3624[safe_add( _3617,_3628 )] = _3631;
            _ptr__3626[safe_add( safe_add( _3615,_3628 ),(int)1 )] = _3629;
            ++ _3628;
          }
        }
        if ((_3604 > _ptr__3626[_3620]))
        {
          {
            throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Invalid shape"));
          }
        }
        {}
        if ((_3628 != _3604))
        {
          {
            throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Invalid num elements"));
          }
        }
        {}
        if ((_3629 != _3605))
        {
          {
            throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Invalid num nonzeros"));
          }
        }
        {}
      }
      if ((!_3619))
      {
        {
          _3522->popi64(_3604);
        }
      }
      {}
      _3524->clear();
    }
  }
}
std::string mosek::fusion::ExprMulParamDiagRight :: toString() { return mosek::fusion::p_ExprMulParamDiagRight::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprMulParamDiagRight::toString(){
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprMulParamDiagRight("))->__mosek_2fusion_2Utils_2StringBuffer__a(e->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(p->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
void mosek::fusion::p_ExprMulParamDiagRight::destroy(){e.reset();p.reset();}void mosek::fusion::ExprMulParamDiagRight::destroy() { mosek::fusion::p_ExprMulParamDiagRight::_get_impl(this)->destroy(); }mosek::fusion::ExprDotParam::ExprDotParam(mosek::fusion::p_ExprDotParam *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprDotParam()" << this << std::endl; */ }mosek::fusion::ExprDotParam::~ExprDotParam() {  /* std::cout << "~ExprDotParam()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprDotParam::p_ExprDotParam  (::mosek::fusion::ExprDotParam * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprDotParam::t mosek::fusion::p_ExprDotParam::_new_ExprDotParam  (monty::rc_ptr< ::mosek::fusion::Parameter > _3638,    monty::rc_ptr< ::mosek::fusion::Expression > _3639){ return new mosek::fusion::ExprDotParam(_3638,_3639); }mosek::fusion::ExprDotParam::ExprDotParam  (monty::rc_ptr< ::mosek::fusion::Parameter > _3638,    monty::rc_ptr< ::mosek::fusion::Expression > _3639) :    ExprDotParam(new mosek::fusion::p_ExprDotParam(this)){ mosek::fusion::p_ExprDotParam::_get_impl(this)->_initialize(_3638,_3639); }void mosek::fusion::p_ExprDotParam::_initialize  (monty::rc_ptr< ::mosek::fusion::Parameter > _3638,    monty::rc_ptr< ::mosek::fusion::Expression > _3639){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))));
    mosek::fusion::p_ExprDotParam::_get_impl(::mosek::fusion::ExprDotParam::t(_pubthis))->p = _3638;
    mosek::fusion::p_ExprDotParam::_get_impl(::mosek::fusion::ExprDotParam::t(_pubthis))->e = _3639;
    if ((_3638->getND() != _3639->getND()))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand dimensions"));
      }
    }
    {}
    int _10341 = (int)0;
    int _10342 = _3638->getND();
    for (int _3640 = _10341; _3640 < _10342; ++_3640)
    {
      {
        if ((_3638->getDim(_3640) != _3639->getDim(_3640)))
        {
          {
            throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand dimensions"));
          }
        }
        {}
      }
    }
  }
}void mosek::fusion::ExprDotParam :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3641,monty::rc_ptr< ::mosek::fusion::WorkStack > _3642,monty::rc_ptr< ::mosek::fusion::WorkStack > _3643) { mosek::fusion::p_ExprDotParam::_get_impl(this)->eval(_3641,_3642,_3643); }void mosek::fusion::p_ExprDotParam::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3641,monty::rc_ptr< ::mosek::fusion::WorkStack > _3642,monty::rc_ptr< ::mosek::fusion::WorkStack > _3643){
  e->eval(_3642,_3641,_3643);
  _3642->pop_expr();
  std::shared_ptr< monty::ndarray< int,1 > > _3644 = mosek::fusion::p_WorkStack::_get_impl(_3642)->i32;
  _checked_ptr_1<int> _ptr__3644(_3644 ? _3644->raw() : nullptr,_3644 ? _3644->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _3645 = mosek::fusion::p_WorkStack::_get_impl(_3642)->i64;
  _checked_ptr_1<long long> _ptr__3645(_3645 ? _3645->raw() : nullptr,_3645 ? _3645->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _3646 = mosek::fusion::p_WorkStack::_get_impl(_3642)->f64;
  _checked_ptr_1<double> _ptr__3646(_3646 ? _3646->raw() : nullptr,_3646 ? _3646->size(0) : 0);
  int _3647 = mosek::fusion::p_WorkStack::_get_impl(_3642)->nd;
  int _3648 = mosek::fusion::p_WorkStack::_get_impl(_3642)->nelem;
  int _3649 = mosek::fusion::p_WorkStack::_get_impl(_3642)->nnz;
  bool _3650 = mosek::fusion::p_WorkStack::_get_impl(_3642)->hassp;
  int _3651 = mosek::fusion::p_WorkStack::_get_impl(_3642)->ptr_base;
  int _3652 = mosek::fusion::p_WorkStack::_get_impl(_3642)->ncodeatom;
  int _3653 = mosek::fusion::p_WorkStack::_get_impl(_3642)->shape_base;
  int _3654 = mosek::fusion::p_WorkStack::_get_impl(_3642)->sp_base;
  int _3655 = mosek::fusion::p_WorkStack::_get_impl(_3642)->nidxs_base;
  int _3656 = mosek::fusion::p_WorkStack::_get_impl(_3642)->cof_base;
  int _3657 = mosek::fusion::p_WorkStack::_get_impl(_3642)->cconst_base;
  int _3658 = mosek::fusion::p_WorkStack::_get_impl(_3642)->codeptr_base;
  int _3659 = mosek::fusion::p_WorkStack::_get_impl(_3642)->code_base;
  int _3660 = p->getNumNonzero();
  int _3661 = _3643->alloci64(_3660);
  p->getSp(mosek::fusion::p_WorkStack::_get_impl(_3643)->i64,_3661);
  int _3662 = _3643->alloci32(p->getNumNonzero());
  std::shared_ptr< monty::ndarray< int,1 > > _3663 = mosek::fusion::p_WorkStack::_get_impl(_3643)->i32;
  _checked_ptr_1<int> _ptr__3663(_3663 ? _3663->raw() : nullptr,_3663 ? _3663->size(0) : 0);
  p->getAllIndexes(_3663,_3662);
  std::shared_ptr< monty::ndarray< long long,1 > > _3664 = mosek::fusion::p_WorkStack::_get_impl(_3643)->i64;
  _checked_ptr_1<long long> _ptr__3664(_3664 ? _3664->raw() : nullptr,_3664 ? _3664->size(0) : 0);
  int _3665 = (int)0;
  int _3666 = (int)1;
  int _3667 = (int)0;
  if (_3650)
  {
    {
      int _3668 = (int)0;
      int _3669 = (int)0;
      while ( ((_3668 < _3648) && (_3669 < _3660)) )
      {
        {
          if ((_ptr__3645[safe_add( _3654,_3668 )] < _ptr__3664[safe_add( _3661,_3669 )]))
          {
            {
              ++ _3668;
            }
          }
          else if((_ptr__3645[safe_add( _3654,_3668 )] > _ptr__3664[safe_add( _3661,_3669 )]))
          {
            {
              ++ _3669;
            }
          }
          else
          {
            {
              int _3670 = (_ptr__3644[safe_add( safe_add( _3651,_3668 ),(int)1 )] - _ptr__3644[safe_add( _3651,_3668 )]);
              _3665 += _3670;
              int _10343;
              bool _10344 = (_3652 > (int)0);
              if (_10344)
              {
                _10343 = safe_add( (_ptr__3644[safe_add( _3658,_ptr__3644[safe_add( safe_add( _3651,_3668 ),(int)1 )] )] - _ptr__3644[safe_add( _3658,_ptr__3644[safe_add( _3651,_3668 )] )]),safe_mul( (int)4,_3670 ) );
              }
              else
              {
                _10343 = safe_mul( (int)3,_3670 );
              }
              _3667 += _10343;
              ++ _3668;
              ++ _3669;
            }
          }
        }
      }
    }
  }
  else
  {
    {
      int _10345 = (int)0;
      int _10346 = _3660;
      for (int _3671 = _10345; _3671 < _10346; ++_3671)
      {
        {
          _3665 += (_ptr__3644[safe_add( safe_add( _3651,_ptr__3664[safe_add( _3661,_3671 )] ),(int)1 )] - _ptr__3644[safe_add( _3651,_ptr__3664[safe_add( _3661,_3671 )] )]);
        }
      }
      if ((_3652 > (int)0))
      {
        {
          int _10347 = (int)0;
          int _10348 = _3660;
          for (int _3672 = _10347; _3672 < _10348; ++_3672)
          {
            {
              _3667 += safe_add( (_ptr__3644[safe_add( _3658,_ptr__3644[safe_add( safe_add( _3651,_ptr__3664[safe_add( _3661,_3672 )] ),(int)1 )] )] - _ptr__3644[safe_add( _3658,_ptr__3644[safe_add( _3651,_ptr__3664[safe_add( _3661,_3672 )] )] )]),safe_mul( (int)4,(_ptr__3644[safe_add( safe_add( _3651,_ptr__3664[safe_add( _3661,_3672 )] ),(int)1 )] - _ptr__3644[safe_add( _3651,_ptr__3664[safe_add( _3661,_3672 )] )]) ) );
            }
          }
        }
      }
      else
      {
        {
          int _10349 = (int)0;
          int _10350 = _3660;
          for (int _3673 = _10349; _3673 < _10350; ++_3673)
          {
            {
              _3667 += safe_mul( (int)3,(_ptr__3644[safe_add( safe_add( _3651,_ptr__3664[safe_add( _3661,_3673 )] ),(int)1 )] - _ptr__3644[safe_add( _3651,_ptr__3664[safe_add( _3661,_3673 )] )]) );
            }
          }
        }
      }
    }
  }
  long long _3674 = (int)1;
  int _10351 = (int)0;
  int _10352 = _3647;
  for (int _3675 = _10351; _3675 < _10352; ++_3675)
  {
    {
      _3674 *= _ptr__3644[safe_add( _3653,_3675 )];
    }
  }
  _3641->alloc_expr((int)0,_3666,_3665,false,_3667);
  int _3676 = mosek::fusion::p_WorkStack::_get_impl(_3641)->ptr_base;
  int _3677 = mosek::fusion::p_WorkStack::_get_impl(_3641)->nidxs_base;
  int _3678 = mosek::fusion::p_WorkStack::_get_impl(_3641)->cof_base;
  bool _3679 = mosek::fusion::p_WorkStack::_get_impl(_3641)->hassp;
  int _3680 = mosek::fusion::p_WorkStack::_get_impl(_3641)->shape_base;
  int _3681 = mosek::fusion::p_WorkStack::_get_impl(_3641)->codeptr_base;
  int _3682 = mosek::fusion::p_WorkStack::_get_impl(_3641)->code_base;
  int _3683 = mosek::fusion::p_WorkStack::_get_impl(_3641)->cconst_base;
  std::shared_ptr< monty::ndarray< long long,1 > > _3684 = mosek::fusion::p_WorkStack::_get_impl(_3641)->i64;
  _checked_ptr_1<long long> _ptr__3684(_3684 ? _3684->raw() : nullptr,_3684 ? _3684->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _3685 = mosek::fusion::p_WorkStack::_get_impl(_3641)->f64;
  _checked_ptr_1<double> _ptr__3685(_3685 ? _3685->raw() : nullptr,_3685 ? _3685->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _3686 = mosek::fusion::p_WorkStack::_get_impl(_3641)->i32;
  _checked_ptr_1<int> _ptr__3686(_3686 ? _3686->raw() : nullptr,_3686 ? _3686->size(0) : 0);
  _ptr__3686[_3676] = (int)0;
  _ptr__3686[safe_add( _3676,(int)1 )] = _3665;
  _ptr__3686[_3681] = (int)0;
  if (_3650)
  {
    {
      int _3687 = (int)0;
      int _3688 = (int)0;
      int _3689 = (int)0;
      int _3690 = (int)0;
      int _3691 = (int)0;
      while ( ((_3690 < _3648) && (_3691 < _3660)) )
      {
        {
          if ((_ptr__3645[safe_add( _3654,_3690 )] < _ptr__3664[safe_add( _3661,_3691 )]))
          {
            {
              ++ _3690;
            }
          }
          else if((_ptr__3645[safe_add( _3654,_3690 )] > _ptr__3664[safe_add( _3661,_3691 )]))
          {
            {
              ++ _3691;
            }
          }
          else
          {
            {
              int _10353 = _ptr__3644[safe_add( _3651,_3690 )];
              int _10354 = _ptr__3644[safe_add( safe_add( _3651,_3690 ),(int)1 )];
              for (int _3692 = _10353; _3692 < _10354; ++_3692)
              {
                {
                  _ptr__3684[safe_add( _3677,_3688 )] = _ptr__3645[safe_add( _3655,_3692 )];
                  _ptr__3685[safe_add( _3678,_3688 )] = 0.0;
                  _ptr__3686[safe_add( _3682,_3687 )] = 2;
                  _ptr__3685[safe_add( _3683,_3687 )] = _ptr__3646[safe_add( _3656,_3692 )];
                  ++ _3687;
                  if ((_3652 > (int)0))
                  {
                    {
                      int _10355 = _ptr__3644[safe_add( _3658,_3692 )];
                      int _10356 = _ptr__3644[safe_add( safe_add( _3658,_3692 ),(int)1 )];
                      for (int _3693 = _10355; _3693 < _10356; ++_3693)
                      {
                        {
                          _ptr__3686[safe_add( _3682,_3687 )] = _ptr__3644[safe_add( _3659,_3693 )];
                          _ptr__3685[safe_add( _3683,_3687 )] = _ptr__3646[safe_add( _3657,_3693 )];
                          ++ _3687;
                        }
                      }
                      _ptr__3686[safe_add( _3682,_3687 )] = 3;
                      ++ _3687;
                    }
                  }
                  {}
                  _ptr__3686[safe_add( _3682,_3687 )] = 1;
                  _ptr__3685[safe_add( _3683,_3687 )] = _ptr__3663[safe_add( _3662,_3691 )];
                  ++ _3687;
                  _ptr__3686[safe_add( _3682,_3687 )] = 5;
                  ++ _3687;
                  _ptr__3686[safe_add( safe_add( _3681,_3688 ),(int)1 )] = _3687;
                  ++ _3688;
                }
              }
              ++ _3690;
              ++ _3691;
            }
          }
        }
      }
      if ((_3689 != _3666))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("Internal: broken elmi"));
        }
      }
      {}
      if ((_3688 != _3665))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("Internal: broken nzi"));
        }
      }
      {}
      if ((_3687 != _3667))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("Internal: broken codei"));
        }
      }
      {}
    }
  }
  else
  {
    {
      int _3694 = (int)0;
      int _3695 = (int)0;
      int _10357 = (int)0;
      int _10358 = _3660;
      for (int _3696 = _10357; _3696 < _10358; ++_3696)
      {
        {
          int _3697 = _3696;
          long long _3698 = _ptr__3664[safe_add( _3661,_3696 )];
          int _10359 = _ptr__3644[safe_add( _3651,_3698 )];
          int _10360 = _ptr__3644[safe_add( safe_add( _3651,_3698 ),(int)1 )];
          for (int _3699 = _10359; _3699 < _10360; ++_3699)
          {
            {
              _ptr__3684[safe_add( _3677,_3695 )] = _ptr__3645[safe_add( _3655,_3699 )];
              _ptr__3685[safe_add( _3678,_3695 )] = 0.0;
              _ptr__3686[safe_add( _3682,_3694 )] = 2;
              _ptr__3685[safe_add( _3683,_3694 )] = _ptr__3646[safe_add( _3656,_3699 )];
              ++ _3694;
              if ((_3652 > (int)0))
              {
                {
                  int _10361 = _ptr__3644[safe_add( _3658,_3699 )];
                  int _10362 = _ptr__3644[safe_add( safe_add( _3658,_3699 ),(int)1 )];
                  for (int _3700 = _10361; _3700 < _10362; ++_3700)
                  {
                    {
                      _ptr__3686[safe_add( _3682,_3694 )] = _ptr__3644[safe_add( _3659,_3700 )];
                      _ptr__3685[safe_add( _3683,_3694 )] = _ptr__3646[safe_add( _3657,_3700 )];
                      ++ _3694;
                    }
                  }
                  _ptr__3686[safe_add( _3682,_3694 )] = 3;
                  ++ _3694;
                }
              }
              {}
              _ptr__3686[safe_add( _3682,_3694 )] = 1;
              _ptr__3685[safe_add( _3683,_3694 )] = _ptr__3663[safe_add( _3662,_3696 )];
              ++ _3694;
              _ptr__3686[safe_add( _3682,_3694 )] = 5;
              ++ _3694;
              _ptr__3686[safe_add( safe_add( _3681,_3695 ),(int)1 )] = _3694;
              ++ _3695;
            }
          }
        }
      }
      if ((_3695 != _3665))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("Internal: invalid nzi"));
        }
      }
      {}
      if ((_3694 != _3667))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("Internal: invalid codei"));
        }
      }
      {}
    }
  }
  _3643->clear();
}
std::string mosek::fusion::ExprDotParam :: toString() { return mosek::fusion::p_ExprDotParam::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprDotParam::toString(){
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprDotParam("))->__mosek_2fusion_2Utils_2StringBuffer__a(p->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(e->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
void mosek::fusion::p_ExprDotParam::destroy(){e.reset();p.reset();}void mosek::fusion::ExprDotParam::destroy() { mosek::fusion::p_ExprDotParam::_get_impl(this)->destroy(); }mosek::fusion::ExprMulParamElem::ExprMulParamElem(mosek::fusion::p_ExprMulParamElem *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprMulParamElem()" << this << std::endl; */ }mosek::fusion::ExprMulParamElem::~ExprMulParamElem() {  /* std::cout << "~ExprMulParamElem()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprMulParamElem::p_ExprMulParamElem  (::mosek::fusion::ExprMulParamElem * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprMulParamElem::t mosek::fusion::p_ExprMulParamElem::_new_ExprMulParamElem  (monty::rc_ptr< ::mosek::fusion::Parameter > _3701,    monty::rc_ptr< ::mosek::fusion::Expression > _3702){ return new mosek::fusion::ExprMulParamElem(_3701,_3702); }mosek::fusion::ExprMulParamElem::ExprMulParamElem  (monty::rc_ptr< ::mosek::fusion::Parameter > _3701,    monty::rc_ptr< ::mosek::fusion::Expression > _3702) :    ExprMulParamElem(new mosek::fusion::p_ExprMulParamElem(this)){ mosek::fusion::p_ExprMulParamElem::_get_impl(this)->_initialize(_3701,_3702); }void mosek::fusion::p_ExprMulParamElem::_initialize  (monty::rc_ptr< ::mosek::fusion::Parameter > _3701,    monty::rc_ptr< ::mosek::fusion::Expression > _3702){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(_3702->getShape());
    mosek::fusion::p_ExprMulParamElem::_get_impl(::mosek::fusion::ExprMulParamElem::t(_pubthis))->p = _3701;
    mosek::fusion::p_ExprMulParamElem::_get_impl(::mosek::fusion::ExprMulParamElem::t(_pubthis))->e = _3702;
    if ((_3701->getND() != _3702->getND()))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand dimensions"));
      }
    }
    {}
    int _10363 = (int)0;
    int _10364 = _3701->getND();
    for (int _3703 = _10363; _3703 < _10364; ++_3703)
    {
      {
        if ((_3701->getDim(_3703) != _3702->getDim(_3703)))
        {
          {
            throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand dimensions"));
          }
        }
        {}
      }
    }
  }
}void mosek::fusion::ExprMulParamElem :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3704,monty::rc_ptr< ::mosek::fusion::WorkStack > _3705,monty::rc_ptr< ::mosek::fusion::WorkStack > _3706) { mosek::fusion::p_ExprMulParamElem::_get_impl(this)->eval(_3704,_3705,_3706); }void mosek::fusion::p_ExprMulParamElem::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3704,monty::rc_ptr< ::mosek::fusion::WorkStack > _3705,monty::rc_ptr< ::mosek::fusion::WorkStack > _3706){
  e->eval(_3705,_3704,_3706);
  _3705->pop_expr();
  std::shared_ptr< monty::ndarray< int,1 > > _3707 = mosek::fusion::p_WorkStack::_get_impl(_3705)->i32;
  _checked_ptr_1<int> _ptr__3707(_3707 ? _3707->raw() : nullptr,_3707 ? _3707->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _3708 = mosek::fusion::p_WorkStack::_get_impl(_3705)->i64;
  _checked_ptr_1<long long> _ptr__3708(_3708 ? _3708->raw() : nullptr,_3708 ? _3708->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _3709 = mosek::fusion::p_WorkStack::_get_impl(_3705)->f64;
  _checked_ptr_1<double> _ptr__3709(_3709 ? _3709->raw() : nullptr,_3709 ? _3709->size(0) : 0);
  int _3710 = mosek::fusion::p_WorkStack::_get_impl(_3705)->nd;
  int _3711 = mosek::fusion::p_WorkStack::_get_impl(_3705)->nelem;
  int _3712 = mosek::fusion::p_WorkStack::_get_impl(_3705)->nnz;
  bool _3713 = mosek::fusion::p_WorkStack::_get_impl(_3705)->hassp;
  int _3714 = mosek::fusion::p_WorkStack::_get_impl(_3705)->ptr_base;
  int _3715 = mosek::fusion::p_WorkStack::_get_impl(_3705)->ncodeatom;
  int _3716 = mosek::fusion::p_WorkStack::_get_impl(_3705)->shape_base;
  int _3717 = mosek::fusion::p_WorkStack::_get_impl(_3705)->sp_base;
  int _3718 = mosek::fusion::p_WorkStack::_get_impl(_3705)->nidxs_base;
  int _3719 = mosek::fusion::p_WorkStack::_get_impl(_3705)->cof_base;
  int _3720 = mosek::fusion::p_WorkStack::_get_impl(_3705)->cconst_base;
  int _3721 = mosek::fusion::p_WorkStack::_get_impl(_3705)->codeptr_base;
  int _3722 = mosek::fusion::p_WorkStack::_get_impl(_3705)->code_base;
  int _3723 = p->getNumNonzero();
  int _3724 = _3706->alloci64(_3723);
  p->getSp(mosek::fusion::p_WorkStack::_get_impl(_3706)->i64,_3724);
  int _3725 = _3706->alloci32(p->getNumNonzero());
  std::shared_ptr< monty::ndarray< int,1 > > _3726 = mosek::fusion::p_WorkStack::_get_impl(_3706)->i32;
  _checked_ptr_1<int> _ptr__3726(_3726 ? _3726->raw() : nullptr,_3726 ? _3726->size(0) : 0);
  p->getAllIndexes(_3726,_3725);
  std::shared_ptr< monty::ndarray< long long,1 > > _3727 = mosek::fusion::p_WorkStack::_get_impl(_3706)->i64;
  _checked_ptr_1<long long> _ptr__3727(_3727 ? _3727->raw() : nullptr,_3727 ? _3727->size(0) : 0);
  int _3728 = _3710;
  int _3729 = (int)0;
  int _3730 = (int)0;
  int _3731 = (int)0;
  if (_3713)
  {
    {
      int _3732 = (int)0;
      int _3733 = (int)0;
      while ( ((_3732 < _3711) && (_3733 < _3723)) )
      {
        {
          if ((_ptr__3708[safe_add( _3717,_3732 )] < _ptr__3727[safe_add( _3724,_3733 )]))
          {
            {
              ++ _3732;
            }
          }
          else if((_ptr__3708[safe_add( _3717,_3732 )] > _ptr__3727[safe_add( _3724,_3733 )]))
          {
            {
              ++ _3733;
            }
          }
          else
          {
            {
              int _3734 = (_ptr__3707[safe_add( safe_add( _3714,_3732 ),(int)1 )] - _ptr__3707[safe_add( _3714,_3732 )]);
              _3729 += _3734;
              int _10365;
              bool _10366 = (_3715 > (int)0);
              if (_10366)
              {
                _10365 = safe_add( (_ptr__3707[safe_add( _3721,_ptr__3707[safe_add( safe_add( _3714,_3732 ),(int)1 )] )] - _ptr__3707[safe_add( _3721,_ptr__3707[safe_add( _3714,_3732 )] )]),safe_mul( (int)4,_3734 ) );
              }
              else
              {
                _10365 = safe_mul( (int)3,_3734 );
              }
              _3731 += _10365;
              _3730 += (int)1;
              ++ _3732;
              ++ _3733;
            }
          }
        }
      }
    }
  }
  else
  {
    {
      _3730 = _3723;
      int _10367 = (int)0;
      int _10368 = _3723;
      for (int _3735 = _10367; _3735 < _10368; ++_3735)
      {
        {
          _3729 += (_ptr__3707[safe_add( safe_add( _3714,_ptr__3727[safe_add( _3724,_3735 )] ),(int)1 )] - _ptr__3707[safe_add( _3714,_ptr__3727[safe_add( _3724,_3735 )] )]);
        }
      }
      if ((_3715 > (int)0))
      {
        {
          int _10369 = (int)0;
          int _10370 = _3723;
          for (int _3736 = _10369; _3736 < _10370; ++_3736)
          {
            {
              _3731 += safe_add( (_ptr__3707[safe_add( _3721,_ptr__3707[safe_add( safe_add( _3714,_ptr__3727[safe_add( _3724,_3736 )] ),(int)1 )] )] - _ptr__3707[safe_add( _3721,_ptr__3707[safe_add( _3714,_ptr__3727[safe_add( _3724,_3736 )] )] )]),safe_mul( (int)4,(_ptr__3707[safe_add( safe_add( _3714,_ptr__3727[safe_add( _3724,_3736 )] ),(int)1 )] - _ptr__3707[safe_add( _3714,_ptr__3727[safe_add( _3724,_3736 )] )]) ) );
            }
          }
        }
      }
      else
      {
        {
          int _10371 = (int)0;
          int _10372 = _3723;
          for (int _3737 = _10371; _3737 < _10372; ++_3737)
          {
            {
              _3731 += safe_mul( (int)3,(_ptr__3707[safe_add( safe_add( _3714,_ptr__3727[safe_add( _3724,_3737 )] ),(int)1 )] - _ptr__3707[safe_add( _3714,_ptr__3727[safe_add( _3724,_3737 )] )]) );
            }
          }
        }
      }
    }
  }
  long long _3738 = (int)1;
  int _10373 = (int)0;
  int _10374 = _3710;
  for (int _3739 = _10373; _3739 < _10374; ++_3739)
  {
    {
      _3738 *= _ptr__3707[safe_add( _3716,_3739 )];
    }
  }
  bool _3740 = (_3730 < _3738);
  _3704->alloc_expr(_3728,_3730,_3729,_3740,_3731);
  int _3741 = mosek::fusion::p_WorkStack::_get_impl(_3704)->ptr_base;
  int _3742 = mosek::fusion::p_WorkStack::_get_impl(_3704)->nidxs_base;
  int _10375;
  bool _10376 = _3740;
  if (_10376)
  {
    _10375 = mosek::fusion::p_WorkStack::_get_impl(_3704)->sp_base;
  }
  else
  {
    _10375 = _3704->alloci64(_3730);
  }
  int _3743 = _10375;
  int _3744 = mosek::fusion::p_WorkStack::_get_impl(_3704)->cof_base;
  bool _3745 = mosek::fusion::p_WorkStack::_get_impl(_3704)->hassp;
  int _3746 = mosek::fusion::p_WorkStack::_get_impl(_3704)->shape_base;
  int _3747 = mosek::fusion::p_WorkStack::_get_impl(_3704)->codeptr_base;
  int _3748 = mosek::fusion::p_WorkStack::_get_impl(_3704)->code_base;
  int _3749 = mosek::fusion::p_WorkStack::_get_impl(_3704)->cconst_base;
  std::shared_ptr< monty::ndarray< long long,1 > > _3750 = mosek::fusion::p_WorkStack::_get_impl(_3704)->i64;
  _checked_ptr_1<long long> _ptr__3750(_3750 ? _3750->raw() : nullptr,_3750 ? _3750->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _3751 = mosek::fusion::p_WorkStack::_get_impl(_3704)->f64;
  _checked_ptr_1<double> _ptr__3751(_3751 ? _3751->raw() : nullptr,_3751 ? _3751->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _3752 = mosek::fusion::p_WorkStack::_get_impl(_3704)->i32;
  _checked_ptr_1<int> _ptr__3752(_3752 ? _3752->raw() : nullptr,_3752 ? _3752->size(0) : 0);
  int _10377 = (int)0;
  int _10378 = _3710;
  for (int _3753 = _10377; _3753 < _10378; ++_3753)
  {
    {
      _ptr__3752[safe_add( _3746,_3753 )] = _ptr__3707[safe_add( _3716,_3753 )];
    }
  }
  _ptr__3752[_3741] = (int)0;
  _ptr__3752[_3747] = (int)0;
  if (_3713)
  {
    {
      int _3754 = (int)0;
      int _3755 = (int)0;
      int _3756 = (int)0;
      int _3757 = (int)0;
      int _3758 = (int)0;
      while ( ((_3757 < _3711) && (_3758 < _3723)) )
      {
        {
          if ((_ptr__3708[safe_add( _3717,_3757 )] < _ptr__3727[safe_add( _3724,_3758 )]))
          {
            {
              ++ _3757;
            }
          }
          else if((_ptr__3708[safe_add( _3717,_3757 )] > _ptr__3727[safe_add( _3724,_3758 )]))
          {
            {
              ++ _3758;
            }
          }
          else
          {
            {
              int _10379 = _ptr__3707[safe_add( _3714,_3757 )];
              int _10380 = _ptr__3707[safe_add( safe_add( _3714,_3757 ),(int)1 )];
              for (int _3759 = _10379; _3759 < _10380; ++_3759)
              {
                {
                  _ptr__3750[safe_add( _3742,_3755 )] = _ptr__3708[safe_add( _3718,_3759 )];
                  _ptr__3751[safe_add( _3744,_3755 )] = 0.0;
                  _ptr__3752[safe_add( _3748,_3754 )] = 2;
                  _ptr__3751[safe_add( _3749,_3754 )] = _ptr__3709[safe_add( _3719,_3759 )];
                  ++ _3754;
                  if ((_3715 > (int)0))
                  {
                    {
                      int _10381 = _ptr__3707[safe_add( _3721,_3759 )];
                      int _10382 = _ptr__3707[safe_add( safe_add( _3721,_3759 ),(int)1 )];
                      for (int _3760 = _10381; _3760 < _10382; ++_3760)
                      {
                        {
                          _ptr__3752[safe_add( _3748,_3754 )] = _ptr__3707[safe_add( _3722,_3760 )];
                          _ptr__3751[safe_add( _3749,_3754 )] = _ptr__3709[safe_add( _3720,_3760 )];
                          ++ _3754;
                        }
                      }
                      _ptr__3752[safe_add( _3748,_3754 )] = 3;
                      ++ _3754;
                    }
                  }
                  {}
                  _ptr__3752[safe_add( _3748,_3754 )] = 1;
                  _ptr__3751[safe_add( _3749,_3754 )] = _ptr__3726[safe_add( _3725,_3758 )];
                  ++ _3754;
                  _ptr__3752[safe_add( _3748,_3754 )] = 5;
                  ++ _3754;
                  _ptr__3752[safe_add( safe_add( _3747,_3755 ),(int)1 )] = _3754;
                  ++ _3755;
                }
              }
              _ptr__3750[safe_add( _3743,_3756 )] = _ptr__3708[safe_add( _3717,_3757 )];
              _ptr__3752[safe_add( safe_add( _3741,_3756 ),(int)1 )] = _3755;
              ++ _3756;
              ++ _3757;
              ++ _3758;
            }
          }
        }
      }
      if ((_3756 != _3730))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("Internal: broken elmi"));
        }
      }
      {}
      if ((_3755 != _3729))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("Internal: broken nzi"));
        }
      }
      {}
      if ((_3754 != _3731))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("Internal: broken codei"));
        }
      }
      {}
    }
  }
  else
  {
    {
      int _3761 = (int)0;
      int _3762 = (int)0;
      int _10383 = (int)0;
      int _10384 = _3723;
      for (int _3763 = _10383; _3763 < _10384; ++_3763)
      {
        {
          int _3764 = _3763;
          long long _3765 = _ptr__3727[safe_add( _3724,_3763 )];
          int _10385 = _ptr__3707[safe_add( _3714,_3765 )];
          int _10386 = _ptr__3707[safe_add( safe_add( _3714,_3765 ),(int)1 )];
          for (int _3766 = _10385; _3766 < _10386; ++_3766)
          {
            {
              _ptr__3750[safe_add( _3742,_3762 )] = _ptr__3708[safe_add( _3718,_3766 )];
              _ptr__3751[safe_add( _3744,_3762 )] = 0.0;
              _ptr__3752[safe_add( _3748,_3761 )] = 2;
              _ptr__3751[safe_add( _3749,_3761 )] = _ptr__3709[safe_add( _3719,_3766 )];
              ++ _3761;
              if ((_3715 > (int)0))
              {
                {
                  int _10387 = _ptr__3707[safe_add( _3721,_3766 )];
                  int _10388 = _ptr__3707[safe_add( safe_add( _3721,_3766 ),(int)1 )];
                  for (int _3767 = _10387; _3767 < _10388; ++_3767)
                  {
                    {
                      _ptr__3752[safe_add( _3748,_3761 )] = _ptr__3707[safe_add( _3722,_3767 )];
                      _ptr__3751[safe_add( _3749,_3761 )] = _ptr__3709[safe_add( _3720,_3767 )];
                      ++ _3761;
                    }
                  }
                  _ptr__3752[safe_add( _3748,_3761 )] = 3;
                  ++ _3761;
                }
              }
              {}
              _ptr__3752[safe_add( _3748,_3761 )] = 1;
              _ptr__3751[safe_add( _3749,_3761 )] = _ptr__3726[safe_add( _3725,_3763 )];
              ++ _3761;
              _ptr__3752[safe_add( _3748,_3761 )] = 5;
              ++ _3761;
              _ptr__3752[safe_add( safe_add( _3747,_3762 ),(int)1 )] = _3761;
              ++ _3762;
            }
          }
          _ptr__3750[safe_add( _3743,_3764 )] = _3765;
          _ptr__3752[safe_add( safe_add( _3741,_3764 ),(int)1 )] = _3762;
        }
      }
      if ((_3731 != _3761))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("Internal! Invalid code list result"));
        }
      }
      {}
    }
  }
  if ((!_3745))
  {
    {
      _3704->popi64(_3730);
    }
  }
  {}
  _3706->clear();
}
std::string mosek::fusion::ExprMulParamElem :: toString() { return mosek::fusion::p_ExprMulParamElem::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprMulParamElem::toString(){
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprMulParamElem("))->__mosek_2fusion_2Utils_2StringBuffer__a(p->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(e->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
void mosek::fusion::p_ExprMulParamElem::destroy(){e.reset();p.reset();}void mosek::fusion::ExprMulParamElem::destroy() { mosek::fusion::p_ExprMulParamElem::_get_impl(this)->destroy(); }mosek::fusion::ExprMulParamRight::ExprMulParamRight(mosek::fusion::p_ExprMulParamRight *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprMulParamRight()" << this << std::endl; */ }mosek::fusion::ExprMulParamRight::~ExprMulParamRight() {  /* std::cout << "~ExprMulParamRight()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprMulParamRight::p_ExprMulParamRight  (::mosek::fusion::ExprMulParamRight * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprMulParamRight::t mosek::fusion::p_ExprMulParamRight::_new_ExprMulParamRight  (monty::rc_ptr< ::mosek::fusion::Expression > _3768,    monty::rc_ptr< ::mosek::fusion::Parameter > _3769){ return new mosek::fusion::ExprMulParamRight(_3768,_3769); }mosek::fusion::ExprMulParamRight::ExprMulParamRight  (monty::rc_ptr< ::mosek::fusion::Expression > _3768,    monty::rc_ptr< ::mosek::fusion::Parameter > _3769) :    ExprMulParamRight(new mosek::fusion::p_ExprMulParamRight(this)){ mosek::fusion::p_ExprMulParamRight::_get_impl(this)->_initialize(_3768,_3769); }void mosek::fusion::p_ExprMulParamRight::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _3768,    monty::rc_ptr< ::mosek::fusion::Parameter > _3769){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_3768->getDim((int)0)),(int)(_3769->getDim((int)1))}));
    mosek::fusion::p_ExprMulParamRight::_get_impl(::mosek::fusion::ExprMulParamRight::t(_pubthis))->p = _3769;
    mosek::fusion::p_ExprMulParamRight::_get_impl(::mosek::fusion::ExprMulParamRight::t(_pubthis))->e = _3768;
    if (((_3769->getND() != (int)2) || (_3768->getND() != (int)2)))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions for multiplication"));
      }
    }
    {}
    if ((_3769->getDim((int)0) != _3768->getDim((int)1)))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand dimensions"));
      }
    }
    {}
  }
}void mosek::fusion::ExprMulParamRight :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3770,monty::rc_ptr< ::mosek::fusion::WorkStack > _3771,monty::rc_ptr< ::mosek::fusion::WorkStack > _3772) { mosek::fusion::p_ExprMulParamRight::_get_impl(this)->eval(_3770,_3771,_3772); }void mosek::fusion::p_ExprMulParamRight::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3770,monty::rc_ptr< ::mosek::fusion::WorkStack > _3771,monty::rc_ptr< ::mosek::fusion::WorkStack > _3772){
  e->eval(_3771,_3770,_3772);
  _3771->pop_expr();
  std::shared_ptr< monty::ndarray< int,1 > > _3773 = mosek::fusion::p_WorkStack::_get_impl(_3771)->i32;
  _checked_ptr_1<int> _ptr__3773(_3773 ? _3773->raw() : nullptr,_3773 ? _3773->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _3774 = mosek::fusion::p_WorkStack::_get_impl(_3771)->i64;
  _checked_ptr_1<long long> _ptr__3774(_3774 ? _3774->raw() : nullptr,_3774 ? _3774->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _3775 = mosek::fusion::p_WorkStack::_get_impl(_3771)->f64;
  _checked_ptr_1<double> _ptr__3775(_3775 ? _3775->raw() : nullptr,_3775 ? _3775->size(0) : 0);
  int _3776 = mosek::fusion::p_WorkStack::_get_impl(_3771)->nd;
  int _3777 = mosek::fusion::p_WorkStack::_get_impl(_3771)->nelem;
  int _3778 = mosek::fusion::p_WorkStack::_get_impl(_3771)->nnz;
  bool _3779 = mosek::fusion::p_WorkStack::_get_impl(_3771)->hassp;
  int _3780 = mosek::fusion::p_WorkStack::_get_impl(_3771)->ptr_base;
  int _3781 = mosek::fusion::p_WorkStack::_get_impl(_3771)->ncodeatom;
  int _3782 = mosek::fusion::p_WorkStack::_get_impl(_3771)->shape_base;
  int _3783 = mosek::fusion::p_WorkStack::_get_impl(_3771)->sp_base;
  int _3784 = mosek::fusion::p_WorkStack::_get_impl(_3771)->nidxs_base;
  int _3785 = mosek::fusion::p_WorkStack::_get_impl(_3771)->cof_base;
  int _3786 = mosek::fusion::p_WorkStack::_get_impl(_3771)->cconst_base;
  int _3787 = mosek::fusion::p_WorkStack::_get_impl(_3771)->codeptr_base;
  int _3788 = mosek::fusion::p_WorkStack::_get_impl(_3771)->code_base;
  if (((_3776 != (int)2) || (p->getDim((int)0) != _ptr__3773[safe_add( _3782,(int)1 )])))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand dimensions"));
    }
  }
  {}
  int _3789 = _ptr__3773[_3782];
  int _3790 = _ptr__3773[safe_add( _3782,(int)1 )];
  int _3791 = p->getDim((int)0);
  int _3792 = p->getDim((int)1);
  int _3793 = p->getNumNonzero();
  int _3794 = _3772->alloci32(p->getNumNonzero());
  std::shared_ptr< monty::ndarray< int,1 > > _3795 = mosek::fusion::p_WorkStack::_get_impl(_3772)->i32;
  _checked_ptr_1<int> _ptr__3795(_3795 ? _3795->raw() : nullptr,_3795 ? _3795->size(0) : 0);
  p->getAllIndexes(_3795,_3794);
  int _3796 = _3772->alloci32(_3793);
  int _3797 = _3772->alloci64(_3793);
  p->getSp(mosek::fusion::p_WorkStack::_get_impl(_3772)->i64,_3797);
  {
    int _3798 = _3772->alloci32(safe_add( _3792,(int)1 ));
    std::shared_ptr< monty::ndarray< int,1 > > _3799 = mosek::fusion::p_WorkStack::_get_impl(_3772)->i32;
    _checked_ptr_1<int> _ptr__3799(_3799 ? _3799->raw() : nullptr,_3799 ? _3799->size(0) : 0);
    std::shared_ptr< monty::ndarray< long long,1 > > _3800 = mosek::fusion::p_WorkStack::_get_impl(_3772)->i64;
    _checked_ptr_1<long long> _ptr__3800(_3800 ? _3800->raw() : nullptr,_3800 ? _3800->size(0) : 0);
    int _10389 = (int)0;
    int _10390 = safe_add( _3792,(int)1 );
    for (int _3801 = _10389; _3801 < _10390; ++_3801)
    {
      {
        _ptr__3799[safe_add( _3798,_3801 )] = (int)0;
      }
    }
    int _10391 = (int)0;
    int _10392 = _3793;
    for (int _3802 = _10391; _3802 < _10392; ++_3802)
    {
      {
        ++ _ptr__3799[safe_add( safe_add( _3798,(_ptr__3800[safe_add( _3797,_3802 )] % _3792) ),(int)1 )];
      }
    }
    int _10393 = (int)0;
    int _10394 = _3792;
    for (int _3803 = _10393; _3803 < _10394; ++_3803)
    {
      {
        _ptr__3799[safe_add( safe_add( _3798,_3803 ),(int)1 )] += _ptr__3799[safe_add( _3798,_3803 )];
      }
    }
    int _10395 = (int)0;
    int _10396 = _3793;
    for (int _3804 = _10395; _3804 < _10396; ++_3804)
    {
      {
        _ptr__3799[safe_add( _3796,_ptr__3799[safe_add( _3798,(_ptr__3800[safe_add( _3797,_3804 )] % _3792) )] )] = _3804;
        ++ _ptr__3799[safe_add( _3798,(_ptr__3800[safe_add( _3797,_3804 )] % _3792) )];
      }
    }
  }
  std::shared_ptr< monty::ndarray< int,1 > > _3805 = mosek::fusion::p_WorkStack::_get_impl(_3772)->i32;
  _checked_ptr_1<int> _ptr__3805(_3805 ? _3805->raw() : nullptr,_3805 ? _3805->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _3806 = mosek::fusion::p_WorkStack::_get_impl(_3772)->i64;
  _checked_ptr_1<long long> _ptr__3806(_3806 ? _3806->raw() : nullptr,_3806 ? _3806->size(0) : 0);
  int _3807 = (int)0;
  int _3808 = (int)0;
  int _3809 = (int)0;
  if (((!p->isSparse()) && (!_3779)))
  {
    {
      _3809 = safe_mul( _3778,_3792 );
      _3808 = safe_mul( _3789,_3792 );
      int _10397;
      bool _10398 = (_3781 > (int)0);
      if (_10398)
      {
        _10397 = safe_mul( safe_add( _3781,safe_mul( _3778,(int)4 ) ),_3792 );
      }
      else
      {
        _10397 = safe_mul( safe_mul( _3778,_3792 ),(int)3 );
      }
      _3807 = _10397;
    }
  }
  else if((!_3779))
  {
    {
      int _3810 = (int)0;
      while ( (_3810 < _3793) )
      {
        {
          long long _3811 = (_ptr__3806[safe_add( _3797,_ptr__3805[safe_add( _3796,_3810 )] )] % _3792);
          int _3812 = _3810;
          while ( ((_3810 < _3793) && ((_ptr__3806[safe_add( _3797,_ptr__3805[safe_add( _3796,_3810 )] )] % _3792) == _3811)) )
          {
            {
              long long _3813 = (_ptr__3806[safe_add( _3797,_ptr__3805[safe_add( _3796,_3810 )] )] / _3792);
              int _10399 = (int)0;
              int _10400 = _3789;
              for (int _3814 = _10399; _3814 < _10400; ++_3814)
              {
                {
                  long long _3815 = safe_add( safe_mul( _3814,_3790 ),_3813 );
                  int _3816 = (_ptr__3773[safe_add( safe_add( _3780,_3815 ),(int)1 )] - _ptr__3773[safe_add( _3780,_3815 )]);
                  _3809 += _3816;
                  int _10401;
                  bool _10402 = (_3781 > (int)0);
                  if (_10402)
                  {
                    _10401 = safe_add( (_ptr__3773[safe_add( _3787,_ptr__3773[safe_add( safe_add( _3780,_3815 ),(int)1 )] )] - _ptr__3773[safe_add( _3787,_ptr__3773[safe_add( _3780,_3815 )] )]),safe_mul( _3816,(int)4 ) );
                  }
                  else
                  {
                    _10401 = safe_mul( _3816,(int)3 );
                  }
                  _3807 += _10401;
                }
              }
              ++ _3810;
            }
          }
          _3808 += _3789;
        }
      }
    }
  }
  else
  {
    {
      int _3817 = (int)0;
      while ( (_3817 < _3777) )
      {
        {
          long long _3818 = (_ptr__3774[safe_add( _3783,_3817 )] / _3790);
          int _3819 = _3817;
          long long _3820 = safe_mul( safe_add( _3818,(int)1 ),_3790 );
          while ( ((_3817 < _3777) && (_ptr__3774[safe_add( _3783,_3817 )] < _3820)) )
          {
            {
              ++ _3817;
            }
          }
          int _3821 = (int)0;
          while ( (_3821 < _3793) )
          {
            {
              long long _3822 = (_ptr__3806[safe_add( _3797,_ptr__3805[safe_add( _3796,_3821 )] )] % _3792);
              int _3823 = _3821;
              while ( ((_3821 < _3793) && (_3822 == (_ptr__3806[safe_add( _3797,_ptr__3805[safe_add( _3796,_3821 )] )] % _3792))) )
              {
                {
                  ++ _3821;
                }
              }
              int _3824 = (int)0;
              int _3825 = _3823;
              int _3826 = _3819;
              while ( ((_3826 < _3817) && (_3825 < _3821)) )
              {
                {
                  long long _3827 = (_ptr__3774[safe_add( _3783,_3826 )] % _3790);
                  long long _3828 = (_ptr__3806[safe_add( _3797,_ptr__3805[safe_add( _3796,_3825 )] )] / _3792);
                  if ((_3827 < _3828))
                  {
                    {
                      ++ _3826;
                    }
                  }
                  else if((_3827 > _3828))
                  {
                    {
                      ++ _3825;
                    }
                  }
                  else
                  {
                    {
                      int _3829 = (_ptr__3773[safe_add( safe_add( _3780,_3826 ),(int)1 )] - _ptr__3773[safe_add( _3780,_3826 )]);
                      _3809 += _3829;
                      int _10403;
                      bool _10404 = (_3781 > (int)0);
                      if (_10404)
                      {
                        _10403 = safe_add( (_ptr__3773[safe_add( _3787,_ptr__3773[safe_add( safe_add( _3780,_3826 ),(int)1 )] )] - _ptr__3773[safe_add( _3787,_ptr__3773[safe_add( _3780,_3826 )] )]),safe_mul( _3829,(int)4 ) );
                      }
                      else
                      {
                        _10403 = safe_mul( _3829,(int)3 );
                      }
                      _3807 += _10403;
                      ++ _3826;
                      ++ _3825;
                      ++ _3824;
                    }
                  }
                }
              }
              if ((_3824 > (int)0))
              {
                {
                  ++ _3808;
                }
              }
              {}
            }
          }
        }
      }
    }
  }
  int _3830 = (int)2;
  bool _3831 = (_3808 < safe_mul( _3792,_3789 ));
  _3770->alloc_expr(_3830,_3808,_3809,_3831,_3807);
  int _3832 = mosek::fusion::p_WorkStack::_get_impl(_3770)->ptr_base;
  int _3833 = mosek::fusion::p_WorkStack::_get_impl(_3770)->nidxs_base;
  int _10405;
  bool _10406 = _3831;
  if (_10406)
  {
    _10405 = mosek::fusion::p_WorkStack::_get_impl(_3770)->sp_base;
  }
  else
  {
    _10405 = _3770->alloci64(_3808);
  }
  int _3834 = _10405;
  int _3835 = mosek::fusion::p_WorkStack::_get_impl(_3770)->cof_base;
  bool _3836 = mosek::fusion::p_WorkStack::_get_impl(_3770)->hassp;
  int _3837 = mosek::fusion::p_WorkStack::_get_impl(_3770)->shape_base;
  int _3838 = mosek::fusion::p_WorkStack::_get_impl(_3770)->codeptr_base;
  int _3839 = mosek::fusion::p_WorkStack::_get_impl(_3770)->code_base;
  int _3840 = mosek::fusion::p_WorkStack::_get_impl(_3770)->cconst_base;
  std::shared_ptr< monty::ndarray< long long,1 > > _3841 = mosek::fusion::p_WorkStack::_get_impl(_3770)->i64;
  _checked_ptr_1<long long> _ptr__3841(_3841 ? _3841->raw() : nullptr,_3841 ? _3841->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _3842 = mosek::fusion::p_WorkStack::_get_impl(_3770)->f64;
  _checked_ptr_1<double> _ptr__3842(_3842 ? _3842->raw() : nullptr,_3842 ? _3842->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _3843 = mosek::fusion::p_WorkStack::_get_impl(_3770)->i32;
  _checked_ptr_1<int> _ptr__3843(_3843 ? _3843->raw() : nullptr,_3843 ? _3843->size(0) : 0);
  _ptr__3843[_3832] = (int)0;
  _ptr__3843[_3838] = (int)0;
  _ptr__3843[_3837] = _3789;
  _ptr__3843[safe_add( _3837,(int)1 )] = _3792;
  int _3844 = (int)0;
  int _3845 = (int)0;
  int _3846 = (int)0;
  if ((!_3779))
  {
    {
      int _10407 = (int)0;
      int _10408 = _3789;
      for (int _3847 = _10407; _3847 < _10408; ++_3847)
      {
        {
          int _3848 = (int)0;
          while ( (_3848 < _3793) )
          {
            {
              int _3849 = _3848;
              long long _3850 = (_ptr__3806[safe_add( _3797,_ptr__3805[safe_add( _3796,_3848 )] )] % _3792);
              while ( ((_3848 < _3793) && (_3850 == (_ptr__3806[safe_add( _3797,_ptr__3805[safe_add( _3796,_3848 )] )] % _3792))) )
              {
                {
                  ++ _3848;
                }
              }
              int _3851 = _3849;
              while ( (_3851 < _3848) )
              {
                {
                  long long _3852 = (_ptr__3806[safe_add( _3797,_ptr__3805[safe_add( _3796,_3851 )] )] / _3792);
                  long long _3853 = safe_add( safe_mul( _3847,_3790 ),_3852 );
                  int _3854 = _ptr__3805[safe_add( _3794,_ptr__3805[safe_add( _3796,_3851 )] )];
                  int _10409 = _ptr__3773[safe_add( _3780,_3853 )];
                  int _10410 = _ptr__3773[safe_add( safe_add( _3780,_3853 ),(int)1 )];
                  for (int _3855 = _10409; _3855 < _10410; ++_3855)
                  {
                    {
                      _ptr__3841[safe_add( _3833,_3846 )] = _ptr__3774[safe_add( _3784,_3855 )];
                      _ptr__3842[safe_add( _3835,_3846 )] = (int)0;
                      _ptr__3843[safe_add( _3839,_3844 )] = 2;
                      _ptr__3842[safe_add( _3840,_3844 )] = _ptr__3775[safe_add( _3785,_3855 )];
                      ++ _3844;
                      if ((_3781 > (int)0))
                      {
                        {
                          int _10411 = _ptr__3773[safe_add( _3787,_3855 )];
                          int _10412 = _ptr__3773[safe_add( safe_add( _3787,_3855 ),(int)1 )];
                          for (int _3856 = _10411; _3856 < _10412; ++_3856)
                          {
                            {
                              _ptr__3843[safe_add( _3839,_3844 )] = _ptr__3773[safe_add( _3788,_3856 )];
                              _ptr__3842[safe_add( _3840,_3844 )] = _ptr__3775[safe_add( _3786,_3856 )];
                              ++ _3844;
                            }
                          }
                          _ptr__3843[safe_add( _3839,_3844 )] = 3;
                          ++ _3844;
                        }
                      }
                      {}
                      _ptr__3843[safe_add( _3839,_3844 )] = 1;
                      _ptr__3842[safe_add( _3840,_3844 )] = _3854;
                      ++ _3844;
                      _ptr__3843[safe_add( _3839,_3844 )] = 5;
                      ++ _3844;
                      _ptr__3843[safe_add( safe_add( _3838,_3846 ),(int)1 )] = _3844;
                      ++ _3846;
                    }
                  }
                  ++ _3851;
                }
              }
              _ptr__3843[safe_add( safe_add( _3832,_3845 ),(int)1 )] = _3846;
              _ptr__3841[safe_add( _3834,_3845 )] = safe_add( safe_mul( _3847,_3792 ),_3850 );
              ++ _3845;
            }
          }
        }
      }
    }
  }
  else
  {
    {
      int _3857 = (int)0;
      while ( (_3857 < _3777) )
      {
        {
          long long _3858 = (_ptr__3774[safe_add( _3783,_3857 )] / _3790);
          int _3859 = _3857;
          long long _3860 = safe_mul( safe_add( _3858,(int)1 ),_3790 );
          while ( ((_3857 < _3777) && (_ptr__3774[safe_add( _3783,_3857 )] < _3860)) )
          {
            {
              ++ _3857;
            }
          }
          int _3861 = (int)0;
          while ( (_3861 < _3793) )
          {
            {
              long long _3862 = (_ptr__3806[safe_add( _3797,_ptr__3805[safe_add( _3796,_3861 )] )] % _3792);
              int _3863 = _3861;
              while ( ((_3861 < _3793) && (_3862 == (_ptr__3806[safe_add( _3797,_ptr__3805[safe_add( _3796,_3861 )] )] % _3792))) )
              {
                {
                  ++ _3861;
                }
              }
              int _3864 = (int)0;
              int _3865 = _3863;
              int _3866 = _3859;
              while ( ((_3866 < _3857) && (_3865 < _3861)) )
              {
                {
                  long long _3867 = (_ptr__3774[safe_add( _3783,_3866 )] % _3790);
                  long long _3868 = (_ptr__3806[safe_add( _3797,_ptr__3805[safe_add( _3796,_3865 )] )] / _3792);
                  if ((_3867 < _3868))
                  {
                    {
                      ++ _3866;
                    }
                  }
                  else if((_3867 > _3868))
                  {
                    {
                      ++ _3865;
                    }
                  }
                  else
                  {
                    {
                      int _3869 = _ptr__3805[safe_add( _3794,_ptr__3805[safe_add( _3796,_3865 )] )];
                      int _10413 = _ptr__3773[safe_add( _3780,_3866 )];
                      int _10414 = _ptr__3773[safe_add( safe_add( _3780,_3866 ),(int)1 )];
                      for (int _3870 = _10413; _3870 < _10414; ++_3870)
                      {
                        {
                          _ptr__3841[safe_add( _3833,_3846 )] = _ptr__3774[safe_add( _3784,_3870 )];
                          _ptr__3842[safe_add( _3835,_3846 )] = (int)0;
                          _ptr__3843[safe_add( _3839,_3844 )] = 2;
                          _ptr__3842[safe_add( _3840,_3844 )] = _ptr__3775[safe_add( _3785,_3870 )];
                          ++ _3844;
                          if ((_3781 > (int)0))
                          {
                            {
                              int _10415 = _ptr__3773[safe_add( _3787,_3870 )];
                              int _10416 = _ptr__3773[safe_add( safe_add( _3787,_3870 ),(int)1 )];
                              for (int _3871 = _10415; _3871 < _10416; ++_3871)
                              {
                                {
                                  _ptr__3843[safe_add( _3839,_3844 )] = _ptr__3773[safe_add( _3788,_3871 )];
                                  _ptr__3842[safe_add( _3840,_3844 )] = _ptr__3775[safe_add( _3786,_3871 )];
                                  ++ _3844;
                                }
                              }
                              _ptr__3843[safe_add( _3839,_3844 )] = 3;
                              ++ _3844;
                            }
                          }
                          {}
                          _ptr__3843[safe_add( _3839,_3844 )] = 1;
                          _ptr__3842[safe_add( _3840,_3844 )] = _3869;
                          ++ _3844;
                          _ptr__3843[safe_add( _3839,_3844 )] = 5;
                          ++ _3844;
                          _ptr__3843[safe_add( safe_add( _3838,_3846 ),(int)1 )] = _3844;
                          ++ _3846;
                        }
                      }
                      ++ _3866;
                      ++ _3865;
                      ++ _3864;
                    }
                  }
                }
              }
              if ((_3864 > (int)0))
              {
                {
                  _ptr__3843[safe_add( safe_add( _3832,_3845 ),(int)1 )] = _3846;
                  _ptr__3841[safe_add( _3834,_3845 )] = safe_add( safe_mul( _3858,_3792 ),_3862 );
                  ++ _3845;
                }
              }
              {}
            }
          }
        }
      }
    }
  }
  if ((!_3836))
  {
    {
      _3770->popi64(_3808);
    }
  }
  {}
  if ((_3845 != _3808))
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("broken elmi"));
    }
  }
  {}
  if ((_3846 != _3809))
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("broken nzi"));
    }
  }
  {}
  if ((_3844 != _3807))
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("broken codei"));
    }
  }
  {}
  _3772->clear();
}
std::string mosek::fusion::ExprMulParamRight :: toString() { return mosek::fusion::p_ExprMulParamRight::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprMulParamRight::toString(){
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprMulParamRight("))->__mosek_2fusion_2Utils_2StringBuffer__a(e->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(p->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
void mosek::fusion::p_ExprMulParamRight::destroy(){e.reset();p.reset();}void mosek::fusion::ExprMulParamRight::destroy() { mosek::fusion::p_ExprMulParamRight::_get_impl(this)->destroy(); }mosek::fusion::ExprMulParamLeft::ExprMulParamLeft(mosek::fusion::p_ExprMulParamLeft *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprMulParamLeft()" << this << std::endl; */ }mosek::fusion::ExprMulParamLeft::~ExprMulParamLeft() {  /* std::cout << "~ExprMulParamLeft()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprMulParamLeft::p_ExprMulParamLeft  (::mosek::fusion::ExprMulParamLeft * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprMulParamLeft::t mosek::fusion::p_ExprMulParamLeft::_new_ExprMulParamLeft  (monty::rc_ptr< ::mosek::fusion::Parameter > _3872,    monty::rc_ptr< ::mosek::fusion::Expression > _3873){ return new mosek::fusion::ExprMulParamLeft(_3872,_3873); }mosek::fusion::ExprMulParamLeft::ExprMulParamLeft  (monty::rc_ptr< ::mosek::fusion::Parameter > _3872,    monty::rc_ptr< ::mosek::fusion::Expression > _3873) :    ExprMulParamLeft(new mosek::fusion::p_ExprMulParamLeft(this)){ mosek::fusion::p_ExprMulParamLeft::_get_impl(this)->_initialize(_3872,_3873); }void mosek::fusion::p_ExprMulParamLeft::_initialize  (monty::rc_ptr< ::mosek::fusion::Parameter > _3872,    monty::rc_ptr< ::mosek::fusion::Expression > _3873){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_3872->getDim((int)0)),(int)(_3873->getDim((int)1))}));
    mosek::fusion::p_ExprMulParamLeft::_get_impl(::mosek::fusion::ExprMulParamLeft::t(_pubthis))->p = _3872;
    mosek::fusion::p_ExprMulParamLeft::_get_impl(::mosek::fusion::ExprMulParamLeft::t(_pubthis))->e = _3873;
    if (((_3872->getND() != (int)2) || (_3873->getND() != (int)2)))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions for multiplication"));
      }
    }
    {}
    if ((_3872->getDim((int)1) != _3873->getDim((int)0)))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand dimensions"));
      }
    }
    {}
  }
}void mosek::fusion::ExprMulParamLeft :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3874,monty::rc_ptr< ::mosek::fusion::WorkStack > _3875,monty::rc_ptr< ::mosek::fusion::WorkStack > _3876) { mosek::fusion::p_ExprMulParamLeft::_get_impl(this)->eval(_3874,_3875,_3876); }void mosek::fusion::p_ExprMulParamLeft::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _3874,monty::rc_ptr< ::mosek::fusion::WorkStack > _3875,monty::rc_ptr< ::mosek::fusion::WorkStack > _3876){
  e->eval(_3875,_3874,_3876);
  _3875->pop_expr();
  std::shared_ptr< monty::ndarray< int,1 > > _3877 = mosek::fusion::p_WorkStack::_get_impl(_3875)->i32;
  _checked_ptr_1<int> _ptr__3877(_3877 ? _3877->raw() : nullptr,_3877 ? _3877->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _3878 = mosek::fusion::p_WorkStack::_get_impl(_3875)->i64;
  _checked_ptr_1<long long> _ptr__3878(_3878 ? _3878->raw() : nullptr,_3878 ? _3878->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _3879 = mosek::fusion::p_WorkStack::_get_impl(_3875)->f64;
  _checked_ptr_1<double> _ptr__3879(_3879 ? _3879->raw() : nullptr,_3879 ? _3879->size(0) : 0);
  int _3880 = mosek::fusion::p_WorkStack::_get_impl(_3875)->nd;
  int _3881 = mosek::fusion::p_WorkStack::_get_impl(_3875)->nelem;
  int _3882 = mosek::fusion::p_WorkStack::_get_impl(_3875)->nnz;
  bool _3883 = mosek::fusion::p_WorkStack::_get_impl(_3875)->hassp;
  int _3884 = mosek::fusion::p_WorkStack::_get_impl(_3875)->ncodeatom;
  int _3885 = mosek::fusion::p_WorkStack::_get_impl(_3875)->ptr_base;
  int _3886 = mosek::fusion::p_WorkStack::_get_impl(_3875)->code_base;
  int _3887 = mosek::fusion::p_WorkStack::_get_impl(_3875)->cconst_base;
  int _3888 = mosek::fusion::p_WorkStack::_get_impl(_3875)->codeptr_base;
  int _3889 = mosek::fusion::p_WorkStack::_get_impl(_3875)->shape_base;
  int _3890 = mosek::fusion::p_WorkStack::_get_impl(_3875)->sp_base;
  int _3891 = mosek::fusion::p_WorkStack::_get_impl(_3875)->nidxs_base;
  int _3892 = mosek::fusion::p_WorkStack::_get_impl(_3875)->cof_base;
  int _3893 = mosek::fusion::p_WorkStack::_get_impl(_3875)->cconst_base;
  if (((_3880 != (int)2) || (_ptr__3877[_3889] != p->getDim((int)1))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand dimensions"));
    }
  }
  {}
  int _3894 = p->getDim((int)0);
  int _3895 = p->getDim((int)1);
  int _3896 = _ptr__3877[_3889];
  int _3897 = _ptr__3877[safe_add( _3889,(int)1 )];
  int _3898 = p->getNumNonzero();
  int _3899 = _3876->alloci32(p->getNumNonzero());
  std::shared_ptr< monty::ndarray< int,1 > > _3900 = mosek::fusion::p_WorkStack::_get_impl(_3876)->i32;
  _checked_ptr_1<int> _ptr__3900(_3900 ? _3900->raw() : nullptr,_3900 ? _3900->size(0) : 0);
  p->getAllIndexes(_3900,_3899);
  if (((!_3883) && (!p->isSparse())))
  {
    {
      int _3901 = (int)2;
      int _3902 = safe_mul( _3897,p->getDim((int)0) );
      int _3903 = safe_mul( _3882,p->getDim((int)0) );
      int _10417;
      bool _10418 = (_3884 > (int)0);
      if (_10418)
      {
        _10417 = safe_add( safe_mul( p->getDim((int)0),_3884 ),safe_mul( (int)4,_3903 ) );
      }
      else
      {
        _10417 = safe_mul( (int)3,_3903 );
      }
      int _3904 = _10417;
      bool _3905 = false;
      _3874->alloc_expr(_3901,_3902,_3903,_3905,_3904);
      std::shared_ptr< monty::ndarray< long long,1 > > _3906 = mosek::fusion::p_WorkStack::_get_impl(_3874)->i64;
      _checked_ptr_1<long long> _ptr__3906(_3906 ? _3906->raw() : nullptr,_3906 ? _3906->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _3907 = mosek::fusion::p_WorkStack::_get_impl(_3874)->f64;
      _checked_ptr_1<double> _ptr__3907(_3907 ? _3907->raw() : nullptr,_3907 ? _3907->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _3908 = mosek::fusion::p_WorkStack::_get_impl(_3874)->i32;
      _checked_ptr_1<int> _ptr__3908(_3908 ? _3908->raw() : nullptr,_3908 ? _3908->size(0) : 0);
      int _3909 = mosek::fusion::p_WorkStack::_get_impl(_3874)->ptr_base;
      int _3910 = mosek::fusion::p_WorkStack::_get_impl(_3874)->nidxs_base;
      int _3911 = mosek::fusion::p_WorkStack::_get_impl(_3874)->cof_base;
      int _3912 = mosek::fusion::p_WorkStack::_get_impl(_3874)->code_base;
      int _3913 = mosek::fusion::p_WorkStack::_get_impl(_3874)->codeptr_base;
      int _3914 = mosek::fusion::p_WorkStack::_get_impl(_3874)->cconst_base;
      bool _3915 = mosek::fusion::p_WorkStack::_get_impl(_3874)->hassp;
      int _3916 = mosek::fusion::p_WorkStack::_get_impl(_3874)->shape_base;
      _ptr__3908[_3916] = _3894;
      _ptr__3908[safe_add( _3916,(int)1 )] = _3897;
      {
        _ptr__3908[_3909] = (int)0;
        _ptr__3908[_3913] = (int)0;
        int _3917 = (int)0;
        int _3918 = (int)0;
        int _3919 = (int)0;
        int _10419 = (int)0;
        int _10420 = p->getDim((int)0);
        for (int _3920 = _10419; _3920 < _10420; ++_3920)
        {
          {
            int _10421 = (int)0;
            int _10422 = e->getDim((int)1);
            for (int _3921 = _10421; _3921 < _10422; ++_3921)
            {
              {
                int _10423 = (int)0;
                int _10424 = p->getDim((int)1);
                for (int _3922 = _10423; _3922 < _10424; ++_3922)
                {
                  {
                    int _10425 = _ptr__3877[safe_add( safe_add( _3885,safe_mul( _3922,_3897 ) ),_3921 )];
                    int _10426 = _ptr__3877[safe_add( safe_add( safe_add( _3885,safe_mul( _3922,_3897 ) ),_3921 ),(int)1 )];
                    for (int _3923 = _10425; _3923 < _10426; ++_3923)
                    {
                      {
                        _ptr__3906[safe_add( _3910,_3917 )] = _ptr__3878[safe_add( _3891,_3923 )];
                        _ptr__3907[safe_add( _3911,_3917 )] = 0.0;
                        _ptr__3908[safe_add( _3912,_3919 )] = 2;
                        _ptr__3907[safe_add( _3914,_3919 )] = _ptr__3879[safe_add( _3892,_3923 )];
                        ++ _3919;
                        if ((_3884 > (int)0))
                        {
                          {
                            int _10427 = _ptr__3877[safe_add( _3888,_3923 )];
                            int _10428 = _ptr__3877[safe_add( safe_add( _3888,_3923 ),(int)1 )];
                            for (int _3924 = _10427; _3924 < _10428; ++_3924)
                            {
                              {
                                _ptr__3908[safe_add( _3912,_3919 )] = _ptr__3877[safe_add( _3886,_3924 )];
                                _ptr__3907[safe_add( _3914,_3919 )] = _ptr__3879[safe_add( _3887,_3924 )];
                                ++ _3919;
                              }
                            }
                            _ptr__3908[safe_add( _3912,_3919 )] = 3;
                            ++ _3919;
                          }
                        }
                        {}
                        _ptr__3908[safe_add( _3912,_3919 )] = 1;
                        _ptr__3907[safe_add( _3914,_3919 )] = _ptr__3900[safe_add( safe_add( _3899,safe_mul( _3920,_3895 ) ),_3922 )];
                        ++ _3919;
                        _ptr__3908[safe_add( _3912,_3919 )] = 5;
                        ++ _3919;
                        _ptr__3908[safe_add( safe_add( _3913,_3917 ),(int)1 )] = _3919;
                        ++ _3917;
                      }
                    }
                  }
                }
                _ptr__3908[safe_add( safe_add( _3909,_3918 ),(int)1 )] = _3917;
                ++ _3918;
              }
            }
          }
        }
        if ((_3919 != _3904))
        {
          {
            throw ::mosek::fusion::UnexpectedError(std::string ("Internal! Incorrect a-code length"));
          }
        }
        {}
        if ((_3917 != _3903))
        {
          {
            throw ::mosek::fusion::UnexpectedError(std::string ("Internal! Incorrect nnz length"));
          }
        }
        {}
        if ((_3918 != _3902))
        {
          {
            throw ::mosek::fusion::UnexpectedError(std::string ("Internal! Incorrect nelem length"));
          }
        }
        {}
        int _10429 = (int)0;
        int _10430 = _3902;
        for (int _3925 = _10429; _3925 < _10430; ++_3925)
        {
          {
            if ((_ptr__3908[safe_add( _3909,_3925 )] > _ptr__3908[safe_add( safe_add( _3909,_3925 ),(int)1 )]))
            {
              {
                throw ::mosek::fusion::UnexpectedError(std::string ("Internal! Incorrect ptr indexes"));
              }
            }
            {}
          }
        }
      }
    }
  }
  else if((!_3883))
  {
    {
      int _3926 = _3881;
      int _3927 = _3898;
      int _3928 = _3876->alloci64(_3927);
      std::shared_ptr< monty::ndarray< long long,1 > > _3929 = mosek::fusion::p_WorkStack::_get_impl(_3876)->i64;
      _checked_ptr_1<long long> _ptr__3929(_3929 ? _3929->raw() : nullptr,_3929 ? _3929->size(0) : 0);
      p->getSp(_3929,_3928);
      int _3930 = (int)0;
      int _3931 = (int)0;
      int _3932 = (int)0;
      {
        int _3933 = (int)0;
        while ( (_3933 < _3898) )
        {
          {
            int _3934 = (int)(_ptr__3929[safe_add( _3928,_3933 )] / _3895);
            int _3935 = _3933;
            ++ _3933;
            while ( ((_3933 < _3898) && (_ptr__3929[safe_add( _3928,_3933 )] < safe_mul( safe_add( _3934,(int)1 ),_3895 ))) )
            {
              {
                ++ _3933;
              }
            }
            int _3936 = _3933;
            int _10431 = (int)0;
            int _10432 = _3897;
            for (int _3937 = _10431; _3937 < _10432; ++_3937)
            {
              {
                int _10433 = _3935;
                int _10434 = _3936;
                for (int _3938 = _10433; _3938 < _10434; ++_3938)
                {
                  {
                    long long _3939 = safe_add( safe_mul( (_ptr__3929[safe_add( _3928,_3938 )] % _3895),_3897 ),_3937 );
                    int _3940 = (_ptr__3877[safe_add( safe_add( _3885,_3939 ),(int)1 )] - _ptr__3877[safe_add( _3885,_3939 )]);
                    _3931 += _3940;
                    if ((_3884 > (int)0))
                    {
                      {
                        _3932 += safe_add( (_ptr__3877[safe_add( _3888,_ptr__3877[safe_add( safe_add( _3885,_3939 ),(int)1 )] )] - _ptr__3877[safe_add( _3888,_ptr__3877[safe_add( _3885,_3939 )] )]),safe_mul( (int)4,_3940 ) );
                      }
                    }
                    else
                    {
                      {
                        _3932 += safe_mul( (int)3,_3940 );
                      }
                    }
                  }
                }
                ++ _3930;
              }
            }
          }
        }
      }
      bool _3941 = (_3930 < safe_mul( _3894,_3897 ));
      int _3942 = (int)2;
      _3874->alloc_expr(_3942,_3930,_3931,_3941,_3932);
      int _3943 = mosek::fusion::p_WorkStack::_get_impl(_3874)->ptr_base;
      int _3944 = mosek::fusion::p_WorkStack::_get_impl(_3874)->nidxs_base;
      int _10435;
      bool _10436 = _3941;
      if (_10436)
      {
        _10435 = mosek::fusion::p_WorkStack::_get_impl(_3874)->sp_base;
      }
      else
      {
        _10435 = _3874->alloci64(_3930);
      }
      int _3945 = _10435;
      int _3946 = mosek::fusion::p_WorkStack::_get_impl(_3874)->cof_base;
      bool _3947 = mosek::fusion::p_WorkStack::_get_impl(_3874)->hassp;
      int _3948 = mosek::fusion::p_WorkStack::_get_impl(_3874)->shape_base;
      int _3949 = mosek::fusion::p_WorkStack::_get_impl(_3874)->codeptr_base;
      int _3950 = mosek::fusion::p_WorkStack::_get_impl(_3874)->code_base;
      int _3951 = mosek::fusion::p_WorkStack::_get_impl(_3874)->cconst_base;
      std::shared_ptr< monty::ndarray< long long,1 > > _3952 = mosek::fusion::p_WorkStack::_get_impl(_3874)->i64;
      _checked_ptr_1<long long> _ptr__3952(_3952 ? _3952->raw() : nullptr,_3952 ? _3952->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _3953 = mosek::fusion::p_WorkStack::_get_impl(_3874)->f64;
      _checked_ptr_1<double> _ptr__3953(_3953 ? _3953->raw() : nullptr,_3953 ? _3953->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _3954 = mosek::fusion::p_WorkStack::_get_impl(_3874)->i32;
      _checked_ptr_1<int> _ptr__3954(_3954 ? _3954->raw() : nullptr,_3954 ? _3954->size(0) : 0);
      _ptr__3954[_3948] = _3894;
      _ptr__3954[safe_add( _3948,(int)1 )] = _3897;
      {
        int _3955 = (int)0;
        int _3956 = (int)0;
        int _3957 = (int)0;
        _ptr__3954[_3949] = (int)0;
        _ptr__3954[_3943] = (int)0;
        int _10437 = (int)0;
        int _10438 = _3931;
        for (int _3958 = _10437; _3958 < _10438; ++_3958)
        {
          {
            _ptr__3953[safe_add( _3946,_3958 )] = 0.0;
          }
        }
        int _3959 = (int)0;
        while ( (_3959 < _3898) )
        {
          {
            int _3960 = (int)(_ptr__3929[safe_add( _3928,_3959 )] / _3895);
            int _3961 = _3959;
            ++ _3959;
            while ( ((_3959 < _3898) && (_ptr__3929[safe_add( _3928,_3959 )] < safe_mul( safe_add( _3960,(int)1 ),_3895 ))) )
            {
              {
                ++ _3959;
              }
            }
            int _3962 = _3959;
            int _10439 = (int)0;
            int _10440 = _3897;
            for (int _3963 = _10439; _3963 < _10440; ++_3963)
            {
              {
                int _10441 = _3961;
                int _10442 = _3962;
                for (int _3964 = _10441; _3964 < _10442; ++_3964)
                {
                  {
                    long long _3965 = safe_add( safe_mul( (_ptr__3929[safe_add( _3928,_3964 )] % _3895),_3897 ),_3963 );
                    int _10443 = _ptr__3877[safe_add( _3885,_3965 )];
                    int _10444 = _ptr__3877[safe_add( safe_add( _3885,_3965 ),(int)1 )];
                    for (int _3966 = _10443; _3966 < _10444; ++_3966)
                    {
                      {
                        _ptr__3952[safe_add( _3944,_3955 )] = _ptr__3878[safe_add( _3891,_3966 )];
                        _ptr__3954[safe_add( _3950,_3957 )] = 2;
                        _ptr__3953[safe_add( _3951,_3957 )] = _ptr__3879[safe_add( _3892,_3966 )];
                        ++ _3957;
                        if ((_3884 > (int)0))
                        {
                          {
                            int _10445 = _ptr__3877[safe_add( _3888,_3966 )];
                            int _10446 = _ptr__3877[safe_add( safe_add( _3888,_3966 ),(int)1 )];
                            for (int _3967 = _10445; _3967 < _10446; ++_3967)
                            {
                              {
                                _ptr__3954[safe_add( _3950,_3957 )] = _ptr__3877[safe_add( _3886,_3967 )];
                                _ptr__3953[safe_add( _3951,_3957 )] = _ptr__3879[safe_add( _3887,_3967 )];
                                ++ _3957;
                              }
                            }
                            _ptr__3954[safe_add( _3950,_3957 )] = 3;
                            ++ _3957;
                          }
                        }
                        {}
                        _ptr__3954[safe_add( _3950,_3957 )] = 1;
                        _ptr__3953[safe_add( _3951,_3957 )] = _ptr__3900[safe_add( _3899,_3964 )];
                        ++ _3957;
                        _ptr__3954[safe_add( _3950,_3957 )] = 5;
                        ++ _3957;
                        _ptr__3954[safe_add( safe_add( _3949,_3955 ),(int)1 )] = _3957;
                        ++ _3955;
                      }
                    }
                  }
                }
                _ptr__3954[safe_add( safe_add( _3943,_3956 ),(int)1 )] = _3955;
                ++ _3956;
              }
            }
          }
        }
        if ((_3957 != _3932))
        {
          {
            throw ::mosek::fusion::UnexpectedError(std::string ("Internal! Incorrect code list"));
          }
        }
        {}
        if ((_3955 != _3931))
        {
          {
            throw ::mosek::fusion::UnexpectedError(std::string ("Internal! Incorrect nnz length"));
          }
        }
        {}
        if ((_3956 != _3930))
        {
          {
            throw ::mosek::fusion::UnexpectedError(std::string ("Internal! Incorrect nelem length"));
          }
        }
        {}
        if ((_ptr__3954[safe_add( _3943,_3930 )] != _3931))
        {
          {
            throw ::mosek::fusion::UnexpectedError(std::string ("Internal! Incorrect ptr"));
          }
        }
        {}
      }
      if ((!_3947))
      {
        {
          _3874->popi64(_3930);
        }
      }
      {}
      _3876->clear();
    }
  }
  else
  {
    {
      int _3968 = _3881;
      int _3969 = _3876->alloci32(_3968);
      int _3970 = p->getNumNonzero();
      int _3971 = _3876->alloci64(_3970);
      int _3972 = _3876->alloci32(safe_add( _ptr__3877[safe_add( _3889,(int)1 )],(int)1 ));
      std::shared_ptr< monty::ndarray< int,1 > > _3973 = mosek::fusion::p_WorkStack::_get_impl(_3876)->i32;
      _checked_ptr_1<int> _ptr__3973(_3973 ? _3973->raw() : nullptr,_3973 ? _3973->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _3974 = mosek::fusion::p_WorkStack::_get_impl(_3876)->i64;
      _checked_ptr_1<long long> _ptr__3974(_3974 ? _3974->raw() : nullptr,_3974 ? _3974->size(0) : 0);
      p->getSp(_3974,_3971);
      {
        int _3975 = _ptr__3877[safe_add( _3889,(int)1 )];
        int _10447 = (int)0;
        int _10448 = safe_add( _ptr__3877[safe_add( _3889,(int)1 )],(int)1 );
        for (int _3976 = _10447; _3976 < _10448; ++_3976)
        {
          {
            _ptr__3973[safe_add( _3972,_3976 )] = (int)0;
          }
        }
        int _10449 = (int)0;
        int _10450 = _3881;
        for (int _3977 = _10449; _3977 < _10450; ++_3977)
        {
          {
            ++ _ptr__3973[safe_add( safe_add( _3972,(_ptr__3878[safe_add( _3890,_3977 )] % _3975) ),(int)1 )];
          }
        }
        int _10451 = (int)0;
        int _10452 = _3975;
        for (int _3978 = _10451; _3978 < _10452; ++_3978)
        {
          {
            _ptr__3973[safe_add( safe_add( _3972,_3978 ),(int)1 )] += _ptr__3973[safe_add( _3972,_3978 )];
          }
        }
        int _10453 = (int)0;
        int _10454 = _3881;
        for (int _3979 = _10453; _3979 < _10454; ++_3979)
        {
          {
            _ptr__3973[safe_add( _3969,_ptr__3973[safe_add( _3972,(_ptr__3878[safe_add( _3890,_3979 )] % _3975) )] )] = _3979;
            ++ _ptr__3973[safe_add( _3972,(_ptr__3878[safe_add( _3890,_3979 )] % _3975) )];
          }
        }
      }
      int _3980 = (int)0;
      int _3981 = (int)0;
      int _3982 = (int)0;
      int _3983 = _ptr__3877[safe_add( _3889,(int)1 )];
      int _3984 = _ptr__3877[_3889];
      int _3985 = p->getDim((int)1);
      int _3986 = p->getDim((int)0);
      {
        int _3987 = (int)0;
        while ( (_3987 < _3970) )
        {
          {
            int _3988 = _3987;
            long long _3989 = (_ptr__3974[safe_add( _3971,_3987 )] / _3985);
            while ( ((_3987 < _3970) && (_ptr__3974[safe_add( _3971,_3987 )] < safe_mul( safe_add( _3989,(int)1 ),_3985 ))) )
            {
              {
                ++ _3987;
              }
            }
            int _3990 = (int)0;
            while ( (_3990 < _3881) )
            {
              {
                int _3991 = _3990;
                long long _3992 = (_ptr__3878[safe_add( _3890,_ptr__3973[safe_add( _3969,_3990 )] )] % _3983);
                ++ _3990;
                while ( ((_3990 < _3881) && ((_ptr__3878[safe_add( _3890,_ptr__3973[safe_add( _3969,_3990 )] )] % _3983) == _3992)) )
                {
                  {
                    ++ _3990;
                  }
                }
                int _3993 = _3991;
                int _3994 = _3988;
                bool _3995 = false;
                int _3996 = (int)0;
                while ( ((_3994 < _3987) && (_3993 < _3990)) )
                {
                  {
                    int _3997 = _ptr__3973[safe_add( _3969,_3993 )];
                    if (((_ptr__3974[safe_add( _3971,_3994 )] % _3985) < (_ptr__3878[safe_add( _3890,_3997 )] / _3983)))
                    {
                      {
                        ++ _3994;
                      }
                    }
                    else if(((_ptr__3974[safe_add( _3971,_3994 )] % _3985) > (_ptr__3878[safe_add( _3890,_3997 )] / _3983)))
                    {
                      {
                        ++ _3993;
                      }
                    }
                    else
                    {
                      {
                        int _3998 = (_ptr__3877[safe_add( safe_add( _3885,_3997 ),(int)1 )] - _ptr__3877[safe_add( _3885,_3997 )]);
                        _3981 += _3998;
                        int _10455;
                        bool _10456 = (_3884 > (int)0);
                        if (_10456)
                        {
                          _10455 = safe_add( (_ptr__3877[safe_add( _3888,_ptr__3877[safe_add( safe_add( _3885,_3997 ),(int)1 )] )] - _ptr__3877[safe_add( _3888,_ptr__3877[safe_add( _3885,_3997 )] )]),safe_mul( (int)4,_3998 ) );
                        }
                        else
                        {
                          _10455 = safe_mul( (int)3,_3998 );
                        }
                        _3982 += _10455;
                        ++ _3993;
                        ++ _3994;
                        ++ _3996;
                      }
                    }
                  }
                }
                if ((_3996 > (int)0))
                {
                  {
                    ++ _3980;
                  }
                }
                {}
              }
            }
          }
        }
      }
      int _3999 = (int)2;
      bool _4000 = (_3980 < safe_mul( _3986,_3983 ));
      _3874->alloc_expr(_3999,_3980,_3981,_4000,_3982);
      int _4001 = mosek::fusion::p_WorkStack::_get_impl(_3874)->ptr_base;
      int _4002 = mosek::fusion::p_WorkStack::_get_impl(_3874)->nidxs_base;
      int _10457;
      bool _10458 = _4000;
      if (_10458)
      {
        _10457 = mosek::fusion::p_WorkStack::_get_impl(_3874)->sp_base;
      }
      else
      {
        _10457 = _3874->alloci64(_3980);
      }
      int _4003 = _10457;
      int _4004 = mosek::fusion::p_WorkStack::_get_impl(_3874)->cof_base;
      int _4005 = mosek::fusion::p_WorkStack::_get_impl(_3874)->shape_base;
      int _4006 = mosek::fusion::p_WorkStack::_get_impl(_3874)->codeptr_base;
      int _4007 = mosek::fusion::p_WorkStack::_get_impl(_3874)->code_base;
      int _4008 = mosek::fusion::p_WorkStack::_get_impl(_3874)->cconst_base;
      std::shared_ptr< monty::ndarray< long long,1 > > _4009 = mosek::fusion::p_WorkStack::_get_impl(_3874)->i64;
      _checked_ptr_1<long long> _ptr__4009(_4009 ? _4009->raw() : nullptr,_4009 ? _4009->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _4010 = mosek::fusion::p_WorkStack::_get_impl(_3874)->f64;
      _checked_ptr_1<double> _ptr__4010(_4010 ? _4010->raw() : nullptr,_4010 ? _4010->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _4011 = mosek::fusion::p_WorkStack::_get_impl(_3874)->i32;
      _checked_ptr_1<int> _ptr__4011(_4011 ? _4011->raw() : nullptr,_4011 ? _4011->size(0) : 0);
      int _10459 = (int)0;
      int _10460 = safe_add( _3980,(int)1 );
      for (int _4012 = _10459; _4012 < _10460; ++_4012)
      {
        {
          _ptr__4011[safe_add( _4001,_4012 )] = (-(int)9999);
        }
      }
      {
        _ptr__4011[_4001] = (int)0;
        _ptr__4011[_4006] = (int)0;
        _ptr__4011[_4005] = _3986;
        _ptr__4011[safe_add( _4005,(int)1 )] = _3983;
        int _4013 = (int)0;
        int _4014 = (int)0;
        int _4015 = (int)0;
        int _10461 = (int)0;
        int _10462 = _3981;
        for (int _4016 = _10461; _4016 < _10462; ++_4016)
        {
          {
            _ptr__4010[safe_add( _4004,_4016 )] = 0.0;
          }
        }
        int _4017 = (int)0;
        while ( (_4017 < _3970) )
        {
          {
            int _4018 = _4017;
            long long _4019 = (_ptr__3974[safe_add( _3971,_4017 )] / _3985);
            while ( ((_4017 < _3970) && (_ptr__3974[safe_add( _3971,_4017 )] < safe_mul( safe_add( _4019,(int)1 ),_3985 ))) )
            {
              {
                ++ _4017;
              }
            }
            int _4020 = (int)0;
            while ( (_4020 < _3881) )
            {
              {
                int _4021 = _4020;
                long long _4022 = (_ptr__3878[safe_add( _3890,_ptr__3973[safe_add( _3969,_4020 )] )] % _3983);
                ++ _4020;
                while ( ((_4020 < _3881) && ((_ptr__3878[safe_add( _3890,_ptr__3973[safe_add( _3969,_4020 )] )] % _3983) == _4022)) )
                {
                  {
                    ++ _4020;
                  }
                }
                int _4023 = _4021;
                int _4024 = _4018;
                int _4025 = (int)0;
                while ( ((_4024 < _4017) && (_4023 < _4020)) )
                {
                  {
                    int _4026 = _ptr__3973[safe_add( _3969,_4023 )];
                    if (((_ptr__3974[safe_add( _3971,_4024 )] % _3985) < (_ptr__3878[safe_add( _3890,_4026 )] / _3983)))
                    {
                      {
                        ++ _4024;
                      }
                    }
                    else if(((_ptr__3974[safe_add( _3971,_4024 )] % _3985) > (_ptr__3878[safe_add( _3890,_4026 )] / _3983)))
                    {
                      {
                        ++ _4023;
                      }
                    }
                    else
                    {
                      {
                        int _10463 = _ptr__3877[safe_add( _3885,_4026 )];
                        int _10464 = _ptr__3877[safe_add( safe_add( _3885,_4026 ),(int)1 )];
                        for (int _4027 = _10463; _4027 < _10464; ++_4027)
                        {
                          {
                            _ptr__4009[safe_add( _4002,_4013 )] = _ptr__3878[safe_add( _3891,_4027 )];
                            _ptr__4011[safe_add( _4007,_4015 )] = 2;
                            _ptr__4010[safe_add( _4008,_4015 )] = _ptr__3879[safe_add( _3892,_4027 )];
                            ++ _4015;
                            if ((_3884 > (int)0))
                            {
                              {
                                int _10465 = _ptr__3877[safe_add( _3888,_4027 )];
                                int _10466 = _ptr__3877[safe_add( safe_add( _3888,_4027 ),(int)1 )];
                                for (int _4028 = _10465; _4028 < _10466; ++_4028)
                                {
                                  {
                                    _ptr__4011[safe_add( _4007,_4015 )] = _ptr__3877[safe_add( _3886,_4028 )];
                                    _ptr__4010[safe_add( _4008,_4015 )] = _ptr__3879[safe_add( _3887,_4028 )];
                                    ++ _4015;
                                  }
                                }
                                _ptr__4011[safe_add( _4007,_4015 )] = 3;
                                ++ _4015;
                              }
                            }
                            {}
                            _ptr__4011[safe_add( _4007,_4015 )] = 1;
                            _ptr__4010[safe_add( _4008,_4015 )] = _ptr__3973[safe_add( _3899,_4024 )];
                            ++ _4015;
                            _ptr__4011[safe_add( _4007,_4015 )] = 5;
                            ++ _4015;
                            _ptr__4011[safe_add( safe_add( _4006,_4013 ),(int)1 )] = _4015;
                            ++ _4013;
                          }
                        }
                        ++ _4025;
                        ++ _4024;
                        ++ _4023;
                      }
                    }
                  }
                }
                if ((_4025 > (int)0))
                {
                  {
                    _ptr__4009[safe_add( _4003,_4014 )] = safe_add( safe_mul( _4019,_3983 ),_4022 );
                    _ptr__4011[safe_add( safe_add( _4001,_4014 ),(int)1 )] = _4013;
                    ++ _4014;
                  }
                }
                {}
              }
            }
          }
        }
        if ((_4015 != _3982))
        {
          {
            throw ::mosek::fusion::UnexpectedError(std::string ("Internal! Incorrect a-code length"));
          }
        }
        {}
        if ((_4013 != _3981))
        {
          {
            throw ::mosek::fusion::UnexpectedError(std::string ("Internal! Incorrect nnz length"));
          }
        }
        {}
        if ((_4014 != _3980))
        {
          {
            throw ::mosek::fusion::UnexpectedError(std::string ("Internal! Incorrect nelem length"));
          }
        }
        {}
        if ((_ptr__4011[safe_add( _4001,_4014 )] != _3981))
        {
          {
            throw ::mosek::fusion::UnexpectedError(std::string ("Internal! Incorrect ptr"));
          }
        }
        {}
      }
      if ((!_4000))
      {
        {
          _3874->popi64(_3980);
        }
      }
      {}
    }
  }
  _3876->clear();
}
std::string mosek::fusion::ExprMulParamLeft :: toString() { return mosek::fusion::p_ExprMulParamLeft::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprMulParamLeft::toString(){
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprMulParamLeft("))->__mosek_2fusion_2Utils_2StringBuffer__a(p->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(e->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
void mosek::fusion::p_ExprMulParamLeft::destroy(){e.reset();p.reset();}void mosek::fusion::ExprMulParamLeft::destroy() { mosek::fusion::p_ExprMulParamLeft::_get_impl(this)->destroy(); }mosek::fusion::ParameterImpl::ParameterImpl(mosek::fusion::p_ParameterImpl *_impl) : _impl(_impl) { /*std::cout << "ParameterImpl() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::ParameterImpl::~ParameterImpl() { delete _impl; _impl = nullptr; }mosek::fusion::p_ParameterImpl::p_ParameterImpl  (::mosek::fusion::ParameterImpl * _pubthis) :     _pubthis(_pubthis){}mosek::fusion::ParameterImpl::t mosek::fusion::p_ParameterImpl::_new_ParameterImpl  (monty::rc_ptr< ::mosek::fusion::ParameterImpl > _4029,    monty::rc_ptr< ::mosek::fusion::Model > _4030){ return new mosek::fusion::ParameterImpl(_4029,_4030); }mosek::fusion::ParameterImpl::ParameterImpl  (monty::rc_ptr< ::mosek::fusion::ParameterImpl > _4029,    monty::rc_ptr< ::mosek::fusion::Model > _4030) :    ParameterImpl(new mosek::fusion::p_ParameterImpl(this)){ mosek::fusion::p_ParameterImpl::_get_impl(this)->_initialize(_4029,_4030); }void mosek::fusion::p_ParameterImpl::_initialize  (monty::rc_ptr< ::mosek::fusion::ParameterImpl > _4029,    monty::rc_ptr< ::mosek::fusion::Model > _4030){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_ParameterImpl::_get_impl(::mosek::fusion::ParameterImpl::t(_pubthis))->model = _4030;
    mosek::fusion::p_ParameterImpl::_get_impl(::mosek::fusion::ParameterImpl::t(_pubthis))->shape = mosek::fusion::p_ParameterImpl::_get_impl(_4029)->shape;
    mosek::fusion::p_ParameterImpl::_get_impl(::mosek::fusion::ParameterImpl::t(_pubthis))->sp = mosek::fusion::p_ParameterImpl::_get_impl(_4029)->sp;
    mosek::fusion::p_ParameterImpl::_get_impl(::mosek::fusion::ParameterImpl::t(_pubthis))->size = mosek::fusion::p_ParameterImpl::_get_impl(_4029)->size;
    mosek::fusion::p_ParameterImpl::_get_impl(::mosek::fusion::ParameterImpl::t(_pubthis))->nidxs = mosek::fusion::p_ParameterImpl::_get_impl(_4029)->nidxs;
  }
}mosek::fusion::ParameterImpl::t mosek::fusion::p_ParameterImpl::_new_ParameterImpl  (monty::rc_ptr< ::mosek::fusion::Model > _4031,    std::shared_ptr< monty::ndarray< int,1 > > _4032,    std::shared_ptr< monty::ndarray< long long,1 > > _4033,    std::shared_ptr< monty::ndarray< int,1 > > _4034){ return new mosek::fusion::ParameterImpl(_4031,_4032,_4033,_4034); }mosek::fusion::ParameterImpl::ParameterImpl  (monty::rc_ptr< ::mosek::fusion::Model > _4031,    std::shared_ptr< monty::ndarray< int,1 > > _4032,    std::shared_ptr< monty::ndarray< long long,1 > > _4033,    std::shared_ptr< monty::ndarray< int,1 > > _4034) :    ParameterImpl(new mosek::fusion::p_ParameterImpl(this)){ mosek::fusion::p_ParameterImpl::_get_impl(this)->_initialize(_4031,_4032,_4033,_4034); }void mosek::fusion::p_ParameterImpl::_initialize  (monty::rc_ptr< ::mosek::fusion::Model > _4031,    std::shared_ptr< monty::ndarray< int,1 > > _4032,    std::shared_ptr< monty::ndarray< long long,1 > > _4033,    std::shared_ptr< monty::ndarray< int,1 > > _4034){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__4032(_4032 ? _4032->raw() : nullptr, _4032 ? _4032->size(0) : 0);
    _checked_ptr_1<long long> _ptr__4033(_4033 ? _4033->raw() : nullptr, _4033 ? _4033->size(0) : 0);
    _checked_ptr_1<int> _ptr__4034(_4034 ? _4034->raw() : nullptr, _4034 ? _4034->size(0) : 0);
    mosek::fusion::p_ParameterImpl::_get_impl(::mosek::fusion::ParameterImpl::t(_pubthis))->model = _4031;
    mosek::fusion::p_ParameterImpl::_get_impl(::mosek::fusion::ParameterImpl::t(_pubthis))->shape = ::mosek::fusion::Utils::Tools::arraycopy(_4032);
    mosek::fusion::p_ParameterImpl::_get_impl(::mosek::fusion::ParameterImpl::t(_pubthis))->sp = _4033;
    mosek::fusion::p_ParameterImpl::_get_impl(::mosek::fusion::ParameterImpl::t(_pubthis))->size = ::mosek::fusion::p_Set::size(_4032);
    mosek::fusion::p_ParameterImpl::_get_impl(::mosek::fusion::ParameterImpl::t(_pubthis))->nidxs = ::mosek::fusion::Utils::Tools::arraycopy(_4034);
  }
}monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::ParameterImpl :: __mosek_2fusion_2ParameterImpl__clone(monty::rc_ptr< ::mosek::fusion::Model > _4035) { return mosek::fusion::p_ParameterImpl::_get_impl(this)->__mosek_2fusion_2ParameterImpl__clone(_4035); }monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::ParameterImpl::clone(monty::rc_ptr< ::mosek::fusion::Model > _4035) { return __mosek_2fusion_2ParameterImpl__clone(_4035); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::ParameterImpl::__mosek_2fusion_2Parameter__clone(monty::rc_ptr< ::mosek::fusion::Model > _4035) { return __mosek_2fusion_2ParameterImpl__clone(_4035); }monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_ParameterImpl::__mosek_2fusion_2ParameterImpl__clone(monty::rc_ptr< ::mosek::fusion::Model > _4035){
  return (::mosek::fusion::p_ParameterImpl::_new_ParameterImpl(::mosek::fusion::ParameterImpl::t(_pubthis),_4035)).as<::mosek::fusion::Parameter>();
}
std::string mosek::fusion::ParameterImpl :: toString() { return mosek::fusion::p_ParameterImpl::_get_impl(this)->toString(); }std::string mosek::fusion::p_ParameterImpl::toString(){
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _4036 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Parameter(("));
  if (((int)((shape)->size(0)) > (int)0))
  {
    {
      _4036->__mosek_2fusion_2Utils_2StringBuffer__a(((*shape)((int)0)));
      int _10467 = (int)1;
      int _10468 = (int)((shape)->size(0));
      for (int _4037 = _10467; _4037 < _10468; ++_4037)
      {
        {
          _4036->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(((*shape)(_4037)));
        }
      }
    }
  }
  {}
  _4036->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"));
  if ((NULL != sp.get()))
  {
    {
      _4036->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (",sparse"));
    }
  }
  {}
  _4036->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"));
  return _4036->toString();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::ParameterImpl :: __mosek_2fusion_2ParameterImpl__pick(std::shared_ptr< monty::ndarray< int,2 > > _4038) { return mosek::fusion::p_ParameterImpl::_get_impl(this)->__mosek_2fusion_2ParameterImpl__pick(_4038); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::ParameterImpl::pick(std::shared_ptr< monty::ndarray< int,2 > > _4038) { return __mosek_2fusion_2ParameterImpl__pick(_4038); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::ParameterImpl::__mosek_2fusion_2Expression__pick(std::shared_ptr< monty::ndarray< int,2 > > _4038) { return __mosek_2fusion_2ParameterImpl__pick(_4038); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_ParameterImpl::__mosek_2fusion_2ParameterImpl__pick(std::shared_ptr< monty::ndarray< int,2 > > _4038){
  throw ::mosek::fusion::UnimplementedError(std::string ("Not implemented"));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::ParameterImpl :: __mosek_2fusion_2ParameterImpl__pick(std::shared_ptr< monty::ndarray< int,1 > > _4039) { return mosek::fusion::p_ParameterImpl::_get_impl(this)->__mosek_2fusion_2ParameterImpl__pick(_4039); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::ParameterImpl::pick(std::shared_ptr< monty::ndarray< int,1 > > _4039) { return __mosek_2fusion_2ParameterImpl__pick(_4039); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::ParameterImpl::__mosek_2fusion_2Expression__pick(std::shared_ptr< monty::ndarray< int,1 > > _4039) { return __mosek_2fusion_2ParameterImpl__pick(_4039); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_ParameterImpl::__mosek_2fusion_2ParameterImpl__pick(std::shared_ptr< monty::ndarray< int,1 > > _4039){
  _checked_ptr_1<int> _ptr__4039(_4039 ? _4039->raw() : nullptr, _4039 ? _4039->size(0) : 0);
  throw ::mosek::fusion::UnimplementedError(std::string ("Not implemented"));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::ParameterImpl :: __mosek_2fusion_2ParameterImpl__index(std::shared_ptr< monty::ndarray< int,1 > > _4040) { return mosek::fusion::p_ParameterImpl::_get_impl(this)->__mosek_2fusion_2ParameterImpl__index(_4040); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::ParameterImpl::index(std::shared_ptr< monty::ndarray< int,1 > > _4040) { return __mosek_2fusion_2ParameterImpl__index(_4040); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::ParameterImpl::__mosek_2fusion_2Expression__index(std::shared_ptr< monty::ndarray< int,1 > > _4040) { return __mosek_2fusion_2ParameterImpl__index(_4040); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_ParameterImpl::__mosek_2fusion_2ParameterImpl__index(std::shared_ptr< monty::ndarray< int,1 > > _4040){
  _checked_ptr_1<int> _ptr__4040(_4040 ? _4040->raw() : nullptr, _4040 ? _4040->size(0) : 0);
  if (((int)((shape)->size(0)) != (int)((_4040)->size(0))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Index has incorrect dimension"));
    }
  }
  else
  {
    {
      int _10469 = (int)0;
      int _10470 = (int)((_4040)->size(0));
      for (int _4041 = _10469; _4041 < _10470; ++_4041)
      {
        {
          if (((_ptr__4040[_4041] < (int)0) || (_ptr__4040[_4041] >= ((*shape)(_4041)))))
          {
            {
              throw ::mosek::fusion::IndexError(std::string ("Index out of bounds"));
            }
          }
          {}
        }
      }
    }
  }
  if ((NULL == sp.get()))
  {
    {
      int _4042 = (int)((_4040)->size(0));
      long long _4043 = _ptr__4040[(_4042 - (int)1)];
      int _10471 = (int)1;
      int _10472 = _4042;
      for (int _4044 = _10471; _4044 < _10472; ++_4044)
      {
        {
          _4043 = safe_add( safe_mul( _4043,((*shape)((_4042 - _4044))) ),_ptr__4040[((_4042 - _4044) - (int)1)] );
        }
      }
      return (::mosek::fusion::p_ParameterImpl::_new_ParameterImpl(model,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))),nullptr,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(((*nidxs)(_4043)))}))).as<::mosek::fusion::Expression>();
    }
  }
  else
  {
    {
      int _4045 = (int)((_4040)->size(0));
      long long _4046 = _ptr__4040[(_4045 - (int)1)];
      int _10473 = (int)1;
      int _10474 = _4045;
      for (int _4047 = _10473; _4047 < _10474; ++_4047)
      {
        {
          _4046 = safe_add( safe_mul( _4046,((*shape)((_4045 - _4047))) ),_ptr__4040[((_4045 - _4047) - (int)1)] );
        }
      }
      int _4048 = (int)0;
      while ( ((_4048 < (int)((sp)->size(0))) && (((*sp)(_4048)) < _4046)) )
      {
        {
          ++ _4048;
        }
      }
      if (((_4048 < (int)((sp)->size(0))) && (((*sp)(_4048)) == _4046)))
      {
        {
          return (::mosek::fusion::p_ParameterImpl::_new_ParameterImpl(model,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))),nullptr,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(((*nidxs)(_4048)))}))).as<::mosek::fusion::Expression>();
        }
      }
      else
      {
        {
          return (::mosek::fusion::p_ParameterImpl::_new_ParameterImpl(model,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))))).as<::mosek::fusion::Expression>();
        }
      }
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::ParameterImpl :: __mosek_2fusion_2ParameterImpl__index(int _4049) { return mosek::fusion::p_ParameterImpl::_get_impl(this)->__mosek_2fusion_2ParameterImpl__index(_4049); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::ParameterImpl::index(int _4049) { return __mosek_2fusion_2ParameterImpl__index(_4049); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::ParameterImpl::__mosek_2fusion_2Expression__index(int _4049) { return __mosek_2fusion_2ParameterImpl__index(_4049); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_ParameterImpl::__mosek_2fusion_2ParameterImpl__index(int _4049){
  if (((int)((shape)->size(0)) != (int)1))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Index has incorrect dimension"));
    }
  }
  else if(((_4049 < (int)0) || (_4049 >= ((*shape)((int)0)))))
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Index out of bounds"));
    }
  }
  {}
  if ((NULL == sp.get()))
  {
    {
      return (::mosek::fusion::p_ParameterImpl::_new_ParameterImpl(model,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))),nullptr,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(((*nidxs)(_4049)))}))).as<::mosek::fusion::Expression>();
    }
  }
  else
  {
    {
      int _4050 = (int)0;
      while ( ((_4050 < (int)((sp)->size(0))) && (((*sp)(_4050)) < _4049)) )
      {
        {
          ++ _4050;
        }
      }
      if (((_4050 < (int)((sp)->size(0))) && (((*sp)(_4050)) == _4049)))
      {
        {
          return (::mosek::fusion::p_ParameterImpl::_new_ParameterImpl(model,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))),nullptr,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(((*nidxs)(_4050)))}))).as<::mosek::fusion::Expression>();
        }
      }
      else
      {
        {
          return (::mosek::fusion::p_ParameterImpl::_new_ParameterImpl(model,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))))).as<::mosek::fusion::Expression>();
        }
      }
    }
  }
}
void mosek::fusion::ParameterImpl :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4051,monty::rc_ptr< ::mosek::fusion::WorkStack > _4052,monty::rc_ptr< ::mosek::fusion::WorkStack > _4053) { mosek::fusion::p_ParameterImpl::_get_impl(this)->eval(_4051,_4052,_4053); }void mosek::fusion::p_ParameterImpl::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4051,monty::rc_ptr< ::mosek::fusion::WorkStack > _4052,monty::rc_ptr< ::mosek::fusion::WorkStack > _4053){
  int _4054 = (int)((shape)->size(0));
  int _4055 = (int)((nidxs)->size(0));
  bool _4056 = (NULL != sp.get());
  _4051->alloc_expr(_4054,_4055,(int)((nidxs)->size(0)),_4056,(int)((nidxs)->size(0)));
  std::shared_ptr< monty::ndarray< int,1 > > _4057 = mosek::fusion::p_WorkStack::_get_impl(_4051)->i32;
  _checked_ptr_1<int> _ptr__4057(_4057 ? _4057->raw() : nullptr,_4057 ? _4057->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _4058 = mosek::fusion::p_WorkStack::_get_impl(_4051)->i64;
  _checked_ptr_1<long long> _ptr__4058(_4058 ? _4058->raw() : nullptr,_4058 ? _4058->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _4059 = mosek::fusion::p_WorkStack::_get_impl(_4051)->f64;
  _checked_ptr_1<double> _ptr__4059(_4059 ? _4059->raw() : nullptr,_4059 ? _4059->size(0) : 0);
  int _4060 = mosek::fusion::p_WorkStack::_get_impl(_4051)->ptr_base;
  int _4061 = mosek::fusion::p_WorkStack::_get_impl(_4051)->nidxs_base;
  int _4062 = mosek::fusion::p_WorkStack::_get_impl(_4051)->cof_base;
  int _4063 = mosek::fusion::p_WorkStack::_get_impl(_4051)->shape_base;
  int _4064 = mosek::fusion::p_WorkStack::_get_impl(_4051)->codeptr_base;
  int _4065 = mosek::fusion::p_WorkStack::_get_impl(_4051)->code_base;
  int _4066 = mosek::fusion::p_WorkStack::_get_impl(_4051)->cconst_base;
  int _4067 = mosek::fusion::p_WorkStack::_get_impl(_4051)->sp_base;
  {
    _ptr__4057[_4060] = (int)0;
    int _10475 = (int)0;
    int _10476 = _4054;
    for (int _4068 = _10475; _4068 < _10476; ++_4068)
    {
      {
        _ptr__4057[safe_add( _4063,_4068 )] = ((*shape)(_4068));
      }
    }
    int _10477 = (int)0;
    int _10478 = _4055;
    for (int _4069 = _10477; _4069 < _10478; ++_4069)
    {
      {
        _ptr__4058[safe_add( _4061,_4069 )] = (int)0;
      }
    }
    int _10479 = (int)0;
    int _10480 = _4055;
    for (int _4070 = _10479; _4070 < _10480; ++_4070)
    {
      {
        _ptr__4059[safe_add( _4062,_4070 )] = 0.0;
      }
    }
    int _10481 = (int)0;
    int _10482 = safe_add( _4055,(int)1 );
    for (int _4071 = _10481; _4071 < _10482; ++_4071)
    {
      {
        _ptr__4057[safe_add( _4060,_4071 )] = _4071;
      }
    }
    int _10483 = (int)0;
    int _10484 = safe_add( _4055,(int)1 );
    for (int _4072 = _10483; _4072 < _10484; ++_4072)
    {
      {
        _ptr__4057[safe_add( _4064,_4072 )] = _4072;
      }
    }
    if (_4056)
    {
      {
        int _10485 = (int)0;
        int _10486 = _4055;
        for (int _4073 = _10485; _4073 < _10486; ++_4073)
        {
          {
            _ptr__4058[safe_add( _4067,_4073 )] = ((*sp)(_4073));
          }
        }
      }
    }
    {}
    int _10487 = (int)0;
    int _10488 = _4055;
    for (int _4074 = _10487; _4074 < _10488; ++_4074)
    {
      {
        _ptr__4057[safe_add( _4065,_4074 )] = (int)1;
        _ptr__4059[safe_add( _4066,_4074 )] = ((*nidxs)(_4074));
      }
    }
  }
}
void mosek::fusion::ParameterImpl :: getSp(std::shared_ptr< monty::ndarray< long long,1 > > _4075,int _4076) { mosek::fusion::p_ParameterImpl::_get_impl(this)->getSp(_4075,_4076); }void mosek::fusion::p_ParameterImpl::getSp(std::shared_ptr< monty::ndarray< long long,1 > > _4075,int _4076){
  _checked_ptr_1<long long> _ptr__4075(_4075 ? _4075->raw() : nullptr, _4075 ? _4075->size(0) : 0);
  if ((NULL != sp.get()))
  {
    {
      int _10489 = (int)0;
      int _10490 = (int)((sp)->size(0));
      for (int _4077 = _10489; _4077 < _10490; ++_4077)
      {
        {
          _ptr__4075[safe_add( _4077,_4076 )] = ((*sp)(_4077));
        }
      }
    }
  }
  else
  {
    {
      int _10491 = (int)0;
      int _10492 = (int)((nidxs)->size(0));
      for (int _4078 = _10491; _4078 < _10492; ++_4078)
      {
        {
          _ptr__4075[safe_add( _4078,_4076 )] = _4078;
        }
      }
    }
  }
}
bool mosek::fusion::ParameterImpl :: isSparse() { return mosek::fusion::p_ParameterImpl::_get_impl(this)->isSparse(); }bool mosek::fusion::p_ParameterImpl::isSparse(){
  return (NULL != sp.get());
}
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::ParameterImpl :: __mosek_2fusion_2ParameterImpl__slice(std::shared_ptr< monty::ndarray< int,1 > > _4079,std::shared_ptr< monty::ndarray< int,1 > > _4080) { return mosek::fusion::p_ParameterImpl::_get_impl(this)->__mosek_2fusion_2ParameterImpl__slice(_4079,_4080); }monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::ParameterImpl::slice(std::shared_ptr< monty::ndarray< int,1 > > _4079,std::shared_ptr< monty::ndarray< int,1 > > _4080) { return __mosek_2fusion_2ParameterImpl__slice(_4079,_4080); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::ParameterImpl::__mosek_2fusion_2Parameter__slice(std::shared_ptr< monty::ndarray< int,1 > > _4079,std::shared_ptr< monty::ndarray< int,1 > > _4080) { return __mosek_2fusion_2ParameterImpl__slice(_4079,_4080); }monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_ParameterImpl::__mosek_2fusion_2ParameterImpl__slice(std::shared_ptr< monty::ndarray< int,1 > > _4079,std::shared_ptr< monty::ndarray< int,1 > > _4080){
  _checked_ptr_1<int> _ptr__4079(_4079 ? _4079->raw() : nullptr, _4079 ? _4079->size(0) : 0);
  _checked_ptr_1<int> _ptr__4080(_4080 ? _4080->raw() : nullptr, _4080 ? _4080->size(0) : 0);
  if ((((int)((_4079)->size(0)) != (int)((_4080)->size(0))) || ((int)((_4079)->size(0)) != (int)((shape)->size(0)))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid index dimension"));
    }
  }
  {}
  int _4081 = (int)((_4079)->size(0));
  int _10493 = (int)0;
  int _10494 = _4081;
  for (int _4082 = _10493; _4082 < _10494; ++_4082)
  {
    {
      if (((_ptr__4079[_4082] < (int)0) || ((_ptr__4079[_4082] >= _ptr__4080[_4082]) || (_ptr__4080[_4082] > ((*shape)(_4082))))))
      {
        {
          throw ::mosek::fusion::IndexError(std::string ("Invalid index"));
        }
      }
      {}
    }
  }
  std::shared_ptr< monty::ndarray< long long,1 > > _4083 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_4081)));
  _checked_ptr_1<long long> _ptr__4083(_4083 ? _4083->raw() : nullptr,_4083 ? _4083->size(0) : 0);
  _ptr__4083[(_4081 - (int)1)] = (int)1;
  int _10495 = (int)1;
  int _10496 = _4081;
  for (int _4084 = _10495; _4084 < _10496; ++_4084)
  {
    {
      _ptr__4083[((_4081 - _4084) - (int)1)] = safe_mul( _ptr__4083[(_4081 - _4084)],((*shape)(_4084)) );
    }
  }
  std::shared_ptr< monty::ndarray< int,1 > > _4085 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4081)));
  _checked_ptr_1<int> _ptr__4085(_4085 ? _4085->raw() : nullptr,_4085 ? _4085->size(0) : 0);
  std::vector<int> _10497;
  for (int _4087 = (int)0, _10498 = _4081; _4087 < _10498 ; ++_4087)
  {
    _10497.push_back((_ptr__4080[_4087] - _ptr__4079[_4087]));
  }
  auto _10499 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_10497.size()),_10497.begin(),_10497.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _4086 = _10499;
  _checked_ptr_1<int> _ptr__4086(_4086 ? _4086->raw() : nullptr,_4086 ? _4086->size(0) : 0);
  if ((NULL == sp.get()))
  {
    {
      int _4088 = (int)1;
      int _10500 = (int)0;
      int _10501 = _4081;
      for (int _4089 = _10500; _4089 < _10501; ++_4089)
      {
        {
          _4088 *= _ptr__4086[_4089];
        }
      }
      std::shared_ptr< monty::ndarray< int,1 > > _4090 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4088)));
      _checked_ptr_1<int> _ptr__4090(_4090 ? _4090->raw() : nullptr,_4090 ? _4090->size(0) : 0);
      int _4091 = (int)0;
      int _10502 = (int)0;
      int _10503 = (int)((nidxs)->size(0));
      for (int _4092 = _10502; _4092 < _10503; ++_4092)
      {
        {
          int _10504 = (int)0;
          int _10505 = _4081;
          for (int _4093 = _10504; _4093 < _10505; ++_4093)
          {
            {
              _ptr__4085[_4093] = (int)((_4092 / _ptr__4083[_4093]) % ((*shape)(_4093)));
            }
          }
          bool _4094 = true;
          int _10506 = (int)0;
          int _10507 = _4081;
          for (int _4095 = _10506; _4095 < _10507; ++_4095)
          {
            {
              _4094 = (_4094 && ((_ptr__4079[_4095] <= _ptr__4085[_4095]) && (_ptr__4085[_4095] < _ptr__4080[_4095])));
            }
          }
          if (_4094)
          {
            {
              _ptr__4090[_4091] = ((*nidxs)(_4092));
              ++ _4091;
            }
          }
          {}
        }
      }
      return (::mosek::fusion::p_ParameterImpl::_new_ParameterImpl(model,_4086,nullptr,_4090)).as<::mosek::fusion::Parameter>();
    }
  }
  else
  {
    {
      int _4096 = (int)0;
      int _10508 = (int)0;
      int _10509 = (int)((nidxs)->size(0));
      for (int _4097 = _10508; _4097 < _10509; ++_4097)
      {
        {
          int _10510 = (int)0;
          int _10511 = _4081;
          for (int _4098 = _10510; _4098 < _10511; ++_4098)
          {
            {
              _ptr__4085[_4098] = (int)((((*sp)(_4097)) / _ptr__4083[_4098]) % ((*shape)(_4098)));
            }
          }
          bool _4099 = true;
          int _10512 = (int)0;
          int _10513 = _4081;
          for (int _4100 = _10512; _4100 < _10513; ++_4100)
          {
            {
              _4099 = (_4099 && ((_ptr__4079[_4100] <= _ptr__4085[_4100]) && (_ptr__4085[_4100] < _ptr__4080[_4100])));
            }
          }
          if (_4099)
          {
            {
              ++ _4096;
            }
          }
          {}
        }
      }
      std::shared_ptr< monty::ndarray< int,1 > > _4101 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4096)));
      _checked_ptr_1<int> _ptr__4101(_4101 ? _4101->raw() : nullptr,_4101 ? _4101->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _4102 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_4096)));
      _checked_ptr_1<long long> _ptr__4102(_4102 ? _4102->raw() : nullptr,_4102 ? _4102->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _4103 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_4081)));
      _checked_ptr_1<long long> _ptr__4103(_4103 ? _4103->raw() : nullptr,_4103 ? _4103->size(0) : 0);
      _ptr__4103[(_4081 - (int)1)] = (int)1;
      int _10514 = (int)1;
      int _10515 = _4081;
      for (int _4104 = _10514; _4104 < _10515; ++_4104)
      {
        {
          _ptr__4103[((_4081 - _4104) - (int)1)] = safe_mul( _ptr__4103[(_4081 - _4104)],_ptr__4086[_4104] );
        }
      }
      int _4105 = (int)0;
      int _10516 = (int)0;
      int _10517 = (int)((nidxs)->size(0));
      for (int _4106 = _10516; _4106 < _10517; ++_4106)
      {
        {
          int _10518 = (int)0;
          int _10519 = _4081;
          for (int _4107 = _10518; _4107 < _10519; ++_4107)
          {
            {
              _ptr__4085[_4106] = (int)((((*sp)(_4106)) / _ptr__4083[_4107]) % ((*shape)(_4107)));
            }
          }
          bool _4108 = true;
          int _10520 = (int)0;
          int _10521 = _4081;
          for (int _4109 = _10520; _4109 < _10521; ++_4109)
          {
            {
              _4108 = (_4108 && ((_ptr__4079[_4109] <= _ptr__4085[_4109]) && (_ptr__4085[_4109] < _ptr__4080[_4109])));
            }
          }
          if (_4108)
          {
            {
              long long _4110 = (long long)0;
              int _10522 = (int)0;
              int _10523 = _4081;
              for (int _4111 = _10522; _4111 < _10523; ++_4111)
              {
                {
                  _4110 += safe_mul( (_ptr__4085[_4111] - _ptr__4079[_4111]),_ptr__4103[_4111] );
                }
              }
              _ptr__4102[_4105] = _4110;
              _ptr__4101[_4105] = ((*nidxs)(_4106));
              ++ _4105;
            }
          }
          {}
        }
      }
      return (::mosek::fusion::p_ParameterImpl::_new_ParameterImpl(model,_4086,_4102,_4101)).as<::mosek::fusion::Parameter>();
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::ParameterImpl :: __mosek_2fusion_2ParameterImpl__slice(int _4112,int _4113) { return mosek::fusion::p_ParameterImpl::_get_impl(this)->__mosek_2fusion_2ParameterImpl__slice(_4112,_4113); }monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::ParameterImpl::slice(int _4112,int _4113) { return __mosek_2fusion_2ParameterImpl__slice(_4112,_4113); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::ParameterImpl::__mosek_2fusion_2Parameter__slice(int _4112,int _4113) { return __mosek_2fusion_2ParameterImpl__slice(_4112,_4113); }monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_ParameterImpl::__mosek_2fusion_2ParameterImpl__slice(int _4112,int _4113){
  if (((int)((shape)->size(0)) != (int)1))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid index dimension"));
    }
  }
  {}
  if (((_4112 < (int)0) || ((_4113 >= _4113) || (_4113 > size))))
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Invalid index"));
    }
  }
  {}
  if ((NULL == sp.get()))
  {
    {
      std::vector<int> _10524;
      for (int _4114 = _4112, _10525 = _4113; _4114 < _10525 ; ++_4114)
      {
        _10524.push_back(((*nidxs)(_4114)));
      }
      auto _10526 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_10524.size()),_10524.begin(),_10524.end()));
      return (::mosek::fusion::p_ParameterImpl::_new_ParameterImpl(model,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)0),(int)((_4113 - _4112))}),nullptr,_10526)).as<::mosek::fusion::Parameter>();
    }
  }
  else
  {
    {
      int _4115 = (int)0;
      int _10527 = (int)0;
      int _10528 = (int)((sp)->size(0));
      for (int _4116 = _10527; _4116 < _10528; ++_4116)
      {
        {
          if (((_4112 <= ((*sp)(_4116))) && (((*sp)(_4116)) < _4113)))
          {
            {
              ++ _4115;
            }
          }
          {}
        }
      }
      std::shared_ptr< monty::ndarray< int,1 > > _4117 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4115)));
      _checked_ptr_1<int> _ptr__4117(_4117 ? _4117->raw() : nullptr,_4117 ? _4117->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _4118 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_4115)));
      _checked_ptr_1<long long> _ptr__4118(_4118 ? _4118->raw() : nullptr,_4118 ? _4118->size(0) : 0);
      int _4119 = (int)0;
      int _10529 = (int)0;
      int _10530 = (int)((sp)->size(0));
      for (int _4120 = _10529; _4120 < _10530; ++_4120)
      {
        {
          if (((_4112 <= ((*sp)(_4120))) && (((*sp)(_4120)) < _4113)))
          {
            {
              _ptr__4117[_4119] = ((*nidxs)(_4120));
              _ptr__4118[_4119] = (((*sp)(_4119)) - _4112);
              ++ _4119;
            }
          }
          {}
        }
      }
      return (::mosek::fusion::p_ParameterImpl::_new_ParameterImpl(model,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)0),(int)((_4113 - _4112))}),_4118,_4117)).as<::mosek::fusion::Parameter>();
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::ParameterImpl :: __mosek_2fusion_2ParameterImpl__reshape(std::shared_ptr< monty::ndarray< int,1 > > _4121) { return mosek::fusion::p_ParameterImpl::_get_impl(this)->__mosek_2fusion_2ParameterImpl__reshape(_4121); }monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::ParameterImpl::reshape(std::shared_ptr< monty::ndarray< int,1 > > _4121) { return __mosek_2fusion_2ParameterImpl__reshape(_4121); }
monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::ParameterImpl::__mosek_2fusion_2Parameter__reshape(std::shared_ptr< monty::ndarray< int,1 > > _4121) { return __mosek_2fusion_2ParameterImpl__reshape(_4121); }monty::rc_ptr< ::mosek::fusion::Parameter > mosek::fusion::p_ParameterImpl::__mosek_2fusion_2ParameterImpl__reshape(std::shared_ptr< monty::ndarray< int,1 > > _4121){
  _checked_ptr_1<int> _ptr__4121(_4121 ? _4121->raw() : nullptr, _4121 ? _4121->size(0) : 0);
  if ((::mosek::fusion::p_Set::size(_4121) != ::mosek::fusion::p_Set::size(shape)))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Incompatible shape for resize"));
    }
  }
  {}
  return (::mosek::fusion::p_ParameterImpl::_new_ParameterImpl(model,_4121,sp,nidxs)).as<::mosek::fusion::Parameter>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::ParameterImpl :: __mosek_2fusion_2ParameterImpl__asExpr() { return mosek::fusion::p_ParameterImpl::_get_impl(this)->__mosek_2fusion_2ParameterImpl__asExpr(); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::ParameterImpl::asExpr() { return __mosek_2fusion_2ParameterImpl__asExpr(); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::ParameterImpl::__mosek_2fusion_2Parameter__asExpr() { return __mosek_2fusion_2ParameterImpl__asExpr(); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_ParameterImpl::__mosek_2fusion_2ParameterImpl__asExpr(){
  return (::mosek::fusion::p_ExprParameter::_new_ExprParameter((::mosek::fusion::ParameterImpl::t(_pubthis)).as<::mosek::fusion::Parameter>())).as<::mosek::fusion::Expression>();
}
long long mosek::fusion::ParameterImpl :: getSize() { return mosek::fusion::p_ParameterImpl::_get_impl(this)->getSize(); }long long mosek::fusion::p_ParameterImpl::getSize(){
  return ::mosek::fusion::p_Set::size(shape);
}
int mosek::fusion::ParameterImpl :: getNumNonzero() { return mosek::fusion::p_ParameterImpl::_get_impl(this)->getNumNonzero(); }int mosek::fusion::p_ParameterImpl::getNumNonzero(){
  return (int)((nidxs)->size(0));
}
int mosek::fusion::ParameterImpl :: getND() { return mosek::fusion::p_ParameterImpl::_get_impl(this)->getND(); }int mosek::fusion::p_ParameterImpl::getND(){
  return (int)((shape)->size(0));
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::ParameterImpl :: getShape() { return mosek::fusion::p_ParameterImpl::_get_impl(this)->getShape(); }std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_ParameterImpl::getShape(){
  return ::mosek::fusion::Utils::Tools::arraycopy(shape);
}
int mosek::fusion::ParameterImpl :: getDim(int _4122) { return mosek::fusion::p_ParameterImpl::_get_impl(this)->getDim(_4122); }int mosek::fusion::p_ParameterImpl::getDim(int _4122){
  return ((*shape)(_4122));
}
void mosek::fusion::ParameterImpl :: getAllIndexes(std::shared_ptr< monty::ndarray< int,1 > > _4123,int _4124) { mosek::fusion::p_ParameterImpl::_get_impl(this)->getAllIndexes(_4123,_4124); }void mosek::fusion::p_ParameterImpl::getAllIndexes(std::shared_ptr< monty::ndarray< int,1 > > _4123,int _4124){
  _checked_ptr_1<int> _ptr__4123(_4123 ? _4123->raw() : nullptr, _4123 ? _4123->size(0) : 0);
  int _10531 = (int)0;
  int _10532 = (int)((nidxs)->size(0));
  for (int _4125 = _10531; _4125 < _10532; ++_4125)
  {
    {
      _ptr__4123[safe_add( _4124,_4125 )] = ((*nidxs)(_4125));
    }
  }
}
int mosek::fusion::ParameterImpl :: getIndex(int _4126) { return mosek::fusion::p_ParameterImpl::_get_impl(this)->getIndex(_4126); }int mosek::fusion::p_ParameterImpl::getIndex(int _4126){
  return ((*nidxs)(_4126));
}
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::ParameterImpl :: getValue() { return mosek::fusion::p_ParameterImpl::_get_impl(this)->getValue(); }std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_ParameterImpl::getValue(){
  return mosek::fusion::p_Model::_get_impl(model.get())->getParameterValue(nidxs);
}
void mosek::fusion::ParameterImpl :: setValue(std::shared_ptr< monty::ndarray< double,2 > > _4127) { mosek::fusion::p_ParameterImpl::_get_impl(this)->setValue(_4127); }void mosek::fusion::p_ParameterImpl::setValue(std::shared_ptr< monty::ndarray< double,2 > > _4127){
  if (((_pubthis->getND() != (int)2) || (((int)((_4127)->size(0)) != ((*shape)((int)0))) || ((int)((_4127)->size(1)) != ((*shape)((int)1))))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Mismatching value shape"));
    }
  }
  {}
  if ((NULL == sp.get()))
  {
    {
      std::vector<double> _10533;
      for (int _4129 = (int)0, _10534 = ((*shape)((int)0)); _4129 < _10534 ; ++_4129)
      {
        for (int _4130 = (int)0, _10535 = ((*shape)((int)1)); _4130 < _10535 ; ++_4130)
        {
          _10533.push_back(((*_4127)(_4129,_4130)));
        }
      }
      auto _10536 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_10533.size()),_10533.begin(),_10533.end()));
      std::shared_ptr< monty::ndarray< double,1 > > _4128 = _10536;
      _checked_ptr_1<double> _ptr__4128(_4128 ? _4128->raw() : nullptr,_4128 ? _4128->size(0) : 0);
      mosek::fusion::p_Model::_get_impl(model.get())->setParameterValue(nidxs,_4128);
    }
  }
  else
  {
    {
      std::vector<double> _10537;
      for (int _4132 = (int)0, _10538 = (int)((sp)->size(0)); _4132 < _10538 ; ++_4132)
      {
        _10537.push_back(((*_4127)((((*sp)(_4132)) / ((*shape)((int)1))),(((*sp)(_4132)) % ((*shape)((int)1))))));
      }
      auto _10539 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_10537.size()),_10537.begin(),_10537.end()));
      std::shared_ptr< monty::ndarray< double,1 > > _4131 = _10539;
      _checked_ptr_1<double> _ptr__4131(_4131 ? _4131->raw() : nullptr,_4131 ? _4131->size(0) : 0);
      mosek::fusion::p_Model::_get_impl(model.get())->setParameterValue(nidxs,_4131);
    }
  }
}
void mosek::fusion::ParameterImpl :: setValue(std::shared_ptr< monty::ndarray< double,1 > > _4133) { mosek::fusion::p_ParameterImpl::_get_impl(this)->setValue(_4133); }void mosek::fusion::p_ParameterImpl::setValue(std::shared_ptr< monty::ndarray< double,1 > > _4133){
  _checked_ptr_1<double> _ptr__4133(_4133 ? _4133->raw() : nullptr, _4133 ? _4133->size(0) : 0);
  if ((NULL == sp.get()))
  {
    {
      if (((int)((_4133)->size(0)) != (int)((nidxs)->size(0))))
      {
        {
          throw ::mosek::fusion::LengthError(std::string ("Length of value array is incorrect"));
        }
      }
      else
      {
        {
          mosek::fusion::p_Model::_get_impl(model.get())->setParameterValue(nidxs,_4133);
        }
      }
    }
  }
  else
  {
    {
      if (((int)((_4133)->size(0)) != _pubthis->getSize()))
      {
        {
          throw ::mosek::fusion::LengthError(std::string ("Length of value array is incorrect"));
        }
      }
      else
      {
        {
          std::vector<double> _10540;
          for (int _4135 = (int)0, _10541 = (int)((nidxs)->size(0)); _4135 < _10541 ; ++_4135)
          {
            _10540.push_back(_ptr__4133[((*sp)(_4135))]);
          }
          auto _10542 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_10540.size()),_10540.begin(),_10540.end()));
          std::shared_ptr< monty::ndarray< double,1 > > _4134 = _10542;
          _checked_ptr_1<double> _ptr__4134(_4134 ? _4134->raw() : nullptr,_4134 ? _4134->size(0) : 0);
          mosek::fusion::p_Model::_get_impl(model.get())->setParameterValue(nidxs,_4134);
        }
      }
    }
  }
}
void mosek::fusion::ParameterImpl :: setValue(double _4136) { mosek::fusion::p_ParameterImpl::_get_impl(this)->setValue(_4136); }void mosek::fusion::p_ParameterImpl::setValue(double _4136){
  std::vector<double> _10543;
  for (long long _4137 = (int)0, _10544 = size; _4137 < _10544 ; ++_4137)
  {
    _10543.push_back(_4136);
  }
  auto _10545 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_10543.size()),_10543.begin(),_10543.end()));
  mosek::fusion::p_Model::_get_impl(model.get())->setParameterValue(nidxs,_10545);
}
monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::ParameterImpl :: __mosek_2fusion_2ParameterImpl__getModel() { return mosek::fusion::p_ParameterImpl::_get_impl(this)->__mosek_2fusion_2ParameterImpl__getModel(); }monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::ParameterImpl::getModel() { return __mosek_2fusion_2ParameterImpl__getModel(); }
monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::ParameterImpl::__mosek_2fusion_2Parameter__getModel() { return __mosek_2fusion_2ParameterImpl__getModel(); }monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::p_ParameterImpl::__mosek_2fusion_2ParameterImpl__getModel(){
  return model;
}
void mosek::fusion::p_ParameterImpl::destroy(){nidxs.reset();sp.reset();shape.reset();model.reset();}void mosek::fusion::ParameterImpl::destroy() { mosek::fusion::p_ParameterImpl::_get_impl(this)->destroy(); }monty::rc_ptr< mosek::fusion::Parameter > mosek::fusion::Parameter::clone(monty::rc_ptr< ::mosek::fusion::Model > _4138) { return __mosek_2fusion_2Parameter__clone(_4138); }
monty::rc_ptr< mosek::fusion::Model > mosek::fusion::Parameter::getModel() { return __mosek_2fusion_2Parameter__getModel(); }
monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Parameter::__mosek_2fusion_2Expression__slice(std::shared_ptr< monty::ndarray< int,1 > > _4145,std::shared_ptr< monty::ndarray< int,1 > > _4146) { return __mosek_2fusion_2Parameter__slice(_4145,_4146); }
monty::rc_ptr< mosek::fusion::Parameter > mosek::fusion::Parameter::slice(std::shared_ptr< monty::ndarray< int,1 > > _4145,std::shared_ptr< monty::ndarray< int,1 > > _4146) { return __mosek_2fusion_2Parameter__slice(_4145,_4146); }
monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Parameter::__mosek_2fusion_2Expression__slice(int _4147,int _4148) { return __mosek_2fusion_2Parameter__slice(_4147,_4148); }
monty::rc_ptr< mosek::fusion::Parameter > mosek::fusion::Parameter::slice(int _4147,int _4148) { return __mosek_2fusion_2Parameter__slice(_4147,_4148); }
monty::rc_ptr< mosek::fusion::Parameter > mosek::fusion::Parameter::reshape(std::shared_ptr< monty::ndarray< int,1 > > _4149) { return __mosek_2fusion_2Parameter__reshape(_4149); }
monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Parameter::asExpr() { return __mosek_2fusion_2Parameter__asExpr(); }
mosek::fusion::ExprOptimizeCode::ExprOptimizeCode(mosek::fusion::p_ExprOptimizeCode *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprOptimizeCode()" << this << std::endl; */ }mosek::fusion::ExprOptimizeCode::~ExprOptimizeCode() {  /* std::cout << "~ExprOptimizeCode()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprOptimizeCode::p_ExprOptimizeCode  (::mosek::fusion::ExprOptimizeCode * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprOptimizeCode::t mosek::fusion::p_ExprOptimizeCode::_new_ExprOptimizeCode  (monty::rc_ptr< ::mosek::fusion::Expression > _4153){ return new mosek::fusion::ExprOptimizeCode(_4153); }mosek::fusion::ExprOptimizeCode::ExprOptimizeCode  (monty::rc_ptr< ::mosek::fusion::Expression > _4153) :    ExprOptimizeCode(new mosek::fusion::p_ExprOptimizeCode(this)){ mosek::fusion::p_ExprOptimizeCode::_get_impl(this)->_initialize(_4153); }void mosek::fusion::p_ExprOptimizeCode::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _4153){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(_4153->getShape());
    mosek::fusion::p_ExprOptimizeCode::_get_impl(::mosek::fusion::ExprOptimizeCode::t(_pubthis))->expr = _4153;
  }
}void mosek::fusion::p_ExprOptimizeCode::compress_code(monty::rc_ptr< ::mosek::fusion::WorkStack > _4154,int _4155,std::shared_ptr< monty::ndarray< int,1 > > _4156,int _4157,std::shared_ptr< monty::ndarray< int,1 > > _4158,int _4159,std::shared_ptr< monty::ndarray< double,1 > > _4160,int _4161,std::shared_ptr< monty::ndarray< double,1 > > _4162,int _4163,int _4164,int _4165,int _4166){
  _checked_ptr_1<int> _ptr__4156(_4156 ? _4156->raw() : nullptr, _4156 ? _4156->size(0) : 0);
  _checked_ptr_1<int> _ptr__4158(_4158 ? _4158->raw() : nullptr, _4158 ? _4158->size(0) : 0);
  _checked_ptr_1<double> _ptr__4160(_4160 ? _4160->raw() : nullptr, _4160 ? _4160->size(0) : 0);
  _checked_ptr_1<double> _ptr__4162(_4162 ? _4162->raw() : nullptr, _4162 ? _4162->size(0) : 0);
  int _4167 = _ptr__4158[safe_add( _4159,_4155 )];
  int _4168 = _4154->alloci32(safe_add( _4167,(int)2 ));
  int _4169 = (int)0;
  int _4170 = _4154->alloci32(safe_add( _4167,(int)2 ));
  int _4171 = _4154->alloci32(safe_add( _4167,(int)3 ));
  int _4172 = _4154->allocf64(safe_add( _4167,(int)2 ));
  int _4173 = _4154->alloci32(safe_add( _4167,(int)2 ));
  int _4174 = (int)0;
  int _4175 = (-(int)1);
  std::shared_ptr< monty::ndarray< int,1 > > _4176 = mosek::fusion::p_WorkStack::_get_impl(_4154)->i32;
  _checked_ptr_1<int> _ptr__4176(_4176 ? _4176->raw() : nullptr,_4176 ? _4176->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _4177 = mosek::fusion::p_WorkStack::_get_impl(_4154)->f64;
  _checked_ptr_1<double> _ptr__4177(_4177 ? _4177->raw() : nullptr,_4177 ? _4177->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _4178 = _4176;
  _checked_ptr_1<int> _ptr__4178(_4178 ? _4178->raw() : nullptr,_4178 ? _4178->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _4179 = _4177;
  _checked_ptr_1<double> _ptr__4179(_4179 ? _4179->raw() : nullptr,_4179 ? _4179->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _4180 = _4176;
  _checked_ptr_1<int> _ptr__4180(_4180 ? _4180->raw() : nullptr,_4180 ? _4180->size(0) : 0);
  int _4181 = mosek::fusion::p_WorkStack::_get_impl(_4154)->pi32;
  int _4182 = mosek::fusion::p_WorkStack::_get_impl(_4154)->pi64;
  int _4183 = mosek::fusion::p_WorkStack::_get_impl(_4154)->pf64;
  _ptr__4180[_4166] = (int)0;
  int _4184 = (int)0;
  int _10546 = (int)0;
  int _10547 = _4155;
  for (int _4185 = _10546; _4185 < _10547; ++_4185)
  {
    {
      int _4186 = _ptr__4158[safe_add( safe_add( _4159,_4185 ),(int)1 )];
      int _4187 = _ptr__4158[safe_add( _4159,_4185 )];
      if ((_4175 < (int)0))
      {
        {
          _4169 = (int)0;
          _4174 = (int)0;
          _ptr__4176[_4171] = (int)0;
          int _10548 = (int)0;
          int _10549 = (_4186 - _4187);
          for (int _4188 = _10548; _4188 < _10549; ++_4188)
          {
            {
              _ptr__4178[safe_add( _4173,_4188 )] = (-(int)9999);
            }
          }
          int _10550 = _4187;
          int _10551 = _4186;
          for (int _4189 = _10550; _4189 < _10551; ++_4189)
          {
            {
              int _4190 = _ptr__4156[safe_add( _4157,_4189 )];
              double _4191 = _ptr__4162[safe_add( _4163,_4189 )];
              if ((_4190 == 0))
              {
                {
                }
              }
              else if((_4190 == 2))
              {
                {
                  _ptr__4178[safe_add( _4173,_4174 )] = 2;
                  _ptr__4177[safe_add( _4172,_4174 )] = _4191;
                  _ptr__4176[safe_add( safe_add( _4171,_4174 ),(int)1 )] = _ptr__4176[safe_add( _4171,_4174 )];
                  _ptr__4176[safe_add( _4168,_4169 )] = _4174;
                  ++ _4169;
                  ++ _4174;
                }
              }
              else if((_4190 == 1))
              {
                {
                  _ptr__4176[safe_add( _4173,_4174 )] = _4190;
                  _ptr__4177[safe_add( _4172,_4174 )] = _4191;
                  _ptr__4176[safe_add( safe_add( _4171,_4174 ),(int)1 )] = _ptr__4176[safe_add( _4171,_4174 )];
                  _ptr__4176[safe_add( _4168,_4169 )] = _4174;
                  ++ _4169;
                  ++ _4174;
                }
              }
              else if((_4190 == 3))
              {
                {
                  if ((_4169 >= (int)2))
                  {
                    {
                      int _4192 = _ptr__4176[(safe_add( _4168,_4169 ) - (int)1)];
                      -- _4169;
                      int _4193 = _ptr__4176[(safe_add( _4168,_4169 ) - (int)1)];
                      -- _4169;
                      if (((_ptr__4176[safe_add( _4173,_4193 )] == 2) && (_ptr__4176[safe_add( _4173,_4192 )] == 2)))
                      {
                        {
                          _ptr__4176[safe_add( _4173,_4174 )] = 2;
                          _ptr__4177[safe_add( _4172,_4174 )] = (_ptr__4177[safe_add( _4172,_4193 )] + _ptr__4177[safe_add( _4172,_4192 )]);
                          _ptr__4176[safe_add( safe_add( _4171,_4174 ),(int)1 )] = _ptr__4176[safe_add( _4171,_4174 )];
                          _ptr__4176[safe_add( _4168,_4169 )] = _4174;
                          ++ _4169;
                          ++ _4174;
                        }
                      }
                      else if(((_ptr__4176[safe_add( _4173,_4193 )] == 2) && ((_ptr__4177[safe_add( _4172,_4193 )] <= 0.0) && (_ptr__4177[safe_add( _4172,_4193 )] >= 0.0))))
                      {
                        {
                          _ptr__4176[safe_add( safe_add( _4171,_4174 ),(int)1 )] = _ptr__4176[safe_add( _4171,_4174 )];
                          _ptr__4177[safe_add( _4172,_4174 )] = 0.0;
                          _ptr__4176[safe_add( _4168,_4169 )] = _4192;
                          ++ _4169;
                          ++ _4174;
                        }
                      }
                      else if(((_ptr__4176[safe_add( _4173,_4192 )] == 2) && ((_ptr__4177[safe_add( _4172,_4192 )] <= 0.0) && (_ptr__4177[safe_add( _4172,_4192 )] >= 0.0))))
                      {
                        {
                          _ptr__4176[safe_add( safe_add( _4171,_4174 ),(int)1 )] = _ptr__4176[safe_add( _4171,_4174 )];
                          _ptr__4176[safe_add( _4168,_4169 )] = _4193;
                          ++ _4169;
                          ++ _4174;
                        }
                      }
                      else
                      {
                        {
                          _ptr__4176[safe_add( safe_add( _4171,_4174 ),(int)1 )] = safe_add( _ptr__4176[safe_add( _4171,_4174 )],(int)2 );
                          _ptr__4176[safe_add( _4170,_ptr__4176[safe_add( _4171,_4174 )] )] = _4193;
                          _ptr__4176[safe_add( safe_add( _4170,_ptr__4176[safe_add( _4171,_4174 )] ),(int)1 )] = _4192;
                          _ptr__4176[safe_add( _4173,_4174 )] = _4190;
                          _ptr__4177[safe_add( _4172,_4174 )] = _4191;
                          _ptr__4176[safe_add( _4168,_4169 )] = _4174;
                          ++ _4169;
                          ++ _4174;
                        }
                      }
                    }
                  }
                  else
                  {
                    {
                      _4175 = _4189;
                    }
                  }
                }
              }
              else if((_4190 == 5))
              {
                {
                  if ((_4169 >= (int)2))
                  {
                    {
                      int _4194 = _ptr__4176[(safe_add( _4168,_4169 ) - (int)1)];
                      -- _4169;
                      int _4195 = _ptr__4176[(safe_add( _4168,_4169 ) - (int)1)];
                      -- _4169;
                      if (((_ptr__4176[safe_add( _4173,_4195 )] == 2) && (_ptr__4176[safe_add( _4173,_4194 )] == 2)))
                      {
                        {
                          _ptr__4176[safe_add( _4173,_4174 )] = 2;
                          _ptr__4177[safe_add( _4172,_4174 )] = (_ptr__4177[safe_add( _4172,_4195 )] * _ptr__4177[safe_add( _4172,_4194 )]);
                          _ptr__4176[safe_add( safe_add( _4171,_4174 ),(int)1 )] = _ptr__4176[safe_add( _4171,_4174 )];
                          _ptr__4176[safe_add( _4168,_4169 )] = _4174;
                          ++ _4169;
                          ++ _4174;
                        }
                      }
                      else if(((_ptr__4176[safe_add( _4173,_4195 )] == 2) && ((_ptr__4177[safe_add( _4172,_4195 )] <= 0.0) && (_ptr__4177[safe_add( _4172,_4195 )] >= 0.0))))
                      {
                        {
                          _ptr__4176[safe_add( safe_add( _4171,_4174 ),(int)1 )] = _ptr__4176[safe_add( _4171,_4174 )];
                          _ptr__4176[safe_add( _4173,_4174 )] = 2;
                          _ptr__4177[safe_add( _4172,_4174 )] = 0.0;
                          _ptr__4176[safe_add( _4168,_4169 )] = _4174;
                          ++ _4169;
                          ++ _4174;
                        }
                      }
                      else if(((_ptr__4176[safe_add( _4173,_4194 )] == 2) && ((_ptr__4177[safe_add( _4172,_4194 )] <= 0.0) && (_ptr__4177[safe_add( _4172,_4194 )] >= 0.0))))
                      {
                        {
                          _ptr__4176[safe_add( safe_add( _4171,_4174 ),(int)1 )] = _ptr__4176[safe_add( _4171,_4174 )];
                          _ptr__4176[safe_add( _4173,_4174 )] = 2;
                          _ptr__4177[safe_add( _4172,_4174 )] = 0.0;
                          _ptr__4176[safe_add( _4168,_4169 )] = _4174;
                          ++ _4169;
                          ++ _4174;
                        }
                      }
                      else if(((_ptr__4176[safe_add( _4173,_4194 )] == 2) && ((_ptr__4177[safe_add( _4172,_4194 )] <= 1.0) && (_ptr__4177[safe_add( _4172,_4194 )] >= 1.0))))
                      {
                        {
                          _ptr__4176[safe_add( safe_add( _4171,_4174 ),(int)1 )] = safe_add( _ptr__4176[safe_add( _4171,_4174 )],(int)1 );
                          _ptr__4176[safe_add( _4168,_4169 )] = _4195;
                          ++ _4169;
                          ++ _4174;
                        }
                      }
                      else if(((_ptr__4176[safe_add( _4173,_4195 )] == 2) && ((_ptr__4177[safe_add( _4172,_4195 )] <= 1.0) && (_ptr__4177[safe_add( _4172,_4195 )] >= 1.0))))
                      {
                        {
                          _ptr__4176[safe_add( safe_add( _4171,_4174 ),(int)1 )] = safe_add( _ptr__4176[safe_add( _4171,_4174 )],(int)1 );
                          _ptr__4176[safe_add( _4168,_4169 )] = _4194;
                          ++ _4169;
                          ++ _4174;
                        }
                      }
                      else
                      {
                        {
                          _ptr__4176[safe_add( safe_add( _4171,_4174 ),(int)1 )] = safe_add( _ptr__4176[safe_add( _4171,_4174 )],(int)2 );
                          _ptr__4176[safe_add( _4170,_ptr__4176[safe_add( _4171,_4174 )] )] = _4195;
                          _ptr__4176[safe_add( safe_add( _4170,_ptr__4176[safe_add( _4171,_4174 )] ),(int)1 )] = _4194;
                          _ptr__4176[safe_add( _4173,_4174 )] = 5;
                          _ptr__4177[safe_add( _4172,_4174 )] = _4191;
                          _ptr__4176[safe_add( _4168,_4169 )] = _4174;
                          ++ _4169;
                          ++ _4174;
                        }
                      }
                    }
                  }
                  else
                  {
                    {
                      _4175 = _4189;
                    }
                  }
                }
              }
              else if((_4190 == 4))
              {
                {
                  if ((_4169 >= (int)1))
                  {
                    {
                      int _4196 = _ptr__4176[(safe_add( _4168,_4169 ) - (int)1)];
                      -- _4169;
                      if ((_ptr__4176[safe_add( _4173,_4196 )] == 2))
                      {
                        {
                          _ptr__4176[safe_add( _4173,_4174 )] = 2;
                          _ptr__4177[safe_add( _4172,_4174 )] = (-_ptr__4177[safe_add( _4172,_4196 )]);
                          _ptr__4176[safe_add( safe_add( _4171,_4174 ),(int)1 )] = _ptr__4176[safe_add( _4171,_4174 )];
                          _ptr__4176[safe_add( _4168,_4169 )] = _4174;
                          ++ _4169;
                          ++ _4174;
                        }
                      }
                      else
                      {
                        {
                          _ptr__4176[safe_add( _4173,_4174 )] = _ptr__4156[safe_add( _4157,_4189 )];
                          _ptr__4176[safe_add( safe_add( _4171,_4174 ),(int)1 )] = safe_add( _ptr__4176[safe_add( _4171,_4174 )],(int)1 );
                          _ptr__4176[safe_add( _4170,_ptr__4176[safe_add( _4171,_4174 )] )] = _4196;
                          _ptr__4176[safe_add( _4168,_4169 )] = _4174;
                          ++ _4169;
                          ++ _4174;
                        }
                      }
                    }
                  }
                  else
                  {
                    {
                      _4175 = _4189;
                    }
                  }
                }
              }
              else if((_4190 == 6))
              {
                {
                  if ((_4169 >= (int)1))
                  {
                    {
                      int _4197 = _ptr__4176[(safe_add( _4168,_4169 ) - (int)1)];
                      -- _4169;
                      if ((_ptr__4176[safe_add( _4173,_4197 )] == 2))
                      {
                        {
                          _ptr__4176[safe_add( _4173,_4174 )] = 2;
                          _ptr__4177[safe_add( _4172,_4174 )] = (1.0 / _ptr__4177[safe_add( _4172,_4197 )]);
                          _ptr__4176[safe_add( safe_add( _4171,_4174 ),(int)1 )] = _ptr__4176[safe_add( _4171,_4174 )];
                          _ptr__4176[safe_add( _4168,_4169 )] = _4174;
                          ++ _4169;
                          ++ _4174;
                        }
                      }
                      else
                      {
                        {
                          _ptr__4176[safe_add( _4173,_4174 )] = _ptr__4156[safe_add( _4157,_4189 )];
                          _ptr__4176[safe_add( safe_add( _4171,_4174 ),(int)1 )] = safe_add( _ptr__4176[safe_add( _4171,_4174 )],(int)1 );
                          _ptr__4176[safe_add( _4170,_ptr__4176[safe_add( _4171,_4174 )] )] = _4197;
                          _ptr__4176[safe_add( _4168,_4169 )] = _4174;
                          ++ _4169;
                          ++ _4174;
                        }
                      }
                    }
                  }
                  else
                  {
                    {
                      _4175 = _4189;
                    }
                  }
                }
              }
              else if((_4190 == 8))
              {
                {
                  int _4198 = (int)_4191;
                  if ((_4198 < (int)0))
                  {
                    {
                      _4175 = _4189;
                    }
                  }
                  else if((_4198 > _4169))
                  {
                    {
                      _4175 = _4189;
                    }
                  }
                  else if((_4198 == (int)0))
                  {
                    {
                      _ptr__4176[safe_add( _4173,_4174 )] = 2;
                      _ptr__4177[safe_add( _4172,_4174 )] = 0.0;
                      _ptr__4176[safe_add( safe_add( _4171,_4174 ),(int)1 )] = _ptr__4176[safe_add( _4171,_4174 )];
                      _ptr__4176[safe_add( _4168,_4169 )] = _4174;
                      ++ _4169;
                      ++ _4174;
                    }
                  }
                  else if((_4198 == (int)1))
                  {
                    {
                      _ptr__4176[safe_add( _4173,_4174 )] = (int)0;
                      _ptr__4176[safe_add( safe_add( _4171,_4174 ),(int)1 )] = _ptr__4176[safe_add( _4171,_4174 )];
                      _ptr__4176[safe_add( _4168,_4169 )] = _4174;
                      ++ _4169;
                      ++ _4174;
                    }
                  }
                  else
                  {
                    {
                      std::vector<int> _10552;
                      for (int _4200 = (int)0, _10553 = _4198; _4200 < _10553 ; ++_4200)
                      {
                        _10552.push_back(_ptr__4176[((safe_add( _4168,_4169 ) - (int)1) - _4200)]);
                      }
                      auto _10554 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_10552.size()),_10552.begin(),_10552.end()));
                      std::shared_ptr< monty::ndarray< int,1 > > _4199 = _10554;
                      _checked_ptr_1<int> _ptr__4199(_4199 ? _4199->raw() : nullptr,_4199 ? _4199->size(0) : 0);
                      _4169 -= _4198;
                      {
                        int _4201 = (_4198 - (int)1);
                        int _4202 = (int)0;
                        while ( (_4202 < _4201) )
                        {
                          {
                            while ( ((_4202 < _4201) && (_ptr__4176[safe_add( _4173,_ptr__4199[_4202] )] == 2)) )
                            {
                              {
                                ++ _4202;
                              }
                            }
                            while ( ((_4202 < _4201) && (_ptr__4176[safe_add( _4173,_ptr__4199[_4201] )] != 2)) )
                            {
                              {
                                -- _4201;
                              }
                            }
                            if ((_4202 < _4201))
                            {
                              {
                                int _4203 = _ptr__4199[_4202];
                                _ptr__4199[_4202] = _ptr__4199[_4201];
                                _ptr__4199[_4201] = _4203;
                                ++ _4202;
                                -- _4201;
                              }
                            }
                            {}
                          }
                        }
                        double _4204 = 0.0;
                        int _4205 = (int)0;
                        while ( ((_4205 < _4198) && (_ptr__4176[safe_add( _4173,_ptr__4199[_4205] )] == 2)) )
                        {
                          {
                            _4204 += _ptr__4177[safe_add( _4172,_ptr__4199[_4205] )];
                            ++ _4205;
                          }
                        }
                        int _10555;
                        bool _10556 = (_4205 > (int)0);
                        if (_10556)
                        {
                          _10555 = safe_add( (_4198 - _4205),(int)1 );
                        }
                        else
                        {
                          _10555 = _4198;
                        }
                        int _4206 = _10555;
                        int _4207 = (int)0;
                        if ((_4205 < (int)2))
                        {
                          {
                            int _10557 = (int)0;
                            int _10558 = _4198;
                            for (int _4208 = _10557; _4208 < _10558; ++_4208)
                            {
                              {
                                _ptr__4176[safe_add( safe_add( _4170,_ptr__4176[safe_add( _4171,_4174 )] ),_4208 )] = _ptr__4199[_4208];
                              }
                            }
                            _ptr__4176[safe_add( safe_add( _4171,_4174 ),(int)1 )] = safe_add( _ptr__4176[safe_add( _4171,_4174 )],_4198 );
                            _ptr__4176[safe_add( _4173,_4174 )] = 8;
                            _ptr__4177[safe_add( _4172,_4174 )] = _4198;
                            _ptr__4176[safe_add( _4168,_4169 )] = _4174;
                            ++ _4169;
                            ++ _4174;
                          }
                        }
                        else
                        {
                          {
                            _ptr__4176[safe_add( _4173,_4174 )] = 2;
                            _ptr__4177[safe_add( _4172,_4174 )] = _4204;
                            _ptr__4176[safe_add( safe_add( _4171,_4174 ),(int)1 )] = _ptr__4176[safe_add( _4171,_4174 )];
                            ++ _4174;
                            if ((_4205 == _4198))
                            {
                              {
                                _ptr__4176[safe_add( _4168,_4169 )] = (_4174 - (int)1);
                                ++ _4169;
                              }
                            }
                            else
                            {
                              {
                                _ptr__4176[safe_add( _4170,_ptr__4176[safe_add( _4171,_4174 )] )] = (_4174 - (int)1);
                                int _10559 = _4205;
                                int _10560 = _4198;
                                for (int _4209 = _10559; _4209 < _10560; ++_4209)
                                {
                                  {
                                    _ptr__4176[safe_add( (safe_add( safe_add( _4170,_ptr__4176[safe_add( _4171,_4174 )] ),_4209 ) - _4205),(int)1 )] = _ptr__4199[_4209];
                                  }
                                }
                                _ptr__4176[safe_add( safe_add( _4171,_4174 ),(int)1 )] = safe_add( _ptr__4176[safe_add( _4171,_4174 )],_4206 );
                                _ptr__4176[safe_add( _4173,_4174 )] = 8;
                                _ptr__4177[safe_add( _4172,_4174 )] = _4206;
                                _ptr__4176[safe_add( _4168,_4169 )] = _4174;
                                ++ _4169;
                                ++ _4174;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
              else
              {
                {
                  _4175 = _4189;
                }
              }
            }
          }
        }
      }
      {}
      if (((_4175 < (int)0) && (_4169 != (int)1)))
      {
        {
          _4175 = _4174;
        }
      }
      {}
      if ((_4175 < (int)0))
      {
        {
          int _4210 = _4184;
          int _4211 = _4210;
          if ((_ptr__4176[safe_add( _4173,_ptr__4176[(safe_add( _4168,_4169 ) - (int)1)] )] == 2))
          {
            {
              _ptr__4160[safe_add( _4161,_4185 )] += _ptr__4177[safe_add( _4172,_ptr__4176[(safe_add( _4168,_4169 ) - (int)1)] )];
              _ptr__4178[safe_add( _4164,_4211 )] = 10;
              _ptr__4179[safe_add( _4165,_4211 )] = 0.0;
              ++ _4211;
            }
          }
          else
          {
            {
              if (((_ptr__4160[safe_add( _4161,_4185 )] < (int)0) || ((int)0 < _ptr__4160[safe_add( _4161,_4185 )])))
              {
                {
                  _ptr__4178[safe_add( _4164,_4211 )] = 3;
                  ++ _4211;
                  _ptr__4178[safe_add( _4164,_4211 )] = 2;
                  _ptr__4179[safe_add( _4165,_4211 )] = _ptr__4160[safe_add( _4161,_4185 )];
                  ++ _4211;
                  _ptr__4160[safe_add( _4161,_4185 )] = (int)0;
                }
              }
              {}
              while ( (_4169 > (int)0) )
              {
                {
                  int _4212 = _ptr__4176[(safe_add( _4168,_4169 ) - (int)1)];
                  -- _4169;
                  int _4213 = _ptr__4176[safe_add( _4173,_4212 )];
                  double _4214 = _ptr__4177[safe_add( _4172,_4212 )];
                  _ptr__4178[safe_add( _4164,_4211 )] = _4213;
                  _ptr__4179[safe_add( _4165,_4211 )] = _4214;
                  ++ _4211;
                  int _10561 = _ptr__4176[safe_add( _4171,_4212 )];
                  int _10562 = _ptr__4176[safe_add( safe_add( _4171,_4212 ),(int)1 )];
                  for (int _4215 = _10561; _4215 < _10562; ++_4215)
                  {
                    {
                      _ptr__4176[safe_add( _4168,_4169 )] = _ptr__4176[safe_add( _4170,_4215 )];
                      ++ _4169;
                    }
                  }
                }
              }
              int _4216 = _4211;
              -- _4216;
              while ( (_4210 < _4216) )
              {
                {
                  int _4217 = _ptr__4178[safe_add( _4164,_4210 )];
                  double _4218 = _ptr__4179[safe_add( _4165,_4210 )];
                  _ptr__4178[safe_add( _4164,_4210 )] = _ptr__4178[safe_add( _4164,_4216 )];
                  _ptr__4179[safe_add( _4165,_4210 )] = _ptr__4179[safe_add( _4165,_4216 )];
                  _ptr__4178[safe_add( _4164,_4216 )] = _4217;
                  _ptr__4179[safe_add( _4165,_4216 )] = _4218;
                  ++ _4210;
                  -- _4216;
                }
              }
            }
          }
          _ptr__4180[safe_add( safe_add( _4166,_4185 ),(int)1 )] = _4211;
          _4184 = _4211;
        }
      }
      {}
    }
  }
  mosek::fusion::p_WorkStack::_get_impl(_4154)->pi32 = _4181;
  mosek::fusion::p_WorkStack::_get_impl(_4154)->pi64 = _4182;
  mosek::fusion::p_WorkStack::_get_impl(_4154)->pf64 = _4183;
  if ((_4175 >= (int)0))
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("Internal error: Invalid parameterization code list"));
    }
  }
  {}
}
void mosek::fusion::ExprOptimizeCode :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4219,monty::rc_ptr< ::mosek::fusion::WorkStack > _4220,monty::rc_ptr< ::mosek::fusion::WorkStack > _4221) { mosek::fusion::p_ExprOptimizeCode::_get_impl(this)->eval(_4219,_4220,_4221); }void mosek::fusion::p_ExprOptimizeCode::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4219,monty::rc_ptr< ::mosek::fusion::WorkStack > _4220,monty::rc_ptr< ::mosek::fusion::WorkStack > _4221){
  expr->eval(_4220,_4219,_4221);
  _4220->pop_expr();
  int _4222 = mosek::fusion::p_WorkStack::_get_impl(_4220)->nd;
  int _4223 = mosek::fusion::p_WorkStack::_get_impl(_4220)->shape_base;
  int _4224 = mosek::fusion::p_WorkStack::_get_impl(_4220)->nelem;
  int _4225 = mosek::fusion::p_WorkStack::_get_impl(_4220)->nnz;
  bool _4226 = mosek::fusion::p_WorkStack::_get_impl(_4220)->hassp;
  int _4227 = mosek::fusion::p_WorkStack::_get_impl(_4220)->ncodeatom;
  int _4228 = mosek::fusion::p_WorkStack::_get_impl(_4220)->ptr_base;
  int _4229 = mosek::fusion::p_WorkStack::_get_impl(_4220)->sp_base;
  int _4230 = mosek::fusion::p_WorkStack::_get_impl(_4220)->nidxs_base;
  int _4231 = mosek::fusion::p_WorkStack::_get_impl(_4220)->cof_base;
  int _4232 = mosek::fusion::p_WorkStack::_get_impl(_4220)->code_base;
  int _4233 = mosek::fusion::p_WorkStack::_get_impl(_4220)->codeptr_base;
  int _4234 = mosek::fusion::p_WorkStack::_get_impl(_4220)->cconst_base;
  std::shared_ptr< monty::ndarray< int,1 > > _4235 = mosek::fusion::p_WorkStack::_get_impl(_4220)->i32;
  _checked_ptr_1<int> _ptr__4235(_4235 ? _4235->raw() : nullptr,_4235 ? _4235->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _4236 = mosek::fusion::p_WorkStack::_get_impl(_4220)->i64;
  _checked_ptr_1<long long> _ptr__4236(_4236 ? _4236->raw() : nullptr,_4236 ? _4236->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _4237 = mosek::fusion::p_WorkStack::_get_impl(_4220)->f64;
  _checked_ptr_1<double> _ptr__4237(_4237 ? _4237->raw() : nullptr,_4237 ? _4237->size(0) : 0);
  if ((_4227 == (int)0))
  {
    {
      _4219->alloc_expr(_4222,_4224,_4225,_4226,(int)0);
      int _4238 = mosek::fusion::p_WorkStack::_get_impl(_4219)->ptr_base;
      int _4239 = mosek::fusion::p_WorkStack::_get_impl(_4219)->sp_base;
      int _4240 = mosek::fusion::p_WorkStack::_get_impl(_4219)->nidxs_base;
      int _4241 = mosek::fusion::p_WorkStack::_get_impl(_4219)->cof_base;
      int _4242 = mosek::fusion::p_WorkStack::_get_impl(_4219)->shape_base;
      std::shared_ptr< monty::ndarray< int,1 > > _4243 = mosek::fusion::p_WorkStack::_get_impl(_4219)->i32;
      _checked_ptr_1<int> _ptr__4243(_4243 ? _4243->raw() : nullptr,_4243 ? _4243->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _4244 = mosek::fusion::p_WorkStack::_get_impl(_4219)->i64;
      _checked_ptr_1<long long> _ptr__4244(_4244 ? _4244->raw() : nullptr,_4244 ? _4244->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _4245 = mosek::fusion::p_WorkStack::_get_impl(_4219)->f64;
      _checked_ptr_1<double> _ptr__4245(_4245 ? _4245->raw() : nullptr,_4245 ? _4245->size(0) : 0);
      int _10563 = (int)0;
      int _10564 = safe_add( _4224,(int)1 );
      for (int _4246 = _10563; _4246 < _10564; ++_4246)
      {
        {
          _ptr__4243[safe_add( _4238,_4246 )] = _ptr__4235[safe_add( _4228,_4246 )];
        }
      }
      int _10565 = (int)0;
      int _10566 = _4222;
      for (int _4247 = _10565; _4247 < _10566; ++_4247)
      {
        {
          _ptr__4243[safe_add( _4242,_4247 )] = _ptr__4235[safe_add( _4223,_4247 )];
        }
      }
      int _10567 = (int)0;
      int _10568 = _4225;
      for (int _4248 = _10567; _4248 < _10568; ++_4248)
      {
        {
          _ptr__4244[safe_add( _4240,_4248 )] = _ptr__4236[safe_add( _4230,_4248 )];
        }
      }
      int _10569 = (int)0;
      int _10570 = _4225;
      for (int _4249 = _10569; _4249 < _10570; ++_4249)
      {
        {
          _ptr__4245[safe_add( _4241,_4249 )] = _ptr__4237[safe_add( _4231,_4249 )];
        }
      }
      if (_4226)
      {
        {
          int _10571 = (int)0;
          int _10572 = _4224;
          for (int _4250 = _10571; _4250 < _10572; ++_4250)
          {
            {
              _ptr__4244[safe_add( _4239,_4250 )] = _ptr__4236[safe_add( _4229,_4250 )];
            }
          }
        }
      }
      {}
    }
  }
  else
  {
    {
      int _4251 = _4221->alloci32(safe_add( _4227,safe_mul( _4225,(int)2 ) ));
      int _4252 = _4221->alloci32(safe_add( _4225,(int)1 ));
      int _4253 = _4221->allocf64(safe_add( _4227,safe_mul( _4225,(int)2 ) ));
      ::mosek::fusion::p_ExprOptimizeCode::compress_code(_4221,_4225,_4235,_4232,_4235,_4233,_4237,_4231,_4237,_4234,_4251,_4253,_4252);
      std::shared_ptr< monty::ndarray< int,1 > > _4254 = mosek::fusion::p_WorkStack::_get_impl(_4221)->i32;
      _checked_ptr_1<int> _ptr__4254(_4254 ? _4254->raw() : nullptr,_4254 ? _4254->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _4255 = mosek::fusion::p_WorkStack::_get_impl(_4221)->f64;
      _checked_ptr_1<double> _ptr__4255(_4255 ? _4255->raw() : nullptr,_4255 ? _4255->size(0) : 0);
      int _4256 = (int)0;
      int _4257 = (int)0;
      int _4258 = (int)0;
      int _10573 = (int)0;
      int _10574 = _4224;
      for (int _4259 = _10573; _4259 < _10574; ++_4259)
      {
        {
          int _4260 = (int)0;
          int _10575 = _ptr__4235[safe_add( _4228,_4259 )];
          int _10576 = _ptr__4235[safe_add( safe_add( _4228,_4259 ),(int)1 )];
          for (int _4261 = _10575; _4261 < _10576; ++_4261)
          {
            {
              if (((_ptr__4237[safe_add( _4231,_4261 )] < (int)0) || ((int)0 < _ptr__4237[safe_add( _4231,_4261 )])))
              {
                {
                  ++ _4257;
                  ++ _4260;
                  ++ _4256;
                }
              }
              else
              {
                {
                  if (((_ptr__4254[safe_add( safe_add( _4252,_4261 ),(int)1 )] - _ptr__4254[safe_add( _4252,_4261 )]) > (int)1))
                  {
                    {
                      ++ _4257;
                      ++ _4260;
                      _4256 += (_ptr__4254[safe_add( safe_add( _4252,_4261 ),(int)1 )] - _ptr__4254[safe_add( _4252,_4261 )]);
                    }
                  }
                  else
                  {
                    {
                      if ((_ptr__4254[safe_add( _4251,_ptr__4254[safe_add( _4252,_4261 )] )] != 10))
                      {
                        {
                          ++ _4257;
                          ++ _4260;
                          ++ _4256;
                        }
                      }
                      {}
                    }
                  }
                }
              }
            }
          }
          if ((_4260 > (int)0))
          {
            {
              ++ _4258;
            }
          }
          {}
        }
      }
      bool _4262 = false;
      {
        long long _4263 = (long long)1;
        int _10577 = (int)0;
        int _10578 = _4222;
        for (int _4264 = _10577; _4264 < _10578; ++_4264)
        {
          {
            _4263 *= _ptr__4235[safe_add( _4223,_4264 )];
          }
        }
        _4262 = (_4263 > _4258);
      }
      _4219->alloc_expr(_4222,_4258,_4257,_4262,_4256);
      int _4265 = mosek::fusion::p_WorkStack::_get_impl(_4219)->ptr_base;
      int _4266 = mosek::fusion::p_WorkStack::_get_impl(_4219)->sp_base;
      int _4267 = mosek::fusion::p_WorkStack::_get_impl(_4219)->shape_base;
      int _4268 = mosek::fusion::p_WorkStack::_get_impl(_4219)->nidxs_base;
      int _4269 = mosek::fusion::p_WorkStack::_get_impl(_4219)->cof_base;
      int _4270 = mosek::fusion::p_WorkStack::_get_impl(_4219)->code_base;
      int _4271 = mosek::fusion::p_WorkStack::_get_impl(_4219)->codeptr_base;
      int _4272 = mosek::fusion::p_WorkStack::_get_impl(_4219)->cconst_base;
      std::shared_ptr< monty::ndarray< int,1 > > _4273 = mosek::fusion::p_WorkStack::_get_impl(_4219)->i32;
      _checked_ptr_1<int> _ptr__4273(_4273 ? _4273->raw() : nullptr,_4273 ? _4273->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _4274 = mosek::fusion::p_WorkStack::_get_impl(_4219)->i64;
      _checked_ptr_1<long long> _ptr__4274(_4274 ? _4274->raw() : nullptr,_4274 ? _4274->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _4275 = mosek::fusion::p_WorkStack::_get_impl(_4219)->f64;
      _checked_ptr_1<double> _ptr__4275(_4275 ? _4275->raw() : nullptr,_4275 ? _4275->size(0) : 0);
      int _10579 = (int)0;
      int _10580 = _4222;
      for (int _4276 = _10579; _4276 < _10580; ++_4276)
      {
        {
          _ptr__4273[safe_add( _4267,_4276 )] = _ptr__4235[safe_add( _4223,_4276 )];
        }
      }
      if ((_4256 == (int)0))
      {
        {
          int _10581 = (int)0;
          int _10582 = _4225;
          for (int _4277 = _10581; _4277 < _10582; ++_4277)
          {
            {
              _ptr__4274[safe_add( _4268,_4277 )] = _ptr__4236[safe_add( _4230,_4277 )];
            }
          }
          int _10583 = (int)0;
          int _10584 = _4225;
          for (int _4278 = _10583; _4278 < _10584; ++_4278)
          {
            {
              _ptr__4275[safe_add( _4269,_4278 )] = _ptr__4237[safe_add( _4231,_4278 )];
            }
          }
          int _10585 = (int)0;
          int _10586 = safe_add( _4224,(int)1 );
          for (int _4279 = _10585; _4279 < _10586; ++_4279)
          {
            {
              _ptr__4273[safe_add( _4265,_4279 )] = _ptr__4273[safe_add( _4228,_4279 )];
            }
          }
          if (_4226)
          {
            {
              int _10587 = (int)0;
              int _10588 = _4224;
              for (int _4280 = _10587; _4280 < _10588; ++_4280)
              {
                {
                  _ptr__4274[safe_add( _4266,_4280 )] = _ptr__4274[safe_add( _4229,_4280 )];
                }
              }
            }
          }
          {}
        }
      }
      else
      {
        {
          int _4281 = (int)0;
          int _4282 = (int)0;
          int _4283 = (int)0;
          _ptr__4273[_4265] = (int)0;
          if ((_4256 > (int)0))
          {
            {
              _ptr__4273[_4271] = (int)0;
            }
          }
          {}
          int _10589 = (int)0;
          int _10590 = _4224;
          for (int _4284 = _10589; _4284 < _10590; ++_4284)
          {
            {
              int _4285 = (int)0;
              int _10591 = _ptr__4235[safe_add( _4228,_4284 )];
              int _10592 = _ptr__4235[safe_add( safe_add( _4228,_4284 ),(int)1 )];
              for (int _4286 = _10591; _4286 < _10592; ++_4286)
              {
                {
                  if (((_ptr__4237[safe_add( _4231,_4286 )] < (int)0) || ((int)0 < _ptr__4237[safe_add( _4231,_4286 )])))
                  {
                    {
                      _ptr__4274[safe_add( _4268,_4283 )] = _ptr__4236[safe_add( _4230,_4286 )];
                      _ptr__4275[safe_add( _4269,_4283 )] = _ptr__4237[safe_add( _4231,_4286 )];
                      _ptr__4273[safe_add( _4270,_4281 )] = _ptr__4254[safe_add( _4251,_ptr__4254[safe_add( _4252,_4286 )] )];
                      _ptr__4275[safe_add( _4272,_4281 )] = _ptr__4255[safe_add( _4253,_ptr__4254[safe_add( _4252,_4286 )] )];
                      ++ _4281;
                      _ptr__4273[safe_add( safe_add( _4271,_4283 ),(int)1 )] = _4281;
                      ++ _4283;
                      ++ _4285;
                    }
                  }
                  else
                  {
                    {
                      if ((((_ptr__4254[safe_add( safe_add( _4252,_4286 ),(int)1 )] - _ptr__4254[safe_add( _4252,_4286 )]) > (int)1) || (_ptr__4254[safe_add( _4251,_ptr__4254[safe_add( _4252,_4286 )] )] != 10)))
                      {
                        {
                          _ptr__4274[safe_add( _4268,_4283 )] = _ptr__4236[safe_add( _4230,_4286 )];
                          _ptr__4275[safe_add( _4269,_4283 )] = 0.0;
                          int _10593 = _ptr__4254[safe_add( _4252,_4286 )];
                          int _10594 = _ptr__4254[safe_add( safe_add( _4252,_4286 ),(int)1 )];
                          for (int _4287 = _10593; _4287 < _10594; ++_4287)
                          {
                            {
                              _ptr__4273[safe_add( _4270,_4281 )] = _ptr__4254[safe_add( _4251,_4287 )];
                              _ptr__4275[safe_add( _4272,_4281 )] = _ptr__4255[safe_add( _4253,_4287 )];
                              ++ _4281;
                            }
                          }
                          _ptr__4273[safe_add( safe_add( _4271,_4283 ),(int)1 )] = _4281;
                          ++ _4283;
                          ++ _4285;
                        }
                      }
                      {}
                    }
                  }
                }
              }
              if ((_4285 > (int)0))
              {
                {
                  _ptr__4273[safe_add( safe_add( _4265,_4282 ),(int)1 )] = _4283;
                  if (_4262)
                  {
                    {
                      _ptr__4274[safe_add( _4266,_4282 )] = _ptr__4236[safe_add( _4229,_4284 )];
                    }
                  }
                  {}
                  ++ _4282;
                }
              }
              {}
            }
          }
          if ((_4282 != _4258))
          {
            {
              throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Incorrect result nelem"));
            }
          }
          {}
          if ((_4283 != _4257))
          {
            {
              throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Incorrect result nnz"));
            }
          }
          {}
          if ((_4281 != _4256))
          {
            {
              throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Incorrect result num code atoms"));
            }
          }
          {}
          if ((_4256 > (int)0))
          {
            {
              if ((_ptr__4273[safe_add( _4271,_4257 )] != _4256))
              {
                {
                  throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Incorrect codeptr"));
                }
              }
              {}
            }
          }
          {}
        }
      }
    }
  }
}
std::string mosek::fusion::ExprOptimizeCode :: toString() { return mosek::fusion::p_ExprOptimizeCode::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprOptimizeCode::toString(){
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprOptimizeCode("))->__mosek_2fusion_2Utils_2StringBuffer__a(expr->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
void mosek::fusion::p_ExprOptimizeCode::destroy(){expr.reset();}void mosek::fusion::ExprOptimizeCode::destroy() { mosek::fusion::p_ExprOptimizeCode::_get_impl(this)->destroy(); }mosek::fusion::ExprCompress::ExprCompress(mosek::fusion::p_ExprCompress *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprCompress()" << this << std::endl; */ }mosek::fusion::ExprCompress::~ExprCompress() {  /* std::cout << "~ExprCompress()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprCompress::p_ExprCompress  (::mosek::fusion::ExprCompress * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprCompress::t mosek::fusion::p_ExprCompress::_new_ExprCompress  (monty::rc_ptr< ::mosek::fusion::Expression > _4288){ return new mosek::fusion::ExprCompress(_4288); }mosek::fusion::ExprCompress::ExprCompress  (monty::rc_ptr< ::mosek::fusion::Expression > _4288) :    ExprCompress(new mosek::fusion::p_ExprCompress(this)){ mosek::fusion::p_ExprCompress::_get_impl(this)->_initialize(_4288); }void mosek::fusion::p_ExprCompress::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _4288){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(_4288->getShape());
    eps = 0.0;
    mosek::fusion::p_ExprCompress::_get_impl(::mosek::fusion::ExprCompress::t(_pubthis))->expr = _4288;
  }
}mosek::fusion::ExprCompress::t mosek::fusion::p_ExprCompress::_new_ExprCompress  (monty::rc_ptr< ::mosek::fusion::Expression > _4289,    double _4290){ return new mosek::fusion::ExprCompress(_4289,_4290); }mosek::fusion::ExprCompress::ExprCompress  (monty::rc_ptr< ::mosek::fusion::Expression > _4289,    double _4290) :    ExprCompress(new mosek::fusion::p_ExprCompress(this)){ mosek::fusion::p_ExprCompress::_get_impl(this)->_initialize(_4289,_4290); }void mosek::fusion::p_ExprCompress::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _4289,    double _4290){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(_4289->getShape());
    eps = _4290;
    mosek::fusion::p_ExprCompress::_get_impl(::mosek::fusion::ExprCompress::t(_pubthis))->expr = _4289;
  }
}void mosek::fusion::ExprCompress::arg_sort  ( monty::rc_ptr< ::mosek::fusion::WorkStack > _4291,    monty::rc_ptr< ::mosek::fusion::WorkStack > _4292,    int _4293,    int _4294,    int _4295,    int _4296,    int _4297) { mosek::fusion::p_ExprCompress::arg_sort(_4291,_4292,_4293,_4294,_4295,_4296,_4297); }void mosek::fusion::p_ExprCompress::arg_sort(monty::rc_ptr< ::mosek::fusion::WorkStack > _4291,monty::rc_ptr< ::mosek::fusion::WorkStack > _4292,int _4293,int _4294,int _4295,int _4296,int _4297){
  int _4298 = (int)0;
  std::shared_ptr< monty::ndarray< int,1 > > _4299 = mosek::fusion::p_WorkStack::_get_impl(_4291)->i32;
  _checked_ptr_1<int> _ptr__4299(_4299 ? _4299->raw() : nullptr,_4299 ? _4299->size(0) : 0);
  int _10595 = (int)0;
  int _10596 = _4294;
  for (int _4300 = _10595; _4300 < _10596; ++_4300)
  {
    {
      if (((_ptr__4299[safe_add( safe_add( _4296,_4300 ),(int)1 )] - _ptr__4299[safe_add( _4296,_4300 )]) > _4298))
      {
        {
          _4298 = (_ptr__4299[safe_add( safe_add( _4296,_4300 ),(int)1 )] - _ptr__4299[safe_add( _4296,_4300 )]);
        }
      }
      {}
    }
  }
  int _10597;
  bool _10598 = (_4298 > (int)2);
  if (_10598)
  {
    _10597 = _4292->alloci32(safe_mul( _4298,(int)2 ));
  }
  else
  {
    _10597 = (int)99999;
  }
  int _4301 = _10597;
  std::shared_ptr< monty::ndarray< int,1 > > _4302 = mosek::fusion::p_WorkStack::_get_impl(_4292)->i32;
  _checked_ptr_1<int> _ptr__4302(_4302 ? _4302->raw() : nullptr,_4302 ? _4302->size(0) : 0);
  _4299 = mosek::fusion::p_WorkStack::_get_impl(_4291)->i32;
  _ptr__4299.update(_4299 ? _4299->raw() : nullptr, _4299 ? _4299->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _4303 = mosek::fusion::p_WorkStack::_get_impl(_4291)->i64;
  _checked_ptr_1<long long> _ptr__4303(_4303 ? _4303->raw() : nullptr,_4303 ? _4303->size(0) : 0);
  int _10599 = (int)0;
  int _10600 = _4294;
  for (int _4304 = _10599; _4304 < _10600; ++_4304)
  {
    {
      int _4305 = _ptr__4299[safe_add( _4296,_4304 )];
      int _4306 = _ptr__4299[safe_add( safe_add( _4296,_4304 ),(int)1 )];
      int _4307 = (_4306 - _4305);
      if ((_4307 == (int)0))
      {
        {
        }
      }
      else if((_4307 == (int)1))
      {
        {
          _ptr__4302[safe_add( _4293,_4305 )] = _4305;
        }
      }
      else if((_4307 == (int)2))
      {
        {
          if ((_ptr__4303[safe_add( _4297,_4305 )] <= _ptr__4303[safe_add( safe_add( _4297,_4305 ),(int)1 )]))
          {
            {
              _ptr__4302[safe_add( _4293,_4305 )] = _4305;
              _ptr__4302[safe_add( safe_add( _4293,_4305 ),(int)1 )] = safe_add( _4305,(int)1 );
            }
          }
          else
          {
            {
              _ptr__4302[safe_add( _4293,_4305 )] = safe_add( _4305,(int)1 );
              _ptr__4302[safe_add( safe_add( _4293,_4305 ),(int)1 )] = _4305;
            }
          }
        }
      }
      else
      {
        {
          long long _4308 = _ptr__4303[safe_add( _4297,_4305 )];
          long long _4309 = _ptr__4303[safe_add( _4297,_4305 )];
          bool _4310 = false;
          int _10601 = safe_add( _4305,(int)1 );
          int _10602 = _4306;
          for (int _4311 = _10601; _4311 < _10602; ++_4311)
          {
            {
              _4310 = (_4310 && (_ptr__4303[(safe_add( _4297,_4311 ) - (int)1)] <= _ptr__4303[safe_add( _4297,_4311 )]));
              if ((_4308 > _ptr__4303[safe_add( _4297,_4311 )]))
              {
                {
                  _4308 = _ptr__4303[safe_add( _4297,_4311 )];
                }
              }
              {}
              if ((_4309 < _ptr__4303[safe_add( _4297,_4311 )]))
              {
                {
                  _4309 = _ptr__4303[safe_add( _4297,_4311 )];
                }
              }
              {}
            }
          }
          if (_4310)
          {
            {
              int _10603 = _4305;
              int _10604 = _4306;
              for (int _4312 = _10603; _4312 < _10604; ++_4312)
              {
                {
                  _ptr__4302[safe_add( _4293,_4312 )] = _4312;
                }
              }
            }
          }
          else if((safe_add( (_4309 - _4308),(int)1 ) <= _4307))
          {
            {
              long long _4313 = safe_add( (_4309 - _4308),(int)1 );
              int _10605 = (int)0;
              long long _10606 = safe_add( _4313,(int)1 );
              for (long long _4314 = _10605; _4314 < _10606; ++_4314)
              {
                {
                  _ptr__4302[safe_add( _4301,_4314 )] = (int)0;
                }
              }
              int _10607 = _4305;
              int _10608 = _4306;
              for (int _4315 = _10607; _4315 < _10608; ++_4315)
              {
                {
                  ++ _ptr__4302[safe_add( (safe_add( _4301,_ptr__4303[safe_add( _4297,_4315 )] ) - _4308),(int)1 )];
                }
              }
              int _10609 = (int)0;
              long long _10610 = _4313;
              for (long long _4316 = _10609; _4316 < _10610; ++_4316)
              {
                {
                  _ptr__4302[safe_add( safe_add( _4301,_4316 ),(int)1 )] += _ptr__4302[safe_add( _4301,_4316 )];
                }
              }
              int _10611 = _4305;
              int _10612 = _4306;
              for (int _4317 = _10611; _4317 < _10612; ++_4317)
              {
                {
                  _ptr__4302[safe_add( safe_add( _4293,_4305 ),_ptr__4302[(safe_add( _4301,_ptr__4303[safe_add( _4297,_4317 )] ) - _4308)] )] = _4317;
                  ++ _ptr__4302[(safe_add( _4301,_ptr__4303[safe_add( _4297,_4317 )] ) - _4308)];
                }
              }
            }
          }
          else
          {
            {
              int _4318 = (int)1;
              int _4319 = _4301;
              int _4320 = safe_add( _4301,_4307 );
              int _10613 = (int)0;
              int _10614 = _4307;
              for (int _4321 = _10613; _4321 < _10614; ++_4321)
              {
                {
                  _ptr__4302[safe_add( _4319,_4321 )] = _4321;
                }
              }
              while ( (_4318 < _4307) )
              {
                {
                  int _4322 = safe_mul( _4318,(int)2 );
                  int _4323 = (_4307 / _4322);
                  if ((safe_add( safe_mul( _4323,_4322 ),_4318 ) < _4307))
                  {
                    {
                      ++ _4323;
                    }
                  }
                  {}
                  int _4324 = (int)0;
                  int _10615 = (int)0;
                  int _10616 = _4323;
                  for (int _4325 = _10615; _4325 < _10616; ++_4325)
                  {
                    {
                      int _4326 = safe_mul( _4325,_4322 );
                      int _4327 = safe_add( _4326,_4318 );
                      int _4328 = _4327;
                      int _4329 = safe_add( _4328,_4318 );
                      if ((_4329 > _4307))
                      {
                        {
                          _4329 = _4307;
                        }
                      }
                      {}
                      while ( ((_4326 < _4327) && (_4328 < _4329)) )
                      {
                        {
                          if ((_ptr__4303[safe_add( safe_add( _4297,_ptr__4302[safe_add( _4319,_4326 )] ),_4305 )] <= _ptr__4303[safe_add( safe_add( _4297,_ptr__4302[safe_add( _4319,_4328 )] ),_4305 )]))
                          {
                            {
                              _ptr__4302[safe_add( _4320,_4324 )] = _ptr__4302[safe_add( _4319,_4326 )];
                              ++ _4324;
                              ++ _4326;
                            }
                          }
                          else
                          {
                            {
                              _ptr__4302[safe_add( _4320,_4324 )] = _ptr__4302[safe_add( _4319,_4328 )];
                              ++ _4324;
                              ++ _4328;
                            }
                          }
                        }
                      }
                      while ( (_4326 < _4327) )
                      {
                        {
                          _ptr__4302[safe_add( _4320,_4324 )] = _ptr__4302[safe_add( _4319,_4326 )];
                          ++ _4324;
                          ++ _4326;
                        }
                      }
                      while ( (_4328 < _4329) )
                      {
                        {
                          _ptr__4302[safe_add( _4320,_4324 )] = _ptr__4302[safe_add( _4319,_4328 )];
                          ++ _4324;
                          ++ _4328;
                        }
                      }
                    }
                  }
                  if ((safe_mul( _4323,_4322 ) < _4307))
                  {
                    {
                      int _4330 = safe_mul( _4323,_4322 );
                      while ( (_4330 < _4307) )
                      {
                        {
                          _ptr__4302[safe_add( _4320,_4324 )] = _ptr__4302[safe_add( _4319,_4330 )];
                          ++ _4330;
                          ++ _4324;
                        }
                      }
                    }
                  }
                  {}
                  int _4331 = _4319;
                  _4319 = _4320;
                  _4320 = _4331;
                  _4318 *= (int)2;
                }
              }
              int _10617 = (int)0;
              int _10618 = _4307;
              for (int _4332 = _10617; _4332 < _10618; ++_4332)
              {
                {
                  _ptr__4302[safe_add( safe_add( _4293,_4305 ),_4332 )] = safe_add( _ptr__4302[safe_add( _4319,_4332 )],_4305 );
                }
              }
            }
          }
        }
      }
    }
  }
}
void mosek::fusion::ExprCompress::merge_sort  ( int _4333,    int _4334,    int _4335,    int _4336,    int _4337,    int _4338,    std::shared_ptr< monty::ndarray< int,1 > > _4339,    std::shared_ptr< monty::ndarray< long long,1 > > _4340) { mosek::fusion::p_ExprCompress::merge_sort(_4333,_4334,_4335,_4336,_4337,_4338,_4339,_4340); }void mosek::fusion::p_ExprCompress::merge_sort(int _4333,int _4334,int _4335,int _4336,int _4337,int _4338,std::shared_ptr< monty::ndarray< int,1 > > _4339,std::shared_ptr< monty::ndarray< long long,1 > > _4340){
  _checked_ptr_1<int> _ptr__4339(_4339 ? _4339->raw() : nullptr, _4339 ? _4339->size(0) : 0);
  _checked_ptr_1<long long> _ptr__4340(_4340 ? _4340->raw() : nullptr, _4340 ? _4340->size(0) : 0);
  int _4341 = _4333;
  int _4342 = _4334;
  int _10619 = (int)0;
  int _10620 = _4336;
  for (int _4343 = _10619; _4343 < _10620; ++_4343)
  {
    {
      _ptr__4339[safe_add( _4341,_4343 )] = _4343;
    }
  }
  int _10621 = (int)0;
  int _10622 = _4335;
  for (int _4344 = _10621; _4344 < _10622; ++_4344)
  {
    {
      _4341 = _4333;
      _4342 = _4334;
      int _4345 = _ptr__4339[safe_add( safe_add( _4337,_4344 ),(int)1 )];
      int _4346 = _ptr__4339[safe_add( _4337,_4344 )];
      if ((safe_add( _4346,(int)1 ) < _4345))
      {
        {
          int _4347 = (_4345 - _4346);
          int _4348 = (int)0;
          while ( (_4347 > (int)1) )
          {
            {
              ++ _4348;
              _4347 /= (int)2;
            }
          }
          _4347 = (_4345 - _4346);
          int _4349 = (int)1;
          int _10623 = (int)0;
          int _10624 = safe_add( _4348,(int)1 );
          for (int _4350 = _10623; _4350 < _10624; ++_4350)
          {
            {
              int _4351 = ((safe_add( _4347,_4349 ) - (int)1) / _4349);
              int _4352 = (_4351 / (int)2);
              int _4353 = _4346;
              int _10625 = (int)0;
              int _10626 = _4352;
              for (int _4354 = _10625; _4354 < _10626; ++_4354)
              {
                {
                  int _4355 = safe_mul( safe_mul( _4354,_4349 ),(int)2 );
                  int _10627;
                  bool _10628 = (safe_add( safe_add( _4346,_4355 ),safe_mul( (int)2,_4349 ) ) < _4345);
                  if (_10628)
                  {
                    _10627 = safe_add( safe_add( _4346,_4355 ),safe_mul( (int)2,_4349 ) );
                  }
                  else
                  {
                    _10627 = _4345;
                  }
                  int _4356 = _10627;
                  int _4357 = safe_add( safe_add( _4346,_4355 ),_4349 );
                  int _4358 = safe_add( safe_add( _4346,_4355 ),_4349 );
                  int _4359 = safe_add( _4346,_4355 );
                  while ( ((_4359 < _4358) && (_4357 < _4356)) )
                  {
                    {
                      if ((_ptr__4340[safe_add( _4338,_ptr__4339[safe_add( _4341,_4359 )] )] <= _ptr__4340[safe_add( _4338,_ptr__4339[safe_add( _4341,_4357 )] )]))
                      {
                        {
                          _ptr__4339[safe_add( _4342,_4353 )] = _ptr__4339[safe_add( _4341,_4359 )];
                          ++ _4353;
                          ++ _4359;
                        }
                      }
                      else
                      {
                        {
                          _ptr__4339[safe_add( _4342,_4353 )] = _ptr__4339[safe_add( _4341,_4357 )];
                          ++ _4353;
                          ++ _4357;
                        }
                      }
                    }
                  }
                  while ( (_4359 < _4358) )
                  {
                    {
                      _ptr__4339[safe_add( _4342,_4353 )] = _ptr__4339[safe_add( _4341,_4359 )];
                      ++ _4353;
                      ++ _4359;
                    }
                  }
                  while ( (_4357 < _4356) )
                  {
                    {
                      _ptr__4339[safe_add( _4342,_4353 )] = _ptr__4339[safe_add( _4341,_4357 )];
                      ++ _4353;
                      ++ _4357;
                    }
                  }
                }
              }
              int _10629 = _4353;
              int _10630 = _4345;
              for (int _4360 = _10629; _4360 < _10630; ++_4360)
              {
                {
                  _ptr__4339[safe_add( _4342,_4360 )] = _ptr__4339[safe_add( _4341,_4360 )];
                }
              }
              int _4361 = _4341;
              _4341 = _4342;
              _4342 = _4361;
              _4349 *= (int)2;
            }
          }
        }
      }
      {}
      int _10631 = _4346;
      int _10632 = _4345;
      for (int _4362 = _10631; _4362 < _10632; ++_4362)
      {
        {
          _ptr__4339[safe_add( _4333,_4362 )] = _ptr__4339[safe_add( _4341,_4362 )];
        }
      }
    }
  }
}
void mosek::fusion::ExprCompress :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4363,monty::rc_ptr< ::mosek::fusion::WorkStack > _4364,monty::rc_ptr< ::mosek::fusion::WorkStack > _4365) { mosek::fusion::p_ExprCompress::_get_impl(this)->eval(_4363,_4364,_4365); }void mosek::fusion::p_ExprCompress::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4363,monty::rc_ptr< ::mosek::fusion::WorkStack > _4364,monty::rc_ptr< ::mosek::fusion::WorkStack > _4365){
  expr->eval(_4364,_4363,_4365);
  _4364->pop_expr();
  int _4366 = mosek::fusion::p_WorkStack::_get_impl(_4364)->nd;
  int _4367 = mosek::fusion::p_WorkStack::_get_impl(_4364)->shape_base;
  int _4368 = mosek::fusion::p_WorkStack::_get_impl(_4364)->nelem;
  int _4369 = mosek::fusion::p_WorkStack::_get_impl(_4364)->nnz;
  bool _4370 = mosek::fusion::p_WorkStack::_get_impl(_4364)->hassp;
  int _4371 = mosek::fusion::p_WorkStack::_get_impl(_4364)->ncodeatom;
  int _4372 = mosek::fusion::p_WorkStack::_get_impl(_4364)->ptr_base;
  int _4373 = mosek::fusion::p_WorkStack::_get_impl(_4364)->sp_base;
  int _4374 = mosek::fusion::p_WorkStack::_get_impl(_4364)->nidxs_base;
  int _4375 = mosek::fusion::p_WorkStack::_get_impl(_4364)->cof_base;
  int _4376 = mosek::fusion::p_WorkStack::_get_impl(_4364)->code_base;
  int _4377 = mosek::fusion::p_WorkStack::_get_impl(_4364)->codeptr_base;
  int _4378 = mosek::fusion::p_WorkStack::_get_impl(_4364)->cconst_base;
  std::shared_ptr< monty::ndarray< int,1 > > _4379 = mosek::fusion::p_WorkStack::_get_impl(_4364)->i32;
  _checked_ptr_1<int> _ptr__4379(_4379 ? _4379->raw() : nullptr,_4379 ? _4379->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _4380 = mosek::fusion::p_WorkStack::_get_impl(_4364)->i64;
  _checked_ptr_1<long long> _ptr__4380(_4380 ? _4380->raw() : nullptr,_4380 ? _4380->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _4381 = mosek::fusion::p_WorkStack::_get_impl(_4364)->f64;
  _checked_ptr_1<double> _ptr__4381(_4381 ? _4381->raw() : nullptr,_4381 ? _4381->size(0) : 0);
  bool _4382 = true;
  {
    std::shared_ptr< monty::ndarray< int,1 > > _4383 = mosek::fusion::p_WorkStack::_get_impl(_4365)->i32;
    _checked_ptr_1<int> _ptr__4383(_4383 ? _4383->raw() : nullptr,_4383 ? _4383->size(0) : 0);
    std::shared_ptr< monty::ndarray< long long,1 > > _4384 = mosek::fusion::p_WorkStack::_get_impl(_4365)->i64;
    _checked_ptr_1<long long> _ptr__4384(_4384 ? _4384->raw() : nullptr,_4384 ? _4384->size(0) : 0);
    std::shared_ptr< monty::ndarray< double,1 > > _4385 = mosek::fusion::p_WorkStack::_get_impl(_4365)->f64;
    _checked_ptr_1<double> _ptr__4385(_4385 ? _4385->raw() : nullptr,_4385 ? _4385->size(0) : 0);
    int _10633 = (int)0;
    int _10634 = _4368;
    for (int _4386 = _10633; _4386 < _10634; ++_4386)
    {
      {
        int _10635 = _ptr__4379[safe_add( _4372,_4386 )];
        int _10636 = (_ptr__4379[safe_add( safe_add( _4372,_4386 ),(int)1 )] - (int)1);
        for (int _4387 = _10635; _4387 < _10636; ++_4387)
        {
          {
            _4382 = (_4382 && (_ptr__4380[safe_add( _4374,_4387 )] < _ptr__4380[safe_add( safe_add( _4374,_4387 ),(int)1 )]));
          }
        }
      }
    }
    if (_4382)
    {
      {
        if ((_4371 > (int)0))
        {
          {
            int _10637 = (int)0;
            int _10638 = _4369;
            for (int _4388 = _10637; _4388 < _10638; ++_4388)
            {
              {
                _4382 = (_4382 && ((!((_ptr__4381[safe_add( _4375,_4388 )] >= (0.0 - eps)) && ((0.0 + eps) >= _ptr__4381[safe_add( _4375,_4388 )]))) || (((_ptr__4379[safe_add( safe_add( _4377,_4388 ),(int)1 )] - _ptr__4379[safe_add( _4377,_4388 )]) == (int)0) || (!(((_ptr__4379[safe_add( safe_add( _4377,_4388 ),(int)1 )] - _ptr__4379[safe_add( _4377,_4388 )]) == (int)1) && ((_ptr__4379[safe_add( _4376,_ptr__4379[safe_add( _4377,_4388 )] )] == 2) && (!((_ptr__4381[safe_add( _4378,_ptr__4379[safe_add( _4377,_4388 )] )] <= 0.0) && (_ptr__4381[safe_add( _4378,_ptr__4383[safe_add( _4377,_4388 )] )] >= 0.0)))))))));
              }
            }
          }
        }
        else
        {
          {
            int _10639 = (int)0;
            int _10640 = _4369;
            for (int _4389 = _10639; _4389 < _10640; ++_4389)
            {
              {
                _4382 = (_4382 && (!((_ptr__4381[safe_add( _4375,_4389 )] <= (0.0 - eps)) && ((0.0 + eps) <= _ptr__4381[safe_add( _4375,_4389 )]))));
              }
            }
          }
        }
      }
    }
    {}
  }
  if (_4382)
  {
    {
      _4363->alloc_expr(_4366,_4368,_4369,_4370,_4371);
      int _4390 = mosek::fusion::p_WorkStack::_get_impl(_4363)->ptr_base;
      int _4391 = mosek::fusion::p_WorkStack::_get_impl(_4363)->nidxs_base;
      int _4392 = mosek::fusion::p_WorkStack::_get_impl(_4363)->sp_base;
      int _4393 = mosek::fusion::p_WorkStack::_get_impl(_4363)->cof_base;
      int _4394 = mosek::fusion::p_WorkStack::_get_impl(_4363)->shape_base;
      int _4395 = mosek::fusion::p_WorkStack::_get_impl(_4363)->code_base;
      int _4396 = mosek::fusion::p_WorkStack::_get_impl(_4363)->codeptr_base;
      int _4397 = mosek::fusion::p_WorkStack::_get_impl(_4363)->cconst_base;
      std::shared_ptr< monty::ndarray< int,1 > > _4398 = mosek::fusion::p_WorkStack::_get_impl(_4363)->i32;
      _checked_ptr_1<int> _ptr__4398(_4398 ? _4398->raw() : nullptr,_4398 ? _4398->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _4399 = mosek::fusion::p_WorkStack::_get_impl(_4363)->i64;
      _checked_ptr_1<long long> _ptr__4399(_4399 ? _4399->raw() : nullptr,_4399 ? _4399->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _4400 = mosek::fusion::p_WorkStack::_get_impl(_4363)->f64;
      _checked_ptr_1<double> _ptr__4400(_4400 ? _4400->raw() : nullptr,_4400 ? _4400->size(0) : 0);
      {
        int _10641 = (int)0;
        int _10642 = _4366;
        for (int _4401 = _10641; _4401 < _10642; ++_4401)
        {
          {
            _ptr__4398[safe_add( _4394,_4401 )] = _ptr__4379[safe_add( _4367,_4401 )];
          }
        }
        int _10643 = (int)0;
        int _10644 = safe_add( _4368,(int)1 );
        for (int _4402 = _10643; _4402 < _10644; ++_4402)
        {
          {
            _ptr__4398[safe_add( _4390,_4402 )] = _ptr__4379[safe_add( _4372,_4402 )];
          }
        }
        int _10645 = (int)0;
        int _10646 = _4369;
        for (int _4403 = _10645; _4403 < _10646; ++_4403)
        {
          {
            _ptr__4399[safe_add( _4391,_4403 )] = _ptr__4380[safe_add( _4374,_4403 )];
          }
        }
        int _10647 = (int)0;
        int _10648 = _4369;
        for (int _4404 = _10647; _4404 < _10648; ++_4404)
        {
          {
            _ptr__4400[safe_add( _4393,_4404 )] = _ptr__4381[safe_add( _4375,_4404 )];
          }
        }
        if (_4370)
        {
          {
            int _10649 = (int)0;
            int _10650 = _4368;
            for (int _4405 = _10649; _4405 < _10650; ++_4405)
            {
              {
                _ptr__4399[safe_add( _4392,_4405 )] = _ptr__4380[safe_add( _4373,_4405 )];
              }
            }
          }
        }
        {}
        if ((_4371 > (int)0))
        {
          {
            int _10651 = (int)0;
            int _10652 = _4371;
            for (int _4406 = _10651; _4406 < _10652; ++_4406)
            {
              {
                _ptr__4398[safe_add( _4395,_4406 )] = _ptr__4379[safe_add( _4376,_4406 )];
              }
            }
            int _10653 = (int)0;
            int _10654 = _4371;
            for (int _4407 = _10653; _4407 < _10654; ++_4407)
            {
              {
                _ptr__4400[safe_add( _4397,_4407 )] = _ptr__4381[safe_add( _4378,_4407 )];
              }
            }
            int _10655 = (int)0;
            int _10656 = safe_add( _4369,(int)1 );
            for (int _4408 = _10655; _4408 < _10656; ++_4408)
            {
              {
                _ptr__4398[safe_add( _4396,_4408 )] = _ptr__4379[safe_add( _4377,_4408 )];
              }
            }
          }
        }
        {}
      }
      if ((_4371 > (int)0))
      {
        {
          if ((_ptr__4398[safe_add( _4396,_4369 )] != _4371))
          {
            {
              throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Incorrect codeptr"));
            }
          }
          {}
        }
      }
      {}
    }
  }
  else
  {
    {
      int _4409 = _4365->alloci32(_4369);
      ::mosek::fusion::p_ExprCompress::arg_sort(_4364,_4365,_4409,_4368,_4369,_4372,_4374);
      std::shared_ptr< monty::ndarray< int,1 > > _4410 = mosek::fusion::p_WorkStack::_get_impl(_4365)->i32;
      _checked_ptr_1<int> _ptr__4410(_4410 ? _4410->raw() : nullptr,_4410 ? _4410->size(0) : 0);
      int _4411 = (int)0;
      int _4412 = _4371;
      {
        std::shared_ptr< monty::ndarray< int,1 > > _4413 = mosek::fusion::p_WorkStack::_get_impl(_4363)->i32;
        _checked_ptr_1<int> _ptr__4413(_4413 ? _4413->raw() : nullptr,_4413 ? _4413->size(0) : 0);
        int _10657 = (int)0;
        int _10658 = _4368;
        for (int _4414 = _10657; _4414 < _10658; ++_4414)
        {
          {
            int _4415 = _ptr__4379[safe_add( safe_add( _4372,_4414 ),(int)1 )];
            int _4416 = _ptr__4379[safe_add( _4372,_4414 )];
            if ((_4416 < _4415))
            {
              {
                int _4417 = _4416;
                while ( (_4417 < _4415) )
                {
                  {
                    double _4418 = 0.0;
                    bool _4419 = false;
                    long long _4420 = _ptr__4380[safe_add( _4374,_ptr__4410[safe_add( _4409,_4417 )] )];
                    int _4421 = _4417;
                    while ( ((_4417 < _4415) && (_ptr__4380[safe_add( _4374,_ptr__4410[safe_add( _4409,_4417 )] )] == _4420)) )
                    {
                      {
                        double _4422 = _ptr__4381[safe_add( _4375,_ptr__4410[safe_add( _4409,_4417 )] )];
                        _4419 = (_4419 || (!((_4422 <= 0.0) && (_4422 >= 0.0))));
                        _4418 += _4422;
                        ++ _4417;
                      }
                    }
                    if ((_4419 || (_4371 > (int)0)))
                    {
                      {
                        ++ _4411;
                        if (((safe_add( _4421,(int)1 ) < _4417) && (_4371 > (int)0)))
                        {
                          {
                            _4412 += (int)1;
                          }
                        }
                        {}
                      }
                    }
                    {}
                  }
                }
              }
            }
            {}
          }
        }
      }
      _4363->alloc_expr(_4366,_4368,_4411,_4370,_4412);
      int _4423 = mosek::fusion::p_WorkStack::_get_impl(_4363)->nidxs_base;
      int _4424 = mosek::fusion::p_WorkStack::_get_impl(_4363)->shape_base;
      int _4425 = mosek::fusion::p_WorkStack::_get_impl(_4363)->sp_base;
      int _4426 = mosek::fusion::p_WorkStack::_get_impl(_4363)->cof_base;
      int _4427 = mosek::fusion::p_WorkStack::_get_impl(_4363)->ptr_base;
      int _4428 = mosek::fusion::p_WorkStack::_get_impl(_4363)->code_base;
      int _4429 = mosek::fusion::p_WorkStack::_get_impl(_4363)->codeptr_base;
      int _4430 = mosek::fusion::p_WorkStack::_get_impl(_4363)->cconst_base;
      std::shared_ptr< monty::ndarray< int,1 > > _4431 = mosek::fusion::p_WorkStack::_get_impl(_4363)->i32;
      _checked_ptr_1<int> _ptr__4431(_4431 ? _4431->raw() : nullptr,_4431 ? _4431->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _4432 = mosek::fusion::p_WorkStack::_get_impl(_4363)->i64;
      _checked_ptr_1<long long> _ptr__4432(_4432 ? _4432->raw() : nullptr,_4432 ? _4432->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _4433 = mosek::fusion::p_WorkStack::_get_impl(_4363)->f64;
      _checked_ptr_1<double> _ptr__4433(_4433 ? _4433->raw() : nullptr,_4433 ? _4433->size(0) : 0);
      {
        int _10659 = (int)0;
        int _10660 = _4366;
        for (int _4434 = _10659; _4434 < _10660; ++_4434)
        {
          {
            _ptr__4431[safe_add( _4424,_4434 )] = _ptr__4379[safe_add( _4367,_4434 )];
          }
        }
        int _10661 = (int)0;
        int _10662 = _4369;
        for (int _4435 = _10661; _4435 < _10662; ++_4435)
        {
          {
            _ptr__4433[safe_add( _4426,_4435 )] = 0.0;
          }
        }
        if (_4370)
        {
          {
            int _10663 = (int)0;
            int _10664 = _4368;
            for (int _4436 = _10663; _4436 < _10664; ++_4436)
            {
              {
                _ptr__4432[safe_add( _4425,_4436 )] = _ptr__4380[safe_add( _4373,_4436 )];
              }
            }
          }
        }
        {}
        int _4437 = (int)0;
        int _4438 = (int)0;
        {
          _ptr__4431[_4427] = (int)0;
          if ((_4412 > (int)0))
          {
            {
              _ptr__4431[_4429] = (int)0;
            }
          }
          {}
          int _10665 = (int)0;
          int _10666 = _4368;
          for (int _4439 = _10665; _4439 < _10666; ++_4439)
          {
            {
              int _4440 = _ptr__4379[safe_add( safe_add( _4372,_4439 ),(int)1 )];
              int _4441 = _ptr__4379[safe_add( _4372,_4439 )];
              if ((_4441 < _4440))
              {
                {
                  int _4442 = _4441;
                  int _4443 = _4442;
                  while ( (_4442 < _4440) )
                  {
                    {
                      double _4444 = 0.0;
                      bool _4445 = false;
                      int _4446 = safe_add( _4442,(int)1 );
                      int _4447 = _4442;
                      long long _4448 = _ptr__4380[safe_add( _4374,_ptr__4410[safe_add( _4409,_4447 )] )];
                      while ( ((_4446 < _4440) && (_ptr__4380[safe_add( _4374,_ptr__4410[safe_add( _4409,_4446 )] )] == _4448)) )
                      {
                        {
                          ++ _4446;
                        }
                      }
                      if ((_4371 > (int)0))
                      {
                        {
                          while ( (_4442 < _4446) )
                          {
                            {
                              double _4449 = _ptr__4381[safe_add( _4375,_ptr__4410[safe_add( _4409,_4442 )] )];
                              _4445 = (_4445 || (!((_4449 <= 0.0) && (_4449 >= 0.0))));
                              _4444 += _4449;
                              int _10667 = _ptr__4379[safe_add( _4377,_ptr__4410[safe_add( _4409,_4442 )] )];
                              int _10668 = _ptr__4379[safe_add( safe_add( _4377,_ptr__4410[safe_add( _4409,_4442 )] ),(int)1 )];
                              for (int _4450 = _10667; _4450 < _10668; ++_4450)
                              {
                                {
                                  _ptr__4431[safe_add( _4428,_4438 )] = _ptr__4379[safe_add( _4376,_4450 )];
                                  _ptr__4433[safe_add( _4430,_4438 )] = _ptr__4381[safe_add( _4378,_4450 )];
                                  ++ _4438;
                                }
                              }
                              ++ _4442;
                            }
                          }
                          if (((_4446 - _4447) > (int)1))
                          {
                            {
                              _ptr__4431[safe_add( _4428,_4438 )] = 8;
                              _ptr__4433[safe_add( _4430,_4438 )] = (_4446 - _4447);
                              ++ _4438;
                            }
                          }
                          {}
                          _ptr__4431[safe_add( safe_add( _4429,_4437 ),(int)1 )] = _4438;
                          _ptr__4432[safe_add( _4423,_4437 )] = _4448;
                          _ptr__4433[safe_add( _4426,_4437 )] = _4444;
                          ++ _4437;
                        }
                      }
                      else
                      {
                        {
                          while ( (_4442 < _4446) )
                          {
                            {
                              double _4451 = _ptr__4381[safe_add( _4375,_ptr__4410[safe_add( _4409,_4442 )] )];
                              _4445 = (_4445 || (!((_4451 <= 0.0) && (_4451 >= 0.0))));
                              _4444 += _4451;
                              ++ _4442;
                            }
                          }
                          if (_4445)
                          {
                            {
                              _ptr__4432[safe_add( _4423,_4437 )] = _4448;
                              _ptr__4433[safe_add( _4426,_4437 )] = _4444;
                              ++ _4437;
                            }
                          }
                          {}
                        }
                      }
                    }
                  }
                }
              }
              {}
              _ptr__4431[safe_add( safe_add( _4427,_4439 ),(int)1 )] = _4437;
            }
          }
        }
        if ((_4412 != _4438))
        {
          {
            throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Invalid ncodeatom"));
          }
        }
        {}
        if ((_4437 != _4411))
        {
          {
            throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Invalid nnz"));
          }
        }
        {}
        if ((_4411 != _ptr__4431[safe_add( _4427,_4368 )]))
        {
          {
            throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Invalid ptr"));
          }
        }
        {}
      }
      if ((_4412 > (int)0))
      {
        {
          if ((_ptr__4431[safe_add( _4429,_4411 )] != _4412))
          {
            {
              throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Incorrect codeptr"));
            }
          }
          {}
        }
      }
      {}
    }
  }
  _4365->clear();
}
std::string mosek::fusion::ExprCompress :: toString() { return mosek::fusion::p_ExprCompress::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprCompress::toString(){
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprCompress("))->__mosek_2fusion_2Utils_2StringBuffer__a(expr->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
void mosek::fusion::p_ExprCompress::destroy(){expr.reset();}void mosek::fusion::ExprCompress::destroy() { mosek::fusion::p_ExprCompress::_get_impl(this)->destroy(); }mosek::fusion::ExprConst::ExprConst(mosek::fusion::p_ExprConst *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprConst()" << this << std::endl; */ }mosek::fusion::ExprConst::~ExprConst() {  /* std::cout << "~ExprConst()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprConst::p_ExprConst  (::mosek::fusion::ExprConst * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprConst::t mosek::fusion::p_ExprConst::_new_ExprConst  (std::shared_ptr< monty::ndarray< int,1 > > _4452,    std::shared_ptr< monty::ndarray< long long,1 > > _4453,    std::shared_ptr< monty::ndarray< double,1 > > _4454){ return new mosek::fusion::ExprConst(_4452,_4453,_4454); }mosek::fusion::ExprConst::ExprConst  (std::shared_ptr< monty::ndarray< int,1 > > _4452,    std::shared_ptr< monty::ndarray< long long,1 > > _4453,    std::shared_ptr< monty::ndarray< double,1 > > _4454) :    ExprConst(new mosek::fusion::p_ExprConst(this)){ mosek::fusion::p_ExprConst::_get_impl(this)->_initialize(_4452,_4453,_4454); }void mosek::fusion::p_ExprConst::_initialize  (std::shared_ptr< monty::ndarray< int,1 > > _4452,    std::shared_ptr< monty::ndarray< long long,1 > > _4453,    std::shared_ptr< monty::ndarray< double,1 > > _4454){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__4452(_4452 ? _4452->raw() : nullptr, _4452 ? _4452->size(0) : 0);
    _checked_ptr_1<long long> _ptr__4453(_4453 ? _4453->raw() : nullptr, _4453 ? _4453->size(0) : 0);
    _checked_ptr_1<double> _ptr__4454(_4454 ? _4454->raw() : nullptr, _4454 ? _4454->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(_4452);
    mosek::fusion::p_ExprConst::_get_impl(::mosek::fusion::ExprConst::t(_pubthis))->bfix = ::mosek::fusion::Utils::Tools::arraycopy(_4454);
    std::shared_ptr< monty::ndarray< long long,1 > > _10669;
    bool _10670 = (NULL != _4453.get());
    if (_10670)
    {
      _10669 = ::mosek::fusion::Utils::Tools::arraycopy(_4453);
    }
    else
    {
      _10669 = nullptr;
    }
    mosek::fusion::p_ExprConst::_get_impl(::mosek::fusion::ExprConst::t(_pubthis))->sparsity = _10669;
    ::mosek::fusion::p_ExprConst::validate(_4452,_4454,_4453);
  }
}mosek::fusion::ExprConst::t mosek::fusion::p_ExprConst::_new_ExprConst  (std::shared_ptr< monty::ndarray< int,1 > > _4455,    std::shared_ptr< monty::ndarray< long long,1 > > _4456,    double _4457){ return new mosek::fusion::ExprConst(_4455,_4456,_4457); }mosek::fusion::ExprConst::ExprConst  (std::shared_ptr< monty::ndarray< int,1 > > _4455,    std::shared_ptr< monty::ndarray< long long,1 > > _4456,    double _4457) :    ExprConst(new mosek::fusion::p_ExprConst(this)){ mosek::fusion::p_ExprConst::_get_impl(this)->_initialize(_4455,_4456,_4457); }void mosek::fusion::p_ExprConst::_initialize  (std::shared_ptr< monty::ndarray< int,1 > > _4455,    std::shared_ptr< monty::ndarray< long long,1 > > _4456,    double _4457){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__4455(_4455 ? _4455->raw() : nullptr, _4455 ? _4455->size(0) : 0);
    _checked_ptr_1<long long> _ptr__4456(_4456 ? _4456->raw() : nullptr, _4456 ? _4456->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(_4455);
    long long _10671;
    bool _10672 = (NULL == _4456.get());
    if (_10672)
    {
      _10671 = ::mosek::fusion::p_Set::size(_4455);
    }
    else
    {
      _10671 = (int)((_4456)->size(0));
    }
    long long _4458 = _10671;
    std::vector<double> _10673;
    for (long long _4459 = (int)0, _10674 = _4458; _4459 < _10674 ; ++_4459)
    {
      _10673.push_back(_4457);
    }
    auto _10675 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_10673.size()),_10673.begin(),_10673.end()));
    mosek::fusion::p_ExprConst::_get_impl(::mosek::fusion::ExprConst::t(_pubthis))->bfix = _10675;
    std::shared_ptr< monty::ndarray< long long,1 > > _10676;
    bool _10677 = (NULL != _4456.get());
    if (_10677)
    {
      _10676 = ::mosek::fusion::Utils::Tools::arraycopy(_4456);
    }
    else
    {
      _10676 = nullptr;
    }
    mosek::fusion::p_ExprConst::_get_impl(::mosek::fusion::ExprConst::t(_pubthis))->sparsity = _10676;
    ::mosek::fusion::p_ExprConst::validate(_4455,mosek::fusion::p_ExprConst::_get_impl(::mosek::fusion::ExprConst::t(_pubthis))->bfix,_4456);
  }
}void mosek::fusion::ExprConst :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4460,monty::rc_ptr< ::mosek::fusion::WorkStack > _4461,monty::rc_ptr< ::mosek::fusion::WorkStack > _4462) { mosek::fusion::p_ExprConst::_get_impl(this)->eval(_4460,_4461,_4462); }void mosek::fusion::p_ExprConst::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4460,monty::rc_ptr< ::mosek::fusion::WorkStack > _4461,monty::rc_ptr< ::mosek::fusion::WorkStack > _4462){
  std::shared_ptr< monty::ndarray< int,1 > > _4463 = _pubthis->getShape();
  _checked_ptr_1<int> _ptr__4463(_4463 ? _4463->raw() : nullptr,_4463 ? _4463->size(0) : 0);
  int _4464 = (int)((_4463)->size(0));
  int _4465 = (int)0;
  int _10678 = (int)0;
  int _10679 = (int)((bfix)->size(0));
  for (int _4466 = _10678; _4466 < _10679; ++_4466)
  {
    {
      if ((!((((*bfix)(_4466)) <= 0.0) && (((*bfix)(_4466)) >= 0.0))))
      {
        {
          ++ _4465;
        }
      }
      {}
    }
  }
  int _4467 = (int)((bfix)->size(0));
  bool _4468 = ((NULL != sparsity.get()) && ((int)((sparsity)->size(0)) < ::mosek::fusion::p_Set::size(_4463)));
  _4460->alloc_expr(_4464,_4467,_4465,_4468,(int)0);
  int _4469 = mosek::fusion::p_WorkStack::_get_impl(_4460)->shape_base;
  int _4470 = mosek::fusion::p_WorkStack::_get_impl(_4460)->ptr_base;
  int _4471 = mosek::fusion::p_WorkStack::_get_impl(_4460)->sp_base;
  int _4472 = mosek::fusion::p_WorkStack::_get_impl(_4460)->nidxs_base;
  int _4473 = mosek::fusion::p_WorkStack::_get_impl(_4460)->cof_base;
  std::shared_ptr< monty::ndarray< int,1 > > _4474 = mosek::fusion::p_WorkStack::_get_impl(_4460)->i32;
  _checked_ptr_1<int> _ptr__4474(_4474 ? _4474->raw() : nullptr,_4474 ? _4474->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _4475 = mosek::fusion::p_WorkStack::_get_impl(_4460)->i64;
  _checked_ptr_1<long long> _ptr__4475(_4475 ? _4475->raw() : nullptr,_4475 ? _4475->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _4476 = mosek::fusion::p_WorkStack::_get_impl(_4460)->f64;
  _checked_ptr_1<double> _ptr__4476(_4476 ? _4476->raw() : nullptr,_4476 ? _4476->size(0) : 0);
  int _10680 = (int)0;
  int _10681 = _4464;
  for (int _4477 = _10680; _4477 < _10681; ++_4477)
  {
    {
      _ptr__4474[safe_add( _4469,_4477 )] = _ptr__4463[_4477];
    }
  }
  int _4478 = (int)0;
  _ptr__4474[_4470] = (int)0;
  if (_4468)
  {
    {
      int _10682 = (int)0;
      int _10683 = _4467;
      for (int _4479 = _10682; _4479 < _10683; ++_4479)
      {
        {
          _ptr__4475[safe_add( _4471,_4479 )] = ((*sparsity)(_4479));
        }
      }
    }
  }
  {}
  int _10684 = (int)0;
  int _10685 = _4467;
  for (int _4480 = _10684; _4480 < _10685; ++_4480)
  {
    {
      if ((!((((*bfix)(_4480)) <= 0.0) && (((*bfix)(_4480)) >= 0.0))))
      {
        {
          _ptr__4475[safe_add( _4472,_4478 )] = (int)0;
          _ptr__4476[safe_add( _4473,_4478 )] = ((*bfix)(_4480));
          ++ _4478;
        }
      }
      {}
      _ptr__4474[safe_add( safe_add( _4470,_4480 ),(int)1 )] = _4478;
    }
  }
}
void mosek::fusion::p_ExprConst::validate(std::shared_ptr< monty::ndarray< int,1 > > _4481,std::shared_ptr< monty::ndarray< double,1 > > _4482,std::shared_ptr< monty::ndarray< long long,1 > > _4483){
  _checked_ptr_1<int> _ptr__4481(_4481 ? _4481->raw() : nullptr, _4481 ? _4481->size(0) : 0);
  _checked_ptr_1<double> _ptr__4482(_4482 ? _4482->raw() : nullptr, _4482 ? _4482->size(0) : 0);
  _checked_ptr_1<long long> _ptr__4483(_4483 ? _4483->raw() : nullptr, _4483 ? _4483->size(0) : 0);
  long long _4484 = ::mosek::fusion::p_Set::size(_4481);
  if ((NULL != _4483.get()))
  {
    {
      if (((int)((_4483)->size(0)) != (int)((_4482)->size(0))))
      {
        {
          throw ::mosek::fusion::LengthError(std::string ("Mismatching data lengths"));
        }
      }
      {}
      bool _4485 = false;
      int _10686 = (int)0;
      int _10687 = (int)((_4483)->size(0));
      for (int _4486 = _10686; _4486 < _10687; ++_4486)
      {
        {
          if (((_ptr__4483[_4486] < (int)0) || (_ptr__4483[_4486] >= _4484)))
          {
            {
              _4485 = true;
            }
          }
          {}
        }
      }
      if (_4485)
      {
        {
          throw ::mosek::fusion::IndexError(std::string ("Invalid sparsity index"));
        }
      }
      {}
    }
  }
  else
  {
    {
      if (((int)((_4482)->size(0)) != _4484))
      {
        {
          throw ::mosek::fusion::LengthError(std::string ("Mismatching data length"));
        }
      }
      {}
    }
  }
}
std::string mosek::fusion::ExprConst :: toString() { return mosek::fusion::p_ExprConst::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprConst::toString(){
  return std::string ("ExprConst()");
}
void mosek::fusion::p_ExprConst::destroy(){sparsity.reset();bfix.reset();}void mosek::fusion::ExprConst::destroy() { mosek::fusion::p_ExprConst::_get_impl(this)->destroy(); }mosek::fusion::ExprPick::ExprPick(mosek::fusion::p_ExprPick *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprPick()" << this << std::endl; */ }mosek::fusion::ExprPick::~ExprPick() {  /* std::cout << "~ExprPick()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprPick::p_ExprPick  (::mosek::fusion::ExprPick * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprPick::t mosek::fusion::p_ExprPick::_new_ExprPick  (monty::rc_ptr< ::mosek::fusion::Expression > _4487,    std::shared_ptr< monty::ndarray< int,2 > > _4488){ return new mosek::fusion::ExprPick(_4487,_4488); }mosek::fusion::ExprPick::ExprPick  (monty::rc_ptr< ::mosek::fusion::Expression > _4487,    std::shared_ptr< monty::ndarray< int,2 > > _4488) :    ExprPick(new mosek::fusion::p_ExprPick(this)){ mosek::fusion::p_ExprPick::_get_impl(this)->_initialize(_4487,_4488); }void mosek::fusion::p_ExprPick::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _4487,    std::shared_ptr< monty::ndarray< int,2 > > _4488){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)((_4488)->size(0)))}));
    std::shared_ptr< monty::ndarray< int,1 > > _4489 = _4487->getShape();
    _checked_ptr_1<int> _ptr__4489(_4489 ? _4489->raw() : nullptr,_4489 ? _4489->size(0) : 0);
    int _4490 = (int)((_4489)->size(0));
    mosek::fusion::p_ExprPick::_get_impl(::mosek::fusion::ExprPick::t(_pubthis))->expr = _4487;
    mosek::fusion::p_ExprPick::_get_impl(::mosek::fusion::ExprPick::t(_pubthis))->idxs = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((_4488)->size(0)))));
    std::shared_ptr< monty::ndarray< long long,1 > > _4491 = mosek::fusion::p_ExprPick::_get_impl(::mosek::fusion::ExprPick::t(_pubthis))->idxs;
    _checked_ptr_1<long long> _ptr__4491(_4491 ? _4491->raw() : nullptr,_4491 ? _4491->size(0) : 0);
    if (((int)((_4488)->size(1)) != _4490))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Mismatching shape and index dimensions"));
      }
    }
    {}
    bool _4492 = false;
    int _10688 = (int)0;
    int _10689 = (int)((_4488)->size(0));
    for (int _4493 = _10688; _4493 < _10689; ++_4493)
    {
      {
        int _10690 = (int)0;
        int _10691 = _4490;
        for (int _4494 = _10690; _4494 < _10691; ++_4494)
        {
          {
            if (((((*_4488)(_4493,_4494)) < (int)0) || (((*_4488)(_4493,_4494)) >= _ptr__4489[_4494])))
            {
              {
                _4492 = true;
              }
            }
            {}
          }
        }
      }
    }
    if (_4492)
    {
      {
        throw ::mosek::fusion::IndexError(std::string ("Pick index out of bounds"));
      }
    }
    {}
    {
      std::shared_ptr< monty::ndarray< long long,1 > > _4495 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_4490)));
      _checked_ptr_1<long long> _ptr__4495(_4495 ? _4495->raw() : nullptr,_4495 ? _4495->size(0) : 0);
      _ptr__4495[(_4490 - (int)1)] = (int)1;
      int _10692 = (int)1;
      int _10693 = _4490;
      for (int _4496 = _10692; _4496 < _10693; ++_4496)
      {
        {
          _ptr__4495[((_4490 - _4496) - (int)1)] = safe_mul( _ptr__4495[(_4490 - _4496)],_ptr__4489[(_4490 - _4496)] );
        }
      }
      int _10694 = (int)0;
      int _10695 = (int)((_4488)->size(0));
      for (int _4497 = _10694; _4497 < _10695; ++_4497)
      {
        {
          long long _4498 = (long long)0;
          int _10696 = (int)0;
          int _10697 = _4490;
          for (int _4499 = _10696; _4499 < _10697; ++_4499)
          {
            {
              _4498 += safe_mul( _ptr__4495[_4499],((*_4488)(_4497,_4499)) );
            }
          }
          _ptr__4491[_4497] = _4498;
        }
      }
    }
  }
}mosek::fusion::ExprPick::t mosek::fusion::p_ExprPick::_new_ExprPick  (monty::rc_ptr< ::mosek::fusion::Expression > _4500,    std::shared_ptr< monty::ndarray< long long,1 > > _4501){ return new mosek::fusion::ExprPick(_4500,_4501); }mosek::fusion::ExprPick::ExprPick  (monty::rc_ptr< ::mosek::fusion::Expression > _4500,    std::shared_ptr< monty::ndarray< long long,1 > > _4501) :    ExprPick(new mosek::fusion::p_ExprPick(this)){ mosek::fusion::p_ExprPick::_get_impl(this)->_initialize(_4500,_4501); }void mosek::fusion::p_ExprPick::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _4500,    std::shared_ptr< monty::ndarray< long long,1 > > _4501){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<long long> _ptr__4501(_4501 ? _4501->raw() : nullptr, _4501 ? _4501->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)((_4501)->size(0)))}));
    mosek::fusion::p_ExprPick::_get_impl(::mosek::fusion::ExprPick::t(_pubthis))->expr = _4500;
    std::shared_ptr< monty::ndarray< int,1 > > _4502 = _4500->getShape();
    _checked_ptr_1<int> _ptr__4502(_4502 ? _4502->raw() : nullptr,_4502 ? _4502->size(0) : 0);
    long long _4503 = ::mosek::fusion::p_Set::size(_4502);
    bool _4504 = false;
    int _10698 = (int)0;
    int _10699 = (int)((_4501)->size(0));
    for (int _4505 = _10698; _4505 < _10699; ++_4505)
    {
      {
        if (((_ptr__4501[_4505] < (int)0) || (_ptr__4501[_4505] >= _4503)))
        {
          {
            _4504 = true;
          }
        }
        {}
      }
    }
    if (_4504)
    {
      {
        throw ::mosek::fusion::IndexError(std::string ("Pick index out of bounds"));
      }
    }
    {}
    mosek::fusion::p_ExprPick::_get_impl(::mosek::fusion::ExprPick::t(_pubthis))->idxs = ::mosek::fusion::Utils::Tools::arraycopy(_4501);
  }
}void mosek::fusion::ExprPick :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4506,monty::rc_ptr< ::mosek::fusion::WorkStack > _4507,monty::rc_ptr< ::mosek::fusion::WorkStack > _4508) { mosek::fusion::p_ExprPick::_get_impl(this)->eval(_4506,_4507,_4508); }void mosek::fusion::p_ExprPick::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4506,monty::rc_ptr< ::mosek::fusion::WorkStack > _4507,monty::rc_ptr< ::mosek::fusion::WorkStack > _4508){
  expr->eval(_4507,_4506,_4508);
  _4507->pop_expr();
  int _4509 = mosek::fusion::p_WorkStack::_get_impl(_4507)->nd;
  int _4510 = mosek::fusion::p_WorkStack::_get_impl(_4507)->shape_base;
  int _4511 = mosek::fusion::p_WorkStack::_get_impl(_4507)->nelem;
  int _4512 = mosek::fusion::p_WorkStack::_get_impl(_4507)->nnz;
  int _4513 = mosek::fusion::p_WorkStack::_get_impl(_4507)->ncodeatom;
  bool _4514 = mosek::fusion::p_WorkStack::_get_impl(_4507)->hassp;
  int _4515 = mosek::fusion::p_WorkStack::_get_impl(_4507)->ptr_base;
  int _4516 = mosek::fusion::p_WorkStack::_get_impl(_4507)->sp_base;
  int _4517 = mosek::fusion::p_WorkStack::_get_impl(_4507)->nidxs_base;
  int _4518 = mosek::fusion::p_WorkStack::_get_impl(_4507)->cof_base;
  int _4519 = mosek::fusion::p_WorkStack::_get_impl(_4507)->code_base;
  int _4520 = mosek::fusion::p_WorkStack::_get_impl(_4507)->codeptr_base;
  int _4521 = mosek::fusion::p_WorkStack::_get_impl(_4507)->cconst_base;
  std::shared_ptr< monty::ndarray< int,1 > > _4522 = mosek::fusion::p_WorkStack::_get_impl(_4507)->i32;
  _checked_ptr_1<int> _ptr__4522(_4522 ? _4522->raw() : nullptr,_4522 ? _4522->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _4523 = mosek::fusion::p_WorkStack::_get_impl(_4507)->i64;
  _checked_ptr_1<long long> _ptr__4523(_4523 ? _4523->raw() : nullptr,_4523 ? _4523->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _4524 = mosek::fusion::p_WorkStack::_get_impl(_4507)->f64;
  _checked_ptr_1<double> _ptr__4524(_4524 ? _4524->raw() : nullptr,_4524 ? _4524->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _4525 = mosek::fusion::p_ExprPick::_get_impl(::mosek::fusion::ExprPick::t(_pubthis))->idxs;
  _checked_ptr_1<long long> _ptr__4525(_4525 ? _4525->raw() : nullptr,_4525 ? _4525->size(0) : 0);
  if ((!_4514))
  {
    {
      int _4526 = (int)((_4525)->size(0));
      int _4527 = (int)1;
      int _4528 = (int)0;
      int _4529 = (int)0;
      int _10700 = (int)0;
      int _10701 = (int)((_4525)->size(0));
      for (int _4530 = _10700; _4530 < _10701; ++_4530)
      {
        {
          _4528 += (_ptr__4522[safe_add( safe_add( _4515,_ptr__4525[_4530] ),(int)1 )] - _ptr__4522[safe_add( _4515,_ptr__4525[_4530] )]);
          if ((_4513 > (int)0))
          {
            {
              _4529 += (_ptr__4522[safe_add( _4520,_ptr__4522[safe_add( safe_add( _4515,_ptr__4525[_4530] ),(int)1 )] )] - _ptr__4522[safe_add( _4520,_ptr__4522[safe_add( _4515,_ptr__4525[_4530] )] )]);
            }
          }
          {}
        }
      }
      _4506->alloc_expr(_4527,_4526,_4528,false,_4529);
      int _4531 = mosek::fusion::p_WorkStack::_get_impl(_4506)->cof_base;
      int _4532 = mosek::fusion::p_WorkStack::_get_impl(_4506)->nidxs_base;
      int _4533 = mosek::fusion::p_WorkStack::_get_impl(_4506)->ptr_base;
      int _4534 = mosek::fusion::p_WorkStack::_get_impl(_4506)->shape_base;
      int _4535 = mosek::fusion::p_WorkStack::_get_impl(_4506)->code_base;
      int _4536 = mosek::fusion::p_WorkStack::_get_impl(_4506)->codeptr_base;
      int _4537 = mosek::fusion::p_WorkStack::_get_impl(_4506)->cconst_base;
      {
      }
      std::shared_ptr< monty::ndarray< int,1 > > _4538 = mosek::fusion::p_WorkStack::_get_impl(_4506)->i32;
      _checked_ptr_1<int> _ptr__4538(_4538 ? _4538->raw() : nullptr,_4538 ? _4538->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _4539 = mosek::fusion::p_WorkStack::_get_impl(_4506)->i64;
      _checked_ptr_1<long long> _ptr__4539(_4539 ? _4539->raw() : nullptr,_4539 ? _4539->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _4540 = mosek::fusion::p_WorkStack::_get_impl(_4506)->f64;
      _checked_ptr_1<double> _ptr__4540(_4540 ? _4540->raw() : nullptr,_4540 ? _4540->size(0) : 0);
      _ptr__4538[_4534] = (int)((_4525)->size(0));
      int _4541 = (int)0;
      int _4542 = (int)0;
      _ptr__4538[_4533] = (int)0;
      int _10702 = (int)0;
      int _10703 = (int)((_4525)->size(0));
      for (int _4543 = _10702; _4543 < _10703; ++_4543)
      {
        {
          int _10704 = _ptr__4522[safe_add( _4515,_ptr__4525[_4543] )];
          int _10705 = _ptr__4522[safe_add( safe_add( _4515,_ptr__4525[_4543] ),(int)1 )];
          for (int _4544 = _10704; _4544 < _10705; ++_4544)
          {
            {
              _ptr__4539[safe_add( _4532,_4542 )] = _ptr__4523[safe_add( _4517,_4544 )];
              _ptr__4540[safe_add( _4531,_4542 )] = _ptr__4524[safe_add( _4518,_4544 )];
              if ((_4513 > (int)0))
              {
                {
                  int _10706 = _ptr__4522[safe_add( _4520,_4544 )];
                  int _10707 = _ptr__4522[safe_add( safe_add( _4520,_4544 ),(int)1 )];
                  for (int _4545 = _10706; _4545 < _10707; ++_4545)
                  {
                    {
                      _ptr__4538[safe_add( _4535,_4541 )] = _ptr__4522[safe_add( _4519,_4545 )];
                      _ptr__4540[safe_add( _4537,_4541 )] = _ptr__4524[safe_add( _4521,_4545 )];
                      ++ _4541;
                    }
                  }
                  _ptr__4538[safe_add( safe_add( _4536,_4542 ),(int)1 )] = _4541;
                }
              }
              {}
              ++ _4542;
            }
          }
          _ptr__4538[safe_add( safe_add( _4533,_4543 ),(int)1 )] = _4542;
        }
      }
    }
  }
  else
  {
    {
      int _4546 = (int)1;
      int _4547 = (int)((_4525)->size(0));
      int _4548 = (int)0;
      int _4549 = (int)0;
      std::shared_ptr< monty::ndarray< long long,1 > > _4550 = mosek::fusion::p_ExprPick::_get_impl(::mosek::fusion::ExprPick::t(_pubthis))->idxs;
      _checked_ptr_1<long long> _ptr__4550(_4550 ? _4550->raw() : nullptr,_4550 ? _4550->size(0) : 0);
      int _4551 = _4508->alloci32((int)((_4550)->size(0)));
      std::shared_ptr< monty::ndarray< int,1 > > _4552 = mosek::fusion::p_WorkStack::_get_impl(_4508)->i32;
      _checked_ptr_1<int> _ptr__4552(_4552 ? _4552->raw() : nullptr,_4552 ? _4552->size(0) : 0);
      int _10708 = (int)0;
      int _10709 = (int)((_4550)->size(0));
      for (int _4553 = _10708; _4553 < _10709; ++_4553)
      {
        {
          int _4554 = _4511;
          int _4555 = (int)0;
          while ( (_4555 < (_4554 - (int)1)) )
          {
            {
              int _4556 = (safe_add( safe_add( _4554,_4555 ),(int)1 ) / (int)2);
              if ((_ptr__4523[safe_add( _4516,_4556 )] >= _ptr__4550[_4553]))
              {
                {
                  _4554 = _4556;
                }
              }
              else
              {
                {
                  _4555 = _4556;
                }
              }
            }
          }
          ++ _4555;
          if (((_4555 < _4511) && (_ptr__4523[safe_add( _4516,_4555 )] == _ptr__4550[_4553])))
          {
            {
              _ptr__4552[safe_add( _4551,_4553 )] = _4555;
              _4548 += (_ptr__4522[safe_add( safe_add( _4515,_4555 ),(int)1 )] - _ptr__4522[safe_add( _4515,_4555 )]);
              if ((_4513 > (int)0))
              {
                {
                  _4549 += (_ptr__4522[safe_add( _4520,_ptr__4522[safe_add( safe_add( _4515,_ptr__4550[_4553] ),(int)1 )] )] - _ptr__4522[safe_add( _4520,_ptr__4522[safe_add( _4515,_ptr__4550[_4553] )] )]);
                }
              }
              {}
            }
          }
          else
          {
            {
              _ptr__4552[safe_add( _4551,_4553 )] = (-(int)1);
            }
          }
        }
      }
      _4506->alloc_expr(_4546,_4547,_4548,false,_4549);
      int _4557 = mosek::fusion::p_WorkStack::_get_impl(_4506)->ptr_base;
      int _4558 = mosek::fusion::p_WorkStack::_get_impl(_4506)->nidxs_base;
      int _4559 = mosek::fusion::p_WorkStack::_get_impl(_4506)->cof_base;
      int _4560 = mosek::fusion::p_WorkStack::_get_impl(_4506)->shape_base;
      int _4561 = mosek::fusion::p_WorkStack::_get_impl(_4506)->code_base;
      int _4562 = mosek::fusion::p_WorkStack::_get_impl(_4506)->codeptr_base;
      int _4563 = mosek::fusion::p_WorkStack::_get_impl(_4506)->cconst_base;
      std::shared_ptr< monty::ndarray< int,1 > > _4564 = mosek::fusion::p_WorkStack::_get_impl(_4506)->i32;
      _checked_ptr_1<int> _ptr__4564(_4564 ? _4564->raw() : nullptr,_4564 ? _4564->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _4565 = mosek::fusion::p_WorkStack::_get_impl(_4506)->i64;
      _checked_ptr_1<long long> _ptr__4565(_4565 ? _4565->raw() : nullptr,_4565 ? _4565->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _4566 = mosek::fusion::p_WorkStack::_get_impl(_4506)->f64;
      _checked_ptr_1<double> _ptr__4566(_4566 ? _4566->raw() : nullptr,_4566 ? _4566->size(0) : 0);
      _ptr__4564[_4560] = (int)((_4550)->size(0));
      _ptr__4564[_4557] = (int)0;
      int _4567 = (int)0;
      int _4568 = (int)0;
      int _10710 = (int)0;
      int _10711 = (int)((_4550)->size(0));
      for (int _4569 = _10710; _4569 < _10711; ++_4569)
      {
        {
          if ((_ptr__4552[safe_add( _4551,_4569 )] >= (int)0))
          {
            {
              int _4570 = _ptr__4552[safe_add( _4551,_4569 )];
              int _10712 = _ptr__4522[safe_add( _4515,_4570 )];
              int _10713 = _ptr__4522[safe_add( safe_add( _4515,_4570 ),(int)1 )];
              for (int _4571 = _10712; _4571 < _10713; ++_4571)
              {
                {
                  _ptr__4565[safe_add( _4558,_4568 )] = _ptr__4523[safe_add( _4517,_4571 )];
                  _ptr__4566[safe_add( _4559,_4568 )] = _ptr__4524[safe_add( _4518,_4571 )];
                  if ((_4513 > (int)0))
                  {
                    {
                      int _10714 = _ptr__4522[safe_add( _4520,_4571 )];
                      int _10715 = _ptr__4522[safe_add( safe_add( _4520,_4571 ),(int)1 )];
                      for (int _4572 = _10714; _4572 < _10715; ++_4572)
                      {
                        {
                          _ptr__4564[safe_add( _4561,_4567 )] = _ptr__4522[safe_add( _4519,_4572 )];
                          _ptr__4566[safe_add( _4563,_4567 )] = _ptr__4524[safe_add( _4521,_4572 )];
                          ++ _4567;
                        }
                      }
                      _ptr__4564[safe_add( safe_add( _4562,_4568 ),(int)1 )] = _4567;
                    }
                  }
                  {}
                  ++ _4568;
                }
              }
            }
          }
          {}
          _ptr__4564[safe_add( safe_add( _4557,_4569 ),(int)1 )] = _4568;
        }
      }
    }
  }
}
std::string mosek::fusion::ExprPick :: toString() { return mosek::fusion::p_ExprPick::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprPick::toString(){
  return std::string ("ExprPick()");
}
void mosek::fusion::p_ExprPick::destroy(){idxs.reset();expr.reset();}void mosek::fusion::ExprPick::destroy() { mosek::fusion::p_ExprPick::_get_impl(this)->destroy(); }mosek::fusion::ExprSlice::ExprSlice(mosek::fusion::p_ExprSlice *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprSlice()" << this << std::endl; */ }mosek::fusion::ExprSlice::~ExprSlice() {  /* std::cout << "~ExprSlice()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprSlice::p_ExprSlice  (::mosek::fusion::ExprSlice * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprSlice::t mosek::fusion::p_ExprSlice::_new_ExprSlice  (monty::rc_ptr< ::mosek::fusion::Expression > _4573,    std::shared_ptr< monty::ndarray< int,1 > > _4574,    std::shared_ptr< monty::ndarray< int,1 > > _4575){ return new mosek::fusion::ExprSlice(_4573,_4574,_4575); }mosek::fusion::ExprSlice::ExprSlice  (monty::rc_ptr< ::mosek::fusion::Expression > _4573,    std::shared_ptr< monty::ndarray< int,1 > > _4574,    std::shared_ptr< monty::ndarray< int,1 > > _4575) :    ExprSlice(new mosek::fusion::p_ExprSlice(this)){ mosek::fusion::p_ExprSlice::_get_impl(this)->_initialize(_4573,_4574,_4575); }void mosek::fusion::p_ExprSlice::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _4573,    std::shared_ptr< monty::ndarray< int,1 > > _4574,    std::shared_ptr< monty::ndarray< int,1 > > _4575){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__4574(_4574 ? _4574->raw() : nullptr, _4574 ? _4574->size(0) : 0);
    _checked_ptr_1<int> _ptr__4575(_4575 ? _4575->raw() : nullptr, _4575 ? _4575->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(::mosek::fusion::p_ExprSlice::makeShape(_4573->getShape(),_4574,_4575));
    mosek::fusion::p_ExprSlice::_get_impl(::mosek::fusion::ExprSlice::t(_pubthis))->expr = _4573;
    mosek::fusion::p_ExprSlice::_get_impl(::mosek::fusion::ExprSlice::t(_pubthis))->first = _4574;
    mosek::fusion::p_ExprSlice::_get_impl(::mosek::fusion::ExprSlice::t(_pubthis))->last = _4575;
  }
}void mosek::fusion::ExprSlice :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4576,monty::rc_ptr< ::mosek::fusion::WorkStack > _4577,monty::rc_ptr< ::mosek::fusion::WorkStack > _4578) { mosek::fusion::p_ExprSlice::_get_impl(this)->eval(_4576,_4577,_4578); }void mosek::fusion::p_ExprSlice::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4576,monty::rc_ptr< ::mosek::fusion::WorkStack > _4577,monty::rc_ptr< ::mosek::fusion::WorkStack > _4578){
  expr->eval(_4577,_4576,_4578);
  _4577->pop_expr();
  int _4579 = mosek::fusion::p_WorkStack::_get_impl(_4577)->nd;
  int _4580 = mosek::fusion::p_WorkStack::_get_impl(_4577)->nelem;
  int _4581 = mosek::fusion::p_WorkStack::_get_impl(_4577)->nnz;
  int _4582 = mosek::fusion::p_WorkStack::_get_impl(_4577)->ncodeatom;
  bool _4583 = mosek::fusion::p_WorkStack::_get_impl(_4577)->hassp;
  int _4584 = mosek::fusion::p_WorkStack::_get_impl(_4577)->shape_base;
  int _4585 = mosek::fusion::p_WorkStack::_get_impl(_4577)->ptr_base;
  int _4586 = mosek::fusion::p_WorkStack::_get_impl(_4577)->sp_base;
  int _4587 = mosek::fusion::p_WorkStack::_get_impl(_4577)->nidxs_base;
  int _4588 = mosek::fusion::p_WorkStack::_get_impl(_4577)->cof_base;
  int _4589 = mosek::fusion::p_WorkStack::_get_impl(_4577)->code_base;
  int _4590 = mosek::fusion::p_WorkStack::_get_impl(_4577)->codeptr_base;
  int _4591 = mosek::fusion::p_WorkStack::_get_impl(_4577)->cconst_base;
  std::shared_ptr< monty::ndarray< int,1 > > _4592 = mosek::fusion::p_WorkStack::_get_impl(_4577)->i32;
  _checked_ptr_1<int> _ptr__4592(_4592 ? _4592->raw() : nullptr,_4592 ? _4592->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _4593 = mosek::fusion::p_WorkStack::_get_impl(_4577)->i64;
  _checked_ptr_1<long long> _ptr__4593(_4593 ? _4593->raw() : nullptr,_4593 ? _4593->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _4594 = mosek::fusion::p_WorkStack::_get_impl(_4577)->f64;
  _checked_ptr_1<double> _ptr__4594(_4594 ? _4594->raw() : nullptr,_4594 ? _4594->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _4595 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_4579)));
  _checked_ptr_1<long long> _ptr__4595(_4595 ? _4595->raw() : nullptr,_4595 ? _4595->size(0) : 0);
  _ptr__4595[(_4579 - (int)1)] = (int)1;
  int _10716 = (int)1;
  int _10717 = _4579;
  for (int _4596 = _10716; _4596 < _10717; ++_4596)
  {
    {
      _ptr__4595[((_4579 - _4596) - (int)1)] = safe_mul( _ptr__4595[(_4579 - _4596)],_ptr__4592[(safe_add( _4584,_4579 ) - _4596)] );
    }
  }
  int _4597 = (int)0;
  int _4598 = (int)0;
  int _4599 = (int)0;
  if (_4583)
  {
    {
      int _10718 = (int)0;
      int _10719 = _4580;
      for (int _4600 = _10718; _4600 < _10719; ++_4600)
      {
        {
          bool _4601 = true;
          int _10720 = (int)0;
          int _10721 = _4579;
          for (int _4602 = _10720; _4602 < _10721; ++_4602)
          {
            {
              long long _4603 = ((_ptr__4593[safe_add( _4586,_4600 )] / _ptr__4595[_4602]) % _ptr__4592[safe_add( _4584,_4602 )]);
              _4601 = (_4601 && ((_4603 >= ((*first)(_4602))) && (_4603 < ((*last)(_4602)))));
            }
          }
          if (_4601)
          {
            {
              _4599 += (_ptr__4592[safe_add( safe_add( _4585,_4600 ),(int)1 )] - _ptr__4592[safe_add( _4585,_4600 )]);
              if ((_4582 > (int)0))
              {
                {
                  _4597 += (_ptr__4592[safe_add( _4590,_ptr__4592[safe_add( safe_add( _4585,_4600 ),(int)1 )] )] - _ptr__4592[safe_add( _4590,_ptr__4592[safe_add( _4585,_4600 )] )]);
                }
              }
              {}
              ++ _4598;
            }
          }
          {}
        }
      }
    }
  }
  else
  {
    {
      _4598 = (int)1;
      int _10722 = (int)0;
      int _10723 = _4579;
      for (int _4604 = _10722; _4604 < _10723; ++_4604)
      {
        {
          _4598 *= (((*last)(_4604)) - ((*first)(_4604)));
        }
      }
      int _10724 = (int)0;
      int _10725 = _4580;
      for (int _4605 = _10724; _4605 < _10725; ++_4605)
      {
        {
          bool _4606 = true;
          int _10726 = (int)0;
          int _10727 = _4579;
          for (int _4607 = _10726; _4607 < _10727; ++_4607)
          {
            {
              long long _4608 = ((_4605 / _ptr__4595[_4607]) % _ptr__4592[safe_add( _4584,_4607 )]);
              _4606 = (_4606 && ((_4608 >= ((*first)(_4607))) && (_4608 < ((*last)(_4607)))));
            }
          }
          if (_4606)
          {
            {
              _4599 += (_ptr__4592[safe_add( safe_add( _4585,_4605 ),(int)1 )] - _ptr__4592[safe_add( _4585,_4605 )]);
              if ((_4582 > (int)0))
              {
                {
                  _4597 += (_ptr__4592[safe_add( _4590,_ptr__4592[safe_add( safe_add( _4585,_4605 ),(int)1 )] )] - _ptr__4592[safe_add( _4590,_ptr__4592[safe_add( _4585,_4605 )] )]);
                }
              }
              {}
            }
          }
          {}
        }
      }
    }
  }
  std::vector<int> _10728;
  for (int _4610 = (int)0, _10729 = _4579; _4610 < _10729 ; ++_4610)
  {
    _10728.push_back((((*last)(_4610)) - ((*first)(_4610))));
  }
  auto _10730 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_10728.size()),_10728.begin(),_10728.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _4609 = _10730;
  _checked_ptr_1<int> _ptr__4609(_4609 ? _4609->raw() : nullptr,_4609 ? _4609->size(0) : 0);
  bool _4611 = (_4598 < ::mosek::fusion::p_Set::size(_4609));
  _4576->alloc_expr(_4579,_4598,_4599,_4611,_4597);
  int _4612 = mosek::fusion::p_WorkStack::_get_impl(_4576)->shape_base;
  int _4613 = mosek::fusion::p_WorkStack::_get_impl(_4576)->cof_base;
  int _4614 = mosek::fusion::p_WorkStack::_get_impl(_4576)->nidxs_base;
  int _10731;
  bool _10732 = _4611;
  if (_10732)
  {
    _10731 = mosek::fusion::p_WorkStack::_get_impl(_4576)->sp_base;
  }
  else
  {
    _10731 = _4576->alloci64(_4598);
  }
  int _4615 = _10731;
  int _4616 = mosek::fusion::p_WorkStack::_get_impl(_4576)->ptr_base;
  int _4617 = mosek::fusion::p_WorkStack::_get_impl(_4576)->code_base;
  int _4618 = mosek::fusion::p_WorkStack::_get_impl(_4576)->codeptr_base;
  int _4619 = mosek::fusion::p_WorkStack::_get_impl(_4576)->cconst_base;
  std::shared_ptr< monty::ndarray< int,1 > > _4620 = mosek::fusion::p_WorkStack::_get_impl(_4576)->i32;
  _checked_ptr_1<int> _ptr__4620(_4620 ? _4620->raw() : nullptr,_4620 ? _4620->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _4621 = mosek::fusion::p_WorkStack::_get_impl(_4576)->i64;
  _checked_ptr_1<long long> _ptr__4621(_4621 ? _4621->raw() : nullptr,_4621 ? _4621->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _4622 = mosek::fusion::p_WorkStack::_get_impl(_4576)->f64;
  _checked_ptr_1<double> _ptr__4622(_4622 ? _4622->raw() : nullptr,_4622 ? _4622->size(0) : 0);
  int _10733 = (int)0;
  int _10734 = _4579;
  for (int _4623 = _10733; _4623 < _10734; ++_4623)
  {
    {
      _ptr__4620[safe_add( _4612,_4623 )] = _ptr__4609[_4623];
    }
  }
  _ptr__4620[_4616] = (int)0;
  if ((_4582 > (int)0))
  {
    {
      _ptr__4620[_4618] = (int)0;
    }
  }
  {}
  std::shared_ptr< monty::ndarray< long long,1 > > _4624 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_4579)));
  _checked_ptr_1<long long> _ptr__4624(_4624 ? _4624->raw() : nullptr,_4624 ? _4624->size(0) : 0);
  _ptr__4624[(_4579 - (int)1)] = (int)1;
  int _10735 = (int)1;
  int _10736 = _4579;
  for (int _4625 = _10735; _4625 < _10736; ++_4625)
  {
    {
      _ptr__4624[((_4579 - _4625) - (int)1)] = safe_mul( _ptr__4624[(_4579 - _4625)],_ptr__4609[(_4579 - _4625)] );
    }
  }
  int _4626 = (int)0;
  int _4627 = (int)0;
  int _4628 = (int)0;
  if (_4583)
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _4629 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4579)));
      _checked_ptr_1<int> _ptr__4629(_4629 ? _4629->raw() : nullptr,_4629 ? _4629->size(0) : 0);
      int _10737 = (int)0;
      int _10738 = _4580;
      for (int _4630 = _10737; _4630 < _10738; ++_4630)
      {
        {
          bool _4631 = true;
          int _10739 = (int)0;
          int _10740 = _4579;
          for (int _4632 = _10739; _4632 < _10740; ++_4632)
          {
            {
              _ptr__4629[_4632] = (int)((_ptr__4593[safe_add( _4586,_4630 )] / _ptr__4595[_4632]) % _ptr__4592[safe_add( _4584,_4632 )]);
              _4631 = (_4631 && ((_ptr__4629[_4632] >= ((*first)(_4632))) && (_ptr__4629[_4632] < ((*last)(_4632)))));
            }
          }
          if (_4631)
          {
            {
              int _10741 = _ptr__4592[safe_add( _4585,_4630 )];
              int _10742 = _ptr__4592[safe_add( safe_add( _4585,_4630 ),(int)1 )];
              for (int _4633 = _10741; _4633 < _10742; ++_4633)
              {
                {
                  _ptr__4621[safe_add( _4614,_4628 )] = _ptr__4593[safe_add( _4587,_4633 )];
                  _ptr__4622[safe_add( _4613,_4628 )] = _ptr__4594[safe_add( _4588,_4633 )];
                  if ((_4582 > (int)0))
                  {
                    {
                      int _10743 = _ptr__4592[safe_add( _4590,_4633 )];
                      int _10744 = _ptr__4592[safe_add( safe_add( _4590,_4633 ),(int)1 )];
                      for (int _4634 = _10743; _4634 < _10744; ++_4634)
                      {
                        {
                          _ptr__4620[safe_add( _4617,_4626 )] = _ptr__4592[safe_add( _4589,_4634 )];
                          _ptr__4622[safe_add( _4619,_4626 )] = _ptr__4594[safe_add( _4591,_4634 )];
                          ++ _4626;
                        }
                      }
                      _ptr__4620[safe_add( safe_add( _4618,_4628 ),(int)1 )] = _4626;
                    }
                  }
                  {}
                  ++ _4628;
                }
              }
              long long _4635 = (long long)0;
              int _10745 = (int)0;
              int _10746 = _4579;
              for (int _4636 = _10745; _4636 < _10746; ++_4636)
              {
                {
                  _4635 += safe_mul( _ptr__4624[_4636],(_ptr__4629[_4636] - ((*first)(_4636))) );
                }
              }
              _ptr__4621[safe_add( _4615,_4627 )] = _4635;
              _ptr__4620[safe_add( safe_add( _4616,_4627 ),(int)1 )] = _4628;
              ++ _4627;
            }
          }
          {}
        }
      }
    }
  }
  else
  {
    {
      int _10747 = (int)0;
      int _10748 = _4580;
      for (int _4637 = _10747; _4637 < _10748; ++_4637)
      {
        {
          bool _4638 = true;
          int _10749 = (int)0;
          int _10750 = _4579;
          for (int _4639 = _10749; _4639 < _10750; ++_4639)
          {
            {
              long long _4640 = ((_4637 / _ptr__4595[_4639]) % _ptr__4592[safe_add( _4584,_4639 )]);
              _4638 = (_4638 && ((_4640 >= ((*first)(_4639))) && (_4640 < ((*last)(_4639)))));
            }
          }
          if (_4638)
          {
            {
              int _10751 = _ptr__4592[safe_add( _4585,_4637 )];
              int _10752 = _ptr__4592[safe_add( safe_add( _4585,_4637 ),(int)1 )];
              for (int _4641 = _10751; _4641 < _10752; ++_4641)
              {
                {
                  _ptr__4621[safe_add( _4614,_4628 )] = _ptr__4593[safe_add( _4587,_4641 )];
                  _ptr__4622[safe_add( _4613,_4628 )] = _ptr__4594[safe_add( _4588,_4641 )];
                  if ((_4582 > (int)0))
                  {
                    {
                      int _10753 = _ptr__4592[safe_add( _4590,_4641 )];
                      int _10754 = _ptr__4592[safe_add( safe_add( _4590,_4641 ),(int)1 )];
                      for (int _4642 = _10753; _4642 < _10754; ++_4642)
                      {
                        {
                          _ptr__4620[safe_add( _4617,_4626 )] = _ptr__4592[safe_add( _4589,_4642 )];
                          _ptr__4622[safe_add( _4619,_4626 )] = _ptr__4594[safe_add( _4591,_4642 )];
                          ++ _4626;
                        }
                      }
                      _ptr__4620[safe_add( safe_add( _4618,_4628 ),(int)1 )] = _4626;
                    }
                  }
                  {}
                  ++ _4628;
                }
              }
              _ptr__4620[safe_add( safe_add( _4616,_4627 ),(int)1 )] = _4628;
              ++ _4627;
            }
          }
          {}
        }
      }
    }
  }
  if ((!_4611))
  {
    {
      _4576->popi64(_4598);
    }
  }
  {}
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_ExprSlice::makeShape(std::shared_ptr< monty::ndarray< int,1 > > _4643,std::shared_ptr< monty::ndarray< int,1 > > _4644,std::shared_ptr< monty::ndarray< int,1 > > _4645){
  _checked_ptr_1<int> _ptr__4643(_4643 ? _4643->raw() : nullptr, _4643 ? _4643->size(0) : 0);
  _checked_ptr_1<int> _ptr__4644(_4644 ? _4644->raw() : nullptr, _4644 ? _4644->size(0) : 0);
  _checked_ptr_1<int> _ptr__4645(_4645 ? _4645->raw() : nullptr, _4645 ? _4645->size(0) : 0);
  if ((((int)((_4643)->size(0)) != (int)((_4644)->size(0))) || ((int)((_4643)->size(0)) != (int)((_4645)->size(0)))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Invalid or mismatching index lengths"));
    }
  }
  {}
  int _10755 = (int)0;
  int _10756 = (int)((_4643)->size(0));
  for (int _4646 = _10755; _4646 < _10756; ++_4646)
  {
    {
      if (((_ptr__4644[_4646] < (int)0) || ((_ptr__4645[_4646] < _ptr__4644[_4646]) || (_ptr__4645[_4646] > _ptr__4643[_4646]))))
      {
        {
          throw ::mosek::fusion::IndexError(std::string ("Slice is out of bounds"));
        }
      }
      {}
    }
  }
  std::vector<int> _10757;
  for (int _4647 = (int)0, _10758 = (int)((_4643)->size(0)); _4647 < _10758 ; ++_4647)
  {
    _10757.push_back((_ptr__4645[_4647] - _ptr__4644[_4647]));
  }
  auto _10759 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_10757.size()),_10757.begin(),_10757.end()));
  return _10759;
}
std::string mosek::fusion::ExprSlice :: toString() { return mosek::fusion::p_ExprSlice::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprSlice::toString(){
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _4648 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprSlice(["))->__mosek_2fusion_2Utils_2StringBuffer__a(((*first)((int)0)))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (":"))->__mosek_2fusion_2Utils_2StringBuffer__a(((*last)((int)0)));
  int _10760 = (int)1;
  int _10761 = (int)((first)->size(0));
  for (int _4649 = _10760; _4649 < _10761; ++_4649)
  {
    {
      _4648->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(((*first)(_4649)))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (":"))->__mosek_2fusion_2Utils_2StringBuffer__a(((*last)(_4649)));
    }
  }
  _4648->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("],"))->__mosek_2fusion_2Utils_2StringBuffer__a(expr->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"));
  return _4648->toString();
}
void mosek::fusion::p_ExprSlice::destroy(){last.reset();first.reset();expr.reset();}void mosek::fusion::ExprSlice::destroy() { mosek::fusion::p_ExprSlice::_get_impl(this)->destroy(); }mosek::fusion::ExprPermuteDims::ExprPermuteDims(mosek::fusion::p_ExprPermuteDims *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprPermuteDims()" << this << std::endl; */ }mosek::fusion::ExprPermuteDims::~ExprPermuteDims() {  /* std::cout << "~ExprPermuteDims()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprPermuteDims::p_ExprPermuteDims  (::mosek::fusion::ExprPermuteDims * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprPermuteDims::t mosek::fusion::p_ExprPermuteDims::_new_ExprPermuteDims  (std::shared_ptr< monty::ndarray< int,1 > > _4650,    monty::rc_ptr< ::mosek::fusion::Expression > _4651){ return new mosek::fusion::ExprPermuteDims(_4650,_4651); }mosek::fusion::ExprPermuteDims::ExprPermuteDims  (std::shared_ptr< monty::ndarray< int,1 > > _4650,    monty::rc_ptr< ::mosek::fusion::Expression > _4651) :    ExprPermuteDims(new mosek::fusion::p_ExprPermuteDims(this)){ mosek::fusion::p_ExprPermuteDims::_get_impl(this)->_initialize(_4650,_4651); }void mosek::fusion::p_ExprPermuteDims::_initialize  (std::shared_ptr< monty::ndarray< int,1 > > _4650,    monty::rc_ptr< ::mosek::fusion::Expression > _4651){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__4650(_4650 ? _4650->raw() : nullptr, _4650 ? _4650->size(0) : 0);
    mosek::fusion::p_ExprPermuteDims::_initialize(_4650,_4651,(int)1);
    std::shared_ptr< monty::ndarray< int,1 > > _4652 = _4651->getShape();
    _checked_ptr_1<int> _ptr__4652(_4652 ? _4652->raw() : nullptr,_4652 ? _4652->size(0) : 0);
    if (((int)((_4650)->size(0)) != (int)((_4652)->size(0))))
    {
      {
        throw ::mosek::fusion::LengthError(std::string ("Invalid dimension permutation"));
      }
    }
    {}
    std::vector<int> _10762;
    for (int _4654 = (int)0, _10763 = (int)((_4650)->size(0)); _4654 < _10763 ; ++_4654)
    {
      _10762.push_back((int)0);
    }
    auto _10764 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_10762.size()),_10762.begin(),_10762.end()));
    std::shared_ptr< monty::ndarray< int,1 > > _4653 = _10764;
    _checked_ptr_1<int> _ptr__4653(_4653 ? _4653->raw() : nullptr,_4653 ? _4653->size(0) : 0);
    int _10765 = (int)0;
    int _10766 = (int)((_4653)->size(0));
    for (int _4655 = _10765; _4655 < _10766; ++_4655)
    {
      {
        if (((_ptr__4650[_4655] < (int)0) || (_ptr__4650[_4655] > (int)((_4652)->size(0)))))
        {
          {
            throw ::mosek::fusion::LengthError(std::string ("Invalid dimension permutation"));
          }
        }
        {}
        ++ _ptr__4653[_ptr__4650[_4655]];
      }
    }
    int _10767 = (int)0;
    int _10768 = (int)((_4653)->size(0));
    for (int _4656 = _10767; _4656 < _10768; ++_4656)
    {
      {
        if (((_ptr__4653[_4656] < (int)1) || (_ptr__4653[_4656] > (int)1)))
        {
          {
            throw ::mosek::fusion::LengthError(std::string ("Invalid dimension permutation"));
          }
        }
        {}
      }
    }
  }
}mosek::fusion::ExprPermuteDims::t mosek::fusion::p_ExprPermuteDims::_new_ExprPermuteDims  (std::shared_ptr< monty::ndarray< int,1 > > _4657,    monty::rc_ptr< ::mosek::fusion::Expression > _4658,    int _4659){ return new mosek::fusion::ExprPermuteDims(_4657,_4658,_4659); }mosek::fusion::ExprPermuteDims::ExprPermuteDims  (std::shared_ptr< monty::ndarray< int,1 > > _4657,    monty::rc_ptr< ::mosek::fusion::Expression > _4658,    int _4659) :    ExprPermuteDims(new mosek::fusion::p_ExprPermuteDims(this)){ mosek::fusion::p_ExprPermuteDims::_get_impl(this)->_initialize(_4657,_4658,_4659); }void mosek::fusion::p_ExprPermuteDims::_initialize  (std::shared_ptr< monty::ndarray< int,1 > > _4657,    monty::rc_ptr< ::mosek::fusion::Expression > _4658,    int _4659){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__4657(_4657 ? _4657->raw() : nullptr, _4657 ? _4657->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(::mosek::fusion::p_ExprPermuteDims::computeshape(_4657,_4658->getShape()));
    mosek::fusion::p_ExprPermuteDims::_get_impl(::mosek::fusion::ExprPermuteDims::t(_pubthis))->expr = _4658;
    dperm = ::mosek::fusion::Utils::Tools::arraycopy(_4657);
  }
}void mosek::fusion::ExprPermuteDims :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4660,monty::rc_ptr< ::mosek::fusion::WorkStack > _4661,monty::rc_ptr< ::mosek::fusion::WorkStack > _4662) { mosek::fusion::p_ExprPermuteDims::_get_impl(this)->eval(_4660,_4661,_4662); }void mosek::fusion::p_ExprPermuteDims::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4660,monty::rc_ptr< ::mosek::fusion::WorkStack > _4661,monty::rc_ptr< ::mosek::fusion::WorkStack > _4662){
  expr->eval(_4661,_4660,_4662);
  _4661->pop_expr();
  int _4663 = mosek::fusion::p_WorkStack::_get_impl(_4661)->nd;
  int _4664 = mosek::fusion::p_WorkStack::_get_impl(_4661)->nelem;
  int _4665 = mosek::fusion::p_WorkStack::_get_impl(_4661)->nnz;
  int _4666 = mosek::fusion::p_WorkStack::_get_impl(_4661)->ncodeatom;
  bool _4667 = mosek::fusion::p_WorkStack::_get_impl(_4661)->hassp;
  int _4668 = mosek::fusion::p_WorkStack::_get_impl(_4661)->shape_base;
  std::shared_ptr< monty::ndarray< long long,1 > > _4669 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_4663)));
  _checked_ptr_1<long long> _ptr__4669(_4669 ? _4669->raw() : nullptr,_4669 ? _4669->size(0) : 0);
  _ptr__4669[(_4663 - (int)1)] = (int)1;
  int _10769 = (int)1;
  int _10770 = _4663;
  for (int _4670 = _10769; _4670 < _10770; ++_4670)
  {
    {
      _ptr__4669[((_4663 - _4670) - (int)1)] = safe_mul( _ptr__4669[(_4663 - _4670)],((*mosek::fusion::p_WorkStack::_get_impl(_4661)->i32)((safe_add( _4668,_4663 ) - _4670))) );
    }
  }
  std::shared_ptr< monty::ndarray< int,1 > > _4671 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4663)));
  _checked_ptr_1<int> _ptr__4671(_4671 ? _4671->raw() : nullptr,_4671 ? _4671->size(0) : 0);
  _ptr__4671[(_4663 - (int)1)] = (int)1;
  int _10771 = (int)1;
  int _10772 = _4663;
  for (int _4672 = _10771; _4672 < _10772; ++_4672)
  {
    {
      _ptr__4671[((_4663 - _4672) - (int)1)] = safe_mul( _ptr__4671[(_4663 - _4672)],((*mosek::fusion::p_WorkStack::_get_impl(_4661)->i32)(safe_add( _4668,((*dperm)((_4663 - _4672))) ))) );
    }
  }
  int _4673 = mosek::fusion::p_WorkStack::_get_impl(_4661)->ptr_base;
  int _4674 = mosek::fusion::p_WorkStack::_get_impl(_4661)->sp_base;
  int _4675 = mosek::fusion::p_WorkStack::_get_impl(_4661)->nidxs_base;
  int _4676 = mosek::fusion::p_WorkStack::_get_impl(_4661)->cof_base;
  int _4677 = mosek::fusion::p_WorkStack::_get_impl(_4661)->code_base;
  int _4678 = mosek::fusion::p_WorkStack::_get_impl(_4661)->codeptr_base;
  int _4679 = mosek::fusion::p_WorkStack::_get_impl(_4661)->cconst_base;
  std::shared_ptr< monty::ndarray< int,1 > > _4680 = mosek::fusion::p_WorkStack::_get_impl(_4661)->i32;
  _checked_ptr_1<int> _ptr__4680(_4680 ? _4680->raw() : nullptr,_4680 ? _4680->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _4681 = mosek::fusion::p_WorkStack::_get_impl(_4661)->i64;
  _checked_ptr_1<long long> _ptr__4681(_4681 ? _4681->raw() : nullptr,_4681 ? _4681->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _4682 = mosek::fusion::p_WorkStack::_get_impl(_4661)->f64;
  _checked_ptr_1<double> _ptr__4682(_4682 ? _4682->raw() : nullptr,_4682 ? _4682->size(0) : 0);
  _4660->alloc_expr(_4663,_4664,_4665,_4667,_4666);
  int _4683 = mosek::fusion::p_WorkStack::_get_impl(_4660)->ptr_base;
  int _4684 = mosek::fusion::p_WorkStack::_get_impl(_4660)->shape_base;
  int _4685 = mosek::fusion::p_WorkStack::_get_impl(_4660)->nidxs_base;
  int _4686 = mosek::fusion::p_WorkStack::_get_impl(_4660)->sp_base;
  int _4687 = mosek::fusion::p_WorkStack::_get_impl(_4660)->cof_base;
  int _4688 = mosek::fusion::p_WorkStack::_get_impl(_4660)->code_base;
  int _4689 = mosek::fusion::p_WorkStack::_get_impl(_4660)->codeptr_base;
  int _4690 = mosek::fusion::p_WorkStack::_get_impl(_4660)->cconst_base;
  std::shared_ptr< monty::ndarray< int,1 > > _4691 = mosek::fusion::p_WorkStack::_get_impl(_4660)->i32;
  _checked_ptr_1<int> _ptr__4691(_4691 ? _4691->raw() : nullptr,_4691 ? _4691->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _4692 = mosek::fusion::p_WorkStack::_get_impl(_4660)->i64;
  _checked_ptr_1<long long> _ptr__4692(_4692 ? _4692->raw() : nullptr,_4692 ? _4692->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _4693 = mosek::fusion::p_WorkStack::_get_impl(_4660)->f64;
  _checked_ptr_1<double> _ptr__4693(_4693 ? _4693->raw() : nullptr,_4693 ? _4693->size(0) : 0);
  int _10773 = (int)0;
  int _10774 = _4663;
  for (int _4694 = _10773; _4694 < _10774; ++_4694)
  {
    {
      _ptr__4691[safe_add( _4684,_4694 )] = _ptr__4680[safe_add( _4668,((*dperm)(_4694)) )];
    }
  }
  if (_4667)
  {
    {
      std::shared_ptr< monty::ndarray< long long,1 > > _4695 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_4664)));
      _checked_ptr_1<long long> _ptr__4695(_4695 ? _4695->raw() : nullptr,_4695 ? _4695->size(0) : 0);
      {
        int _10775 = (int)0;
        int _10776 = _4664;
        for (int _4696 = _10775; _4696 < _10776; ++_4696)
        {
          {
            long long _4697 = (long long)0;
            int _10777 = (int)0;
            int _10778 = _4663;
            for (int _4698 = _10777; _4698 < _10778; ++_4698)
            {
              {
                _4697 += safe_mul( ((_ptr__4681[safe_add( _4674,_4696 )] / _ptr__4669[_4698]) % _ptr__4680[safe_add( _4668,_4698 )]),_ptr__4671[((*dperm)(_4698))] );
              }
            }
            _ptr__4695[_4696] = _4697;
          }
        }
      }
      std::vector<long long> _10779;
      for (int _4700 = (int)0, _10780 = _4664; _4700 < _10780 ; ++_4700)
      {
        _10779.push_back(_4700);
      }
      auto _10781 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_10779.size()),_10779.begin(),_10779.end()));
      std::shared_ptr< monty::ndarray< long long,1 > > _4699 = _10781;
      _checked_ptr_1<long long> _ptr__4699(_4699 ? _4699->raw() : nullptr,_4699 ? _4699->size(0) : 0);
      ::mosek::fusion::p_CommonTools::argQsort(_4699,_4695,std::shared_ptr< monty::ndarray< long long,1 > >(nullptr),(long long)((int)0),(long long)(_4664));
      _ptr__4691[_4683] = (int)0;
      if ((_4666 > (int)0))
      {
        {
          _ptr__4691[_4689] = (int)0;
        }
      }
      {}
      int _4701 = (int)0;
      int _4702 = (int)0;
      int _4703 = (int)0;
      int _10782 = (int)0;
      int _10783 = _4664;
      for (int _4704 = _10782; _4704 < _10783; ++_4704)
      {
        {
          long long _4705 = _ptr__4699[_4704];
          int _10784 = _ptr__4680[safe_add( _4673,_4705 )];
          int _10785 = _ptr__4680[safe_add( safe_add( _4673,_4705 ),(int)1 )];
          for (int _4706 = _10784; _4706 < _10785; ++_4706)
          {
            {
              _ptr__4692[safe_add( _4685,_4703 )] = _ptr__4681[safe_add( _4675,_4706 )];
              _ptr__4693[safe_add( _4687,_4703 )] = _ptr__4682[safe_add( _4676,_4706 )];
              if ((_4666 > (int)0))
              {
                {
                  int _10786 = _ptr__4680[safe_add( _4678,_4706 )];
                  int _10787 = _ptr__4680[safe_add( safe_add( _4678,_4706 ),(int)1 )];
                  for (int _4707 = _10786; _4707 < _10787; ++_4707)
                  {
                    {
                      _ptr__4691[safe_add( _4688,_4701 )] = _ptr__4680[safe_add( _4677,_4707 )];
                      _ptr__4693[safe_add( _4690,_4701 )] = _ptr__4682[safe_add( _4679,_4707 )];
                      ++ _4701;
                    }
                  }
                  _ptr__4691[safe_add( safe_add( _4689,_4703 ),(int)1 )] = _4701;
                }
              }
              {}
              ++ _4703;
            }
          }
          _ptr__4692[safe_add( _4686,_4704 )] = _ptr__4695[_4705];
          ++ _4702;
          _ptr__4691[safe_add( safe_add( _4683,_4704 ),(int)1 )] = _4703;
        }
      }
    }
  }
  else
  {
    {
      _ptr__4691[_4683] = (int)0;
      if ((_4666 > (int)0))
      {
        {
          _ptr__4691[_4689] = (int)0;
        }
      }
      {}
      int _4708 = (int)0;
      int _4709 = (int)0;
      int _4710 = (int)0;
      int _10788 = (int)0;
      int _10789 = _4664;
      for (int _4711 = _10788; _4711 < _10789; ++_4711)
      {
        {
          long long _4712 = (long long)0;
          int _10790 = (int)0;
          int _10791 = _4663;
          for (int _4713 = _10790; _4713 < _10791; ++_4713)
          {
            {
              _4712 += safe_mul( ((_4711 / _ptr__4669[((*dperm)(_4713))]) % _ptr__4680[safe_add( _4668,((*dperm)(_4713)) )]),_ptr__4671[_4713] );
            }
          }
          int _10792 = _ptr__4680[safe_add( _4673,_4712 )];
          int _10793 = _ptr__4680[safe_add( safe_add( _4673,_4712 ),(int)1 )];
          for (int _4714 = _10792; _4714 < _10793; ++_4714)
          {
            {
              _ptr__4692[safe_add( _4685,_4710 )] = _ptr__4681[safe_add( _4675,_4714 )];
              _ptr__4693[safe_add( _4687,_4710 )] = _ptr__4682[safe_add( _4676,_4714 )];
              if ((_4666 > (int)0))
              {
                {
                  int _10794 = _ptr__4680[safe_add( _4678,_4714 )];
                  int _10795 = _ptr__4680[safe_add( safe_add( _4678,_4714 ),(int)1 )];
                  for (int _4715 = _10794; _4715 < _10795; ++_4715)
                  {
                    {
                      _ptr__4691[safe_add( _4688,_4708 )] = _ptr__4680[safe_add( _4677,_4715 )];
                      _ptr__4693[safe_add( _4690,_4708 )] = _ptr__4682[safe_add( _4679,_4715 )];
                      ++ _4708;
                    }
                  }
                  _ptr__4691[safe_add( safe_add( _4689,_4710 ),(int)1 )] = _4708;
                }
              }
              {}
              ++ _4710;
            }
          }
          ++ _4709;
          _ptr__4691[safe_add( _4683,_4709 )] = _4710;
        }
      }
    }
  }
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_ExprPermuteDims::computeshape(std::shared_ptr< monty::ndarray< int,1 > > _4716,std::shared_ptr< monty::ndarray< int,1 > > _4717){
  _checked_ptr_1<int> _ptr__4716(_4716 ? _4716->raw() : nullptr, _4716 ? _4716->size(0) : 0);
  _checked_ptr_1<int> _ptr__4717(_4717 ? _4717->raw() : nullptr, _4717 ? _4717->size(0) : 0);
  std::vector<int> _10796;
  for (int _4718 = (int)0, _10797 = (int)((_4716)->size(0)); _4718 < _10797 ; ++_4718)
  {
    _10796.push_back(_ptr__4717[_ptr__4716[_4718]]);
  }
  auto _10798 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_10796.size()),_10796.begin(),_10796.end()));
  return _10798;
}
void mosek::fusion::p_ExprPermuteDims::destroy(){dperm.reset();expr.reset();}void mosek::fusion::ExprPermuteDims::destroy() { mosek::fusion::p_ExprPermuteDims::_get_impl(this)->destroy(); }mosek::fusion::ExprTranspose::ExprTranspose(mosek::fusion::p_ExprTranspose *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprTranspose()" << this << std::endl; */ }mosek::fusion::ExprTranspose::~ExprTranspose() {  /* std::cout << "~ExprTranspose()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprTranspose::p_ExprTranspose  (::mosek::fusion::ExprTranspose * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprTranspose::t mosek::fusion::p_ExprTranspose::_new_ExprTranspose  (monty::rc_ptr< ::mosek::fusion::Expression > _4719){ return new mosek::fusion::ExprTranspose(_4719); }mosek::fusion::ExprTranspose::ExprTranspose  (monty::rc_ptr< ::mosek::fusion::Expression > _4719) :    ExprTranspose(new mosek::fusion::p_ExprTranspose(this)){ mosek::fusion::p_ExprTranspose::_get_impl(this)->_initialize(_4719); }void mosek::fusion::p_ExprTranspose::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _4719){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(::mosek::fusion::p_ExprTranspose::transposeShape(_4719->getShape()));
    mosek::fusion::p_ExprTranspose::_get_impl(::mosek::fusion::ExprTranspose::t(_pubthis))->expr = _4719;
  }
}void mosek::fusion::ExprTranspose :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4720,monty::rc_ptr< ::mosek::fusion::WorkStack > _4721,monty::rc_ptr< ::mosek::fusion::WorkStack > _4722) { mosek::fusion::p_ExprTranspose::_get_impl(this)->eval(_4720,_4721,_4722); }void mosek::fusion::p_ExprTranspose::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4720,monty::rc_ptr< ::mosek::fusion::WorkStack > _4721,monty::rc_ptr< ::mosek::fusion::WorkStack > _4722){
  expr->eval(_4721,_4720,_4722);
  _4721->pop_expr();
  if ((mosek::fusion::p_WorkStack::_get_impl(_4721)->nd != (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions"));
    }
  }
  else
  {
    {
      int _4723 = mosek::fusion::p_WorkStack::_get_impl(_4721)->shape_base;
      int _4724 = mosek::fusion::p_WorkStack::_get_impl(_4721)->nelem;
      int _4725 = mosek::fusion::p_WorkStack::_get_impl(_4721)->nnz;
      bool _4726 = mosek::fusion::p_WorkStack::_get_impl(_4721)->hassp;
      int _4727 = mosek::fusion::p_WorkStack::_get_impl(_4721)->ncodeatom;
      int _4728 = mosek::fusion::p_WorkStack::_get_impl(_4721)->ptr_base;
      int _4729 = mosek::fusion::p_WorkStack::_get_impl(_4721)->sp_base;
      int _4730 = mosek::fusion::p_WorkStack::_get_impl(_4721)->nidxs_base;
      int _4731 = mosek::fusion::p_WorkStack::_get_impl(_4721)->cof_base;
      int _4732 = mosek::fusion::p_WorkStack::_get_impl(_4721)->code_base;
      int _4733 = mosek::fusion::p_WorkStack::_get_impl(_4721)->codeptr_base;
      int _4734 = mosek::fusion::p_WorkStack::_get_impl(_4721)->cconst_base;
      int _4735 = ((*mosek::fusion::p_WorkStack::_get_impl(_4721)->i32)(_4723));
      int _4736 = ((*mosek::fusion::p_WorkStack::_get_impl(_4721)->i32)(safe_add( _4723,(int)1 )));
      std::shared_ptr< monty::ndarray< int,1 > > _4737 = mosek::fusion::p_WorkStack::_get_impl(_4721)->i32;
      _checked_ptr_1<int> _ptr__4737(_4737 ? _4737->raw() : nullptr,_4737 ? _4737->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _4738 = mosek::fusion::p_WorkStack::_get_impl(_4721)->i64;
      _checked_ptr_1<long long> _ptr__4738(_4738 ? _4738->raw() : nullptr,_4738 ? _4738->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _4739 = mosek::fusion::p_WorkStack::_get_impl(_4721)->f64;
      _checked_ptr_1<double> _ptr__4739(_4739 ? _4739->raw() : nullptr,_4739 ? _4739->size(0) : 0);
      _4720->alloc_expr((int)2,_4724,_4725,_4726,_4727);
      int _4740 = mosek::fusion::p_WorkStack::_get_impl(_4720)->ptr_base;
      int _4741 = mosek::fusion::p_WorkStack::_get_impl(_4720)->nidxs_base;
      int _4742 = mosek::fusion::p_WorkStack::_get_impl(_4720)->sp_base;
      int _4743 = mosek::fusion::p_WorkStack::_get_impl(_4720)->cof_base;
      int _4744 = mosek::fusion::p_WorkStack::_get_impl(_4720)->shape_base;
      int _4745 = mosek::fusion::p_WorkStack::_get_impl(_4720)->code_base;
      int _4746 = mosek::fusion::p_WorkStack::_get_impl(_4720)->codeptr_base;
      int _4747 = mosek::fusion::p_WorkStack::_get_impl(_4720)->cconst_base;
      std::shared_ptr< monty::ndarray< int,1 > > _4748 = mosek::fusion::p_WorkStack::_get_impl(_4720)->i32;
      _checked_ptr_1<int> _ptr__4748(_4748 ? _4748->raw() : nullptr,_4748 ? _4748->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _4749 = mosek::fusion::p_WorkStack::_get_impl(_4720)->i64;
      _checked_ptr_1<long long> _ptr__4749(_4749 ? _4749->raw() : nullptr,_4749 ? _4749->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _4750 = mosek::fusion::p_WorkStack::_get_impl(_4720)->f64;
      _checked_ptr_1<double> _ptr__4750(_4750 ? _4750->raw() : nullptr,_4750 ? _4750->size(0) : 0);
      _ptr__4748[_4744] = _4736;
      _ptr__4748[safe_add( _4744,(int)1 )] = _4735;
      _ptr__4748[_4740] = (int)0;
      if ((_4727 > (int)0))
      {
        {
          _ptr__4748[_4746] = (int)0;
        }
      }
      {}
      if (_4726)
      {
        {
          int _4751 = _4722->alloci32(_4724);
          int _4752 = _4722->alloci32(safe_add( _4736,(int)1 ));
          std::shared_ptr< monty::ndarray< int,1 > > _4753 = mosek::fusion::p_WorkStack::_get_impl(_4722)->i32;
          _checked_ptr_1<int> _ptr__4753(_4753 ? _4753->raw() : nullptr,_4753 ? _4753->size(0) : 0);
          {
            int _10799 = (int)0;
            int _10800 = safe_add( _4736,(int)1 );
            for (int _4754 = _10799; _4754 < _10800; ++_4754)
            {
              {
                _ptr__4753[safe_add( _4752,_4754 )] = (int)0;
              }
            }
            int _10801 = (int)0;
            int _10802 = _4724;
            for (int _4755 = _10801; _4755 < _10802; ++_4755)
            {
              {
                ++ _ptr__4753[safe_add( safe_add( _4752,(_ptr__4738[safe_add( _4729,_4755 )] % _4736) ),(int)1 )];
              }
            }
            int _10803 = (int)0;
            int _10804 = _4736;
            for (int _4756 = _10803; _4756 < _10804; ++_4756)
            {
              {
                _ptr__4753[safe_add( safe_add( _4752,_4756 ),(int)1 )] += _ptr__4753[safe_add( _4752,_4756 )];
              }
            }
            int _10805 = (int)0;
            int _10806 = _4724;
            for (int _4757 = _10805; _4757 < _10806; ++_4757)
            {
              {
                long long _4758 = (_ptr__4738[safe_add( _4729,_4757 )] % _4736);
                _ptr__4753[safe_add( _4751,_ptr__4753[safe_add( _4752,_4758 )] )] = _4757;
                ++ _ptr__4753[safe_add( _4752,_4758 )];
              }
            }
            _ptr__4748[_4740] = (int)0;
            int _4759 = (int)0;
            int _4760 = (int)0;
            int _10807 = (int)0;
            int _10808 = _4724;
            for (int _4761 = _10807; _4761 < _10808; ++_4761)
            {
              {
                int _4762 = _ptr__4753[safe_add( _4751,_4761 )];
                int _10809 = _ptr__4737[safe_add( _4728,_4762 )];
                int _10810 = _ptr__4737[safe_add( safe_add( _4728,_4762 ),(int)1 )];
                for (int _4763 = _10809; _4763 < _10810; ++_4763)
                {
                  {
                    _ptr__4749[safe_add( _4741,_4760 )] = _ptr__4738[safe_add( _4730,_4763 )];
                    _ptr__4750[safe_add( _4743,_4760 )] = _ptr__4739[safe_add( _4731,_4763 )];
                    if ((_4727 > (int)0))
                    {
                      {
                        int _10811 = _ptr__4737[safe_add( _4733,_4763 )];
                        int _10812 = _ptr__4737[safe_add( safe_add( _4733,_4763 ),(int)1 )];
                        for (int _4764 = _10811; _4764 < _10812; ++_4764)
                        {
                          {
                            _ptr__4748[safe_add( _4745,_4759 )] = _ptr__4737[safe_add( _4732,_4764 )];
                            _ptr__4750[safe_add( _4747,_4759 )] = _ptr__4739[safe_add( _4734,_4764 )];
                            ++ _4759;
                          }
                        }
                        _ptr__4748[safe_add( safe_add( _4746,_4760 ),(int)1 )] = _4759;
                      }
                    }
                    {}
                    ++ _4760;
                  }
                }
                long long _4765 = (_ptr__4738[safe_add( _4729,_4762 )] / _4736);
                long long _4766 = (_ptr__4738[safe_add( _4729,_4762 )] % _4736);
                _ptr__4748[safe_add( safe_add( _4740,_4761 ),(int)1 )] = _4760;
                _ptr__4749[safe_add( _4742,_4761 )] = safe_add( safe_mul( _4766,_4735 ),_4765 );
              }
            }
          }
        }
      }
      else
      {
        {
          _ptr__4748[_4740] = (int)0;
          int _4767 = (int)0;
          int _4768 = (int)0;
          int _4769 = (int)0;
          int _10813 = (int)0;
          int _10814 = _4736;
          for (int _4770 = _10813; _4770 < _10814; ++_4770)
          {
            {
              int _10815 = (int)0;
              int _10816 = _4735;
              for (int _4771 = _10815; _4771 < _10816; ++_4771)
              {
                {
                  int _4772 = safe_add( safe_mul( _4771,_4736 ),_4770 );
                  int _10817 = _ptr__4737[safe_add( _4728,_4772 )];
                  int _10818 = _ptr__4737[safe_add( safe_add( _4728,_4772 ),(int)1 )];
                  for (int _4773 = _10817; _4773 < _10818; ++_4773)
                  {
                    {
                      _ptr__4749[safe_add( _4741,_4768 )] = _ptr__4738[safe_add( _4730,_4773 )];
                      _ptr__4750[safe_add( _4743,_4768 )] = _ptr__4739[safe_add( _4731,_4773 )];
                      if ((_4727 > (int)0))
                      {
                        {
                          int _10819 = _ptr__4737[safe_add( _4733,_4773 )];
                          int _10820 = _ptr__4737[safe_add( safe_add( _4733,_4773 ),(int)1 )];
                          for (int _4774 = _10819; _4774 < _10820; ++_4774)
                          {
                            {
                              _ptr__4748[safe_add( _4745,_4767 )] = _ptr__4737[safe_add( _4732,_4774 )];
                              _ptr__4750[safe_add( _4747,_4767 )] = _ptr__4739[safe_add( _4734,_4774 )];
                              ++ _4767;
                            }
                          }
                          _ptr__4748[safe_add( safe_add( _4746,_4768 ),(int)1 )] = _4767;
                        }
                      }
                      {}
                      ++ _4768;
                    }
                  }
                  _ptr__4748[safe_add( safe_add( _4740,_4769 ),(int)1 )] = _4768;
                  ++ _4769;
                }
              }
            }
          }
        }
      }
      _4722->clear();
    }
  }
}
std::string mosek::fusion::ExprTranspose :: toString() { return mosek::fusion::p_ExprTranspose::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprTranspose::toString(){
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprTranspose("))->__mosek_2fusion_2Utils_2StringBuffer__a(expr->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_ExprTranspose::transposeShape(std::shared_ptr< monty::ndarray< int,1 > > _4775){
  _checked_ptr_1<int> _ptr__4775(_4775 ? _4775->raw() : nullptr, _4775 ? _4775->size(0) : 0);
  if (((int)((_4775)->size(0)) != (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions"));
    }
  }
  else
  {
    {
      return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_ptr__4775[(int)1]),(int)(_ptr__4775[(int)0])});
    }
  }
}
void mosek::fusion::p_ExprTranspose::destroy(){expr.reset();}void mosek::fusion::ExprTranspose::destroy() { mosek::fusion::p_ExprTranspose::_get_impl(this)->destroy(); }mosek::fusion::ExprRepeat::ExprRepeat(mosek::fusion::p_ExprRepeat *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprRepeat()" << this << std::endl; */ }mosek::fusion::ExprRepeat::~ExprRepeat() {  /* std::cout << "~ExprRepeat()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprRepeat::p_ExprRepeat  (::mosek::fusion::ExprRepeat * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprRepeat::t mosek::fusion::p_ExprRepeat::_new_ExprRepeat  (monty::rc_ptr< ::mosek::fusion::Expression > _4776,    int _4777,    int _4778){ return new mosek::fusion::ExprRepeat(_4776,_4777,_4778); }mosek::fusion::ExprRepeat::ExprRepeat  (monty::rc_ptr< ::mosek::fusion::Expression > _4776,    int _4777,    int _4778) :    ExprRepeat(new mosek::fusion::p_ExprRepeat(this)){ mosek::fusion::p_ExprRepeat::_get_impl(this)->_initialize(_4776,_4777,_4778); }void mosek::fusion::p_ExprRepeat::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _4776,    int _4777,    int _4778){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(::mosek::fusion::p_ExprRepeat::getshape(_4776,_4777,_4778));
    mosek::fusion::p_ExprRepeat::_get_impl(::mosek::fusion::ExprRepeat::t(_pubthis))->expr = _4776;
    mosek::fusion::p_ExprRepeat::_get_impl(::mosek::fusion::ExprRepeat::t(_pubthis))->dim = _4777;
    mosek::fusion::p_ExprRepeat::_get_impl(::mosek::fusion::ExprRepeat::t(_pubthis))->n = _4778;
  }
}void mosek::fusion::ExprRepeat :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4779,monty::rc_ptr< ::mosek::fusion::WorkStack > _4780,monty::rc_ptr< ::mosek::fusion::WorkStack > _4781) { mosek::fusion::p_ExprRepeat::_get_impl(this)->eval(_4779,_4780,_4781); }void mosek::fusion::p_ExprRepeat::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4779,monty::rc_ptr< ::mosek::fusion::WorkStack > _4780,monty::rc_ptr< ::mosek::fusion::WorkStack > _4781){
  expr->eval(_4780,_4779,_4781);
  _4780->pop_expr();
  int _4782 = mosek::fusion::p_WorkStack::_get_impl(_4780)->nd;
  int _4783 = mosek::fusion::p_WorkStack::_get_impl(_4780)->shape_base;
  int _4784 = mosek::fusion::p_WorkStack::_get_impl(_4780)->nelem;
  int _4785 = mosek::fusion::p_WorkStack::_get_impl(_4780)->nnz;
  int _4786 = mosek::fusion::p_WorkStack::_get_impl(_4780)->ncodeatom;
  bool _4787 = mosek::fusion::p_WorkStack::_get_impl(_4780)->hassp;
  int _4788 = mosek::fusion::p_WorkStack::_get_impl(_4780)->ptr_base;
  int _4789 = mosek::fusion::p_WorkStack::_get_impl(_4780)->sp_base;
  int _4790 = mosek::fusion::p_WorkStack::_get_impl(_4780)->nidxs_base;
  int _4791 = mosek::fusion::p_WorkStack::_get_impl(_4780)->cof_base;
  int _4792 = mosek::fusion::p_WorkStack::_get_impl(_4780)->code_base;
  int _4793 = mosek::fusion::p_WorkStack::_get_impl(_4780)->codeptr_base;
  int _4794 = mosek::fusion::p_WorkStack::_get_impl(_4780)->cconst_base;
  std::shared_ptr< monty::ndarray< int,1 > > _4795 = mosek::fusion::p_WorkStack::_get_impl(_4780)->i32;
  _checked_ptr_1<int> _ptr__4795(_4795 ? _4795->raw() : nullptr,_4795 ? _4795->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _4796 = mosek::fusion::p_WorkStack::_get_impl(_4780)->i64;
  _checked_ptr_1<long long> _ptr__4796(_4796 ? _4796->raw() : nullptr,_4796 ? _4796->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _4797 = mosek::fusion::p_WorkStack::_get_impl(_4780)->f64;
  _checked_ptr_1<double> _ptr__4797(_4797 ? _4797->raw() : nullptr,_4797 ? _4797->size(0) : 0);
  int _10821;
  bool _10822 = (dim < _4782);
  if (_10822)
  {
    _10821 = _4782;
  }
  else
  {
    _10821 = safe_add( _4782,(int)1 );
  }
  int _4798 = _10821;
  int _4799 = safe_mul( _4784,n );
  int _4800 = safe_mul( _4785,n );
  int _4801 = safe_mul( _4786,n );
  _4779->alloc_expr(_4798,_4799,_4800,_4787,_4801);
  std::shared_ptr< monty::ndarray< int,1 > > _4802 = mosek::fusion::p_WorkStack::_get_impl(_4779)->i32;
  _checked_ptr_1<int> _ptr__4802(_4802 ? _4802->raw() : nullptr,_4802 ? _4802->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _4803 = mosek::fusion::p_WorkStack::_get_impl(_4779)->i64;
  _checked_ptr_1<long long> _ptr__4803(_4803 ? _4803->raw() : nullptr,_4803 ? _4803->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _4804 = mosek::fusion::p_WorkStack::_get_impl(_4779)->f64;
  _checked_ptr_1<double> _ptr__4804(_4804 ? _4804->raw() : nullptr,_4804 ? _4804->size(0) : 0);
  int _4805 = mosek::fusion::p_WorkStack::_get_impl(_4779)->shape_base;
  int _4806 = mosek::fusion::p_WorkStack::_get_impl(_4779)->ptr_base;
  int _4807 = mosek::fusion::p_WorkStack::_get_impl(_4779)->sp_base;
  int _4808 = mosek::fusion::p_WorkStack::_get_impl(_4779)->nidxs_base;
  int _4809 = mosek::fusion::p_WorkStack::_get_impl(_4779)->cof_base;
  int _4810 = mosek::fusion::p_WorkStack::_get_impl(_4779)->code_base;
  int _4811 = mosek::fusion::p_WorkStack::_get_impl(_4779)->codeptr_base;
  int _4812 = mosek::fusion::p_WorkStack::_get_impl(_4779)->cconst_base;
  int _4813 = (int)1;
  int _10823 = (int)0;
  int _10824 = dim;
  for (int _4814 = _10823; _4814 < _10824; ++_4814)
  {
    {
      _4813 *= _ptr__4795[safe_add( _4783,_4814 )];
    }
  }
  int _10825;
  bool _10826 = (dim < _4782);
  if (_10826)
  {
    _10825 = _ptr__4795[safe_add( _4783,dim )];
  }
  else
  {
    _10825 = (int)1;
  }
  int _4815 = _10825;
  int _4816 = safe_mul( n,_4815 );
  int _4817 = (int)1;
  int _10827 = safe_add( dim,(int)1 );
  int _10828 = _4782;
  for (int _4818 = _10827; _4818 < _10828; ++_4818)
  {
    {
      _4817 *= _ptr__4795[safe_add( _4783,_4818 )];
    }
  }
  {
    int _10829 = (int)0;
    int _10830 = _4782;
    for (int _4819 = _10829; _4819 < _10830; ++_4819)
    {
      {
        _ptr__4802[safe_add( _4805,_4819 )] = _ptr__4795[safe_add( _4783,_4819 )];
      }
    }
    _ptr__4802[safe_add( _4805,dim )] = _4816;
    _ptr__4802[_4806] = (int)0;
    if ((_4801 != (int)0))
    {
      {
        _ptr__4802[_4811] = (int)0;
      }
    }
    {}
    if (_4787)
    {
      {
        int _4820 = (int)0;
        int _4821 = (int)0;
        int _4822 = (int)0;
        int _4823 = (int)0;
        int _4824 = (int)0;
        while ( (_4822 < _4784) )
        {
          {
            long long _4825 = _ptr__4796[safe_add( _4789,_4822 )];
            long long _4826 = safe_add( (_4825 - (_4825 % safe_mul( _4815,_4817 ))),safe_mul( _4815,_4817 ) );
            int _4827 = _4822;
            ++ _4822;
            while ( ((_4822 < _4784) && (_ptr__4796[safe_add( _4789,_4822 )] < _4826)) )
            {
              {
                ++ _4822;
              }
            }
            int _4828 = _4822;
            int _10831 = (int)0;
            int _10832 = n;
            for (int _4829 = _10831; _4829 < _10832; ++_4829)
            {
              {
                int _10833 = _4827;
                int _10834 = _4828;
                for (int _4830 = _10833; _4830 < _10834; ++_4830)
                {
                  {
                    long long _4831 = (_ptr__4796[safe_add( _4789,_4830 )] / safe_mul( _4815,_4817 ));
                    long long _4832 = ((_ptr__4796[safe_add( _4789,_4830 )] / _4817) % _4815);
                    long long _4833 = (_ptr__4796[safe_add( _4789,_4830 )] % _4817);
                    int _10835 = _ptr__4795[safe_add( _4788,_4830 )];
                    int _10836 = _ptr__4795[safe_add( safe_add( _4788,_4830 ),(int)1 )];
                    for (int _4834 = _10835; _4834 < _10836; ++_4834)
                    {
                      {
                        _ptr__4803[safe_add( _4808,_4824 )] = _ptr__4796[safe_add( _4790,_4834 )];
                        _ptr__4804[safe_add( _4809,_4824 )] = _ptr__4797[safe_add( _4791,_4834 )];
                        if ((_4786 > (int)0))
                        {
                          {
                            int _10837 = _ptr__4795[safe_add( _4793,_4834 )];
                            int _10838 = _ptr__4795[safe_add( safe_add( _4793,_4834 ),(int)1 )];
                            for (int _4835 = _10837; _4835 < _10838; ++_4835)
                            {
                              {
                                _ptr__4802[safe_add( _4810,_4820 )] = _ptr__4795[safe_add( _4792,_4835 )];
                                _ptr__4804[safe_add( _4812,_4820 )] = _ptr__4797[safe_add( _4794,_4835 )];
                                ++ _4820;
                              }
                            }
                            _ptr__4802[safe_add( safe_add( _4811,_4824 ),(int)1 )] = _4820;
                          }
                        }
                        {}
                        ++ _4824;
                      }
                    }
                    _ptr__4802[safe_add( safe_add( _4806,_4823 ),(int)1 )] = _4824;
                    _ptr__4803[safe_add( _4807,_4823 )] = safe_add( safe_mul( safe_add( safe_add( safe_mul( _4831,_4816 ),safe_mul( _4829,_4815 ) ),_4832 ),_4817 ),_4833 );
                    ++ _4823;
                  }
                }
              }
            }
          }
        }
      }
    }
    else
    {
      {
        int _4836 = (int)0;
        int _4837 = (int)0;
        int _4838 = (int)0;
        int _4839 = (int)0;
        int _10839 = (int)0;
        int _10840 = _4813;
        for (int _4840 = _10839; _4840 < _10840; ++_4840)
        {
          {
            int _10841 = (int)0;
            int _10842 = n;
            for (int _4841 = _10841; _4841 < _10842; ++_4841)
            {
              {
                int _4842 = safe_mul( safe_mul( _4840,_4815 ),_4817 );
                int _10843 = (int)0;
                int _10844 = safe_mul( _4815,_4817 );
                for (int _4843 = _10843; _4843 < _10844; ++_4843)
                {
                  {
                    int _10845 = _ptr__4795[safe_add( _4788,_4842 )];
                    int _10846 = _ptr__4795[safe_add( safe_add( _4788,_4842 ),(int)1 )];
                    for (int _4844 = _10845; _4844 < _10846; ++_4844)
                    {
                      {
                        _ptr__4803[safe_add( _4808,_4838 )] = _ptr__4796[safe_add( _4790,_4844 )];
                        _ptr__4804[safe_add( _4809,_4838 )] = _ptr__4797[safe_add( _4791,_4844 )];
                        if ((_4786 > (int)0))
                        {
                          {
                            int _10847 = _ptr__4795[safe_add( _4793,_4844 )];
                            int _10848 = _ptr__4795[safe_add( safe_add( _4793,_4844 ),(int)1 )];
                            for (int _4845 = _10847; _4845 < _10848; ++_4845)
                            {
                              {
                                _ptr__4802[safe_add( _4810,_4836 )] = _ptr__4795[safe_add( _4792,_4845 )];
                                _ptr__4804[safe_add( _4812,_4836 )] = _ptr__4797[safe_add( _4794,_4845 )];
                                ++ _4836;
                              }
                            }
                            _ptr__4802[safe_add( safe_add( _4811,_4838 ),(int)1 )] = _4836;
                          }
                        }
                        {}
                        ++ _4838;
                      }
                    }
                    _ptr__4802[safe_add( safe_add( _4806,_4837 ),(int)1 )] = _4838;
                    ++ _4837;
                    ++ _4842;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_ExprRepeat::getshape(monty::rc_ptr< ::mosek::fusion::Expression > _4846,int _4847,int _4848){
  std::shared_ptr< monty::ndarray< int,1 > > _4849 = _4846->getShape();
  _checked_ptr_1<int> _ptr__4849(_4849 ? _4849->raw() : nullptr,_4849 ? _4849->size(0) : 0);
  int _4850 = (int)((_4849)->size(0));
  if ((_4847 < _4850))
  {
    {
      _ptr__4849[_4847] *= _4848;
      return _4849;
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _10849;
      bool _10850 = (_4847 == _4850);
      if (_10850)
      {
        _10849 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(safe_add( _4850,(int)1 ))));
      }
      else
      {
        _10849 = _4849;
      }
      std::shared_ptr< monty::ndarray< int,1 > > _4851 = _10849;
      _checked_ptr_1<int> _ptr__4851(_4851 ? _4851->raw() : nullptr,_4851 ? _4851->size(0) : 0);
      int _10851 = (int)0;
      int _10852 = _4850;
      for (int _4852 = _10851; _4852 < _10852; ++_4852)
      {
        {
          _ptr__4851[_4852] = _ptr__4849[_4852];
        }
      }
      _ptr__4851[_4847] = _4848;
      return _4851;
    }
  }
}
std::string mosek::fusion::ExprRepeat :: toString() { return mosek::fusion::p_ExprRepeat::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprRepeat::toString(){
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprRepeat(dim="))->__mosek_2fusion_2Utils_2StringBuffer__a(dim)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(expr->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
void mosek::fusion::p_ExprRepeat::destroy(){expr.reset();}void mosek::fusion::ExprRepeat::destroy() { mosek::fusion::p_ExprRepeat::_get_impl(this)->destroy(); }mosek::fusion::ExprStack::ExprStack(mosek::fusion::p_ExprStack *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprStack()" << this << std::endl; */ }mosek::fusion::ExprStack::~ExprStack() {  /* std::cout << "~ExprStack()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprStack::p_ExprStack  (::mosek::fusion::ExprStack * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprStack::t mosek::fusion::p_ExprStack::_new_ExprStack  (std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _4853,    int _4854){ return new mosek::fusion::ExprStack(_4853,_4854); }mosek::fusion::ExprStack::ExprStack  (std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _4853,    int _4854) :    ExprStack(new mosek::fusion::p_ExprStack(this)){ mosek::fusion::p_ExprStack::_get_impl(this)->_initialize(_4853,_4854); }void mosek::fusion::p_ExprStack::_initialize  (std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _4853,    int _4854){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(::mosek::fusion::p_ExprStack::getshape(_4853,_4854));
    std::vector<monty::rc_ptr< ::mosek::fusion::Expression >> _10853;
    for (int _4855 = (int)0, _10854 = (int)((_4853)->size(0)); _4855 < _10854 ; ++_4855)
    {
      _10853.push_back(((*_4853)(_4855)));
    }
    auto _10855 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >(monty::shape(_10853.size()),_10853.begin(),_10853.end()));
    mosek::fusion::p_ExprStack::_get_impl(::mosek::fusion::ExprStack::t(_pubthis))->exprs = _10855;
    mosek::fusion::p_ExprStack::_get_impl(::mosek::fusion::ExprStack::t(_pubthis))->dim = _4854;
  }
}void mosek::fusion::ExprStack :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4856,monty::rc_ptr< ::mosek::fusion::WorkStack > _4857,monty::rc_ptr< ::mosek::fusion::WorkStack > _4858) { mosek::fusion::p_ExprStack::_get_impl(this)->eval(_4856,_4857,_4858); }void mosek::fusion::p_ExprStack::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _4856,monty::rc_ptr< ::mosek::fusion::WorkStack > _4857,monty::rc_ptr< ::mosek::fusion::WorkStack > _4858){
  int _4859 = (int)((exprs)->size(0));
  if ((_4859 == (int)1))
  {
    {
      ((*exprs)((int)0))->eval(_4856,_4857,_4858);
    }
  }
  else
  {
    {
      int _10856 = (int)0;
      int _10857 = _4859;
      for (int _4860 = _10856; _4860 < _10857; ++_4860)
      {
        {
          ((*exprs)(((_4859 - _4860) - (int)1)))->eval(_4857,_4856,_4858);
        }
      }
      std::shared_ptr< monty::ndarray< int,1 > > _4861 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4859)));
      _checked_ptr_1<int> _ptr__4861(_4861 ? _4861->raw() : nullptr,_4861 ? _4861->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _4862 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4859)));
      _checked_ptr_1<int> _ptr__4862(_4862 ? _4862->raw() : nullptr,_4862 ? _4862->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _4863 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4859)));
      _checked_ptr_1<int> _ptr__4863(_4863 ? _4863->raw() : nullptr,_4863 ? _4863->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _4864 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4859)));
      _checked_ptr_1<int> _ptr__4864(_4864 ? _4864->raw() : nullptr,_4864 ? _4864->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _4865 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4859)));
      _checked_ptr_1<int> _ptr__4865(_4865 ? _4865->raw() : nullptr,_4865 ? _4865->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _4866 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4859)));
      _checked_ptr_1<int> _ptr__4866(_4866 ? _4866->raw() : nullptr,_4866 ? _4866->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _4867 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4859)));
      _checked_ptr_1<int> _ptr__4867(_4867 ? _4867->raw() : nullptr,_4867 ? _4867->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _4868 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4859)));
      _checked_ptr_1<int> _ptr__4868(_4868 ? _4868->raw() : nullptr,_4868 ? _4868->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _4869 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4859)));
      _checked_ptr_1<int> _ptr__4869(_4869 ? _4869->raw() : nullptr,_4869 ? _4869->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _4870 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4859)));
      _checked_ptr_1<int> _ptr__4870(_4870 ? _4870->raw() : nullptr,_4870 ? _4870->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _4871 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4859)));
      _checked_ptr_1<int> _ptr__4871(_4871 ? _4871->raw() : nullptr,_4871 ? _4871->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _4872 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4859)));
      _checked_ptr_1<int> _ptr__4872(_4872 ? _4872->raw() : nullptr,_4872 ? _4872->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _4873 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4859)));
      _checked_ptr_1<int> _ptr__4873(_4873 ? _4873->raw() : nullptr,_4873 ? _4873->size(0) : 0);
      int _10858 = (int)0;
      int _10859 = _4859;
      for (int _4874 = _10858; _4874 < _10859; ++_4874)
      {
        {
          _4857->pop_expr();
          _ptr__4861[_4874] = mosek::fusion::p_WorkStack::_get_impl(_4857)->nd;
          _ptr__4862[_4874] = mosek::fusion::p_WorkStack::_get_impl(_4857)->shape_base;
          _ptr__4863[_4874] = mosek::fusion::p_WorkStack::_get_impl(_4857)->nelem;
          _ptr__4864[_4874] = mosek::fusion::p_WorkStack::_get_impl(_4857)->nnz;
          _ptr__4865[_4874] = mosek::fusion::p_WorkStack::_get_impl(_4857)->ncodeatom;
          int _10860;
          bool _10861 = mosek::fusion::p_WorkStack::_get_impl(_4857)->hassp;
          if (_10861)
          {
            _10860 = (int)1;
          }
          else
          {
            _10860 = (int)0;
          }
          _ptr__4866[_4874] = _10860;
          _ptr__4867[_4874] = mosek::fusion::p_WorkStack::_get_impl(_4857)->ptr_base;
          _ptr__4869[_4874] = mosek::fusion::p_WorkStack::_get_impl(_4857)->sp_base;
          _ptr__4868[_4874] = mosek::fusion::p_WorkStack::_get_impl(_4857)->nidxs_base;
          _ptr__4870[_4874] = mosek::fusion::p_WorkStack::_get_impl(_4857)->cof_base;
          _ptr__4871[_4874] = mosek::fusion::p_WorkStack::_get_impl(_4857)->code_base;
          _ptr__4872[_4874] = mosek::fusion::p_WorkStack::_get_impl(_4857)->codeptr_base;
          _ptr__4873[_4874] = mosek::fusion::p_WorkStack::_get_impl(_4857)->cconst_base;
        }
      }
      std::shared_ptr< monty::ndarray< int,1 > > _4875 = mosek::fusion::p_WorkStack::_get_impl(_4857)->i32;
      _checked_ptr_1<int> _ptr__4875(_4875 ? _4875->raw() : nullptr,_4875 ? _4875->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _4876 = mosek::fusion::p_WorkStack::_get_impl(_4857)->i64;
      _checked_ptr_1<long long> _ptr__4876(_4876 ? _4876->raw() : nullptr,_4876 ? _4876->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _4877 = mosek::fusion::p_WorkStack::_get_impl(_4857)->f64;
      _checked_ptr_1<double> _ptr__4877(_4877 ? _4877->raw() : nullptr,_4877 ? _4877->size(0) : 0);
      int _4878 = _ptr__4861[(int)0];
      int _4879 = _ptr__4862[(int)0];
      bool _4880 = (_ptr__4866[(int)0] == (int)0);
      bool _4881 = false;
      int _10862 = (int)1;
      int _10863 = _4859;
      for (int _4882 = _10862; _4882 < _10863; ++_4882)
      {
        {
          _4881 = (_4881 || ((dim != _4882) && (_ptr__4861[_4882] != _4878)));
          if ((!_4881))
          {
            {
              int _10864 = (int)0;
              int _10865 = dim;
              for (int _4883 = _10864; _4883 < _10865; ++_4883)
              {
                {
                  _4881 = (_4881 || (_ptr__4875[safe_add( _4879,_4883 )] != _ptr__4875[safe_add( _ptr__4862[_4882],_4883 )]));
                }
              }
            }
          }
          {}
          if ((!_4881))
          {
            {
              int _10866 = safe_add( dim,(int)1 );
              int _10867 = _4878;
              for (int _4884 = _10866; _4884 < _10867; ++_4884)
              {
                {
                  _4881 = (_4881 || (_ptr__4875[safe_add( _4879,_4884 )] != _ptr__4875[safe_add( _ptr__4862[_4882],_4884 )]));
                }
              }
            }
          }
          {}
          _4880 = (_4880 && ((int)0 == _ptr__4866[_4882]));
        }
      }
      if (_4881)
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Mismatching expression dimensions"));
        }
      }
      {}
      int _4885 = (int)0;
      if ((dim < _4878))
      {
        {
          int _10868 = (int)0;
          int _10869 = _4859;
          for (int _4886 = _10868; _4886 < _10869; ++_4886)
          {
            {
              _4885 += _ptr__4875[safe_add( _ptr__4862[_4886],dim )];
            }
          }
        }
      }
      else
      {
        {
          _4885 = _4859;
        }
      }
      int _10870;
      bool _10871 = (dim < _4878);
      if (_10871)
      {
        _10870 = _4878;
      }
      else
      {
        _10870 = safe_add( _4878,(int)1 );
      }
      int _4887 = _10870;
      if ((_4887 != _pubthis->getND()))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Mismatching dimensions"));
        }
      }
      {}
      int _4888 = (int)0;
      int _4889 = (int)0;
      int _4890 = (int)0;
      bool _4891 = false;
      {
        int _10872 = (int)0;
        int _10873 = _4859;
        for (int _4892 = _10872; _4892 < _10873; ++_4892)
        {
          {
            _4891 = (_4891 || (_ptr__4865[_4892] > (int)0));
          }
        }
        int _10874 = (int)0;
        int _10875 = _4859;
        for (int _4893 = _10874; _4893 < _10875; ++_4893)
        {
          {
            _4890 += _ptr__4864[_4893];
          }
        }
        int _10876 = (int)0;
        int _10877 = _4859;
        for (int _4894 = _10876; _4894 < _10877; ++_4894)
        {
          {
            _4889 += _ptr__4863[_4894];
          }
        }
        if (_4891)
        {
          {
            int _10878 = (int)0;
            int _10879 = _4859;
            for (int _4895 = _10878; _4895 < _10879; ++_4895)
            {
              {
                int _10880;
                bool _10881 = (_ptr__4865[_4895] > (int)0);
                if (_10881)
                {
                  _10880 = _ptr__4865[_4895];
                }
                else
                {
                  _10880 = _ptr__4864[_4895];
                }
                _4888 += _10880;
              }
            }
          }
        }
        {}
      }
      int _4896 = (int)1;
      int _10882 = (int)0;
      int _10883 = dim;
      for (int _4897 = _10882; _4897 < _10883; ++_4897)
      {
        {
          _4896 *= _ptr__4875[safe_add( _4879,_4897 )];
        }
      }
      std::shared_ptr< monty::ndarray< int,1 > > _10884;
      bool _10885 = (dim < _4878);
      if (_10885)
      {
        std::vector<int> _10886;
        for (int _4899 = (int)0, _10887 = _4859; _4899 < _10887 ; ++_4899)
        {
          _10886.push_back(_ptr__4875[safe_add( _ptr__4862[_4899],dim )]);
        }
        auto _10888 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_10886.size()),_10886.begin(),_10886.end()));
        _10884 = _10888;
      }
      else
      {
        std::vector<int> _10889;
        for (int _4900 = (int)0, _10890 = _4859; _4900 < _10890 ; ++_4900)
        {
          _10889.push_back((int)1);
        }
        auto _10891 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_10889.size()),_10889.begin(),_10889.end()));
        _10884 = _10891;
      }
      std::shared_ptr< monty::ndarray< int,1 > > _4898 = _10884;
      _checked_ptr_1<int> _ptr__4898(_4898 ? _4898->raw() : nullptr,_4898 ? _4898->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _4901 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_4859)));
      _checked_ptr_1<int> _ptr__4901(_4901 ? _4901->raw() : nullptr,_4901 ? _4901->size(0) : 0);
      _ptr__4901[(int)0] = (int)0;
      int _10892 = (int)1;
      int _10893 = _4859;
      for (int _4902 = _10892; _4902 < _10893; ++_4902)
      {
        {
          _ptr__4901[_4902] = safe_add( _ptr__4901[(_4902 - (int)1)],_ptr__4898[(_4902 - (int)1)] );
        }
      }
      int _4903 = (int)0;
      int _10894 = (int)0;
      int _10895 = _4859;
      for (int _4904 = _10894; _4904 < _10895; ++_4904)
      {
        {
          _4903 += _ptr__4898[_4904];
        }
      }
      int _4905 = (int)1;
      int _10896 = safe_add( dim,(int)1 );
      int _10897 = _4878;
      for (int _4906 = _10896; _4906 < _10897; ++_4906)
      {
        {
          _4905 *= _ptr__4875[safe_add( _4879,_4906 )];
        }
      }
      if (_4880)
      {
        {
          _4856->alloc_expr(_4887,_4889,_4890,false,_4888);
          int _4907 = mosek::fusion::p_WorkStack::_get_impl(_4856)->ptr_base;
          int _4908 = mosek::fusion::p_WorkStack::_get_impl(_4856)->shape_base;
          int _4909 = mosek::fusion::p_WorkStack::_get_impl(_4856)->nidxs_base;
          int _4910 = mosek::fusion::p_WorkStack::_get_impl(_4856)->cof_base;
          int _4911 = mosek::fusion::p_WorkStack::_get_impl(_4856)->code_base;
          int _4912 = mosek::fusion::p_WorkStack::_get_impl(_4856)->codeptr_base;
          int _4913 = mosek::fusion::p_WorkStack::_get_impl(_4856)->cconst_base;
          std::shared_ptr< monty::ndarray< int,1 > > _4914 = mosek::fusion::p_WorkStack::_get_impl(_4856)->i32;
          _checked_ptr_1<int> _ptr__4914(_4914 ? _4914->raw() : nullptr,_4914 ? _4914->size(0) : 0);
          std::shared_ptr< monty::ndarray< long long,1 > > _4915 = mosek::fusion::p_WorkStack::_get_impl(_4856)->i64;
          _checked_ptr_1<long long> _ptr__4915(_4915 ? _4915->raw() : nullptr,_4915 ? _4915->size(0) : 0);
          std::shared_ptr< monty::ndarray< double,1 > > _4916 = mosek::fusion::p_WorkStack::_get_impl(_4856)->f64;
          _checked_ptr_1<double> _ptr__4916(_4916 ? _4916->raw() : nullptr,_4916 ? _4916->size(0) : 0);
          int _10898;
          bool _10899 = (_4888 > (int)0);
          if (_10899)
          {
            _10898 = _4858->alloci32(safe_add( _4889,(int)1 ));
          }
          else
          {
            _10898 = (-(int)9999);
          }
          int _4917 = _10898;
          std::shared_ptr< monty::ndarray< int,1 > > _4918 = mosek::fusion::p_WorkStack::_get_impl(_4858)->i32;
          _checked_ptr_1<int> _ptr__4918(_4918 ? _4918->raw() : nullptr,_4918 ? _4918->size(0) : 0);
          int _10900 = (int)0;
          int _10901 = _4878;
          for (int _4919 = _10900; _4919 < _10901; ++_4919)
          {
            {
              _ptr__4914[safe_add( _4908,_4919 )] = _ptr__4875[safe_add( _4879,_4919 )];
            }
          }
          _ptr__4914[safe_add( _4908,dim )] = _4885;
          {
            int _4920 = (int)0;
            int _4921 = (int)0;
            int _4922 = (int)0;
            _ptr__4914[_4907] = (int)0;
            if (_4891)
            {
              {
                _ptr__4914[_4912] = (int)0;
              }
            }
            {}
            int _10902 = (int)0;
            int _10903 = _4896;
            for (int _4923 = _10902; _4923 < _10903; ++_4923)
            {
              {
                int _10904 = (int)0;
                int _10905 = _4859;
                for (int _4924 = _10904; _4924 < _10905; ++_4924)
                {
                  {
                    int _10906 = (int)0;
                    int _10907 = _ptr__4898[_4924];
                    for (int _4925 = _10906; _4925 < _10907; ++_4925)
                    {
                      {
                        int _10908 = (int)0;
                        int _10909 = _4905;
                        for (int _4926 = _10908; _4926 < _10909; ++_4926)
                        {
                          {
                            int _4927 = safe_add( safe_add( safe_mul( safe_mul( _4923,_ptr__4898[_4924] ),_4905 ),safe_mul( _4925,_4905 ) ),_4926 );
                            int _10910 = _ptr__4875[safe_add( _ptr__4867[_4924],_4927 )];
                            int _10911 = _ptr__4875[safe_add( safe_add( _ptr__4867[_4924],_4927 ),(int)1 )];
                            for (int _4928 = _10910; _4928 < _10911; ++_4928)
                            {
                              {
                                _ptr__4915[safe_add( _4909,_4922 )] = _ptr__4876[safe_add( _ptr__4868[_4924],_4928 )];
                                _ptr__4916[safe_add( _4910,_4922 )] = _ptr__4877[safe_add( _ptr__4870[_4924],_4928 )];
                                if ((_ptr__4865[_4924] > (int)0))
                                {
                                  {
                                    int _10912 = _ptr__4875[safe_add( _ptr__4872[_4924],_4928 )];
                                    int _10913 = _ptr__4875[safe_add( safe_add( _ptr__4872[_4924],_4928 ),(int)1 )];
                                    for (int _4929 = _10912; _4929 < _10913; ++_4929)
                                    {
                                      {
                                        _ptr__4914[safe_add( _4911,_4920 )] = _ptr__4875[safe_add( _ptr__4871[_4924],_4929 )];
                                        _ptr__4916[safe_add( _4913,_4920 )] = _ptr__4877[safe_add( _ptr__4873[_4924],_4929 )];
                                        ++ _4920;
                                      }
                                    }
                                    _ptr__4914[safe_add( safe_add( _4912,_4922 ),(int)1 )] = _4920;
                                  }
                                }
                                else if(_4891)
                                {
                                  {
                                    _ptr__4914[safe_add( _4911,_4920 )] = 2;
                                    _ptr__4916[safe_add( _4913,_4920 )] = 0.0;
                                    ++ _4920;
                                    _ptr__4914[safe_add( safe_add( _4912,_4922 ),(int)1 )] = _4920;
                                  }
                                }
                                {}
                                ++ _4922;
                              }
                            }
                            _ptr__4914[safe_add( safe_add( _4907,_4921 ),(int)1 )] = _4922;
                            ++ _4921;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      else
      {
        {
          int _4930 = (int)1;
          int _10914 = (int)0;
          int _10915 = dim;
          for (int _4931 = _10914; _4931 < _10915; ++_4931)
          {
            {
              _4930 *= _ptr__4875[safe_add( _4879,_4931 )];
            }
          }
          _4930 *= _4885;
          int _10916 = safe_add( dim,(int)1 );
          int _10917 = _4878;
          for (int _4932 = _10916; _4932 < _10917; ++_4932)
          {
            {
              _4930 *= _ptr__4875[safe_add( _4879,_4932 )];
            }
          }
          bool _4933 = (_4889 < _4930);
          _4856->alloc_expr(_4887,_4889,_4890,_4933,_4888);
          int _4934 = mosek::fusion::p_WorkStack::_get_impl(_4856)->ptr_base;
          int _4935 = mosek::fusion::p_WorkStack::_get_impl(_4856)->nidxs_base;
          int _10918;
          bool _10919 = _4933;
          if (_10919)
          {
            _10918 = mosek::fusion::p_WorkStack::_get_impl(_4856)->sp_base;
          }
          else
          {
            _10918 = _4856->alloci64(_4889);
          }
          int _4936 = _10918;
          int _4937 = mosek::fusion::p_WorkStack::_get_impl(_4856)->cof_base;
          int _4938 = mosek::fusion::p_WorkStack::_get_impl(_4856)->code_base;
          int _4939 = mosek::fusion::p_WorkStack::_get_impl(_4856)->codeptr_base;
          int _4940 = mosek::fusion::p_WorkStack::_get_impl(_4856)->cconst_base;
          int _4941 = mosek::fusion::p_WorkStack::_get_impl(_4856)->shape_base;
          int _10920 = (int)0;
          int _10921 = _4878;
          for (int _4942 = _10920; _4942 < _10921; ++_4942)
          {
            {
              ((*mosek::fusion::p_WorkStack::_get_impl(_4856)->i32)(safe_add( _4941,_4942 ))) = _ptr__4875[safe_add( _4879,_4942 )];
            }
          }
          ((*mosek::fusion::p_WorkStack::_get_impl(_4856)->i32)(safe_add( _4941,dim ))) = _4885;
          std::shared_ptr< monty::ndarray< int,1 > > _4943 = mosek::fusion::p_WorkStack::_get_impl(_4856)->i32;
          _checked_ptr_1<int> _ptr__4943(_4943 ? _4943->raw() : nullptr,_4943 ? _4943->size(0) : 0);
          std::shared_ptr< monty::ndarray< long long,1 > > _4944 = mosek::fusion::p_WorkStack::_get_impl(_4856)->i64;
          _checked_ptr_1<long long> _ptr__4944(_4944 ? _4944->raw() : nullptr,_4944 ? _4944->size(0) : 0);
          std::shared_ptr< monty::ndarray< double,1 > > _4945 = mosek::fusion::p_WorkStack::_get_impl(_4856)->f64;
          _checked_ptr_1<double> _ptr__4945(_4945 ? _4945->raw() : nullptr,_4945 ? _4945->size(0) : 0);
          if ((dim == (int)0))
          {
            {
              int _4946 = (int)0;
              int _4947 = (int)0;
              int _4948 = (int)0;
              long long _4949 = (long long)0;
              _ptr__4943[_4934] = (int)0;
              if ((_4888 > (int)0))
              {
                {
                  _ptr__4943[_4939] = (int)0;
                }
              }
              {}
              int _10922 = (int)0;
              int _10923 = _4859;
              for (int _4950 = _10922; _4950 < _10923; ++_4950)
              {
                {
                  int _10924 = (int)0;
                  int _10925 = _ptr__4863[_4950];
                  for (int _4951 = _10924; _4951 < _10925; ++_4951)
                  {
                    {
                      int _10926 = _ptr__4875[safe_add( _ptr__4867[_4950],_4951 )];
                      int _10927 = _ptr__4875[safe_add( safe_add( _ptr__4867[_4950],_4951 ),(int)1 )];
                      for (int _4952 = _10926; _4952 < _10927; ++_4952)
                      {
                        {
                          _ptr__4944[safe_add( _4935,_4947 )] = _ptr__4876[safe_add( _ptr__4868[_4950],_4952 )];
                          _ptr__4945[safe_add( _4937,_4947 )] = _ptr__4877[safe_add( _ptr__4870[_4950],_4952 )];
                          if ((_ptr__4865[_4950] > (int)0))
                          {
                            {
                              int _10928 = _ptr__4875[safe_add( _ptr__4872[_4950],_4952 )];
                              int _10929 = _ptr__4875[safe_add( safe_add( _ptr__4872[_4950],_4952 ),(int)1 )];
                              for (int _4953 = _10928; _4953 < _10929; ++_4953)
                              {
                                {
                                  _ptr__4943[safe_add( _4938,_4946 )] = _ptr__4875[safe_add( _ptr__4871[_4950],_4953 )];
                                  _ptr__4945[safe_add( _4940,_4946 )] = _ptr__4877[safe_add( _ptr__4873[_4950],_4953 )];
                                  ++ _4946;
                                }
                              }
                              _ptr__4943[safe_add( safe_add( _4939,_4947 ),(int)1 )] = _4946;
                            }
                          }
                          else if((_4888 > (int)0))
                          {
                            {
                              _ptr__4943[safe_add( _4938,_4946 )] = 2;
                              _ptr__4945[safe_add( _4940,_4946 )] = 0.0;
                              ++ _4946;
                              _ptr__4943[safe_add( safe_add( _4939,_4947 ),(int)1 )] = _4946;
                            }
                          }
                          {}
                          ++ _4947;
                        }
                      }
                      _ptr__4943[safe_add( safe_add( _4934,_4948 ),(int)1 )] = _4947;
                      if ((_ptr__4866[_4950] != (int)0))
                      {
                        {
                          _ptr__4944[safe_add( _4936,_4948 )] = safe_add( _4949,_ptr__4876[safe_add( _ptr__4869[_4950],_4951 )] );
                        }
                      }
                      else
                      {
                        {
                          _ptr__4944[safe_add( _4936,_4948 )] = safe_add( _4949,_4951 );
                        }
                      }
                      ++ _4948;
                    }
                  }
                  long long _4954 = (long long)1;
                  int _10930 = (int)0;
                  int _10931 = _4878;
                  for (int _4955 = _10930; _4955 < _10931; ++_4955)
                  {
                    {
                      _4954 *= _ptr__4875[safe_add( _ptr__4862[_4950],_4955 )];
                    }
                  }
                  _4949 += _4954;
                }
              }
            }
          }
          else
          {
            {
              int _4956 = (int)0;
              int _10932 = (int)0;
              int _10933 = _4887;
              for (int _4957 = _10932; _4957 < _10933; ++_4957)
              {
                {
                  if ((_4956 < _ptr__4943[safe_add( _4941,_4957 )]))
                  {
                    {
                      _4956 = _ptr__4943[safe_add( _4941,_4957 )];
                    }
                  }
                  {}
                }
              }
              int _4958 = _4858->alloci64(_4889);
              int _4959 = _4858->alloci32(_4889);
              int _4960 = _4858->alloci32(_4889);
              int _4961 = _4858->alloci32(_4889);
              int _4962 = _4858->alloci32(_4889);
              int _4963 = _4858->alloci32(safe_add( _4956,(int)1 ));
              std::shared_ptr< monty::ndarray< int,1 > > _4964 = mosek::fusion::p_WorkStack::_get_impl(_4858)->i32;
              _checked_ptr_1<int> _ptr__4964(_4964 ? _4964->raw() : nullptr,_4964 ? _4964->size(0) : 0);
              std::shared_ptr< monty::ndarray< long long,1 > > _4965 = mosek::fusion::p_WorkStack::_get_impl(_4858)->i64;
              _checked_ptr_1<long long> _ptr__4965(_4965 ? _4965->raw() : nullptr,_4965 ? _4965->size(0) : 0);
              {
                int _4966 = (int)0;
                int _10934 = (int)0;
                int _10935 = _4859;
                for (int _4967 = _10934; _4967 < _10935; ++_4967)
                {
                  {
                    int _4968 = _ptr__4898[_4967];
                    int _4969 = safe_mul( _4968,_4905 );
                    int _4970 = _4905;
                    if ((_ptr__4866[_4967] != (int)0))
                    {
                      {
                        int _10936 = (int)0;
                        int _10937 = _ptr__4863[_4967];
                        for (int _4971 = _10936; _4971 < _10937; ++_4971)
                        {
                          {
                            long long _4972 = (_ptr__4876[safe_add( _ptr__4869[_4967],_4971 )] / _4969);
                            long long _4973 = ((_ptr__4876[safe_add( _ptr__4869[_4967],_4971 )] / _4970) % _4968);
                            long long _4974 = (_ptr__4876[safe_add( _ptr__4869[_4967],_4971 )] % _4905);
                            _ptr__4965[safe_add( _4958,_4966 )] = safe_add( safe_mul( safe_add( safe_add( safe_mul( _4972,_4885 ),_4973 ),_ptr__4901[_4967] ),_4905 ),_4974 );
                            _ptr__4964[safe_add( _4959,_4966 )] = _4967;
                            _ptr__4964[safe_add( _4960,_4966 )] = _4971;
                            ++ _4966;
                          }
                        }
                      }
                    }
                    else
                    {
                      {
                        int _10938 = (int)0;
                        int _10939 = _ptr__4863[_4967];
                        for (int _4975 = _10938; _4975 < _10939; ++_4975)
                        {
                          {
                            long long _4976 = ((long long)_4975 / _4969);
                            long long _4977 = (((long long)_4975 / _4970) % _4968);
                            long long _4978 = ((long long)_4975 % _4905);
                            _ptr__4965[safe_add( _4958,_4966 )] = safe_add( safe_mul( safe_add( safe_add( safe_mul( _4976,_4885 ),_4977 ),_ptr__4901[_4967] ),_4905 ),_4978 );
                            _ptr__4964[safe_add( _4959,_4966 )] = _4967;
                            _ptr__4964[safe_add( _4960,_4966 )] = _4975;
                            ++ _4966;
                          }
                        }
                      }
                    }
                  }
                }
              }
              {
                std::shared_ptr< monty::ndarray< long long,1 > > _4979 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_4887)));
                _checked_ptr_1<long long> _ptr__4979(_4979 ? _4979->raw() : nullptr,_4979 ? _4979->size(0) : 0);
                _ptr__4979[(_4887 - (int)1)] = (int)1;
                int _10940 = (int)1;
                int _10941 = _4887;
                for (int _4980 = _10940; _4980 < _10941; ++_4980)
                {
                  {
                    _ptr__4979[((_4887 - _4980) - (int)1)] = safe_mul( _ptr__4979[(_4887 - _4980)],_ptr__4943[(safe_add( _4941,_4887 ) - _4980)] );
                  }
                }
                int _10942 = (int)0;
                int _10943 = _4889;
                for (int _4981 = _10942; _4981 < _10943; ++_4981)
                {
                  {
                    _ptr__4964[safe_add( _4961,_4981 )] = _4981;
                  }
                }
                int _10944 = (int)0;
                int _10945 = _4887;
                for (int _4982 = _10944; _4982 < _10945; ++_4982)
                {
                  {
                    int _4983 = ((_4887 - _4982) - (int)1);
                    int _4984 = _ptr__4943[safe_add( _4941,_4983 )];
                    int _10946 = (int)0;
                    int _10947 = safe_add( _4984,(int)1 );
                    for (int _4985 = _10946; _4985 < _10947; ++_4985)
                    {
                      {
                        _ptr__4964[safe_add( _4963,_4985 )] = (int)0;
                      }
                    }
                    int _10948 = (int)0;
                    int _10949 = _4889;
                    for (int _4986 = _10948; _4986 < _10949; ++_4986)
                    {
                      {
                        int _4987 = _ptr__4964[safe_add( _4961,_4986 )];
                        long long _4988 = ((_ptr__4965[safe_add( _4958,_4987 )] / _ptr__4979[_4983]) % _4984);
                        ++ _ptr__4964[safe_add( safe_add( _4963,_4988 ),(int)1 )];
                      }
                    }
                    {
                      int _10950 = (int)0;
                      int _10951 = _4984;
                      for (int _4989 = _10950; _4989 < _10951; ++_4989)
                      {
                        {
                          _ptr__4964[safe_add( safe_add( _4963,_4989 ),(int)1 )] += _ptr__4964[safe_add( _4963,_4989 )];
                        }
                      }
                      int _10952 = (int)0;
                      int _10953 = _4889;
                      for (int _4990 = _10952; _4990 < _10953; ++_4990)
                      {
                        {
                          int _4991 = _ptr__4964[safe_add( _4961,_4990 )];
                          long long _4992 = ((_ptr__4965[safe_add( _4958,_4991 )] / _ptr__4979[_4983]) % _4984);
                          _ptr__4964[safe_add( _4962,_ptr__4964[safe_add( _4963,_4992 )] )] = _4991;
                          ++ _ptr__4964[safe_add( _4963,_4992 )];
                        }
                      }
                    }
                    int _4993 = _4961;
                    _4961 = _4962;
                    _4962 = _4993;
                  }
                }
              }
              {
                int _4994 = (int)0;
                int _4995 = (int)0;
                _ptr__4943[_4934] = (int)0;
                if ((_4888 > (int)0))
                {
                  {
                    _ptr__4943[_4939] = (int)0;
                  }
                }
                {}
                int _10954 = (int)0;
                int _10955 = _4889;
                for (int _4996 = _10954; _4996 < _10955; ++_4996)
                {
                  {
                    int _4997 = _ptr__4964[safe_add( _4961,_4996 )];
                    int _4998 = _ptr__4964[safe_add( _4959,_4997 )];
                    int _4999 = _ptr__4964[safe_add( _4960,_4997 )];
                    int _10956 = _ptr__4875[safe_add( _ptr__4867[_4998],_4999 )];
                    int _10957 = _ptr__4875[safe_add( safe_add( _ptr__4867[_4998],_4999 ),(int)1 )];
                    for (int _5000 = _10956; _5000 < _10957; ++_5000)
                    {
                      {
                        _ptr__4944[safe_add( _4935,_4995 )] = _ptr__4876[safe_add( _ptr__4868[_4998],_5000 )];
                        _ptr__4945[safe_add( _4937,_4995 )] = _ptr__4877[safe_add( _ptr__4870[_4998],_5000 )];
                        if ((_ptr__4865[_4998] > (int)0))
                        {
                          {
                            int _10958 = _ptr__4875[safe_add( _ptr__4872[_4998],_5000 )];
                            int _10959 = _ptr__4875[safe_add( safe_add( _ptr__4872[_4998],_5000 ),(int)1 )];
                            for (int _5001 = _10958; _5001 < _10959; ++_5001)
                            {
                              {
                                _ptr__4943[safe_add( _4938,_4994 )] = _ptr__4875[safe_add( _ptr__4871[_4998],_5001 )];
                                _ptr__4945[safe_add( _4940,_4994 )] = _ptr__4877[safe_add( _ptr__4873[_4998],_5001 )];
                                ++ _4994;
                              }
                            }
                            _ptr__4943[safe_add( safe_add( _4939,_4995 ),(int)1 )] = _4994;
                          }
                        }
                        else if(_4891)
                        {
                          {
                            _ptr__4943[safe_add( _4938,_4994 )] = 2;
                            _ptr__4945[safe_add( _4940,_4994 )] = 0.0;
                            ++ _4994;
                            _ptr__4943[safe_add( safe_add( _4939,_4995 ),(int)1 )] = _4994;
                          }
                        }
                        {}
                        ++ _4995;
                      }
                    }
                    _ptr__4943[safe_add( safe_add( _4934,_4996 ),(int)1 )] = _4995;
                    _ptr__4944[safe_add( _4936,_4996 )] = _ptr__4965[safe_add( _4958,_4997 )];
                  }
                }
              }
            }
          }
          if ((!_4933))
          {
            {
              _4856->popi64(_4889);
            }
          }
          {}
        }
      }
    }
  }
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_ExprStack::getshape(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _5002,int _5003){
  if (((int)((_5002)->size(0)) == (int)0))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Cannot stack empty list"));
    }
  }
  else if(((int)((_5002)->size(0)) == (int)1))
  {
    {
      return ((*_5002)((int)0))->getShape();
    }
  }
  else
  {
    {
      std::vector<std::shared_ptr< monty::ndarray< int,1 > >> _10960;
      for (int _5005 = (int)0, _10961 = (int)((_5002)->size(0)); _5005 < _10961 ; ++_5005)
      {
        _10960.push_back(((*_5002)(_5005))->getShape());
      }
      auto _10962 = std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > >(new monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 >(monty::shape(_10960.size()),_10960.begin(),_10960.end()));
      std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > > _5004 = _10962;
      std::shared_ptr< monty::ndarray< int,1 > > _5006 = ((*_5004)((int)0));
      _checked_ptr_1<int> _ptr__5006(_5006 ? _5006->raw() : nullptr,_5006 ? _5006->size(0) : 0);
      int _5007 = (int)((_5006)->size(0));
      int _10963 = (int)1;
      int _10964 = (int)((_5004)->size(0));
      for (int _5008 = _10963; _5008 < _10964; ++_5008)
      {
        {
          if ((_5007 != (int)((((*_5004)(_5008)))->size(0))))
          {
            {
              throw ::mosek::fusion::DimensionError(std::string ("Mismatching expression dimensions"));
            }
          }
          {}
          int _10965 = (int)0;
          int _10966 = _5003;
          for (int _5009 = _10965; _5009 < _10966; ++_5009)
          {
            {
              if ((_ptr__5006[_5009] != ((*((*_5004)(_5008)))(_5009))))
              {
                {
                  throw ::mosek::fusion::DimensionError(std::string ("mismatching expression dimensions"));
                }
              }
              {}
            }
          }
          int _10967 = safe_add( _5003,(int)1 );
          int _10968 = _5007;
          for (int _5010 = _10967; _5010 < _10968; ++_5010)
          {
            {
              if ((_ptr__5006[_5010] != ((*((*_5004)(_5008)))(_5010))))
              {
                {
                  throw ::mosek::fusion::DimensionError(std::string ("mismatching expression dimensions"));
                }
              }
              {}
            }
          }
        }
      }
      if ((_5003 == _5007))
      {
        {
          std::shared_ptr< monty::ndarray< int,1 > > _5011 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(safe_add( _5007,(int)1 ))));
          _checked_ptr_1<int> _ptr__5011(_5011 ? _5011->raw() : nullptr,_5011 ? _5011->size(0) : 0);
          int _10969 = (int)0;
          int _10970 = _5007;
          for (int _5012 = _10969; _5012 < _10970; ++_5012)
          {
            {
              _ptr__5011[_5012] = _ptr__5006[_5012];
            }
          }
          _ptr__5011[_5007] = (int)((_5004)->size(0));
          return _5011;
        }
      }
      else
      {
        {
          std::shared_ptr< monty::ndarray< int,1 > > _5013 = _5006;
          _checked_ptr_1<int> _ptr__5013(_5013 ? _5013->raw() : nullptr,_5013 ? _5013->size(0) : 0);
          int _10971 = (int)1;
          int _10972 = (int)((_5004)->size(0));
          for (int _5014 = _10971; _5014 < _10972; ++_5014)
          {
            {
              _ptr__5013[_5003] += ((*((*_5004)(_5014)))(_5003));
            }
          }
          return _5013;
        }
      }
    }
  }
}
std::string mosek::fusion::ExprStack :: toString() { return mosek::fusion::p_ExprStack::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprStack::toString(){
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _5015 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprStack(dim="))->__mosek_2fusion_2Utils_2StringBuffer__a(dim)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (",["))->__mosek_2fusion_2Utils_2StringBuffer__a(((*exprs)((int)0))->toString());
  int _10973 = (int)1;
  int _10974 = (int)((exprs)->size(0));
  for (int _5016 = _10973; _5016 < _10974; ++_5016)
  {
    {
      _5015->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(((*exprs)(_5016))->toString());
    }
  }
  _5015->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("])"));
  return _5015->toString();
}
void mosek::fusion::p_ExprStack::destroy(){exprs.reset();}void mosek::fusion::ExprStack::destroy() { mosek::fusion::p_ExprStack::_get_impl(this)->destroy(); }mosek::fusion::ExprInner::ExprInner(mosek::fusion::p_ExprInner *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprInner()" << this << std::endl; */ }mosek::fusion::ExprInner::~ExprInner() {  /* std::cout << "~ExprInner()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprInner::p_ExprInner  (::mosek::fusion::ExprInner * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprInner::t mosek::fusion::p_ExprInner::_new_ExprInner  (monty::rc_ptr< ::mosek::fusion::Expression > _5017,    std::shared_ptr< monty::ndarray< long long,1 > > _5018,    std::shared_ptr< monty::ndarray< double,1 > > _5019){ return new mosek::fusion::ExprInner(_5017,_5018,_5019); }mosek::fusion::ExprInner::ExprInner  (monty::rc_ptr< ::mosek::fusion::Expression > _5017,    std::shared_ptr< monty::ndarray< long long,1 > > _5018,    std::shared_ptr< monty::ndarray< double,1 > > _5019) :    ExprInner(new mosek::fusion::p_ExprInner(this)){ mosek::fusion::p_ExprInner::_get_impl(this)->_initialize(_5017,_5018,_5019); }void mosek::fusion::p_ExprInner::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _5017,    std::shared_ptr< monty::ndarray< long long,1 > > _5018,    std::shared_ptr< monty::ndarray< double,1 > > _5019){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<long long> _ptr__5018(_5018 ? _5018->raw() : nullptr, _5018 ? _5018->size(0) : 0);
    _checked_ptr_1<double> _ptr__5019(_5019 ? _5019->raw() : nullptr, _5019 ? _5019->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))));
    mosek::fusion::p_ExprInner::_get_impl(::mosek::fusion::ExprInner::t(_pubthis))->expr = _5017;
    mosek::fusion::p_ExprInner::_get_impl(::mosek::fusion::ExprInner::t(_pubthis))->vsub = _5018;
    mosek::fusion::p_ExprInner::_get_impl(::mosek::fusion::ExprInner::t(_pubthis))->vcof = _5019;
    if (((int)((_5018)->size(0)) != (int)((_5019)->size(0))))
    {
      {
        throw ::mosek::fusion::LengthError(std::string ("Mismatching lengths of vcof and vsub"));
      }
    }
    {}
    std::shared_ptr< monty::ndarray< int,1 > > _5020 = _5017->getShape();
    _checked_ptr_1<int> _ptr__5020(_5020 ? _5020->raw() : nullptr,_5020 ? _5020->size(0) : 0);
    long long _5021 = ::mosek::fusion::p_Set::size(_5020);
    bool _5022 = false;
    bool _5023 = false;
    {
      int _10975 = (int)1;
      int _10976 = (int)((_5018)->size(0));
      for (int _5024 = _10975; _5024 < _10976; ++_5024)
      {
        {
          if ((_ptr__5018[_5024] <= _ptr__5018[(_5024 - (int)1)]))
          {
            {
              _5022 = true;
            }
          }
          {}
        }
      }
      if (((int)((_5018)->size(0)) > (int)0))
      {
        {
          if (((_ptr__5018[(int)0] < (int)0) || (_ptr__5018[((int)((_5018)->size(0)) - (int)1)] > _5021)))
          {
            {
              _5023 = true;
            }
          }
          {}
        }
      }
      {}
    }
    if (_5022)
    {
      {
        throw ::mosek::fusion::IndexError(std::string ("Unordered coefficcient subscripts"));
      }
    }
    {}
    if (_5023)
    {
      {
        throw ::mosek::fusion::IndexError(std::string ("Coefficient subscript out of bounds"));
      }
    }
    {}
  }
}mosek::fusion::ExprInner::t mosek::fusion::p_ExprInner::_new_ExprInner  (monty::rc_ptr< ::mosek::fusion::Expression > _5025,    std::shared_ptr< monty::ndarray< double,1 > > _5026){ return new mosek::fusion::ExprInner(_5025,_5026); }mosek::fusion::ExprInner::ExprInner  (monty::rc_ptr< ::mosek::fusion::Expression > _5025,    std::shared_ptr< monty::ndarray< double,1 > > _5026) :    ExprInner(new mosek::fusion::p_ExprInner(this)){ mosek::fusion::p_ExprInner::_get_impl(this)->_initialize(_5025,_5026); }void mosek::fusion::p_ExprInner::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _5025,    std::shared_ptr< monty::ndarray< double,1 > > _5026){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<double> _ptr__5026(_5026 ? _5026->raw() : nullptr, _5026 ? _5026->size(0) : 0);
    mosek::fusion::p_ExprInner::_initialize(_5025,::mosek::fusion::p_ExprInner::range((int)((_5026)->size(0))),_5026);
    std::shared_ptr< monty::ndarray< int,1 > > _5027 = _5025->getShape();
    _checked_ptr_1<int> _ptr__5027(_5027 ? _5027->raw() : nullptr,_5027 ? _5027->size(0) : 0);
    if ((((int)((_5027)->size(0)) != (int)1) || (_ptr__5027[(int)0] != (int)((_5026)->size(0)))))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Mismatching dimensions of operands"));
      }
    }
    {}
  }
}mosek::fusion::ExprInner::t mosek::fusion::p_ExprInner::_new_ExprInner  (monty::rc_ptr< ::mosek::fusion::Expression > _5028,    std::shared_ptr< monty::ndarray< int,2 > > _5029,    std::shared_ptr< monty::ndarray< double,1 > > _5030){ return new mosek::fusion::ExprInner(_5028,_5029,_5030); }mosek::fusion::ExprInner::ExprInner  (monty::rc_ptr< ::mosek::fusion::Expression > _5028,    std::shared_ptr< monty::ndarray< int,2 > > _5029,    std::shared_ptr< monty::ndarray< double,1 > > _5030) :    ExprInner(new mosek::fusion::p_ExprInner(this)){ mosek::fusion::p_ExprInner::_get_impl(this)->_initialize(_5028,_5029,_5030); }void mosek::fusion::p_ExprInner::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _5028,    std::shared_ptr< monty::ndarray< int,2 > > _5029,    std::shared_ptr< monty::ndarray< double,1 > > _5030){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<double> _ptr__5030(_5030 ? _5030->raw() : nullptr, _5030 ? _5030->size(0) : 0);
    mosek::fusion::p_ExprInner::_initialize(_5028,::mosek::fusion::p_ExprInner::convert(_5028->getShape(),_5029),_5030);
  }
}void mosek::fusion::ExprInner :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _5031,monty::rc_ptr< ::mosek::fusion::WorkStack > _5032,monty::rc_ptr< ::mosek::fusion::WorkStack > _5033) { mosek::fusion::p_ExprInner::_get_impl(this)->eval(_5031,_5032,_5033); }void mosek::fusion::p_ExprInner::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _5031,monty::rc_ptr< ::mosek::fusion::WorkStack > _5032,monty::rc_ptr< ::mosek::fusion::WorkStack > _5033){
  expr->eval(_5032,_5031,_5033);
  _5032->pop_expr();
  int _5034 = mosek::fusion::p_WorkStack::_get_impl(_5032)->nd;
  int _5035 = mosek::fusion::p_WorkStack::_get_impl(_5032)->nelem;
  int _5036 = mosek::fusion::p_WorkStack::_get_impl(_5032)->nnz;
  int _5037 = mosek::fusion::p_WorkStack::_get_impl(_5032)->ncodeatom;
  bool _5038 = mosek::fusion::p_WorkStack::_get_impl(_5032)->hassp;
  int _5039 = mosek::fusion::p_WorkStack::_get_impl(_5032)->shape_base;
  int _5040 = mosek::fusion::p_WorkStack::_get_impl(_5032)->ptr_base;
  int _5041 = mosek::fusion::p_WorkStack::_get_impl(_5032)->nidxs_base;
  int _5042 = mosek::fusion::p_WorkStack::_get_impl(_5032)->sp_base;
  int _5043 = mosek::fusion::p_WorkStack::_get_impl(_5032)->cof_base;
  int _5044 = mosek::fusion::p_WorkStack::_get_impl(_5032)->code_base;
  int _5045 = mosek::fusion::p_WorkStack::_get_impl(_5032)->codeptr_base;
  int _5046 = mosek::fusion::p_WorkStack::_get_impl(_5032)->cconst_base;
  std::shared_ptr< monty::ndarray< int,1 > > _5047 = mosek::fusion::p_WorkStack::_get_impl(_5032)->i32;
  _checked_ptr_1<int> _ptr__5047(_5047 ? _5047->raw() : nullptr,_5047 ? _5047->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _5048 = mosek::fusion::p_WorkStack::_get_impl(_5032)->i64;
  _checked_ptr_1<long long> _ptr__5048(_5048 ? _5048->raw() : nullptr,_5048 ? _5048->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _5049 = mosek::fusion::p_WorkStack::_get_impl(_5032)->f64;
  _checked_ptr_1<double> _ptr__5049(_5049 ? _5049->raw() : nullptr,_5049 ? _5049->size(0) : 0);
  int _5050 = (int)0;
  if (_5038)
  {
    {
      int _5051 = (int)0;
      int _5052 = (int)0;
      while ( ((_5052 < (int)((vsub)->size(0))) && (_5051 < _5035)) )
      {
        {
          if ((_ptr__5048[safe_add( _5042,_5051 )] < ((*vsub)(_5052))))
          {
            {
              ++ _5051;
            }
          }
          else if((_ptr__5048[safe_add( _5042,_5051 )] > ((*vsub)(_5052))))
          {
            {
              ++ _5052;
            }
          }
          else
          {
            {
              _5050 += (_ptr__5047[safe_add( safe_add( _5040,_5051 ),(int)1 )] - _ptr__5047[safe_add( _5040,_5051 )]);
              ++ _5052;
              ++ _5051;
            }
          }
        }
      }
    }
  }
  else
  {
    {
      int _10977 = (int)0;
      int _10978 = (int)((vsub)->size(0));
      for (int _5053 = _10977; _5053 < _10978; ++_5053)
      {
        {
          _5050 += (_ptr__5047[safe_add( safe_add( _5040,((*vsub)(_5053)) ),(int)1 )] - _ptr__5047[safe_add( _5040,((*vsub)(_5053)) )]);
        }
      }
    }
  }
  int _10979;
  bool _10980 = (_5037 > (int)0);
  if (_10980)
  {
    _10979 = safe_add( _5037,safe_mul( (int)2,_5036 ) );
  }
  else
  {
    _10979 = (int)0;
  }
  int _5054 = _10979;
  _5031->alloc_expr((int)0,(int)1,_5050,false,_5054);
  int _5055 = mosek::fusion::p_WorkStack::_get_impl(_5031)->ptr_base;
  int _5056 = mosek::fusion::p_WorkStack::_get_impl(_5031)->nidxs_base;
  int _5057 = mosek::fusion::p_WorkStack::_get_impl(_5031)->cof_base;
  int _5058 = mosek::fusion::p_WorkStack::_get_impl(_5031)->code_base;
  int _5059 = mosek::fusion::p_WorkStack::_get_impl(_5031)->codeptr_base;
  int _5060 = mosek::fusion::p_WorkStack::_get_impl(_5031)->cconst_base;
  std::shared_ptr< monty::ndarray< int,1 > > _5061 = mosek::fusion::p_WorkStack::_get_impl(_5031)->i32;
  _checked_ptr_1<int> _ptr__5061(_5061 ? _5061->raw() : nullptr,_5061 ? _5061->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _5062 = mosek::fusion::p_WorkStack::_get_impl(_5031)->i64;
  _checked_ptr_1<long long> _ptr__5062(_5062 ? _5062->raw() : nullptr,_5062 ? _5062->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _5063 = mosek::fusion::p_WorkStack::_get_impl(_5031)->f64;
  _checked_ptr_1<double> _ptr__5063(_5063 ? _5063->raw() : nullptr,_5063 ? _5063->size(0) : 0);
  _ptr__5061[_5055] = (int)0;
  _ptr__5061[safe_add( _5055,(int)1 )] = _5050;
  if ((_5054 > (int)0))
  {
    {
      _ptr__5061[_5059] = (int)0;
    }
  }
  {}
  int _5064 = (int)0;
  int _5065 = (int)0;
  if (_5038)
  {
    {
      int _5066 = (int)0;
      int _5067 = (int)0;
      while ( ((_5067 < (int)((vsub)->size(0))) && (_5066 < _5035)) )
      {
        {
          if ((_ptr__5048[safe_add( _5042,_5066 )] < ((*vsub)(_5067))))
          {
            {
              ++ _5066;
            }
          }
          else if((_ptr__5048[safe_add( _5042,_5066 )] > ((*vsub)(_5067))))
          {
            {
              ++ _5067;
            }
          }
          else
          {
            {
              int _5068 = _ptr__5047[safe_add( _5040,_5066 )];
              int _5069 = _ptr__5047[safe_add( safe_add( _5040,_5066 ),(int)1 )];
              int _10981 = _5068;
              int _10982 = _5069;
              for (int _5070 = _10981; _5070 < _10982; ++_5070)
              {
                {
                  _ptr__5062[safe_add( _5056,_5065 )] = _ptr__5048[safe_add( _5041,_5070 )];
                  _ptr__5063[safe_add( _5057,_5065 )] = (((*vcof)(_5067)) * _ptr__5049[safe_add( _5043,_5070 )]);
                  if ((_5054 > (int)0))
                  {
                    {
                      int _10983 = _ptr__5047[safe_add( _5045,_5070 )];
                      int _10984 = _ptr__5047[safe_add( safe_add( _5045,_5070 ),(int)1 )];
                      for (int _5071 = _10983; _5071 < _10984; ++_5071)
                      {
                        {
                          _ptr__5061[safe_add( _5058,_5064 )] = _ptr__5047[safe_add( _5044,_5071 )];
                          _ptr__5063[safe_add( _5060,_5064 )] = _ptr__5049[safe_add( _5046,_5071 )];
                          ++ _5064;
                        }
                      }
                      _ptr__5061[safe_add( _5058,_5064 )] = 2;
                      _ptr__5063[safe_add( _5060,_5064 )] = ((*vcof)(_5067));
                      ++ _5064;
                      _ptr__5061[safe_add( _5058,_5064 )] = 5;
                      ++ _5064;
                      _ptr__5061[safe_add( safe_add( _5059,_5065 ),(int)1 )] = _5064;
                    }
                  }
                  {}
                  ++ _5065;
                }
              }
              ++ _5067;
              ++ _5066;
            }
          }
        }
      }
    }
  }
  else
  {
    {
      int _10985 = (int)0;
      int _10986 = (int)((vsub)->size(0));
      for (int _5072 = _10985; _5072 < _10986; ++_5072)
      {
        {
          int _5073 = _ptr__5047[safe_add( _5040,((*vsub)(_5072)) )];
          int _5074 = _ptr__5047[safe_add( safe_add( _5040,((*vsub)(_5072)) ),(int)1 )];
          int _10987 = _5073;
          int _10988 = _5074;
          for (int _5075 = _10987; _5075 < _10988; ++_5075)
          {
            {
              _ptr__5062[safe_add( _5056,_5065 )] = _ptr__5048[safe_add( _5041,_5075 )];
              _ptr__5063[safe_add( _5057,_5065 )] = (((*vcof)(_5072)) * _ptr__5049[safe_add( _5043,_5075 )]);
              if ((_5054 > (int)0))
              {
                {
                  int _10989 = _ptr__5047[safe_add( _5045,_5075 )];
                  int _10990 = _ptr__5047[safe_add( safe_add( _5045,_5075 ),(int)1 )];
                  for (int _5076 = _10989; _5076 < _10990; ++_5076)
                  {
                    {
                      _ptr__5061[safe_add( _5058,_5064 )] = _ptr__5047[safe_add( _5044,_5076 )];
                      _ptr__5063[safe_add( _5060,_5064 )] = _ptr__5047[safe_add( _5046,_5076 )];
                      ++ _5064;
                    }
                  }
                  _ptr__5061[safe_add( _5058,_5064 )] = 2;
                  _ptr__5063[safe_add( _5060,_5064 )] = ((*vcof)(_5072));
                  ++ _5064;
                  _ptr__5061[safe_add( _5058,_5064 )] = 5;
                  ++ _5064;
                  _ptr__5061[safe_add( safe_add( _5059,_5065 ),(int)1 )] = _5064;
                }
              }
              {}
              ++ _5065;
            }
          }
        }
      }
    }
  }
}
std::shared_ptr< monty::ndarray< long long,1 > > mosek::fusion::p_ExprInner::range(int _5077){
  std::vector<long long> _10991;
  for (int _5078 = (int)0, _10992 = _5077; _5078 < _10992 ; ++_5078)
  {
    _10991.push_back(_5078);
  }
  auto _10993 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_10991.size()),_10991.begin(),_10991.end()));
  return _10993;
}
std::shared_ptr< monty::ndarray< long long,1 > > mosek::fusion::p_ExprInner::convert(std::shared_ptr< monty::ndarray< int,1 > > _5079,std::shared_ptr< monty::ndarray< int,2 > > _5080){
  _checked_ptr_1<int> _ptr__5079(_5079 ? _5079->raw() : nullptr, _5079 ? _5079->size(0) : 0);
  int _5081 = (int)((_5079)->size(0));
  std::shared_ptr< monty::ndarray< long long,1 > > _5082 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_5081)));
  _checked_ptr_1<long long> _ptr__5082(_5082 ? _5082->raw() : nullptr,_5082 ? _5082->size(0) : 0);
  _ptr__5082[(_5081 - (int)1)] = (int)1;
  int _10994 = (int)1;
  int _10995 = _5081;
  for (int _5083 = _10994; _5083 < _10995; ++_5083)
  {
    {
      _ptr__5082[((_5081 - _5083) - (int)1)] = safe_mul( _ptr__5082[(_5081 - _5083)],_ptr__5079[(_5081 - _5083)] );
    }
  }
  std::shared_ptr< monty::ndarray< long long,1 > > _5084 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((_5080)->size(0)))));
  _checked_ptr_1<long long> _ptr__5084(_5084 ? _5084->raw() : nullptr,_5084 ? _5084->size(0) : 0);
  int _10996 = (int)0;
  int _10997 = (int)((_5080)->size(0));
  for (int _5085 = _10996; _5085 < _10997; ++_5085)
  {
    {
      int _10998 = (int)0;
      int _10999 = _5081;
      for (int _5086 = _10998; _5086 < _10999; ++_5086)
      {
        {
          _ptr__5084[_5085] += safe_mul( _ptr__5082[_5086],((*_5080)(_5085,_5086)) );
        }
      }
    }
  }
  return _5084;
}
std::string mosek::fusion::ExprInner :: toString() { return mosek::fusion::p_ExprInner::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprInner::toString(){
  return std::string ("ExprInner()");
}
void mosek::fusion::p_ExprInner::destroy(){vcof.reset();vsub.reset();expr.reset();}void mosek::fusion::ExprInner::destroy() { mosek::fusion::p_ExprInner::_get_impl(this)->destroy(); }mosek::fusion::ExprMulDiagRight::ExprMulDiagRight(mosek::fusion::p_ExprMulDiagRight *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprMulDiagRight()" << this << std::endl; */ }mosek::fusion::ExprMulDiagRight::~ExprMulDiagRight() {  /* std::cout << "~ExprMulDiagRight()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprMulDiagRight::p_ExprMulDiagRight  (::mosek::fusion::ExprMulDiagRight * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprMulDiagRight::t mosek::fusion::p_ExprMulDiagRight::_new_ExprMulDiagRight  (int _5087,    int _5088,    std::shared_ptr< monty::ndarray< int,1 > > _5089,    std::shared_ptr< monty::ndarray< int,1 > > _5090,    std::shared_ptr< monty::ndarray< double,1 > > _5091,    monty::rc_ptr< ::mosek::fusion::Expression > _5092,    int _5093){ return new mosek::fusion::ExprMulDiagRight(_5087,_5088,_5089,_5090,_5091,_5092,_5093); }mosek::fusion::ExprMulDiagRight::ExprMulDiagRight  (int _5087,    int _5088,    std::shared_ptr< monty::ndarray< int,1 > > _5089,    std::shared_ptr< monty::ndarray< int,1 > > _5090,    std::shared_ptr< monty::ndarray< double,1 > > _5091,    monty::rc_ptr< ::mosek::fusion::Expression > _5092,    int _5093) :    ExprMulDiagRight(new mosek::fusion::p_ExprMulDiagRight(this)){ mosek::fusion::p_ExprMulDiagRight::_get_impl(this)->_initialize(_5087,_5088,_5089,_5090,_5091,_5092,_5093); }void mosek::fusion::p_ExprMulDiagRight::_initialize  (int _5087,    int _5088,    std::shared_ptr< monty::ndarray< int,1 > > _5089,    std::shared_ptr< monty::ndarray< int,1 > > _5090,    std::shared_ptr< monty::ndarray< double,1 > > _5091,    monty::rc_ptr< ::mosek::fusion::Expression > _5092,    int _5093){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__5089(_5089 ? _5089->raw() : nullptr, _5089 ? _5089->size(0) : 0);
    _checked_ptr_1<int> _ptr__5090(_5090 ? _5090->raw() : nullptr, _5090 ? _5090->size(0) : 0);
    _checked_ptr_1<double> _ptr__5091(_5091 ? _5091->raw() : nullptr, _5091 ? _5091->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_5088)}));
    mosek::fusion::p_ExprMulDiagRight::_get_impl(::mosek::fusion::ExprMulDiagRight::t(_pubthis))->mdim0 = _5087;
    mosek::fusion::p_ExprMulDiagRight::_get_impl(::mosek::fusion::ExprMulDiagRight::t(_pubthis))->mdim1 = _5088;
    mosek::fusion::p_ExprMulDiagRight::_get_impl(::mosek::fusion::ExprMulDiagRight::t(_pubthis))->msubi = _5089;
    mosek::fusion::p_ExprMulDiagRight::_get_impl(::mosek::fusion::ExprMulDiagRight::t(_pubthis))->msubj = _5090;
    mosek::fusion::p_ExprMulDiagRight::_get_impl(::mosek::fusion::ExprMulDiagRight::t(_pubthis))->mval = _5091;
    mosek::fusion::p_ExprMulDiagRight::_get_impl(::mosek::fusion::ExprMulDiagRight::t(_pubthis))->expr = _5092;
  }
}mosek::fusion::ExprMulDiagRight::t mosek::fusion::p_ExprMulDiagRight::_new_ExprMulDiagRight  (int _5094,    int _5095,    std::shared_ptr< monty::ndarray< int,1 > > _5096,    std::shared_ptr< monty::ndarray< int,1 > > _5097,    std::shared_ptr< monty::ndarray< double,1 > > _5098,    monty::rc_ptr< ::mosek::fusion::Expression > _5099){ return new mosek::fusion::ExprMulDiagRight(_5094,_5095,_5096,_5097,_5098,_5099); }mosek::fusion::ExprMulDiagRight::ExprMulDiagRight  (int _5094,    int _5095,    std::shared_ptr< monty::ndarray< int,1 > > _5096,    std::shared_ptr< monty::ndarray< int,1 > > _5097,    std::shared_ptr< monty::ndarray< double,1 > > _5098,    monty::rc_ptr< ::mosek::fusion::Expression > _5099) :    ExprMulDiagRight(new mosek::fusion::p_ExprMulDiagRight(this)){ mosek::fusion::p_ExprMulDiagRight::_get_impl(this)->_initialize(_5094,_5095,_5096,_5097,_5098,_5099); }void mosek::fusion::p_ExprMulDiagRight::_initialize  (int _5094,    int _5095,    std::shared_ptr< monty::ndarray< int,1 > > _5096,    std::shared_ptr< monty::ndarray< int,1 > > _5097,    std::shared_ptr< monty::ndarray< double,1 > > _5098,    monty::rc_ptr< ::mosek::fusion::Expression > _5099){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__5096(_5096 ? _5096->raw() : nullptr, _5096 ? _5096->size(0) : 0);
    _checked_ptr_1<int> _ptr__5097(_5097 ? _5097->raw() : nullptr, _5097 ? _5097->size(0) : 0);
    _checked_ptr_1<double> _ptr__5098(_5098 ? _5098->raw() : nullptr, _5098 ? _5098->size(0) : 0);
    mosek::fusion::p_ExprMulDiagRight::_initialize(_5094,_5095,_5096,_5097,_5098,_5099,::mosek::fusion::p_ExprMulDiagRight::validate(_5094,_5095,_5096,_5097,_5098,_5099));
  }
}void mosek::fusion::ExprMulDiagRight :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _5100,monty::rc_ptr< ::mosek::fusion::WorkStack > _5101,monty::rc_ptr< ::mosek::fusion::WorkStack > _5102) { mosek::fusion::p_ExprMulDiagRight::_get_impl(this)->eval(_5100,_5101,_5102); }void mosek::fusion::p_ExprMulDiagRight::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _5100,monty::rc_ptr< ::mosek::fusion::WorkStack > _5101,monty::rc_ptr< ::mosek::fusion::WorkStack > _5102){
  mosek::fusion::p_ExprMulDiagRight::_get_impl(::mosek::fusion::ExprMulDiagRight::t(_pubthis))->expr->eval(_5101,_5100,_5102);
  _5101->pop_expr();
  int _5103 = mosek::fusion::p_WorkStack::_get_impl(_5101)->nd;
  int _5104 = mosek::fusion::p_WorkStack::_get_impl(_5101)->nnz;
  int _5105 = mosek::fusion::p_WorkStack::_get_impl(_5101)->nelem;
  int _5106 = mosek::fusion::p_WorkStack::_get_impl(_5101)->ncodeatom;
  bool _5107 = mosek::fusion::p_WorkStack::_get_impl(_5101)->hassp;
  int _5108 = mosek::fusion::p_WorkStack::_get_impl(_5101)->shape_base;
  int _5109 = mosek::fusion::p_WorkStack::_get_impl(_5101)->ptr_base;
  int _5110 = mosek::fusion::p_WorkStack::_get_impl(_5101)->sp_base;
  int _5111 = mosek::fusion::p_WorkStack::_get_impl(_5101)->nidxs_base;
  int _5112 = mosek::fusion::p_WorkStack::_get_impl(_5101)->cof_base;
  int _5113 = mosek::fusion::p_WorkStack::_get_impl(_5101)->codeptr_base;
  int _5114 = mosek::fusion::p_WorkStack::_get_impl(_5101)->code_base;
  int _5115 = mosek::fusion::p_WorkStack::_get_impl(_5101)->cconst_base;
  std::shared_ptr< monty::ndarray< int,1 > > _5116 = mosek::fusion::p_WorkStack::_get_impl(_5101)->i32;
  _checked_ptr_1<int> _ptr__5116(_5116 ? _5116->raw() : nullptr,_5116 ? _5116->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _5117 = mosek::fusion::p_WorkStack::_get_impl(_5101)->i64;
  _checked_ptr_1<long long> _ptr__5117(_5117 ? _5117->raw() : nullptr,_5117 ? _5117->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _5118 = mosek::fusion::p_WorkStack::_get_impl(_5101)->f64;
  _checked_ptr_1<double> _ptr__5118(_5118 ? _5118->raw() : nullptr,_5118 ? _5118->size(0) : 0);
  int _5119 = _ptr__5116[_5108];
  int _5120 = _ptr__5116[safe_add( _5108,(int)1 )];
  int _5121 = (int)((mval)->size(0));
  int _5122 = _5102->alloci32(_5121);
  int _5123 = _5102->alloci32(safe_add( mdim1,(int)1 ));
  std::shared_ptr< monty::ndarray< int,1 > > _5124 = mosek::fusion::p_WorkStack::_get_impl(_5102)->i32;
  _checked_ptr_1<int> _ptr__5124(_5124 ? _5124->raw() : nullptr,_5124 ? _5124->size(0) : 0);
  {
    int _11000 = (int)0;
    int _11001 = safe_add( mdim1,(int)1 );
    for (int _5125 = _11000; _5125 < _11001; ++_5125)
    {
      {
        _ptr__5124[safe_add( _5123,_5125 )] = (int)0;
      }
    }
    int _11002 = (int)0;
    int _11003 = _5121;
    for (int _5126 = _11002; _5126 < _11003; ++_5126)
    {
      {
        ++ _ptr__5124[safe_add( safe_add( _5123,((*msubj)(_5126)) ),(int)1 )];
      }
    }
    int _11004 = (int)0;
    int _11005 = mdim1;
    for (int _5127 = _11004; _5127 < _11005; ++_5127)
    {
      {
        _ptr__5124[safe_add( safe_add( _5123,_5127 ),(int)1 )] += _ptr__5124[safe_add( _5123,_5127 )];
      }
    }
    int _11006 = (int)0;
    int _11007 = _5121;
    for (int _5128 = _11006; _5128 < _11007; ++_5128)
    {
      {
        _ptr__5124[safe_add( _5122,_ptr__5124[safe_add( _5123,((*msubj)(_5128)) )] )] = _5128;
        ++ _ptr__5124[safe_add( _5123,((*msubj)(_5128)) )];
      }
    }
    int _11008 = (int)0;
    int _11009 = mdim1;
    for (int _5129 = _11008; _5129 < _11009; ++_5129)
    {
      {
        _ptr__5124[(safe_add( _5123,mdim1 ) - _5129)] = _ptr__5124[((safe_add( _5123,mdim1 ) - _5129) - (int)1)];
      }
    }
    _ptr__5124[_5123] = (int)0;
  }
  int _5130 = (int)0;
  int _5131 = (int)0;
  int _5132 = (int)0;
  if ((!_5107))
  {
    {
      int _5133 = (int)0;
      while ( (_5133 < _5121) )
      {
        {
          int _5134 = ((*msubj)(_ptr__5124[safe_add( _5122,_5133 )]));
          int _5135 = _5133;
          while ( ((_5133 < _5121) && (_5134 == ((*msubj)(_ptr__5124[safe_add( _5122,_5133 )])))) )
          {
            {
              ++ _5133;
            }
          }
          int _11010 = _5135;
          int _11011 = _5133;
          for (int _5136 = _11010; _5136 < _11011; ++_5136)
          {
            {
              int _5137 = safe_add( safe_mul( ((*msubj)(_ptr__5124[safe_add( _5122,_5136 )])),_5120 ),((*msubi)(_ptr__5124[safe_add( _5122,_5136 )])) );
              _5131 += (_ptr__5116[safe_add( safe_add( _5109,_5137 ),(int)1 )] - _ptr__5116[safe_add( _5109,_5137 )]);
              if ((_5106 > (int)0))
              {
                {
                  _5130 += safe_add( (_ptr__5116[safe_add( _5113,_ptr__5116[safe_add( safe_add( _5109,_5137 ),(int)1 )] )] - _ptr__5116[safe_add( _5113,_ptr__5116[safe_add( _5109,_5137 )] )]),safe_mul( (int)2,(_ptr__5116[safe_add( safe_add( _5109,_5137 ),(int)1 )] - _ptr__5116[safe_add( _5109,_5137 )]) ) );
                }
              }
              {}
            }
          }
          ++ _5132;
        }
      }
    }
  }
  else
  {
    {
      int _5138 = (int)0;
      int _5139 = (int)0;
      int _11012 = (int)0;
      int _11013 = mdim1;
      for (int _5140 = _11012; _5140 < _11013; ++_5140)
      {
        {
          int _5141 = _5138;
          int _5142 = _5139;
          while ( ((_5138 < _5121) && (_5140 == ((*msubj)(_ptr__5124[safe_add( _5122,_5138 )])))) )
          {
            {
              ++ _5138;
            }
          }
          while ( ((_5139 < _5105) && (_5140 == (_ptr__5117[safe_add( _5110,_5139 )] / _5120))) )
          {
            {
              ++ _5139;
            }
          }
          int _5143 = _5141;
          int _5144 = _5142;
          int _5145 = (int)0;
          while ( ((_5144 < _5139) && (_5143 < _5138)) )
          {
            {
              if (((_ptr__5117[safe_add( _5110,_5144 )] % _5120) < ((*msubi)(_ptr__5124[safe_add( _5122,_5143 )]))))
              {
                {
                  ++ _5144;
                }
              }
              else if(((_ptr__5117[safe_add( _5110,_5144 )] % _5120) > ((*msubi)(_ptr__5124[safe_add( _5122,_5143 )]))))
              {
                {
                  ++ _5143;
                }
              }
              else
              {
                {
                  _5131 += (_ptr__5116[safe_add( safe_add( _5109,_5144 ),(int)1 )] - _ptr__5116[safe_add( _5109,_5144 )]);
                  if ((_5106 > (int)0))
                  {
                    {
                      _5130 += safe_add( (_ptr__5116[safe_add( _5113,_ptr__5116[safe_add( safe_add( _5109,_5144 ),(int)1 )] )] - _ptr__5116[safe_add( _5113,_ptr__5116[safe_add( _5109,_5144 )] )]),safe_mul( (int)2,(_ptr__5116[safe_add( safe_add( _5109,_5144 ),(int)1 )] - _ptr__5116[safe_add( _5109,_5144 )]) ) );
                    }
                  }
                  {}
                  ++ _5145;
                  ++ _5144;
                  ++ _5143;
                }
              }
            }
          }
          if ((_5145 > (int)0))
          {
            {
              ++ _5132;
            }
          }
          {}
        }
      }
    }
  }
  bool _5146 = (_5132 < _5119);
  _5100->alloc_expr((int)1,_5132,_5131,_5146,_5130);
  int _5147 = mosek::fusion::p_WorkStack::_get_impl(_5100)->ptr_base;
  int _5148 = mosek::fusion::p_WorkStack::_get_impl(_5100)->nidxs_base;
  int _11014;
  bool _11015 = _5146;
  if (_11015)
  {
    _11014 = mosek::fusion::p_WorkStack::_get_impl(_5100)->sp_base;
  }
  else
  {
    _11014 = _5100->alloci64(_5132);
  }
  int _5149 = _11014;
  int _5150 = mosek::fusion::p_WorkStack::_get_impl(_5100)->cof_base;
  int _5151 = mosek::fusion::p_WorkStack::_get_impl(_5100)->shape_base;
  int _5152 = mosek::fusion::p_WorkStack::_get_impl(_5100)->code_base;
  int _5153 = mosek::fusion::p_WorkStack::_get_impl(_5100)->codeptr_base;
  int _5154 = mosek::fusion::p_WorkStack::_get_impl(_5100)->cconst_base;
  std::shared_ptr< monty::ndarray< long long,1 > > _5155 = mosek::fusion::p_WorkStack::_get_impl(_5100)->i64;
  _checked_ptr_1<long long> _ptr__5155(_5155 ? _5155->raw() : nullptr,_5155 ? _5155->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _5156 = mosek::fusion::p_WorkStack::_get_impl(_5100)->f64;
  _checked_ptr_1<double> _ptr__5156(_5156 ? _5156->raw() : nullptr,_5156 ? _5156->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _5157 = mosek::fusion::p_WorkStack::_get_impl(_5100)->i32;
  _checked_ptr_1<int> _ptr__5157(_5157 ? _5157->raw() : nullptr,_5157 ? _5157->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _5158 = mosek::fusion::p_WorkStack::_get_impl(_5102)->i32;
  _checked_ptr_1<int> _ptr__5158(_5158 ? _5158->raw() : nullptr,_5158 ? _5158->size(0) : 0);
  {
    int _5159 = (int)0;
    int _5160 = (int)0;
    int _5161 = (int)0;
    _ptr__5157[_5147] = (int)0;
    if ((_5130 > (int)0))
    {
      {
        _ptr__5157[_5153] = (int)0;
      }
    }
    {}
    _ptr__5157[_5151] = mdim1;
    if ((!_5107))
    {
      {
        int _5162 = (int)0;
        while ( (_5162 < _5121) )
        {
          {
            int _5163 = ((*msubj)(_ptr__5158[safe_add( _5122,_5162 )]));
            int _5164 = _5162;
            while ( ((_5162 < _5121) && (_5163 == ((*msubj)(_ptr__5158[safe_add( _5122,_5162 )])))) )
            {
              {
                ++ _5162;
              }
            }
            int _11016 = _5164;
            int _11017 = _5162;
            for (int _5165 = _11016; _5165 < _11017; ++_5165)
            {
              {
                int _5166 = _ptr__5158[safe_add( _5122,_5165 )];
                int _5167 = safe_add( safe_mul( ((*msubj)(_5166)),_5120 ),((*msubi)(_5166)) );
                int _11018 = _ptr__5116[safe_add( _5109,_5167 )];
                int _11019 = _ptr__5116[safe_add( safe_add( _5109,_5167 ),(int)1 )];
                for (int _5168 = _11018; _5168 < _11019; ++_5168)
                {
                  {
                    _ptr__5155[safe_add( _5148,_5160 )] = _ptr__5117[safe_add( _5111,_5168 )];
                    _ptr__5156[safe_add( _5150,_5160 )] = (_ptr__5118[safe_add( _5112,_5168 )] * ((*mval)(_5166)));
                    if ((_5106 > (int)0))
                    {
                      {
                        int _11020 = _ptr__5116[safe_add( _5113,_5168 )];
                        int _11021 = _ptr__5116[safe_add( safe_add( _5113,_5168 ),(int)1 )];
                        for (int _5169 = _11020; _5169 < _11021; ++_5169)
                        {
                          {
                            _ptr__5157[safe_add( _5152,_5159 )] = _ptr__5116[safe_add( _5114,_5169 )];
                            _ptr__5156[safe_add( _5154,_5159 )] = _ptr__5118[safe_add( _5115,_5169 )];
                            ++ _5159;
                          }
                        }
                        _ptr__5157[safe_add( _5152,_5159 )] = 2;
                        _ptr__5156[safe_add( _5154,_5159 )] = ((*mval)(_5166));
                        ++ _5159;
                        _ptr__5157[safe_add( _5152,_5159 )] = 5;
                        ++ _5159;
                        _ptr__5157[safe_add( safe_add( _5153,_5160 ),(int)1 )] = _5159;
                      }
                    }
                    {}
                    ++ _5160;
                  }
                }
              }
            }
            _ptr__5155[safe_add( _5149,_5161 )] = _5163;
            _ptr__5157[safe_add( safe_add( _5147,_5161 ),(int)1 )] = _5160;
            ++ _5161;
          }
        }
      }
    }
    else
    {
      {
        int _5170 = (int)0;
        int _5171 = (int)0;
        int _11022 = (int)0;
        int _11023 = mdim1;
        for (int _5172 = _11022; _5172 < _11023; ++_5172)
        {
          {
            int _5173 = _5170;
            int _5174 = _5171;
            while ( ((_5171 < _5105) && (_5172 == (_ptr__5117[safe_add( _5110,_5171 )] / _5120))) )
            {
              {
                ++ _5171;
              }
            }
            while ( ((_5170 < _5121) && (_5172 == ((*msubj)(_ptr__5158[safe_add( _5122,_5170 )])))) )
            {
              {
                ++ _5170;
              }
            }
            int _5175 = _5173;
            int _5176 = _5174;
            int _5177 = (int)0;
            while ( ((_5176 < _5171) && (_5175 < _5170)) )
            {
              {
                if (((_ptr__5117[safe_add( _5110,_5176 )] % _5120) < ((*msubi)(_ptr__5158[safe_add( _5122,_5175 )]))))
                {
                  {
                    ++ _5176;
                  }
                }
                else if(((_ptr__5117[safe_add( _5110,_5176 )] % _5120) > ((*msubi)(_ptr__5158[safe_add( _5122,_5175 )]))))
                {
                  {
                    ++ _5175;
                  }
                }
                else
                {
                  {
                    int _5178 = _ptr__5158[safe_add( _5122,_5175 )];
                    int _11024 = _ptr__5116[safe_add( _5109,_5176 )];
                    int _11025 = _ptr__5116[safe_add( safe_add( _5109,_5176 ),(int)1 )];
                    for (int _5179 = _11024; _5179 < _11025; ++_5179)
                    {
                      {
                        _ptr__5155[safe_add( _5148,_5160 )] = _ptr__5117[safe_add( _5111,_5179 )];
                        _ptr__5156[safe_add( _5150,_5160 )] = (_ptr__5118[safe_add( _5112,_5179 )] * ((*mval)(_5178)));
                        if ((_5106 > (int)0))
                        {
                          {
                            int _11026 = _ptr__5116[safe_add( _5113,_5179 )];
                            int _11027 = _ptr__5116[safe_add( safe_add( _5113,_5179 ),(int)1 )];
                            for (int _5180 = _11026; _5180 < _11027; ++_5180)
                            {
                              {
                                _ptr__5157[safe_add( _5152,_5159 )] = _ptr__5116[safe_add( _5114,_5180 )];
                                _ptr__5156[safe_add( _5154,_5159 )] = _ptr__5118[safe_add( _5115,_5180 )];
                                ++ _5159;
                              }
                            }
                            _ptr__5157[safe_add( _5152,_5159 )] = 2;
                            _ptr__5156[safe_add( _5154,_5159 )] = ((*mval)(_5178));
                            ++ _5159;
                            _ptr__5157[safe_add( _5152,_5159 )] = 5;
                            ++ _5159;
                            _ptr__5157[safe_add( safe_add( _5153,_5160 ),(int)1 )] = _5159;
                          }
                        }
                        {}
                        ++ _5160;
                      }
                    }
                    ++ _5177;
                    ++ _5176;
                    ++ _5175;
                  }
                }
              }
            }
            if ((_5177 > (int)0))
            {
              {
                _ptr__5157[safe_add( safe_add( _5147,_5161 ),(int)1 )] = _5160;
                _ptr__5155[safe_add( _5149,_5161 )] = _5172;
                ++ _5161;
              }
            }
            {}
          }
        }
      }
    }
    if ((!_5146))
    {
      {
        _5100->popi64(_5132);
      }
    }
    {}
    if ((!(_5131 == _5160)))
    {
      {
        throw ::mosek::fusion::UnexpectedError(std::string ("Incorrect number of non-zeros"));
      }
    }
    {}
    if ((!(_5132 == _5161)))
    {
      {
        throw ::mosek::fusion::UnexpectedError(std::string ("Incorrect number of elements"));
      }
    }
    {}
  }
  _5102->clear();
}
int mosek::fusion::p_ExprMulDiagRight::validate(int _5181,int _5182,std::shared_ptr< monty::ndarray< int,1 > > _5183,std::shared_ptr< monty::ndarray< int,1 > > _5184,std::shared_ptr< monty::ndarray< double,1 > > _5185,monty::rc_ptr< ::mosek::fusion::Expression > _5186){
  _checked_ptr_1<int> _ptr__5183(_5183 ? _5183->raw() : nullptr, _5183 ? _5183->size(0) : 0);
  _checked_ptr_1<int> _ptr__5184(_5184 ? _5184->raw() : nullptr, _5184 ? _5184->size(0) : 0);
  _checked_ptr_1<double> _ptr__5185(_5185 ? _5185->raw() : nullptr, _5185 ? _5185->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _5187 = _5186->getShape();
  _checked_ptr_1<int> _ptr__5187(_5187 ? _5187->raw() : nullptr,_5187 ? _5187->size(0) : 0);
  if (((int)((_5187)->size(0)) > (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions"));
    }
  }
  {}
  int _5188 = _ptr__5187[(int)0];
  int _5189 = _ptr__5187[(int)1];
  if (((_5181 < (int)0) || ((_5182 < (int)0) || ((_5188 < (int)0) || (_5189 < (int)0)))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions"));
    }
  }
  {}
  if (((_5181 != _5189) || (_5182 != _5188)))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand dimensions"));
    }
  }
  {}
  if ((((int)((_5183)->size(0)) != (int)((_5184)->size(0))) || ((int)((_5183)->size(0)) != (int)((_5185)->size(0)))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Invalid matrix data"));
    }
  }
  {}
  int _5190 = (int)((_5183)->size(0));
  bool _5191 = false;
  bool _5192 = false;
  {
    int _11028 = (int)0;
    int _11029 = _5190;
    for (int _5193 = _11028; _5193 < _11029; ++_5193)
    {
      {
        if (((_ptr__5183[_5193] < (int)0) || ((_ptr__5183[_5193] >= _5181) || ((_ptr__5184[_5193] < (int)0) || (_ptr__5184[_5193] >= _5182)))))
        {
          {
            _5191 = true;
          }
        }
        {}
      }
    }
    int _11030 = (int)0;
    int _11031 = (_5190 - (int)1);
    for (int _5194 = _11030; _5194 < _11031; ++_5194)
    {
      {
        if (((_ptr__5183[_5194] > _ptr__5183[safe_add( _5194,(int)1 )]) || ((_ptr__5183[_5194] == _ptr__5183[safe_add( _5194,(int)1 )]) && (_ptr__5184[_5194] >= _ptr__5184[safe_add( _5194,(int)1 )]))))
        {
          {
            _5192 = true;
          }
        }
        {}
      }
    }
  }
  if (_5191)
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Invalid matrix data"));
    }
  }
  {}
  if (_5192)
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Unsorted matrix data"));
    }
  }
  {}
  return (int)1;
}
std::string mosek::fusion::ExprMulDiagRight :: toString() { return mosek::fusion::p_ExprMulDiagRight::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprMulDiagRight::toString(){
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprMulDiagRight("))->__mosek_2fusion_2Utils_2StringBuffer__a(expr->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (",m)"))->toString();
}
void mosek::fusion::p_ExprMulDiagRight::destroy(){expr.reset();mval.reset();msubj.reset();msubi.reset();}void mosek::fusion::ExprMulDiagRight::destroy() { mosek::fusion::p_ExprMulDiagRight::_get_impl(this)->destroy(); }mosek::fusion::ExprMulDiagLeft::ExprMulDiagLeft(mosek::fusion::p_ExprMulDiagLeft *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprMulDiagLeft()" << this << std::endl; */ }mosek::fusion::ExprMulDiagLeft::~ExprMulDiagLeft() {  /* std::cout << "~ExprMulDiagLeft()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprMulDiagLeft::p_ExprMulDiagLeft  (::mosek::fusion::ExprMulDiagLeft * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprMulDiagLeft::t mosek::fusion::p_ExprMulDiagLeft::_new_ExprMulDiagLeft  (int _5195,    int _5196,    std::shared_ptr< monty::ndarray< int,1 > > _5197,    std::shared_ptr< monty::ndarray< int,1 > > _5198,    std::shared_ptr< monty::ndarray< double,1 > > _5199,    monty::rc_ptr< ::mosek::fusion::Expression > _5200,    int _5201){ return new mosek::fusion::ExprMulDiagLeft(_5195,_5196,_5197,_5198,_5199,_5200,_5201); }mosek::fusion::ExprMulDiagLeft::ExprMulDiagLeft  (int _5195,    int _5196,    std::shared_ptr< monty::ndarray< int,1 > > _5197,    std::shared_ptr< monty::ndarray< int,1 > > _5198,    std::shared_ptr< monty::ndarray< double,1 > > _5199,    monty::rc_ptr< ::mosek::fusion::Expression > _5200,    int _5201) :    ExprMulDiagLeft(new mosek::fusion::p_ExprMulDiagLeft(this)){ mosek::fusion::p_ExprMulDiagLeft::_get_impl(this)->_initialize(_5195,_5196,_5197,_5198,_5199,_5200,_5201); }void mosek::fusion::p_ExprMulDiagLeft::_initialize  (int _5195,    int _5196,    std::shared_ptr< monty::ndarray< int,1 > > _5197,    std::shared_ptr< monty::ndarray< int,1 > > _5198,    std::shared_ptr< monty::ndarray< double,1 > > _5199,    monty::rc_ptr< ::mosek::fusion::Expression > _5200,    int _5201){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__5197(_5197 ? _5197->raw() : nullptr, _5197 ? _5197->size(0) : 0);
    _checked_ptr_1<int> _ptr__5198(_5198 ? _5198->raw() : nullptr, _5198 ? _5198->size(0) : 0);
    _checked_ptr_1<double> _ptr__5199(_5199 ? _5199->raw() : nullptr, _5199 ? _5199->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_5195)}));
    mosek::fusion::p_ExprMulDiagLeft::_get_impl(::mosek::fusion::ExprMulDiagLeft::t(_pubthis))->mdim0 = _5195;
    mosek::fusion::p_ExprMulDiagLeft::_get_impl(::mosek::fusion::ExprMulDiagLeft::t(_pubthis))->mdim1 = _5196;
    mosek::fusion::p_ExprMulDiagLeft::_get_impl(::mosek::fusion::ExprMulDiagLeft::t(_pubthis))->msubi = _5197;
    mosek::fusion::p_ExprMulDiagLeft::_get_impl(::mosek::fusion::ExprMulDiagLeft::t(_pubthis))->msubj = _5198;
    mosek::fusion::p_ExprMulDiagLeft::_get_impl(::mosek::fusion::ExprMulDiagLeft::t(_pubthis))->mval = _5199;
    mosek::fusion::p_ExprMulDiagLeft::_get_impl(::mosek::fusion::ExprMulDiagLeft::t(_pubthis))->expr = _5200;
  }
}mosek::fusion::ExprMulDiagLeft::t mosek::fusion::p_ExprMulDiagLeft::_new_ExprMulDiagLeft  (int _5202,    int _5203,    std::shared_ptr< monty::ndarray< int,1 > > _5204,    std::shared_ptr< monty::ndarray< int,1 > > _5205,    std::shared_ptr< monty::ndarray< double,1 > > _5206,    monty::rc_ptr< ::mosek::fusion::Expression > _5207){ return new mosek::fusion::ExprMulDiagLeft(_5202,_5203,_5204,_5205,_5206,_5207); }mosek::fusion::ExprMulDiagLeft::ExprMulDiagLeft  (int _5202,    int _5203,    std::shared_ptr< monty::ndarray< int,1 > > _5204,    std::shared_ptr< monty::ndarray< int,1 > > _5205,    std::shared_ptr< monty::ndarray< double,1 > > _5206,    monty::rc_ptr< ::mosek::fusion::Expression > _5207) :    ExprMulDiagLeft(new mosek::fusion::p_ExprMulDiagLeft(this)){ mosek::fusion::p_ExprMulDiagLeft::_get_impl(this)->_initialize(_5202,_5203,_5204,_5205,_5206,_5207); }void mosek::fusion::p_ExprMulDiagLeft::_initialize  (int _5202,    int _5203,    std::shared_ptr< monty::ndarray< int,1 > > _5204,    std::shared_ptr< monty::ndarray< int,1 > > _5205,    std::shared_ptr< monty::ndarray< double,1 > > _5206,    monty::rc_ptr< ::mosek::fusion::Expression > _5207){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__5204(_5204 ? _5204->raw() : nullptr, _5204 ? _5204->size(0) : 0);
    _checked_ptr_1<int> _ptr__5205(_5205 ? _5205->raw() : nullptr, _5205 ? _5205->size(0) : 0);
    _checked_ptr_1<double> _ptr__5206(_5206 ? _5206->raw() : nullptr, _5206 ? _5206->size(0) : 0);
    mosek::fusion::p_ExprMulDiagLeft::_initialize(_5202,_5203,_5204,_5205,_5206,_5207,::mosek::fusion::p_ExprMulDiagLeft::validate(_5202,_5203,_5204,_5205,_5206,_5207));
  }
}void mosek::fusion::ExprMulDiagLeft :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _5208,monty::rc_ptr< ::mosek::fusion::WorkStack > _5209,monty::rc_ptr< ::mosek::fusion::WorkStack > _5210) { mosek::fusion::p_ExprMulDiagLeft::_get_impl(this)->eval(_5208,_5209,_5210); }void mosek::fusion::p_ExprMulDiagLeft::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _5208,monty::rc_ptr< ::mosek::fusion::WorkStack > _5209,monty::rc_ptr< ::mosek::fusion::WorkStack > _5210){
  mosek::fusion::p_ExprMulDiagLeft::_get_impl(::mosek::fusion::ExprMulDiagLeft::t(_pubthis))->expr->eval(_5209,_5208,_5210);
  _5209->pop_expr();
  std::shared_ptr< monty::ndarray< int,1 > > _5211 = mosek::fusion::p_WorkStack::_get_impl(_5209)->i32;
  _checked_ptr_1<int> _ptr__5211(_5211 ? _5211->raw() : nullptr,_5211 ? _5211->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _5212 = mosek::fusion::p_WorkStack::_get_impl(_5209)->i64;
  _checked_ptr_1<long long> _ptr__5212(_5212 ? _5212->raw() : nullptr,_5212 ? _5212->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _5213 = mosek::fusion::p_WorkStack::_get_impl(_5209)->f64;
  _checked_ptr_1<double> _ptr__5213(_5213 ? _5213->raw() : nullptr,_5213 ? _5213->size(0) : 0);
  int _5214 = mosek::fusion::p_WorkStack::_get_impl(_5209)->nd;
  int _5215 = mosek::fusion::p_WorkStack::_get_impl(_5209)->nelem;
  int _5216 = mosek::fusion::p_WorkStack::_get_impl(_5209)->nnz;
  bool _5217 = mosek::fusion::p_WorkStack::_get_impl(_5209)->hassp;
  int _5218 = mosek::fusion::p_WorkStack::_get_impl(_5209)->ncodeatom;
  int _5219 = mosek::fusion::p_WorkStack::_get_impl(_5209)->ptr_base;
  int _5220 = mosek::fusion::p_WorkStack::_get_impl(_5209)->code_base;
  int _5221 = mosek::fusion::p_WorkStack::_get_impl(_5209)->cconst_base;
  int _5222 = mosek::fusion::p_WorkStack::_get_impl(_5209)->codeptr_base;
  int _5223 = mosek::fusion::p_WorkStack::_get_impl(_5209)->shape_base;
  int _5224 = mosek::fusion::p_WorkStack::_get_impl(_5209)->sp_base;
  int _5225 = mosek::fusion::p_WorkStack::_get_impl(_5209)->nidxs_base;
  int _5226 = mosek::fusion::p_WorkStack::_get_impl(_5209)->cof_base;
  int _5227 = mosek::fusion::p_WorkStack::_get_impl(_5209)->cconst_base;
  if ((_5214 != (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operator shape for multiplication"));
    }
  }
  {}
  int _5228 = _ptr__5211[_5223];
  int _5229 = _ptr__5211[safe_add( _5223,(int)1 )];
  int _5230 = (int)((msubi)->size(0));
  if ((!_5217))
  {
    {
      int _5231 = (int)0;
      int _5232 = (int)0;
      int _5233 = (int)0;
      int _5234 = (int)0;
      while ( (_5234 < (int)((msubi)->size(0))) )
      {
        {
          int _5235 = ((*msubi)(_5234));
          while ( ((_5234 < (int)((msubi)->size(0))) && (((*msubi)(_5234)) == _5235)) )
          {
            {
              int _5236 = safe_add( safe_mul( ((*msubj)(_5234)),_5229 ),((*msubi)(_5234)) );
              _5231 += (_ptr__5211[safe_add( safe_add( _5219,_5236 ),(int)1 )] - _ptr__5211[safe_add( _5219,_5236 )]);
              if ((_5218 > (int)0))
              {
                {
                  _5233 += safe_add( (_ptr__5211[safe_add( _5222,_ptr__5211[safe_add( safe_add( _5219,_5236 ),(int)1 )] )] - _ptr__5211[safe_add( _5222,_ptr__5211[safe_add( _5219,_5236 )] )]),safe_mul( (int)2,(_ptr__5211[safe_add( safe_add( _5219,_5236 ),(int)1 )] - _ptr__5211[safe_add( _5219,_5236 )]) ) );
                }
              }
              {}
              ++ _5234;
            }
          }
          ++ _5232;
        }
      }
      bool _5237 = (_5232 < mdim0);
      _5208->alloc_expr((int)1,_5232,_5231,_5237,_5233);
      int _5238 = mosek::fusion::p_WorkStack::_get_impl(_5208)->ptr_base;
      int _5239 = mosek::fusion::p_WorkStack::_get_impl(_5208)->nidxs_base;
      int _11032;
      bool _11033 = _5237;
      if (_11033)
      {
        _11032 = mosek::fusion::p_WorkStack::_get_impl(_5208)->sp_base;
      }
      else
      {
        _11032 = _5208->alloci64(_5232);
      }
      int _5240 = _11032;
      int _5241 = mosek::fusion::p_WorkStack::_get_impl(_5208)->cof_base;
      int _5242 = mosek::fusion::p_WorkStack::_get_impl(_5208)->shape_base;
      int _5243 = mosek::fusion::p_WorkStack::_get_impl(_5208)->code_base;
      int _5244 = mosek::fusion::p_WorkStack::_get_impl(_5208)->codeptr_base;
      int _5245 = mosek::fusion::p_WorkStack::_get_impl(_5208)->cconst_base;
      std::shared_ptr< monty::ndarray< long long,1 > > _5246 = mosek::fusion::p_WorkStack::_get_impl(_5208)->i64;
      _checked_ptr_1<long long> _ptr__5246(_5246 ? _5246->raw() : nullptr,_5246 ? _5246->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _5247 = mosek::fusion::p_WorkStack::_get_impl(_5208)->f64;
      _checked_ptr_1<double> _ptr__5247(_5247 ? _5247->raw() : nullptr,_5247 ? _5247->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _5248 = mosek::fusion::p_WorkStack::_get_impl(_5208)->i32;
      _checked_ptr_1<int> _ptr__5248(_5248 ? _5248->raw() : nullptr,_5248 ? _5248->size(0) : 0);
      {
        _ptr__5248[_5238] = (int)0;
        if ((_5218 > (int)0))
        {
          {
            _ptr__5248[_5244] = (int)0;
          }
        }
        {}
        _ptr__5248[_5242] = mdim0;
        int _5249 = (int)0;
        int _5250 = (int)0;
        int _5251 = (int)0;
        {
        }
        {
          int _5252 = (int)0;
          while ( (_5252 < (int)((msubi)->size(0))) )
          {
            {
              int _5253 = ((*msubi)(_5252));
              while ( ((_5252 < (int)((msubi)->size(0))) && (((*msubi)(_5252)) == _5253)) )
              {
                {
                  int _5254 = safe_add( safe_mul( ((*msubj)(_5252)),_5229 ),((*msubi)(_5252)) );
                  int _11034 = _ptr__5211[safe_add( _5219,_5254 )];
                  int _11035 = _ptr__5211[safe_add( safe_add( _5219,_5254 ),(int)1 )];
                  for (int _5255 = _11034; _5255 < _11035; ++_5255)
                  {
                    {
                      _ptr__5246[safe_add( _5239,_5249 )] = _ptr__5212[safe_add( _5225,_5255 )];
                      _ptr__5247[safe_add( _5241,_5249 )] = (_ptr__5213[safe_add( _5226,_5255 )] * ((*mval)(_5252)));
                      if ((_5233 > (int)0))
                      {
                        {
                          int _11036 = _ptr__5211[safe_add( _5222,_5255 )];
                          int _11037 = _ptr__5211[safe_add( safe_add( _5222,_5255 ),(int)1 )];
                          for (int _5256 = _11036; _5256 < _11037; ++_5256)
                          {
                            {
                              _ptr__5248[safe_add( _5243,_5251 )] = _ptr__5211[safe_add( _5220,_5256 )];
                              _ptr__5247[safe_add( _5245,_5251 )] = _ptr__5213[safe_add( _5221,_5256 )];
                              ++ _5251;
                            }
                          }
                          _ptr__5248[safe_add( _5243,_5251 )] = 2;
                          _ptr__5247[safe_add( _5245,_5251 )] = ((*mval)(_5252));
                          ++ _5251;
                          _ptr__5248[safe_add( _5243,_5251 )] = 5;
                          ++ _5251;
                          _ptr__5248[safe_add( safe_add( _5244,_5249 ),(int)1 )] = _5251;
                        }
                      }
                      {}
                      ++ _5249;
                    }
                  }
                  ++ _5252;
                }
              }
              _ptr__5248[safe_add( safe_add( _5238,_5250 ),(int)1 )] = _5249;
              _ptr__5246[safe_add( _5240,_5250 )] = _5253;
              ++ _5250;
            }
          }
        }
      }
      if ((!_5237))
      {
        {
          _5208->popi64(_5232);
        }
      }
      {}
    }
  }
  else
  {
    {
      int _5257 = _5210->alloci32(safe_add( _5229,(int)1 ));
      int _5258 = _5210->alloci32(_5215);
      int _5259 = _5210->alloci32(safe_add( mdim0,(int)1 ));
      std::shared_ptr< monty::ndarray< int,1 > > _5260 = mosek::fusion::p_WorkStack::_get_impl(_5210)->i32;
      _checked_ptr_1<int> _ptr__5260(_5260 ? _5260->raw() : nullptr,_5260 ? _5260->size(0) : 0);
      int _5261 = (int)0;
      int _5262 = (int)0;
      int _5263 = (int)0;
      {
        int _11038 = (int)0;
        int _11039 = safe_add( _5229,(int)1 );
        for (int _5264 = _11038; _5264 < _11039; ++_5264)
        {
          {
            _ptr__5260[safe_add( _5257,_5264 )] = (int)0;
          }
        }
        int _11040 = (int)0;
        int _11041 = _5215;
        for (int _5265 = _11040; _5265 < _11041; ++_5265)
        {
          {
            ++ _ptr__5260[safe_add( safe_add( _5257,(_ptr__5212[safe_add( _5224,_5265 )] % _5229) ),(int)1 )];
          }
        }
        int _11042 = (int)0;
        int _11043 = _5229;
        for (int _5266 = _11042; _5266 < _11043; ++_5266)
        {
          {
            _ptr__5260[safe_add( safe_add( _5257,_5266 ),(int)1 )] += _ptr__5260[safe_add( _5257,_5266 )];
          }
        }
        int _11044 = (int)0;
        int _11045 = _5215;
        for (int _5267 = _11044; _5267 < _11045; ++_5267)
        {
          {
            long long _5268 = (_ptr__5212[safe_add( _5224,_5267 )] % _5229);
            _ptr__5260[safe_add( _5258,_ptr__5260[safe_add( _5257,_5268 )] )] = _5267;
            ++ _ptr__5260[safe_add( _5257,_5268 )];
          }
        }
        int _11046 = (int)0;
        int _11047 = _5229;
        for (int _5269 = _11046; _5269 < _11047; ++_5269)
        {
          {
            _ptr__5260[(safe_add( _5257,_5229 ) - _5269)] = _ptr__5260[((safe_add( _5257,_5229 ) - _5269) - (int)1)];
          }
        }
        _ptr__5260[_5257] = (int)0;
        int _5270 = (int)0;
        int _5271 = (int)0;
        while ( ((_5271 < (int)((msubi)->size(0))) && (_5270 < _5215)) )
        {
          {
            if ((((*msubi)(_5271)) < (_ptr__5212[safe_add( _5224,_ptr__5260[safe_add( _5258,_5270 )] )] % _5229)))
            {
              {
                ++ _5271;
              }
            }
            else if((((*msubi)(_5271)) > (_ptr__5212[safe_add( _5224,_ptr__5260[safe_add( _5258,_5270 )] )] % _5229)))
            {
              {
                ++ _5270;
              }
            }
            else
            {
              {
                int _5272 = (int)0;
                long long _5273 = (_ptr__5212[safe_add( _5224,_ptr__5260[safe_add( _5258,_5270 )] )] % _5229);
                int _5274 = _5271;
                while ( ((_5271 < (int)((msubi)->size(0))) && (((*msubi)(_5271)) == ((*msubi)(_5274)))) )
                {
                  {
                    ++ _5271;
                  }
                }
                int _5275 = _5270;
                while ( ((_5270 < _5215) && ((_ptr__5212[safe_add( _5224,_ptr__5260[safe_add( _5258,_5270 )] )] % _5229) == _5273)) )
                {
                  {
                    ++ _5270;
                  }
                }
                int _5276 = _5275;
                int _5277 = _5274;
                int _5278 = (int)0;
                while ( ((_5277 < _5271) && (_5276 < _5270)) )
                {
                  {
                    int _5279 = _ptr__5260[safe_add( _5258,_5276 )];
                    if ((((*msubj)(_5277)) < (_ptr__5212[safe_add( _5224,_5279 )] / _5229)))
                    {
                      {
                        ++ _5277;
                      }
                    }
                    else if((((*msubj)(_5277)) > (_ptr__5212[safe_add( _5224,_5279 )] / _5229)))
                    {
                      {
                        ++ _5276;
                      }
                    }
                    else
                    {
                      {
                        _5262 += (_ptr__5211[safe_add( safe_add( _5219,_5279 ),(int)1 )] - _ptr__5211[safe_add( _5219,_5279 )]);
                        if ((_5218 > (int)0))
                        {
                          {
                            _5261 += safe_add( (_ptr__5211[safe_add( _5222,_ptr__5211[safe_add( safe_add( _5219,_5279 ),(int)1 )] )] - _ptr__5211[safe_add( _5222,_ptr__5211[safe_add( _5219,_5279 )] )]),safe_mul( (int)2,(_ptr__5211[safe_add( safe_add( _5219,_5279 ),(int)1 )] - _ptr__5211[safe_add( _5219,_5279 )]) ) );
                          }
                        }
                        {}
                        ++ _5278;
                        ++ _5277;
                        ++ _5276;
                      }
                    }
                  }
                }
                if ((_5278 > (int)0))
                {
                  {
                    ++ _5263;
                  }
                }
                {}
              }
            }
          }
        }
      }
      bool _5280 = (_5263 < mdim0);
      _5208->alloc_expr((int)1,_5263,_5262,_5280,_5261);
      int _5281 = mosek::fusion::p_WorkStack::_get_impl(_5208)->ptr_base;
      int _5282 = mosek::fusion::p_WorkStack::_get_impl(_5208)->nidxs_base;
      int _11048;
      bool _11049 = _5280;
      if (_11049)
      {
        _11048 = mosek::fusion::p_WorkStack::_get_impl(_5208)->sp_base;
      }
      else
      {
        _11048 = _5208->alloci64(_5263);
      }
      int _5283 = _11048;
      int _5284 = mosek::fusion::p_WorkStack::_get_impl(_5208)->cof_base;
      int _5285 = mosek::fusion::p_WorkStack::_get_impl(_5208)->shape_base;
      int _5286 = mosek::fusion::p_WorkStack::_get_impl(_5208)->code_base;
      int _5287 = mosek::fusion::p_WorkStack::_get_impl(_5208)->codeptr_base;
      int _5288 = mosek::fusion::p_WorkStack::_get_impl(_5208)->cconst_base;
      std::shared_ptr< monty::ndarray< long long,1 > > _5289 = mosek::fusion::p_WorkStack::_get_impl(_5208)->i64;
      _checked_ptr_1<long long> _ptr__5289(_5289 ? _5289->raw() : nullptr,_5289 ? _5289->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _5290 = mosek::fusion::p_WorkStack::_get_impl(_5208)->f64;
      _checked_ptr_1<double> _ptr__5290(_5290 ? _5290->raw() : nullptr,_5290 ? _5290->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _5291 = mosek::fusion::p_WorkStack::_get_impl(_5208)->i32;
      _checked_ptr_1<int> _ptr__5291(_5291 ? _5291->raw() : nullptr,_5291 ? _5291->size(0) : 0);
      {
        int _5292 = (int)0;
        int _5293 = (int)0;
        int _5294 = (int)0;
        int _5295 = (int)0;
        int _5296 = (int)0;
        _ptr__5291[_5281] = (int)0;
        if ((_5218 > (int)0))
        {
          {
            _ptr__5291[_5287] = (int)0;
          }
        }
        {}
        _ptr__5291[_5285] = mdim0;
        while ( ((_5296 < (int)((msubi)->size(0))) && (_5295 < _5215)) )
        {
          {
            if ((((*msubi)(_5296)) < (_ptr__5212[safe_add( _5224,_ptr__5260[safe_add( _5258,_5295 )] )] % _5229)))
            {
              {
                ++ _5296;
              }
            }
            else if((((*msubi)(_5296)) > (_ptr__5212[safe_add( _5224,_ptr__5260[safe_add( _5258,_5295 )] )] % _5229)))
            {
              {
                ++ _5295;
              }
            }
            else
            {
              {
                int _5297 = (int)0;
                long long _5298 = (_ptr__5212[safe_add( _5224,_ptr__5260[safe_add( _5258,_5295 )] )] % _5229);
                int _5299 = _5296;
                while ( ((_5296 < (int)((msubi)->size(0))) && (((*msubi)(_5296)) == ((*msubi)(_5299)))) )
                {
                  {
                    ++ _5296;
                  }
                }
                int _5300 = _5295;
                while ( ((_5295 < _5215) && ((_ptr__5212[safe_add( _5224,_ptr__5260[safe_add( _5258,_5295 )] )] % _5229) == _5298)) )
                {
                  {
                    ++ _5295;
                  }
                }
                int _5301 = _5300;
                int _5302 = _5299;
                int _5303 = (int)0;
                int _5304 = ((*msubi)(_5299));
                while ( ((_5302 < _5296) && (_5301 < _5295)) )
                {
                  {
                    int _5305 = _ptr__5260[safe_add( _5258,_5301 )];
                    if ((((*msubj)(_5302)) < (_ptr__5212[safe_add( _5224,_5305 )] / _5229)))
                    {
                      {
                        ++ _5302;
                      }
                    }
                    else if((((*msubj)(_5302)) > (_ptr__5212[safe_add( _5224,_5305 )] / _5229)))
                    {
                      {
                        ++ _5301;
                      }
                    }
                    else
                    {
                      {
                        int _11050 = _ptr__5211[safe_add( _5219,_5305 )];
                        int _11051 = _ptr__5211[safe_add( safe_add( _5219,_5305 ),(int)1 )];
                        for (int _5306 = _11050; _5306 < _11051; ++_5306)
                        {
                          {
                            _ptr__5289[safe_add( _5282,_5293 )] = _ptr__5212[safe_add( _5225,_5306 )];
                            _ptr__5290[safe_add( _5284,_5293 )] = (_ptr__5213[safe_add( _5226,_5306 )] * ((*mval)(_5302)));
                            if ((_5218 > (int)0))
                            {
                              {
                                int _11052 = _ptr__5211[safe_add( _5222,_5306 )];
                                int _11053 = _ptr__5211[safe_add( safe_add( _5222,_5306 ),(int)1 )];
                                for (int _5307 = _11052; _5307 < _11053; ++_5307)
                                {
                                  {
                                    _ptr__5291[safe_add( _5286,_5294 )] = _ptr__5211[safe_add( _5220,_5307 )];
                                    _ptr__5290[safe_add( _5288,_5294 )] = _ptr__5213[safe_add( _5221,_5307 )];
                                    ++ _5294;
                                  }
                                }
                                _ptr__5291[safe_add( _5286,_5294 )] = 2;
                                _ptr__5290[safe_add( _5288,_5294 )] = ((*mval)(_5302));
                                ++ _5294;
                                _ptr__5291[safe_add( _5286,_5294 )] = 5;
                                ++ _5294;
                                _ptr__5291[safe_add( safe_add( _5287,_5293 ),(int)1 )] = _5294;
                              }
                            }
                            {}
                            ++ _5293;
                            ++ _5303;
                          }
                        }
                        ++ _5302;
                        ++ _5301;
                      }
                    }
                  }
                }
                if ((_5303 > (int)0))
                {
                  {
                    _ptr__5291[safe_add( safe_add( _5281,_5292 ),(int)1 )] = _5293;
                    _ptr__5289[safe_add( _5283,_5292 )] = _5304;
                    ++ _5292;
                  }
                }
                {}
              }
            }
          }
        }
        if ((_5293 != _5262))
        {
          {
            throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Incorrect number of non-zeros"));
          }
        }
        {}
        if ((_5292 != _5263))
        {
          {
            throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Incorrect number of elements"));
          }
        }
        {}
      }
      if ((!_5280))
      {
        {
          _5208->popi64(_5263);
        }
      }
      {}
    }
  }
  _5210->clear();
}
int mosek::fusion::p_ExprMulDiagLeft::validate(int _5308,int _5309,std::shared_ptr< monty::ndarray< int,1 > > _5310,std::shared_ptr< monty::ndarray< int,1 > > _5311,std::shared_ptr< monty::ndarray< double,1 > > _5312,monty::rc_ptr< ::mosek::fusion::Expression > _5313){
  _checked_ptr_1<int> _ptr__5310(_5310 ? _5310->raw() : nullptr, _5310 ? _5310->size(0) : 0);
  _checked_ptr_1<int> _ptr__5311(_5311 ? _5311->raw() : nullptr, _5311 ? _5311->size(0) : 0);
  _checked_ptr_1<double> _ptr__5312(_5312 ? _5312->raw() : nullptr, _5312 ? _5312->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _5314 = _5313->getShape();
  _checked_ptr_1<int> _ptr__5314(_5314 ? _5314->raw() : nullptr,_5314 ? _5314->size(0) : 0);
  if (((int)((_5314)->size(0)) != (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions"));
    }
  }
  {}
  int _5315 = _ptr__5314[(int)0];
  int _5316 = _ptr__5314[(int)1];
  if (((_5308 < (int)0) || (_5309 < (int)0)))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions"));
    }
  }
  {}
  if (((_5309 != _5315) || (_5308 != _5316)))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand dimensions"));
    }
  }
  {}
  if ((((int)((_5310)->size(0)) != (int)((_5311)->size(0))) || ((int)((_5310)->size(0)) != (int)((_5312)->size(0)))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Invalid matrix data"));
    }
  }
  {}
  int _5317 = (int)((_5310)->size(0));
  bool _5318 = false;
  bool _5319 = false;
  {
    int _11054 = (int)0;
    int _11055 = _5317;
    for (int _5320 = _11054; _5320 < _11055; ++_5320)
    {
      {
        if (((_ptr__5310[_5320] < (int)0) || ((_ptr__5310[_5320] >= _5308) || ((_ptr__5311[_5320] < (int)0) || (_ptr__5311[_5320] >= _5309)))))
        {
          {
            _5318 = true;
          }
        }
        {}
      }
    }
    int _11056 = (int)0;
    int _11057 = (_5317 - (int)1);
    for (int _5321 = _11056; _5321 < _11057; ++_5321)
    {
      {
        if (((_ptr__5310[_5321] > _ptr__5310[safe_add( _5321,(int)1 )]) || ((_ptr__5310[_5321] == _ptr__5310[safe_add( _5321,(int)1 )]) && (_ptr__5311[_5321] >= _ptr__5311[safe_add( _5321,(int)1 )]))))
        {
          {
            _5319 = true;
          }
        }
        {}
      }
    }
  }
  if (_5318)
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Invalid matrix data"));
    }
  }
  {}
  if (_5319)
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Unsorted matrix data"));
    }
  }
  {}
  return (int)1;
}
std::string mosek::fusion::ExprMulDiagLeft :: toString() { return mosek::fusion::p_ExprMulDiagLeft::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprMulDiagLeft::toString(){
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprMulDiagLeft(m,"))->__mosek_2fusion_2Utils_2StringBuffer__a(expr->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
void mosek::fusion::p_ExprMulDiagLeft::destroy(){expr.reset();mval.reset();msubj.reset();msubi.reset();}void mosek::fusion::ExprMulDiagLeft::destroy() { mosek::fusion::p_ExprMulDiagLeft::_get_impl(this)->destroy(); }mosek::fusion::ExprMulElement::ExprMulElement(mosek::fusion::p_ExprMulElement *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprMulElement()" << this << std::endl; */ }mosek::fusion::ExprMulElement::~ExprMulElement() {  /* std::cout << "~ExprMulElement()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprMulElement::p_ExprMulElement  (::mosek::fusion::ExprMulElement * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprMulElement::t mosek::fusion::p_ExprMulElement::_new_ExprMulElement  (std::shared_ptr< monty::ndarray< double,1 > > _5322,    std::shared_ptr< monty::ndarray< long long,1 > > _5323,    monty::rc_ptr< ::mosek::fusion::Expression > _5324){ return new mosek::fusion::ExprMulElement(_5322,_5323,_5324); }mosek::fusion::ExprMulElement::ExprMulElement  (std::shared_ptr< monty::ndarray< double,1 > > _5322,    std::shared_ptr< monty::ndarray< long long,1 > > _5323,    monty::rc_ptr< ::mosek::fusion::Expression > _5324) :    ExprMulElement(new mosek::fusion::p_ExprMulElement(this)){ mosek::fusion::p_ExprMulElement::_get_impl(this)->_initialize(_5322,_5323,_5324); }void mosek::fusion::p_ExprMulElement::_initialize  (std::shared_ptr< monty::ndarray< double,1 > > _5322,    std::shared_ptr< monty::ndarray< long long,1 > > _5323,    monty::rc_ptr< ::mosek::fusion::Expression > _5324){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<double> _ptr__5322(_5322 ? _5322->raw() : nullptr, _5322 ? _5322->size(0) : 0);
    _checked_ptr_1<long long> _ptr__5323(_5323 ? _5323->raw() : nullptr, _5323 ? _5323->size(0) : 0);
    mosek::fusion::p_ExprMulElement::_initialize(_5322,_5323,_5324,(int)1);
    std::shared_ptr< monty::ndarray< int,1 > > _5325 = _5324->getShape();
    _checked_ptr_1<int> _ptr__5325(_5325 ? _5325->raw() : nullptr,_5325 ? _5325->size(0) : 0);
    if (((int)((_5322)->size(0)) != (int)((_5323)->size(0))))
    {
      {
        throw ::mosek::fusion::LengthError(std::string ("Invalid matrix specification"));
      }
    }
    {}
    long long _5326 = ::mosek::fusion::p_Set::size(_5325);
    bool _5327 = false;
    bool _5328 = false;
    {
      int _11058 = (int)0;
      int _11059 = (int)((_5323)->size(0));
      for (int _5329 = _11058; _5329 < _11059; ++_5329)
      {
        {
          if (((_ptr__5323[_5329] < (int)0) || (_ptr__5323[_5329] >= _5326)))
          {
            {
              _5327 = true;
            }
          }
          {}
        }
      }
      int _11060 = (int)0;
      int _11061 = ((int)((_5323)->size(0)) - (int)1);
      for (int _5330 = _11060; _5330 < _11061; ++_5330)
      {
        {
          if ((_ptr__5323[_5330] >= _ptr__5323[safe_add( _5330,(int)1 )]))
          {
            {
              _5328 = true;
            }
          }
          {}
        }
      }
    }
    if (_5327)
    {
      {
        throw ::mosek::fusion::IndexError(std::string ("Invalid matrix data"));
      }
    }
    {}
    if (_5328)
    {
      {
        throw ::mosek::fusion::IndexError(std::string ("Matrix data not sorted"));
      }
    }
    {}
  }
}mosek::fusion::ExprMulElement::t mosek::fusion::p_ExprMulElement::_new_ExprMulElement  (std::shared_ptr< monty::ndarray< double,1 > > _5331,    std::shared_ptr< monty::ndarray< long long,1 > > _5332,    monty::rc_ptr< ::mosek::fusion::Expression > _5333,    int _5334){ return new mosek::fusion::ExprMulElement(_5331,_5332,_5333,_5334); }mosek::fusion::ExprMulElement::ExprMulElement  (std::shared_ptr< monty::ndarray< double,1 > > _5331,    std::shared_ptr< monty::ndarray< long long,1 > > _5332,    monty::rc_ptr< ::mosek::fusion::Expression > _5333,    int _5334) :    ExprMulElement(new mosek::fusion::p_ExprMulElement(this)){ mosek::fusion::p_ExprMulElement::_get_impl(this)->_initialize(_5331,_5332,_5333,_5334); }void mosek::fusion::p_ExprMulElement::_initialize  (std::shared_ptr< monty::ndarray< double,1 > > _5331,    std::shared_ptr< monty::ndarray< long long,1 > > _5332,    monty::rc_ptr< ::mosek::fusion::Expression > _5333,    int _5334){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<double> _ptr__5331(_5331 ? _5331->raw() : nullptr, _5331 ? _5331->size(0) : 0);
    _checked_ptr_1<long long> _ptr__5332(_5332 ? _5332->raw() : nullptr, _5332 ? _5332->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(_5333->getShape());
    mosek::fusion::p_ExprMulElement::_get_impl(::mosek::fusion::ExprMulElement::t(_pubthis))->expr = _5333;
    mosek::fusion::p_ExprMulElement::_get_impl(::mosek::fusion::ExprMulElement::t(_pubthis))->mcof = _5331;
    mosek::fusion::p_ExprMulElement::_get_impl(::mosek::fusion::ExprMulElement::t(_pubthis))->msp = _5332;
  }
}void mosek::fusion::ExprMulElement :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _5335,monty::rc_ptr< ::mosek::fusion::WorkStack > _5336,monty::rc_ptr< ::mosek::fusion::WorkStack > _5337) { mosek::fusion::p_ExprMulElement::_get_impl(this)->eval(_5335,_5336,_5337); }void mosek::fusion::p_ExprMulElement::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _5335,monty::rc_ptr< ::mosek::fusion::WorkStack > _5336,monty::rc_ptr< ::mosek::fusion::WorkStack > _5337){
  expr->eval(_5336,_5335,_5337);
  _5336->pop_expr();
  int _5338 = mosek::fusion::p_WorkStack::_get_impl(_5336)->nd;
  int _5339 = mosek::fusion::p_WorkStack::_get_impl(_5336)->nelem;
  int _5340 = mosek::fusion::p_WorkStack::_get_impl(_5336)->nnz;
  int _5341 = mosek::fusion::p_WorkStack::_get_impl(_5336)->ncodeatom;
  bool _5342 = mosek::fusion::p_WorkStack::_get_impl(_5336)->hassp;
  int _5343 = mosek::fusion::p_WorkStack::_get_impl(_5336)->shape_base;
  int _5344 = mosek::fusion::p_WorkStack::_get_impl(_5336)->ptr_base;
  int _5345 = mosek::fusion::p_WorkStack::_get_impl(_5336)->nidxs_base;
  int _5346 = mosek::fusion::p_WorkStack::_get_impl(_5336)->sp_base;
  int _5347 = mosek::fusion::p_WorkStack::_get_impl(_5336)->cof_base;
  int _5348 = mosek::fusion::p_WorkStack::_get_impl(_5336)->code_base;
  int _5349 = mosek::fusion::p_WorkStack::_get_impl(_5336)->codeptr_base;
  int _5350 = mosek::fusion::p_WorkStack::_get_impl(_5336)->cconst_base;
  std::shared_ptr< monty::ndarray< int,1 > > _5351 = mosek::fusion::p_WorkStack::_get_impl(_5336)->i32;
  _checked_ptr_1<int> _ptr__5351(_5351 ? _5351->raw() : nullptr,_5351 ? _5351->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _5352 = mosek::fusion::p_WorkStack::_get_impl(_5336)->i64;
  _checked_ptr_1<long long> _ptr__5352(_5352 ? _5352->raw() : nullptr,_5352 ? _5352->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _5353 = mosek::fusion::p_WorkStack::_get_impl(_5336)->f64;
  _checked_ptr_1<double> _ptr__5353(_5353 ? _5353->raw() : nullptr,_5353 ? _5353->size(0) : 0);
  int _5354 = (int)0;
  int _5355 = (int)0;
  int _5356 = (int)0;
  if ((!_5342))
  {
    {
      _5356 = (int)((msp)->size(0));
      int _11062 = (int)0;
      int _11063 = (int)((msp)->size(0));
      for (int _5357 = _11062; _5357 < _11063; ++_5357)
      {
        {
          _5355 += (_ptr__5351[safe_add( safe_add( _5344,((*msp)(_5357)) ),(int)1 )] - _ptr__5351[safe_add( _5344,((*msp)(_5357)) )]);
        }
      }
      if ((_5341 > (int)0))
      {
        {
          int _11064 = (int)0;
          int _11065 = (int)((msp)->size(0));
          for (int _5358 = _11064; _5358 < _11065; ++_5358)
          {
            {
              _5354 += safe_add( (_ptr__5351[safe_add( _5349,_ptr__5351[safe_add( safe_add( _5344,((*msp)(_5358)) ),(int)1 )] )] - _ptr__5351[safe_add( _5349,_ptr__5351[safe_add( _5344,((*msp)(_5358)) )] )]),safe_mul( (int)2,(_ptr__5351[safe_add( safe_add( _5344,((*msp)(_5358)) ),(int)1 )] - _ptr__5351[safe_add( _5344,((*msp)(_5358)) )]) ) );
            }
          }
        }
      }
      {}
    }
  }
  else
  {
    {
      int _5359 = (int)((msp)->size(0));
      int _5360 = (int)0;
      int _5361 = _5339;
      int _5362 = (int)0;
      while ( ((_5360 < _5359) && (_5362 < _5361)) )
      {
        {
          if ((((*msp)(_5360)) < _ptr__5352[safe_add( _5346,_5362 )]))
          {
            {
              ++ _5360;
            }
          }
          else if((((*msp)(_5360)) > _ptr__5352[safe_add( _5346,_5362 )]))
          {
            {
              ++ _5362;
            }
          }
          else
          {
            {
              _5355 += (_ptr__5351[safe_add( safe_add( _5344,_5362 ),(int)1 )] - _ptr__5351[safe_add( _5344,_5362 )]);
              if ((_5341 > (int)0))
              {
                {
                  _5354 += safe_add( (_ptr__5351[safe_add( _5349,_ptr__5351[safe_add( safe_add( _5344,_5362 ),(int)1 )] )] - _ptr__5351[safe_add( _5349,_ptr__5351[safe_add( _5344,_5362 )] )]),safe_mul( (int)2,(_ptr__5351[safe_add( safe_add( _5344,_5362 ),(int)1 )] - _ptr__5351[safe_add( _5344,_5362 )]) ) );
                }
              }
              {}
              ++ _5360;
              ++ _5362;
              ++ _5356;
            }
          }
        }
      }
    }
  }
  long long _5363 = (long long)1;
  int _11066 = (int)0;
  int _11067 = _5338;
  for (int _5364 = _11066; _5364 < _11067; ++_5364)
  {
    {
      _5363 *= _ptr__5351[safe_add( _5343,_5364 )];
    }
  }
  bool _5365 = (_5356 < _5363);
  int _5366 = _5338;
  _5335->alloc_expr(_5366,_5356,_5355,_5365,_5354);
  int _5367 = mosek::fusion::p_WorkStack::_get_impl(_5335)->ptr_base;
  int _5368 = mosek::fusion::p_WorkStack::_get_impl(_5335)->shape_base;
  int _5369 = mosek::fusion::p_WorkStack::_get_impl(_5335)->nidxs_base;
  int _11068;
  bool _11069 = _5365;
  if (_11069)
  {
    _11068 = mosek::fusion::p_WorkStack::_get_impl(_5335)->sp_base;
  }
  else
  {
    _11068 = _5335->alloci64(_5356);
  }
  int _5370 = _11068;
  int _5371 = mosek::fusion::p_WorkStack::_get_impl(_5335)->cof_base;
  int _5372 = mosek::fusion::p_WorkStack::_get_impl(_5335)->code_base;
  int _5373 = mosek::fusion::p_WorkStack::_get_impl(_5335)->codeptr_base;
  int _5374 = mosek::fusion::p_WorkStack::_get_impl(_5335)->cconst_base;
  std::shared_ptr< monty::ndarray< int,1 > > _5375 = mosek::fusion::p_WorkStack::_get_impl(_5335)->i32;
  _checked_ptr_1<int> _ptr__5375(_5375 ? _5375->raw() : nullptr,_5375 ? _5375->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _5376 = mosek::fusion::p_WorkStack::_get_impl(_5335)->i64;
  _checked_ptr_1<long long> _ptr__5376(_5376 ? _5376->raw() : nullptr,_5376 ? _5376->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _5377 = mosek::fusion::p_WorkStack::_get_impl(_5335)->f64;
  _checked_ptr_1<double> _ptr__5377(_5377 ? _5377->raw() : nullptr,_5377 ? _5377->size(0) : 0);
  {
    int _5378 = (int)0;
    int _5379 = (int)0;
    int _5380 = (int)0;
    _ptr__5375[_5367] = (int)0;
    if ((_5354 > (int)0))
    {
      {
        _ptr__5375[_5373] = (int)0;
      }
    }
    {}
    int _11070 = (int)0;
    int _11071 = _5366;
    for (int _5381 = _11070; _5381 < _11071; ++_5381)
    {
      {
        _ptr__5375[safe_add( _5368,_5381 )] = _ptr__5351[safe_add( _5343,_5381 )];
      }
    }
    if ((!_5342))
    {
      {
        int _11072 = (int)0;
        int _11073 = (int)((msp)->size(0));
        for (int _5382 = _11072; _5382 < _11073; ++_5382)
        {
          {
            int _5383 = _ptr__5351[safe_add( _5344,((*msp)(_5382)) )];
            int _5384 = _ptr__5351[safe_add( safe_add( _5344,((*msp)(_5382)) ),(int)1 )];
            int _11074 = _5383;
            int _11075 = _5384;
            for (int _5385 = _11074; _5385 < _11075; ++_5385)
            {
              {
                _ptr__5376[safe_add( _5369,_5380 )] = _ptr__5352[safe_add( _5345,_5385 )];
                _ptr__5377[safe_add( _5371,_5380 )] = (_ptr__5353[safe_add( _5347,_5385 )] * ((*mcof)(_5382)));
                if ((_5341 > (int)0))
                {
                  {
                    int _11076 = _ptr__5351[safe_add( _5349,_5385 )];
                    int _11077 = _ptr__5351[safe_add( safe_add( _5349,_5385 ),(int)1 )];
                    for (int _5386 = _11076; _5386 < _11077; ++_5386)
                    {
                      {
                        _ptr__5375[safe_add( _5372,_5378 )] = _ptr__5351[safe_add( _5348,_5386 )];
                        _ptr__5377[safe_add( _5374,_5378 )] = _ptr__5353[safe_add( _5350,_5386 )];
                        ++ _5378;
                      }
                    }
                    _ptr__5375[safe_add( _5372,_5378 )] = 2;
                    _ptr__5377[safe_add( _5374,_5378 )] = ((*mcof)(_5382));
                    ++ _5378;
                    _ptr__5375[safe_add( _5372,_5378 )] = 5;
                    ++ _5378;
                    _ptr__5375[safe_add( safe_add( _5373,_5380 ),(int)1 )] = _5378;
                  }
                }
                {}
                ++ _5380;
              }
            }
            _ptr__5375[safe_add( safe_add( _5367,_5382 ),(int)1 )] = _5380;
            _ptr__5376[safe_add( _5370,_5382 )] = ((*msp)(_5382));
          }
        }
      }
    }
    else
    {
      {
        int _5387 = (int)((msp)->size(0));
        int _5388 = (int)0;
        int _5389 = _5339;
        int _5390 = (int)0;
        while ( ((_5388 < _5387) && (_5390 < _5389)) )
        {
          {
            if ((((*msp)(_5388)) < _ptr__5352[safe_add( _5346,_5390 )]))
            {
              {
                ++ _5388;
              }
            }
            else if((((*msp)(_5388)) > _ptr__5352[safe_add( _5346,_5390 )]))
            {
              {
                ++ _5390;
              }
            }
            else
            {
              {
                int _5391 = _ptr__5351[safe_add( _5344,_5390 )];
                int _5392 = _ptr__5351[safe_add( safe_add( _5344,_5390 ),(int)1 )];
                int _11078 = _5391;
                int _11079 = _5392;
                for (int _5393 = _11078; _5393 < _11079; ++_5393)
                {
                  {
                    _ptr__5376[safe_add( _5369,_5380 )] = _ptr__5352[safe_add( _5345,_5393 )];
                    _ptr__5377[safe_add( _5371,_5380 )] = (_ptr__5353[safe_add( _5345,_5393 )] * ((*mcof)(_5388)));
                    if ((_5341 > (int)0))
                    {
                      {
                        int _11080 = _ptr__5351[safe_add( _5349,_5393 )];
                        int _11081 = _ptr__5351[safe_add( safe_add( _5349,_5393 ),(int)1 )];
                        for (int _5394 = _11080; _5394 < _11081; ++_5394)
                        {
                          {
                            _ptr__5375[safe_add( _5372,_5378 )] = _ptr__5351[safe_add( _5348,_5394 )];
                            _ptr__5377[safe_add( _5374,_5378 )] = _ptr__5353[safe_add( _5350,_5394 )];
                            ++ _5378;
                          }
                        }
                        _ptr__5375[safe_add( _5372,_5378 )] = 2;
                        _ptr__5377[safe_add( _5374,_5378 )] = ((*mcof)(_5388));
                        ++ _5378;
                        _ptr__5375[safe_add( _5372,_5378 )] = 5;
                        ++ _5378;
                        _ptr__5375[safe_add( safe_add( _5373,_5380 ),(int)1 )] = _5378;
                      }
                    }
                    {}
                    ++ _5380;
                  }
                }
                _ptr__5375[safe_add( safe_add( _5367,_5379 ),(int)1 )] = _5380;
                _ptr__5376[safe_add( _5370,_5379 )] = ((*msp)(_5388));
                ++ _5379;
                ++ _5388;
                ++ _5390;
              }
            }
          }
        }
      }
    }
  }
  if ((!_5365))
  {
    {
      _5335->popi64(_5356);
    }
  }
  {}
}
std::string mosek::fusion::ExprMulElement :: toString() { return mosek::fusion::p_ExprMulElement::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprMulElement::toString(){
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprMulElement(M,"))->__mosek_2fusion_2Utils_2StringBuffer__a(expr->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
void mosek::fusion::p_ExprMulElement::destroy(){expr.reset();msp.reset();mcof.reset();}void mosek::fusion::ExprMulElement::destroy() { mosek::fusion::p_ExprMulElement::_get_impl(this)->destroy(); }mosek::fusion::ExprMulScalarConst::ExprMulScalarConst(mosek::fusion::p_ExprMulScalarConst *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprMulScalarConst()" << this << std::endl; */ }mosek::fusion::ExprMulScalarConst::~ExprMulScalarConst() {  /* std::cout << "~ExprMulScalarConst()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprMulScalarConst::p_ExprMulScalarConst  (::mosek::fusion::ExprMulScalarConst * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprMulScalarConst::t mosek::fusion::p_ExprMulScalarConst::_new_ExprMulScalarConst  (double _5395,    monty::rc_ptr< ::mosek::fusion::Expression > _5396){ return new mosek::fusion::ExprMulScalarConst(_5395,_5396); }mosek::fusion::ExprMulScalarConst::ExprMulScalarConst  (double _5395,    monty::rc_ptr< ::mosek::fusion::Expression > _5396) :    ExprMulScalarConst(new mosek::fusion::p_ExprMulScalarConst(this)){ mosek::fusion::p_ExprMulScalarConst::_get_impl(this)->_initialize(_5395,_5396); }void mosek::fusion::p_ExprMulScalarConst::_initialize  (double _5395,    monty::rc_ptr< ::mosek::fusion::Expression > _5396){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(_5396->getShape());
    mosek::fusion::p_ExprMulScalarConst::_get_impl(::mosek::fusion::ExprMulScalarConst::t(_pubthis))->c = _5395;
    mosek::fusion::p_ExprMulScalarConst::_get_impl(::mosek::fusion::ExprMulScalarConst::t(_pubthis))->expr = _5396;
  }
}void mosek::fusion::ExprMulScalarConst :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _5397,monty::rc_ptr< ::mosek::fusion::WorkStack > _5398,monty::rc_ptr< ::mosek::fusion::WorkStack > _5399) { mosek::fusion::p_ExprMulScalarConst::_get_impl(this)->eval(_5397,_5398,_5399); }void mosek::fusion::p_ExprMulScalarConst::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _5397,monty::rc_ptr< ::mosek::fusion::WorkStack > _5398,monty::rc_ptr< ::mosek::fusion::WorkStack > _5399){
  expr->eval(_5398,_5397,_5399);
  _5398->pop_expr();
  std::shared_ptr< monty::ndarray< int,1 > > _5400 = mosek::fusion::p_WorkStack::_get_impl(_5398)->i32;
  _checked_ptr_1<int> _ptr__5400(_5400 ? _5400->raw() : nullptr,_5400 ? _5400->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _5401 = mosek::fusion::p_WorkStack::_get_impl(_5398)->i64;
  _checked_ptr_1<long long> _ptr__5401(_5401 ? _5401->raw() : nullptr,_5401 ? _5401->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _5402 = mosek::fusion::p_WorkStack::_get_impl(_5398)->f64;
  _checked_ptr_1<double> _ptr__5402(_5402 ? _5402->raw() : nullptr,_5402 ? _5402->size(0) : 0);
  int _5403 = mosek::fusion::p_WorkStack::_get_impl(_5398)->nd;
  int _5404 = mosek::fusion::p_WorkStack::_get_impl(_5398)->nelem;
  int _5405 = mosek::fusion::p_WorkStack::_get_impl(_5398)->nnz;
  bool _5406 = mosek::fusion::p_WorkStack::_get_impl(_5398)->hassp;
  int _5407 = mosek::fusion::p_WorkStack::_get_impl(_5398)->ncodeatom;
  int _5408 = mosek::fusion::p_WorkStack::_get_impl(_5398)->ptr_base;
  int _5409 = mosek::fusion::p_WorkStack::_get_impl(_5398)->code_base;
  int _5410 = mosek::fusion::p_WorkStack::_get_impl(_5398)->cconst_base;
  int _5411 = mosek::fusion::p_WorkStack::_get_impl(_5398)->codeptr_base;
  int _5412 = mosek::fusion::p_WorkStack::_get_impl(_5398)->shape_base;
  int _5413 = mosek::fusion::p_WorkStack::_get_impl(_5398)->sp_base;
  int _5414 = mosek::fusion::p_WorkStack::_get_impl(_5398)->nidxs_base;
  int _5415 = mosek::fusion::p_WorkStack::_get_impl(_5398)->cof_base;
  int _5416 = mosek::fusion::p_WorkStack::_get_impl(_5398)->cconst_base;
  int _11082;
  bool _11083 = (_5407 == (int)0);
  if (_11083)
  {
    _11082 = (int)0;
  }
  else
  {
    _11082 = safe_add( _5407,safe_mul( (int)2,_5405 ) );
  }
  int _5417 = _11082;
  _5397->alloc_expr(_5403,_5404,_5405,_5406,_5417);
  std::shared_ptr< monty::ndarray< long long,1 > > _5418 = mosek::fusion::p_WorkStack::_get_impl(_5397)->i64;
  _checked_ptr_1<long long> _ptr__5418(_5418 ? _5418->raw() : nullptr,_5418 ? _5418->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _5419 = mosek::fusion::p_WorkStack::_get_impl(_5397)->f64;
  _checked_ptr_1<double> _ptr__5419(_5419 ? _5419->raw() : nullptr,_5419 ? _5419->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _5420 = mosek::fusion::p_WorkStack::_get_impl(_5397)->i32;
  _checked_ptr_1<int> _ptr__5420(_5420 ? _5420->raw() : nullptr,_5420 ? _5420->size(0) : 0);
  int _5421 = mosek::fusion::p_WorkStack::_get_impl(_5397)->ptr_base;
  int _5422 = mosek::fusion::p_WorkStack::_get_impl(_5397)->nidxs_base;
  int _5423 = mosek::fusion::p_WorkStack::_get_impl(_5397)->cof_base;
  int _5424 = mosek::fusion::p_WorkStack::_get_impl(_5397)->code_base;
  int _5425 = mosek::fusion::p_WorkStack::_get_impl(_5397)->codeptr_base;
  int _5426 = mosek::fusion::p_WorkStack::_get_impl(_5397)->cconst_base;
  bool _5427 = mosek::fusion::p_WorkStack::_get_impl(_5397)->hassp;
  int _5428 = mosek::fusion::p_WorkStack::_get_impl(_5397)->shape_base;
  int _5429 = mosek::fusion::p_WorkStack::_get_impl(_5397)->sp_base;
  {
    int _11084 = (int)0;
    int _11085 = safe_add( _5404,(int)1 );
    for (int _5430 = _11084; _5430 < _11085; ++_5430)
    {
      {
        _ptr__5420[safe_add( _5421,_5430 )] = _ptr__5400[safe_add( _5408,_5430 )];
      }
    }
    int _11086 = (int)0;
    int _11087 = _5405;
    for (int _5431 = _11086; _5431 < _11087; ++_5431)
    {
      {
        _ptr__5418[safe_add( _5422,_5431 )] = _ptr__5401[safe_add( _5414,_5431 )];
        _ptr__5419[safe_add( _5423,_5431 )] = (_ptr__5402[safe_add( _5415,_5431 )] * c);
      }
    }
    if (_5406)
    {
      {
        int _11088 = (int)0;
        int _11089 = _5404;
        for (int _5432 = _11088; _5432 < _11089; ++_5432)
        {
          {
            _ptr__5418[safe_add( _5429,_5432 )] = _ptr__5401[safe_add( _5413,_5432 )];
          }
        }
      }
    }
    {}
    int _11090 = (int)0;
    int _11091 = _5403;
    for (int _5433 = _11090; _5433 < _11091; ++_5433)
    {
      {
        _ptr__5420[safe_add( _5428,_5433 )] = _ptr__5400[safe_add( _5412,_5433 )];
      }
    }
    if ((_5407 > (int)0))
    {
      {
        _ptr__5420[_5425] = (int)0;
        int _5434 = (int)0;
        int _11092 = (int)0;
        int _11093 = _5405;
        for (int _5435 = _11092; _5435 < _11093; ++_5435)
        {
          {
            int _11094 = _ptr__5400[safe_add( _5411,_5435 )];
            int _11095 = _ptr__5400[safe_add( safe_add( _5411,_5435 ),(int)1 )];
            for (int _5436 = _11094; _5436 < _11095; ++_5436)
            {
              {
                _ptr__5420[safe_add( _5424,_5434 )] = _ptr__5400[safe_add( _5409,_5436 )];
                _ptr__5419[safe_add( _5426,_5434 )] = _ptr__5402[safe_add( _5410,_5436 )];
                ++ _5434;
              }
            }
            _ptr__5420[safe_add( _5424,_5434 )] = 2;
            _ptr__5419[safe_add( _5426,_5434 )] = c;
            ++ _5434;
            _ptr__5420[safe_add( _5424,_5434 )] = 5;
            ++ _5434;
            _ptr__5420[safe_add( safe_add( _5425,_5435 ),(int)1 )] = _5434;
          }
        }
      }
    }
    {}
  }
}
std::string mosek::fusion::ExprMulScalarConst :: toString() { return mosek::fusion::p_ExprMulScalarConst::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprMulScalarConst::toString(){
  return std::string ("ExprMulScalarConst()");
}
void mosek::fusion::p_ExprMulScalarConst::destroy(){expr.reset();}void mosek::fusion::ExprMulScalarConst::destroy() { mosek::fusion::p_ExprMulScalarConst::_get_impl(this)->destroy(); }mosek::fusion::ExprScalarMul::ExprScalarMul(mosek::fusion::p_ExprScalarMul *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprScalarMul()" << this << std::endl; */ }mosek::fusion::ExprScalarMul::~ExprScalarMul() {  /* std::cout << "~ExprScalarMul()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprScalarMul::p_ExprScalarMul  (::mosek::fusion::ExprScalarMul * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprScalarMul::t mosek::fusion::p_ExprScalarMul::_new_ExprScalarMul  (int _5437,    int _5438,    std::shared_ptr< monty::ndarray< int,1 > > _5439,    std::shared_ptr< monty::ndarray< int,1 > > _5440,    std::shared_ptr< monty::ndarray< double,1 > > _5441,    monty::rc_ptr< ::mosek::fusion::Expression > _5442,    int _5443){ return new mosek::fusion::ExprScalarMul(_5437,_5438,_5439,_5440,_5441,_5442,_5443); }mosek::fusion::ExprScalarMul::ExprScalarMul  (int _5437,    int _5438,    std::shared_ptr< monty::ndarray< int,1 > > _5439,    std::shared_ptr< monty::ndarray< int,1 > > _5440,    std::shared_ptr< monty::ndarray< double,1 > > _5441,    monty::rc_ptr< ::mosek::fusion::Expression > _5442,    int _5443) :    ExprScalarMul(new mosek::fusion::p_ExprScalarMul(this)){ mosek::fusion::p_ExprScalarMul::_get_impl(this)->_initialize(_5437,_5438,_5439,_5440,_5441,_5442,_5443); }void mosek::fusion::p_ExprScalarMul::_initialize  (int _5437,    int _5438,    std::shared_ptr< monty::ndarray< int,1 > > _5439,    std::shared_ptr< monty::ndarray< int,1 > > _5440,    std::shared_ptr< monty::ndarray< double,1 > > _5441,    monty::rc_ptr< ::mosek::fusion::Expression > _5442,    int _5443){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__5439(_5439 ? _5439->raw() : nullptr, _5439 ? _5439->size(0) : 0);
    _checked_ptr_1<int> _ptr__5440(_5440 ? _5440->raw() : nullptr, _5440 ? _5440->size(0) : 0);
    _checked_ptr_1<double> _ptr__5441(_5441 ? _5441->raw() : nullptr, _5441 ? _5441->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_5437),(int)(_5438)}));
    mosek::fusion::p_ExprScalarMul::_get_impl(::mosek::fusion::ExprScalarMul::t(_pubthis))->mdim0 = _5437;
    mosek::fusion::p_ExprScalarMul::_get_impl(::mosek::fusion::ExprScalarMul::t(_pubthis))->mdim1 = _5438;
    mosek::fusion::p_ExprScalarMul::_get_impl(::mosek::fusion::ExprScalarMul::t(_pubthis))->msubi = _5439;
    mosek::fusion::p_ExprScalarMul::_get_impl(::mosek::fusion::ExprScalarMul::t(_pubthis))->msubj = _5440;
    mosek::fusion::p_ExprScalarMul::_get_impl(::mosek::fusion::ExprScalarMul::t(_pubthis))->mval = _5441;
    mosek::fusion::p_ExprScalarMul::_get_impl(::mosek::fusion::ExprScalarMul::t(_pubthis))->expr = _5442;
  }
}mosek::fusion::ExprScalarMul::t mosek::fusion::p_ExprScalarMul::_new_ExprScalarMul  (int _5444,    int _5445,    std::shared_ptr< monty::ndarray< int,1 > > _5446,    std::shared_ptr< monty::ndarray< int,1 > > _5447,    std::shared_ptr< monty::ndarray< double,1 > > _5448,    monty::rc_ptr< ::mosek::fusion::Expression > _5449){ return new mosek::fusion::ExprScalarMul(_5444,_5445,_5446,_5447,_5448,_5449); }mosek::fusion::ExprScalarMul::ExprScalarMul  (int _5444,    int _5445,    std::shared_ptr< monty::ndarray< int,1 > > _5446,    std::shared_ptr< monty::ndarray< int,1 > > _5447,    std::shared_ptr< monty::ndarray< double,1 > > _5448,    monty::rc_ptr< ::mosek::fusion::Expression > _5449) :    ExprScalarMul(new mosek::fusion::p_ExprScalarMul(this)){ mosek::fusion::p_ExprScalarMul::_get_impl(this)->_initialize(_5444,_5445,_5446,_5447,_5448,_5449); }void mosek::fusion::p_ExprScalarMul::_initialize  (int _5444,    int _5445,    std::shared_ptr< monty::ndarray< int,1 > > _5446,    std::shared_ptr< monty::ndarray< int,1 > > _5447,    std::shared_ptr< monty::ndarray< double,1 > > _5448,    monty::rc_ptr< ::mosek::fusion::Expression > _5449){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__5446(_5446 ? _5446->raw() : nullptr, _5446 ? _5446->size(0) : 0);
    _checked_ptr_1<int> _ptr__5447(_5447 ? _5447->raw() : nullptr, _5447 ? _5447->size(0) : 0);
    _checked_ptr_1<double> _ptr__5448(_5448 ? _5448->raw() : nullptr, _5448 ? _5448->size(0) : 0);
    mosek::fusion::p_ExprScalarMul::_initialize(_5444,_5445,_5446,_5447,_5448,_5449,::mosek::fusion::p_ExprScalarMul::validate(_5444,_5445,_5446,_5447,_5448,_5449));
  }
}void mosek::fusion::ExprScalarMul :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _5450,monty::rc_ptr< ::mosek::fusion::WorkStack > _5451,monty::rc_ptr< ::mosek::fusion::WorkStack > _5452) { mosek::fusion::p_ExprScalarMul::_get_impl(this)->eval(_5450,_5451,_5452); }void mosek::fusion::p_ExprScalarMul::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _5450,monty::rc_ptr< ::mosek::fusion::WorkStack > _5451,monty::rc_ptr< ::mosek::fusion::WorkStack > _5452){
  mosek::fusion::p_ExprScalarMul::_get_impl(::mosek::fusion::ExprScalarMul::t(_pubthis))->expr->eval(_5451,_5450,_5452);
  _5451->pop_expr();
  int _5453 = mosek::fusion::p_WorkStack::_get_impl(_5451)->nd;
  int _5454 = mosek::fusion::p_WorkStack::_get_impl(_5451)->nelem;
  int _5455 = mosek::fusion::p_WorkStack::_get_impl(_5451)->nnz;
  bool _5456 = mosek::fusion::p_WorkStack::_get_impl(_5451)->hassp;
  int _5457 = mosek::fusion::p_WorkStack::_get_impl(_5451)->ncodeatom;
  int _5458 = mosek::fusion::p_WorkStack::_get_impl(_5451)->ptr_base;
  int _5459 = mosek::fusion::p_WorkStack::_get_impl(_5451)->sp_base;
  int _5460 = mosek::fusion::p_WorkStack::_get_impl(_5451)->nidxs_base;
  int _5461 = mosek::fusion::p_WorkStack::_get_impl(_5451)->cof_base;
  int _5462 = mosek::fusion::p_WorkStack::_get_impl(_5451)->code_base;
  int _5463 = mosek::fusion::p_WorkStack::_get_impl(_5451)->codeptr_base;
  int _5464 = mosek::fusion::p_WorkStack::_get_impl(_5451)->cconst_base;
  std::shared_ptr< monty::ndarray< int,1 > > _5465 = mosek::fusion::p_WorkStack::_get_impl(_5451)->i32;
  _checked_ptr_1<int> _ptr__5465(_5465 ? _5465->raw() : nullptr,_5465 ? _5465->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _5466 = mosek::fusion::p_WorkStack::_get_impl(_5451)->i64;
  _checked_ptr_1<long long> _ptr__5466(_5466 ? _5466->raw() : nullptr,_5466 ? _5466->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _5467 = mosek::fusion::p_WorkStack::_get_impl(_5451)->f64;
  _checked_ptr_1<double> _ptr__5467(_5467 ? _5467->raw() : nullptr,_5467 ? _5467->size(0) : 0);
  int _5468 = (int)((mval)->size(0));
  if ((_5453 != (int)0))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid expression shape"));
    }
  }
  {}
  if ((_5454 == (int)0))
  {
    {
      _5450->alloc_expr((int)2,(int)0,(int)0,true);
      ((*mosek::fusion::p_WorkStack::_get_impl(_5450)->i32)(mosek::fusion::p_WorkStack::_get_impl(_5450)->shape_base)) = mdim0;
      ((*mosek::fusion::p_WorkStack::_get_impl(_5450)->i32)(safe_add( mosek::fusion::p_WorkStack::_get_impl(_5450)->shape_base,(int)1 ))) = mdim1;
    }
  }
  else
  {
    {
      int _11096;
      bool _11097 = (_5457 > (int)0);
      if (_11097)
      {
        _11096 = safe_mul( (int)2,_5455 );
      }
      else
      {
        _11096 = (int)0;
      }
      int _5469 = safe_mul( _5468,safe_add( _5457,_11096 ) );
      _5450->alloc_expr((int)2,_5468,safe_mul( _5468,_5455 ),true,_5469);
      int _5470 = mosek::fusion::p_WorkStack::_get_impl(_5450)->ptr_base;
      int _5471 = mosek::fusion::p_WorkStack::_get_impl(_5450)->nidxs_base;
      int _5472 = mosek::fusion::p_WorkStack::_get_impl(_5450)->sp_base;
      int _5473 = mosek::fusion::p_WorkStack::_get_impl(_5450)->cof_base;
      int _5474 = mosek::fusion::p_WorkStack::_get_impl(_5450)->shape_base;
      int _5475 = mosek::fusion::p_WorkStack::_get_impl(_5450)->code_base;
      int _5476 = mosek::fusion::p_WorkStack::_get_impl(_5450)->codeptr_base;
      int _5477 = mosek::fusion::p_WorkStack::_get_impl(_5450)->cconst_base;
      std::shared_ptr< monty::ndarray< int,1 > > _5478 = mosek::fusion::p_WorkStack::_get_impl(_5450)->i32;
      _checked_ptr_1<int> _ptr__5478(_5478 ? _5478->raw() : nullptr,_5478 ? _5478->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _5479 = mosek::fusion::p_WorkStack::_get_impl(_5450)->i64;
      _checked_ptr_1<long long> _ptr__5479(_5479 ? _5479->raw() : nullptr,_5479 ? _5479->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _5480 = mosek::fusion::p_WorkStack::_get_impl(_5450)->f64;
      _checked_ptr_1<double> _ptr__5480(_5480 ? _5480->raw() : nullptr,_5480 ? _5480->size(0) : 0);
      _ptr__5478[_5474] = mdim0;
      _ptr__5478[safe_add( _5474,(int)1 )] = mdim1;
      int _5481 = (int)0;
      int _5482 = (int)0;
      _ptr__5478[_5470] = (int)0;
      if ((_5457 > (int)0))
      {
        {
          _ptr__5478[_5476] = (int)0;
          int _11098 = (int)0;
          int _11099 = _5468;
          for (int _5483 = _11098; _5483 < _11099; ++_5483)
          {
            {
              int _11100 = (int)0;
              int _11101 = _5455;
              for (int _5484 = _11100; _5484 < _11101; ++_5484)
              {
                {
                  _ptr__5479[safe_add( _5471,_5482 )] = _ptr__5466[safe_add( _5460,_5484 )];
                  _ptr__5480[safe_add( _5473,_5482 )] = (_ptr__5467[safe_add( _5461,_5484 )] * ((*mval)(_5483)));
                  int _11102 = _ptr__5465[safe_add( _5463,_5484 )];
                  int _11103 = _ptr__5465[safe_add( safe_add( _5463,_5484 ),(int)1 )];
                  for (int _5485 = _11102; _5485 < _11103; ++_5485)
                  {
                    {
                      _ptr__5478[safe_add( _5475,_5481 )] = _ptr__5465[safe_add( _5462,_5485 )];
                      _ptr__5480[safe_add( _5477,_5481 )] = _ptr__5467[safe_add( _5464,_5485 )];
                      ++ _5481;
                    }
                  }
                  _ptr__5478[safe_add( _5475,_5481 )] = 2;
                  _ptr__5480[safe_add( _5477,_5481 )] = ((*mval)(_5483));
                  ++ _5481;
                  _ptr__5478[safe_add( _5475,_5481 )] = 5;
                  ++ _5481;
                  _ptr__5478[safe_add( safe_add( _5476,_5482 ),(int)1 )] = _5481;
                  ++ _5482;
                }
              }
              _ptr__5479[safe_add( _5472,_5483 )] = safe_add( safe_mul( ((*msubi)(_5483)),mdim1 ),((*msubj)(_5483)) );
              _ptr__5478[safe_add( safe_add( _5470,_5483 ),(int)1 )] = _5482;
            }
          }
        }
      }
      else
      {
        {
          int _11104 = (int)0;
          int _11105 = _5468;
          for (int _5486 = _11104; _5486 < _11105; ++_5486)
          {
            {
              int _11106 = (int)0;
              int _11107 = _5455;
              for (int _5487 = _11106; _5487 < _11107; ++_5487)
              {
                {
                  _ptr__5479[safe_add( _5471,_5482 )] = _ptr__5466[safe_add( _5460,_5487 )];
                  _ptr__5480[safe_add( _5473,_5482 )] = (_ptr__5467[safe_add( _5461,_5487 )] * ((*mval)(_5486)));
                  ++ _5482;
                }
              }
              _ptr__5479[safe_add( _5472,_5486 )] = safe_add( safe_mul( ((*msubi)(_5486)),mdim1 ),((*msubj)(_5486)) );
              _ptr__5478[safe_add( safe_add( _5470,_5486 ),(int)1 )] = _5482;
            }
          }
        }
      }
    }
  }
}
int mosek::fusion::p_ExprScalarMul::validate(int _5488,int _5489,std::shared_ptr< monty::ndarray< int,1 > > _5490,std::shared_ptr< monty::ndarray< int,1 > > _5491,std::shared_ptr< monty::ndarray< double,1 > > _5492,monty::rc_ptr< ::mosek::fusion::Expression > _5493){
  _checked_ptr_1<int> _ptr__5490(_5490 ? _5490->raw() : nullptr, _5490 ? _5490->size(0) : 0);
  _checked_ptr_1<int> _ptr__5491(_5491 ? _5491->raw() : nullptr, _5491 ? _5491->size(0) : 0);
  _checked_ptr_1<double> _ptr__5492(_5492 ? _5492->raw() : nullptr, _5492 ? _5492->size(0) : 0);
  int _5494 = _5493->getND();
  if ((_5494 != (int)0))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions"));
    }
  }
  {}
  if (((_5488 < (int)0) || (_5489 < (int)0)))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions"));
    }
  }
  {}
  if ((((int)((_5490)->size(0)) != (int)((_5491)->size(0))) || ((int)((_5490)->size(0)) != (int)((_5492)->size(0)))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Invalid matrix data"));
    }
  }
  {}
  int _5495 = (int)((_5490)->size(0));
  bool _5496 = false;
  bool _5497 = false;
  {
    int _11108 = (int)0;
    int _11109 = _5495;
    for (int _5498 = _11108; _5498 < _11109; ++_5498)
    {
      {
        if (((_ptr__5490[_5498] < (int)0) || ((_ptr__5490[_5498] >= _5488) || ((_ptr__5491[_5498] < (int)0) || (_ptr__5491[_5498] >= _5489)))))
        {
          {
            _5496 = true;
          }
        }
        {}
      }
    }
    int _11110 = (int)0;
    int _11111 = (_5495 - (int)1);
    for (int _5499 = _11110; _5499 < _11111; ++_5499)
    {
      {
        if (((_ptr__5490[_5499] > _ptr__5490[safe_add( _5499,(int)1 )]) || ((_ptr__5490[_5499] == _ptr__5490[safe_add( _5499,(int)1 )]) && (_ptr__5491[_5499] >= _ptr__5491[safe_add( _5499,(int)1 )]))))
        {
          {
            _5497 = true;
          }
        }
        {}
      }
    }
  }
  if (_5496)
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Invalid matrix data"));
    }
  }
  {}
  if (_5497)
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Unsorted matrix data"));
    }
  }
  {}
  return (int)1;
}
std::string mosek::fusion::ExprScalarMul :: toString() { return mosek::fusion::p_ExprScalarMul::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprScalarMul::toString(){
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprScalarMul(M,"))->__mosek_2fusion_2Utils_2StringBuffer__a(expr->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
void mosek::fusion::p_ExprScalarMul::destroy(){expr.reset();mval.reset();msubj.reset();msubi.reset();}void mosek::fusion::ExprScalarMul::destroy() { mosek::fusion::p_ExprScalarMul::_get_impl(this)->destroy(); }mosek::fusion::ExprMulRight::ExprMulRight(mosek::fusion::p_ExprMulRight *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprMulRight()" << this << std::endl; */ }mosek::fusion::ExprMulRight::~ExprMulRight() {  /* std::cout << "~ExprMulRight()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprMulRight::p_ExprMulRight  (::mosek::fusion::ExprMulRight * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprMulRight::t mosek::fusion::p_ExprMulRight::_new_ExprMulRight  (int _5500,    int _5501,    std::shared_ptr< monty::ndarray< int,1 > > _5502,    std::shared_ptr< monty::ndarray< int,1 > > _5503,    std::shared_ptr< monty::ndarray< double,1 > > _5504,    monty::rc_ptr< ::mosek::fusion::Expression > _5505,    int _5506){ return new mosek::fusion::ExprMulRight(_5500,_5501,_5502,_5503,_5504,_5505,_5506); }mosek::fusion::ExprMulRight::ExprMulRight  (int _5500,    int _5501,    std::shared_ptr< monty::ndarray< int,1 > > _5502,    std::shared_ptr< monty::ndarray< int,1 > > _5503,    std::shared_ptr< monty::ndarray< double,1 > > _5504,    monty::rc_ptr< ::mosek::fusion::Expression > _5505,    int _5506) :    ExprMulRight(new mosek::fusion::p_ExprMulRight(this)){ mosek::fusion::p_ExprMulRight::_get_impl(this)->_initialize(_5500,_5501,_5502,_5503,_5504,_5505,_5506); }void mosek::fusion::p_ExprMulRight::_initialize  (int _5500,    int _5501,    std::shared_ptr< monty::ndarray< int,1 > > _5502,    std::shared_ptr< monty::ndarray< int,1 > > _5503,    std::shared_ptr< monty::ndarray< double,1 > > _5504,    monty::rc_ptr< ::mosek::fusion::Expression > _5505,    int _5506){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__5502(_5502 ? _5502->raw() : nullptr, _5502 ? _5502->size(0) : 0);
    _checked_ptr_1<int> _ptr__5503(_5503 ? _5503->raw() : nullptr, _5503 ? _5503->size(0) : 0);
    _checked_ptr_1<double> _ptr__5504(_5504 ? _5504->raw() : nullptr, _5504 ? _5504->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(::mosek::fusion::p_ExprMulRight::computeshape(_5501,_5505->getShape()));
    mosek::fusion::p_ExprMulRight::_get_impl(::mosek::fusion::ExprMulRight::t(_pubthis))->mdim0 = _5500;
    mosek::fusion::p_ExprMulRight::_get_impl(::mosek::fusion::ExprMulRight::t(_pubthis))->mdim1 = _5501;
    mosek::fusion::p_ExprMulRight::_get_impl(::mosek::fusion::ExprMulRight::t(_pubthis))->msubi = _5502;
    mosek::fusion::p_ExprMulRight::_get_impl(::mosek::fusion::ExprMulRight::t(_pubthis))->msubj = _5503;
    mosek::fusion::p_ExprMulRight::_get_impl(::mosek::fusion::ExprMulRight::t(_pubthis))->mval = _5504;
    mosek::fusion::p_ExprMulRight::_get_impl(::mosek::fusion::ExprMulRight::t(_pubthis))->expr = _5505;
  }
}mosek::fusion::ExprMulRight::t mosek::fusion::p_ExprMulRight::_new_ExprMulRight  (int _5507,    int _5508,    std::shared_ptr< monty::ndarray< int,1 > > _5509,    std::shared_ptr< monty::ndarray< int,1 > > _5510,    std::shared_ptr< monty::ndarray< double,1 > > _5511,    monty::rc_ptr< ::mosek::fusion::Expression > _5512){ return new mosek::fusion::ExprMulRight(_5507,_5508,_5509,_5510,_5511,_5512); }mosek::fusion::ExprMulRight::ExprMulRight  (int _5507,    int _5508,    std::shared_ptr< monty::ndarray< int,1 > > _5509,    std::shared_ptr< monty::ndarray< int,1 > > _5510,    std::shared_ptr< monty::ndarray< double,1 > > _5511,    monty::rc_ptr< ::mosek::fusion::Expression > _5512) :    ExprMulRight(new mosek::fusion::p_ExprMulRight(this)){ mosek::fusion::p_ExprMulRight::_get_impl(this)->_initialize(_5507,_5508,_5509,_5510,_5511,_5512); }void mosek::fusion::p_ExprMulRight::_initialize  (int _5507,    int _5508,    std::shared_ptr< monty::ndarray< int,1 > > _5509,    std::shared_ptr< monty::ndarray< int,1 > > _5510,    std::shared_ptr< monty::ndarray< double,1 > > _5511,    monty::rc_ptr< ::mosek::fusion::Expression > _5512){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__5509(_5509 ? _5509->raw() : nullptr, _5509 ? _5509->size(0) : 0);
    _checked_ptr_1<int> _ptr__5510(_5510 ? _5510->raw() : nullptr, _5510 ? _5510->size(0) : 0);
    _checked_ptr_1<double> _ptr__5511(_5511 ? _5511->raw() : nullptr, _5511 ? _5511->size(0) : 0);
    mosek::fusion::p_ExprMulRight::_initialize(_5507,_5508,_5509,_5510,_5511,_5512,::mosek::fusion::p_ExprMulRight::validate(_5507,_5508,_5509,_5510,_5511,_5512));
  }
}void mosek::fusion::ExprMulRight :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _5513,monty::rc_ptr< ::mosek::fusion::WorkStack > _5514,monty::rc_ptr< ::mosek::fusion::WorkStack > _5515) { mosek::fusion::p_ExprMulRight::_get_impl(this)->eval(_5513,_5514,_5515); }void mosek::fusion::p_ExprMulRight::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _5513,monty::rc_ptr< ::mosek::fusion::WorkStack > _5514,monty::rc_ptr< ::mosek::fusion::WorkStack > _5515){
  mosek::fusion::p_ExprMulRight::_get_impl(::mosek::fusion::ExprMulRight::t(_pubthis))->expr->eval(_5514,_5513,_5515);
  _5514->pop_expr();
  std::shared_ptr< monty::ndarray< int,1 > > _5516 = mosek::fusion::p_WorkStack::_get_impl(_5514)->i32;
  _checked_ptr_1<int> _ptr__5516(_5516 ? _5516->raw() : nullptr,_5516 ? _5516->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _5517 = mosek::fusion::p_WorkStack::_get_impl(_5514)->i64;
  _checked_ptr_1<long long> _ptr__5517(_5517 ? _5517->raw() : nullptr,_5517 ? _5517->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _5518 = mosek::fusion::p_WorkStack::_get_impl(_5514)->f64;
  _checked_ptr_1<double> _ptr__5518(_5518 ? _5518->raw() : nullptr,_5518 ? _5518->size(0) : 0);
  int _5519 = mosek::fusion::p_WorkStack::_get_impl(_5514)->nd;
  if ((_5519 != (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operator shape for multiplication"));
    }
  }
  {}
  int _5520 = mosek::fusion::p_WorkStack::_get_impl(_5514)->nelem;
  int _5521 = mosek::fusion::p_WorkStack::_get_impl(_5514)->nnz;
  int _5522 = mosek::fusion::p_WorkStack::_get_impl(_5514)->ncodeatom;
  bool _5523 = mosek::fusion::p_WorkStack::_get_impl(_5514)->hassp;
  int _5524 = mosek::fusion::p_WorkStack::_get_impl(_5514)->ptr_base;
  int _5525 = mosek::fusion::p_WorkStack::_get_impl(_5514)->shape_base;
  int _5526 = mosek::fusion::p_WorkStack::_get_impl(_5514)->sp_base;
  int _5527 = mosek::fusion::p_WorkStack::_get_impl(_5514)->nidxs_base;
  int _5528 = mosek::fusion::p_WorkStack::_get_impl(_5514)->cof_base;
  int _5529 = mosek::fusion::p_WorkStack::_get_impl(_5514)->codeptr_base;
  int _5530 = mosek::fusion::p_WorkStack::_get_impl(_5514)->code_base;
  int _5531 = mosek::fusion::p_WorkStack::_get_impl(_5514)->cconst_base;
  int _5532 = _ptr__5516[_5525];
  int _5533 = _ptr__5516[safe_add( _5525,(int)1 )];
  int _5534 = (int)((mval)->size(0));
  bool _5535 = (_5534 < safe_mul( (long long)mdim0,(long long)mdim1 ));
  if (_5535)
  {
    {
      int _5536 = _5515->alloci32(safe_add( mdim1,(int)1 ));
      int _5537 = _5515->alloci32(_5534);
      int _5538 = _5515->alloci32(safe_add( _5532,(int)1 ));
      std::shared_ptr< monty::ndarray< int,1 > > _5539 = mosek::fusion::p_WorkStack::_get_impl(_5515)->i32;
      _checked_ptr_1<int> _ptr__5539(_5539 ? _5539->raw() : nullptr,_5539 ? _5539->size(0) : 0);
      {
        int _11112 = (int)0;
        int _11113 = safe_add( mdim1,(int)1 );
        for (int _5540 = _11112; _5540 < _11113; ++_5540)
        {
          {
            _ptr__5539[safe_add( _5536,_5540 )] = (int)0;
          }
        }
        int _11114 = (int)0;
        int _11115 = _5534;
        for (int _5541 = _11114; _5541 < _11115; ++_5541)
        {
          {
            ++ _ptr__5539[safe_add( safe_add( _5536,((*msubj)(_5541)) ),(int)1 )];
          }
        }
        int _11116 = (int)0;
        int _11117 = mdim1;
        for (int _5542 = _11116; _5542 < _11117; ++_5542)
        {
          {
            _ptr__5539[safe_add( safe_add( _5536,_5542 ),(int)1 )] += _ptr__5539[safe_add( _5536,_5542 )];
          }
        }
        int _11118 = (int)0;
        int _11119 = _5534;
        for (int _5543 = _11118; _5543 < _11119; ++_5543)
        {
          {
            _ptr__5539[safe_add( _5537,_ptr__5539[safe_add( _5536,((*msubj)(_5543)) )] )] = _5543;
            ++ _ptr__5539[safe_add( _5536,((*msubj)(_5543)) )];
          }
        }
        int _11120 = (int)0;
        int _11121 = mdim1;
        for (int _5544 = _11120; _5544 < _11121; ++_5544)
        {
          {
            _ptr__5539[(safe_add( _5536,mdim1 ) - _5544)] = _ptr__5539[((safe_add( _5536,mdim1 ) - _5544) - (int)1)];
          }
        }
        _ptr__5539[_5536] = (int)0;
        int _11122 = (int)0;
        int _11123 = safe_add( _5532,(int)1 );
        for (int _5545 = _11122; _5545 < _11123; ++_5545)
        {
          {
            _ptr__5539[safe_add( _5538,_5545 )] = (int)0;
          }
        }
      }
      if (_5523)
      {
        {
          int _5546 = (int)0;
          int _5547 = (int)0;
          long long _5548 = (long long)0;
          {
            int _5549 = (int)0;
            while ( (_5549 < _5520) )
            {
              {
                long long _5550 = (_ptr__5517[safe_add( _5526,_5549 )] / _5533);
                int _5551 = _5549;
                ++ _5549;
                while ( ((_5549 < _5520) && ((_ptr__5517[safe_add( _5526,_5549 )] / _5533) == _5550)) )
                {
                  {
                    ++ _5549;
                  }
                }
                int _5552 = _5549;
                int _5553 = (int)0;
                while ( (_5553 < _5534) )
                {
                  {
                    int _5554 = ((*msubj)(_ptr__5539[safe_add( _5537,_5553 )]));
                    int _5555 = _5553;
                    ++ _5553;
                    while ( ((_5553 < _5534) && (((*msubj)(_ptr__5539[safe_add( _5537,_5553 )])) == _5554)) )
                    {
                      {
                        ++ _5553;
                      }
                    }
                    int _5556 = _5553;
                    bool _5557 = false;
                    int _5558 = _5555;
                    int _5559 = _5551;
                    while ( ((_5559 < _5552) && (_5558 < _5556)) )
                    {
                      {
                        int _5560 = _ptr__5539[safe_add( _5537,_5558 )];
                        if (((_ptr__5517[safe_add( _5526,_5559 )] % _5533) < ((*msubi)(_5560))))
                        {
                          {
                            ++ _5559;
                          }
                        }
                        else if(((_ptr__5517[safe_add( _5526,_5559 )] % _5533) > ((*msubi)(_5560))))
                        {
                          {
                            ++ _5558;
                          }
                        }
                        else
                        {
                          {
                            if (((((*mval)(_5560)) > (int)0) || ((int)0 < ((*mval)(_5560)))))
                            {
                              {
                                _5548 += (_ptr__5516[safe_add( safe_add( _5524,_5559 ),(int)1 )] - _ptr__5516[safe_add( _5524,_5559 )]);
                                if ((_5522 > (int)0))
                                {
                                  {
                                    _5546 += safe_add( (_ptr__5516[safe_add( _5529,_ptr__5516[safe_add( safe_add( _5524,_5559 ),(int)1 )] )] - _ptr__5516[safe_add( _5529,_ptr__5516[safe_add( _5524,_5559 )] )]),safe_mul( (int)2,(_ptr__5516[safe_add( safe_add( _5524,_5559 ),(int)1 )] - _ptr__5516[safe_add( _5524,_5559 )]) ) );
                                  }
                                }
                                {}
                                ++ _5559;
                                ++ _5558;
                                _5557 = true;
                              }
                            }
                            {}
                          }
                        }
                      }
                    }
                    if (_5557)
                    {
                      {
                        ++ _5547;
                      }
                    }
                    {}
                  }
                }
              }
            }
          }
          bool _5561 = (_5547 < safe_mul( _5532,mdim1 ));
          _5513->alloc_expr((int)2,_5547,(int)_5548,_5561,_5546);
          int _5562 = mosek::fusion::p_WorkStack::_get_impl(_5513)->ptr_base;
          int _5563 = mosek::fusion::p_WorkStack::_get_impl(_5513)->nidxs_base;
          int _11124;
          bool _11125 = _5561;
          if (_11125)
          {
            _11124 = mosek::fusion::p_WorkStack::_get_impl(_5513)->sp_base;
          }
          else
          {
            _11124 = _5513->alloci64(_5547);
          }
          int _5564 = _11124;
          int _5565 = mosek::fusion::p_WorkStack::_get_impl(_5513)->cof_base;
          int _5566 = mosek::fusion::p_WorkStack::_get_impl(_5513)->shape_base;
          int _5567 = mosek::fusion::p_WorkStack::_get_impl(_5513)->codeptr_base;
          int _5568 = mosek::fusion::p_WorkStack::_get_impl(_5513)->code_base;
          int _5569 = mosek::fusion::p_WorkStack::_get_impl(_5513)->cconst_base;
          std::shared_ptr< monty::ndarray< int,1 > > _5570 = mosek::fusion::p_WorkStack::_get_impl(_5513)->i32;
          _checked_ptr_1<int> _ptr__5570(_5570 ? _5570->raw() : nullptr,_5570 ? _5570->size(0) : 0);
          std::shared_ptr< monty::ndarray< long long,1 > > _5571 = mosek::fusion::p_WorkStack::_get_impl(_5513)->i64;
          _checked_ptr_1<long long> _ptr__5571(_5571 ? _5571->raw() : nullptr,_5571 ? _5571->size(0) : 0);
          std::shared_ptr< monty::ndarray< double,1 > > _5572 = mosek::fusion::p_WorkStack::_get_impl(_5513)->f64;
          _checked_ptr_1<double> _ptr__5572(_5572 ? _5572->raw() : nullptr,_5572 ? _5572->size(0) : 0);
          _ptr__5570[_5566] = _5532;
          _ptr__5570[safe_add( _5566,(int)1 )] = mdim1;
          _ptr__5570[_5562] = (int)0;
          if ((_5546 > (int)0))
          {
            {
              _ptr__5570[_5567] = (int)0;
            }
          }
          {}
          {
            int _5573 = (int)0;
            int _5574 = (int)0;
            int _5575 = (int)0;
            int _5576 = (int)0;
            while ( (_5573 < _5520) )
            {
              {
                long long _5577 = (_ptr__5517[safe_add( _5526,_5573 )] / _5533);
                int _5578 = _5573;
                ++ _5573;
                while ( ((_5573 < _5520) && ((_ptr__5517[safe_add( _5526,_5573 )] / _5533) == _5577)) )
                {
                  {
                    ++ _5573;
                  }
                }
                int _5579 = _5573;
                int _5580 = (int)0;
                while ( (_5580 < _5534) )
                {
                  {
                    int _5581 = ((*msubj)(_ptr__5539[safe_add( _5537,_5580 )]));
                    int _5582 = _5580;
                    ++ _5580;
                    while ( ((_5580 < _5534) && (((*msubj)(_ptr__5539[safe_add( _5537,_5580 )])) == _5581)) )
                    {
                      {
                        ++ _5580;
                      }
                    }
                    int _5583 = _5580;
                    int _5584 = _5582;
                    int _5585 = _5578;
                    bool _5586 = false;
                    while ( ((_5585 < _5579) && (_5584 < _5583)) )
                    {
                      {
                        int _5587 = _ptr__5539[safe_add( _5537,_5584 )];
                        if (((_ptr__5517[safe_add( _5526,_5585 )] % _5533) < ((*msubi)(_5587))))
                        {
                          {
                            ++ _5585;
                          }
                        }
                        else if(((_ptr__5517[safe_add( _5526,_5585 )] % _5533) > ((*msubi)(_5587))))
                        {
                          {
                            ++ _5584;
                          }
                        }
                        else
                        {
                          {
                            if (((((*mval)(_5587)) > (int)0) || ((int)0 < ((*mval)(_5587)))))
                            {
                              {
                                int _11126 = _ptr__5516[safe_add( _5524,_5585 )];
                                int _11127 = _ptr__5516[safe_add( safe_add( _5524,_5585 ),(int)1 )];
                                for (int _5588 = _11126; _5588 < _11127; ++_5588)
                                {
                                  {
                                    _ptr__5571[safe_add( _5563,_5576 )] = _ptr__5517[safe_add( _5527,_5588 )];
                                    _ptr__5572[safe_add( _5565,_5576 )] = (_ptr__5518[safe_add( _5528,_5588 )] * ((*mval)(_5587)));
                                    if ((_5522 > (int)0))
                                    {
                                      {
                                        int _11128 = _ptr__5516[safe_add( _5529,_5588 )];
                                        int _11129 = _ptr__5516[safe_add( safe_add( _5529,_5588 ),(int)1 )];
                                        for (int _5589 = _11128; _5589 < _11129; ++_5589)
                                        {
                                          {
                                            _ptr__5570[safe_add( _5568,_5574 )] = _ptr__5516[safe_add( _5530,_5589 )];
                                            _ptr__5572[safe_add( _5569,_5574 )] = _ptr__5518[safe_add( _5531,_5589 )];
                                            ++ _5574;
                                          }
                                        }
                                        _ptr__5570[safe_add( _5568,_5574 )] = 2;
                                        _ptr__5572[safe_add( _5569,_5574 )] = ((*mval)(_5584));
                                        ++ _5574;
                                        _ptr__5570[safe_add( _5568,_5574 )] = 5;
                                        ++ _5574;
                                        _ptr__5570[safe_add( safe_add( _5567,_5576 ),(int)1 )] = _5574;
                                      }
                                    }
                                    {}
                                    ++ _5576;
                                  }
                                }
                                ++ _5585;
                                ++ _5584;
                                _5586 = true;
                              }
                            }
                            {}
                          }
                        }
                      }
                    }
                    if (_5586)
                    {
                      {
                        _ptr__5570[safe_add( safe_add( _5562,_5575 ),(int)1 )] = _5576;
                        _ptr__5571[safe_add( _5564,_5575 )] = safe_add( safe_mul( _5577,mdim1 ),_5581 );
                        ++ _5575;
                      }
                    }
                    {}
                  }
                }
              }
            }
            if ((_5576 != _5548))
            {
              {
                throw ::mosek::fusion::UnexpectedError(std::string ("Internal: invalid nnz"));
              }
            }
            {}
            if ((_5575 != _5547))
            {
              {
                throw ::mosek::fusion::UnexpectedError(std::string ("Internal: invalid nnz"));
              }
            }
            {}
            if ((_ptr__5570[safe_add( _5562,_5547 )] != _5548))
            {
              {
                throw ::mosek::fusion::UnexpectedError(std::string ("Internal: invalid nnz"));
              }
            }
            {}
          }
          if ((!_5561))
          {
            {
              _5513->popi64(_5547);
            }
          }
          {}
        }
      }
      else
      {
        {
          int _5590 = (int)0;
          int _5591 = safe_mul( _5532,mdim1 );
          int _5592 = (int)0;
          int _11130 = (int)0;
          int _11131 = _5532;
          for (int _5593 = _11130; _5593 < _11131; ++_5593)
          {
            {
              int _11132 = (int)0;
              int _11133 = mdim1;
              for (int _5594 = _11132; _5594 < _11133; ++_5594)
              {
                {
                  int _11134 = _ptr__5539[safe_add( _5536,_5594 )];
                  int _11135 = _ptr__5539[safe_add( safe_add( _5536,_5594 ),(int)1 )];
                  for (int _5595 = _11134; _5595 < _11135; ++_5595)
                  {
                    {
                      int _5596 = _ptr__5539[safe_add( _5537,_5595 )];
                      int _5597 = safe_add( safe_mul( _5593,_5533 ),((*msubi)(_5596)) );
                      _5592 += (_ptr__5516[safe_add( safe_add( _5524,_5597 ),(int)1 )] - _ptr__5516[safe_add( _5524,_5597 )]);
                      if ((_5522 > (int)0))
                      {
                        {
                          _5590 += safe_add( (_ptr__5516[safe_add( _5529,_ptr__5516[safe_add( safe_add( _5524,_5597 ),(int)1 )] )] - _ptr__5516[safe_add( _5529,_ptr__5516[safe_add( _5524,_5597 )] )]),safe_mul( (int)2,(_ptr__5516[safe_add( safe_add( _5524,_5597 ),(int)1 )] - _ptr__5516[safe_add( _5524,_5597 )]) ) );
                        }
                      }
                      {}
                    }
                  }
                }
              }
            }
          }
          bool _5598 = (_5591 < safe_mul( _5532,mdim1 ));
          if ((!(_5592 <= (int)0x7fffffff)))
          {
            {
              throw ::mosek::fusion::LengthError(std::string ("Maximum number of nonzeros exceeded in multiplication"));
            }
          }
          {}
          _5513->alloc_expr((int)2,_5591,(int)_5592,_5598,_5590);
          int _5599 = mosek::fusion::p_WorkStack::_get_impl(_5513)->shape_base;
          int _5600 = mosek::fusion::p_WorkStack::_get_impl(_5513)->ptr_base;
          int _5601 = mosek::fusion::p_WorkStack::_get_impl(_5513)->nidxs_base;
          int _11136;
          bool _11137 = _5598;
          if (_11137)
          {
            _11136 = mosek::fusion::p_WorkStack::_get_impl(_5513)->sp_base;
          }
          else
          {
            _11136 = _5513->alloci64(_5591);
          }
          int _5602 = _11136;
          int _5603 = mosek::fusion::p_WorkStack::_get_impl(_5513)->cof_base;
          int _5604 = mosek::fusion::p_WorkStack::_get_impl(_5513)->code_base;
          int _5605 = mosek::fusion::p_WorkStack::_get_impl(_5513)->codeptr_base;
          int _5606 = mosek::fusion::p_WorkStack::_get_impl(_5513)->cconst_base;
          std::shared_ptr< monty::ndarray< int,1 > > _5607 = mosek::fusion::p_WorkStack::_get_impl(_5513)->i32;
          _checked_ptr_1<int> _ptr__5607(_5607 ? _5607->raw() : nullptr,_5607 ? _5607->size(0) : 0);
          std::shared_ptr< monty::ndarray< long long,1 > > _5608 = mosek::fusion::p_WorkStack::_get_impl(_5513)->i64;
          _checked_ptr_1<long long> _ptr__5608(_5608 ? _5608->raw() : nullptr,_5608 ? _5608->size(0) : 0);
          std::shared_ptr< monty::ndarray< double,1 > > _5609 = mosek::fusion::p_WorkStack::_get_impl(_5513)->f64;
          _checked_ptr_1<double> _ptr__5609(_5609 ? _5609->raw() : nullptr,_5609 ? _5609->size(0) : 0);
          _ptr__5607[_5599] = _5532;
          _ptr__5607[safe_add( _5599,(int)1 )] = mdim1;
          int _5610 = (int)0;
          int _5611 = (int)0;
          int _5612 = (int)0;
          _ptr__5607[_5600] = (int)0;
          if ((_5590 > (int)0))
          {
            {
              _ptr__5607[_5605] = (int)0;
            }
          }
          {}
          int _11138 = (int)0;
          int _11139 = _5532;
          for (int _5613 = _11138; _5613 < _11139; ++_5613)
          {
            {
              int _11140 = (int)0;
              int _11141 = mdim1;
              for (int _5614 = _11140; _5614 < _11141; ++_5614)
              {
                {
                  int _5615 = safe_mul( _5613,_5533 );
                  int _11142 = _ptr__5539[safe_add( _5536,_5614 )];
                  int _11143 = _ptr__5539[safe_add( safe_add( _5536,_5614 ),(int)1 )];
                  for (int _5616 = _11142; _5616 < _11143; ++_5616)
                  {
                    {
                      int _5617 = _ptr__5539[safe_add( _5537,_5616 )];
                      int _5618 = safe_add( _5615,((*msubi)(_5617)) );
                      if ((_5590 == (int)0))
                      {
                        {
                          int _11144 = _ptr__5516[safe_add( _5524,_5618 )];
                          int _11145 = _ptr__5516[safe_add( safe_add( _5524,_5618 ),(int)1 )];
                          for (int _5619 = _11144; _5619 < _11145; ++_5619)
                          {
                            {
                              _ptr__5608[safe_add( _5601,_5612 )] = _ptr__5517[safe_add( _5527,_5619 )];
                              _ptr__5609[safe_add( _5603,_5612 )] = (_ptr__5518[safe_add( _5528,_5619 )] * ((*mval)(_5617)));
                              ++ _5612;
                            }
                          }
                        }
                      }
                      else
                      {
                        {
                          int _11146 = _ptr__5516[safe_add( _5524,_5618 )];
                          int _11147 = _ptr__5516[safe_add( safe_add( _5524,_5618 ),(int)1 )];
                          for (int _5620 = _11146; _5620 < _11147; ++_5620)
                          {
                            {
                              _ptr__5608[safe_add( _5601,_5612 )] = _ptr__5517[safe_add( _5527,_5620 )];
                              _ptr__5609[safe_add( _5603,_5612 )] = (_ptr__5518[safe_add( _5528,_5620 )] * ((*mval)(_5617)));
                              int _11148 = _ptr__5516[safe_add( _5529,_5620 )];
                              int _11149 = _ptr__5516[safe_add( safe_add( _5529,_5620 ),(int)1 )];
                              for (int _5621 = _11148; _5621 < _11149; ++_5621)
                              {
                                {
                                  _ptr__5607[safe_add( _5604,_5610 )] = _ptr__5516[safe_add( _5530,_5621 )];
                                  _ptr__5609[safe_add( _5606,_5610 )] = _ptr__5518[safe_add( _5531,_5621 )];
                                  ++ _5610;
                                }
                              }
                              _ptr__5607[safe_add( _5604,_5610 )] = 2;
                              _ptr__5609[safe_add( _5606,_5610 )] = ((*mval)(_5617));
                              ++ _5610;
                              _ptr__5607[safe_add( _5604,_5610 )] = 5;
                              ++ _5610;
                              _ptr__5607[safe_add( safe_add( _5605,_5612 ),(int)1 )] = _5610;
                              ++ _5612;
                            }
                          }
                        }
                      }
                    }
                  }
                  _ptr__5607[safe_add( safe_add( _5600,_5611 ),(int)1 )] = _5612;
                  _ptr__5608[safe_add( _5602,_5611 )] = safe_add( safe_mul( _5613,mdim1 ),_5614 );
                  ++ _5611;
                }
              }
            }
          }
          if ((!_5598))
          {
            {
              _5513->popi64(_5591);
            }
          }
          {}
        }
      }
      _5515->clear();
    }
  }
  else
  {
    {
      int _5622 = _5515->alloci32(safe_add( _5532,(int)1 ));
      std::shared_ptr< monty::ndarray< int,1 > > _5623 = mosek::fusion::p_WorkStack::_get_impl(_5515)->i32;
      _checked_ptr_1<int> _ptr__5623(_5623 ? _5623->raw() : nullptr,_5623 ? _5623->size(0) : 0);
      int _11150 = (int)0;
      int _11151 = safe_add( _5532,(int)1 );
      for (int _5624 = _11150; _5624 < _11151; ++_5624)
      {
        {
          _ptr__5623[safe_add( _5622,_5624 )] = (int)0;
        }
      }
      long long _5625 = safe_mul( (long long)_5521,mdim1 );
      int _5626 = safe_mul( _5532,mdim1 );
      int _11152;
      bool _11153 = (_5522 == (int)0);
      if (_11153)
      {
        _11152 = (int)0;
      }
      else
      {
        _11152 = safe_mul( (int)_5625,(int)2 );
      }
      int _5627 = safe_add( safe_mul( _5522,mdim1 ),_11152 );
      bool _5628 = false;
      int _5629 = (int)2;
      if ((!(_5625 <= (int)0x7fffffff)))
      {
        {
          throw ::mosek::fusion::LengthError(std::string ("Maximum number of nonzeros exceeded in multiplication"));
        }
      }
      {}
      _5513->alloc_expr(_5629,_5626,(int)_5625,_5628,_5627);
      std::shared_ptr< monty::ndarray< int,1 > > _5630 = mosek::fusion::p_WorkStack::_get_impl(_5513)->i32;
      _checked_ptr_1<int> _ptr__5630(_5630 ? _5630->raw() : nullptr,_5630 ? _5630->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _5631 = mosek::fusion::p_WorkStack::_get_impl(_5513)->i64;
      _checked_ptr_1<long long> _ptr__5631(_5631 ? _5631->raw() : nullptr,_5631 ? _5631->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _5632 = mosek::fusion::p_WorkStack::_get_impl(_5513)->f64;
      _checked_ptr_1<double> _ptr__5632(_5632 ? _5632->raw() : nullptr,_5632 ? _5632->size(0) : 0);
      int _5633 = mosek::fusion::p_WorkStack::_get_impl(_5513)->shape_base;
      int _5634 = mosek::fusion::p_WorkStack::_get_impl(_5513)->ptr_base;
      int _5635 = mosek::fusion::p_WorkStack::_get_impl(_5513)->nidxs_base;
      int _5636 = mosek::fusion::p_WorkStack::_get_impl(_5513)->sp_base;
      int _5637 = mosek::fusion::p_WorkStack::_get_impl(_5513)->cof_base;
      int _5638 = mosek::fusion::p_WorkStack::_get_impl(_5513)->code_base;
      int _5639 = mosek::fusion::p_WorkStack::_get_impl(_5513)->codeptr_base;
      int _5640 = mosek::fusion::p_WorkStack::_get_impl(_5513)->cconst_base;
      _ptr__5630[_5633] = _5532;
      _ptr__5630[safe_add( _5633,(int)1 )] = mdim1;
      int _5641 = (int)0;
      int _5642 = (int)0;
      int _5643 = (int)0;
      _ptr__5630[_5634] = (int)0;
      if ((_5627 > (int)0))
      {
        {
          _ptr__5630[_5639] = (int)0;
        }
      }
      {}
      if (_5523)
      {
        {
          {
            int _11154 = (int)0;
            int _11155 = _5520;
            for (int _5644 = _11154; _5644 < _11155; ++_5644)
            {
              {
                ++ _ptr__5623[safe_add( safe_add( _5622,(_ptr__5517[safe_add( _5526,_5644 )] / _5533) ),(int)1 )];
              }
            }
            int _11156 = (int)0;
            int _11157 = _5532;
            for (int _5645 = _11156; _5645 < _11157; ++_5645)
            {
              {
                _ptr__5623[safe_add( safe_add( _5622,_5645 ),(int)1 )] += _ptr__5623[safe_add( _5622,_5645 )];
              }
            }
            int _11158 = (int)0;
            int _11159 = _5532;
            for (int _5646 = _11158; _5646 < _11159; ++_5646)
            {
              {
                int _11160 = (int)0;
                int _11161 = mdim1;
                for (int _5647 = _11160; _5647 < _11161; ++_5647)
                {
                  {
                    int _11162 = _ptr__5623[safe_add( _5622,_5646 )];
                    int _11163 = _ptr__5623[safe_add( safe_add( _5622,_5646 ),(int)1 )];
                    for (int _5648 = _11162; _5648 < _11163; ++_5648)
                    {
                      {
                        long long _5649 = safe_add( _5647,safe_mul( (_ptr__5517[safe_add( _5526,_5648 )] % _5533),mdim1 ) );
                        int _11164 = _ptr__5516[safe_add( _5524,_5648 )];
                        int _11165 = _ptr__5516[safe_add( safe_add( _5524,_5648 ),(int)1 )];
                        for (int _5650 = _11164; _5650 < _11165; ++_5650)
                        {
                          {
                            _ptr__5631[safe_add( _5635,_5642 )] = _ptr__5517[safe_add( _5527,_5650 )];
                            _ptr__5632[safe_add( _5637,_5642 )] = (_ptr__5518[safe_add( _5528,_5650 )] * ((*mval)(_5649)));
                            if ((_5522 > (int)0))
                            {
                              {
                                int _11166 = _ptr__5516[safe_add( _5529,_5650 )];
                                int _11167 = _ptr__5516[safe_add( safe_add( _5529,_5650 ),(int)1 )];
                                for (int _5651 = _11166; _5651 < _11167; ++_5651)
                                {
                                  {
                                    _ptr__5630[safe_add( _5638,_5641 )] = _ptr__5516[safe_add( _5530,_5651 )];
                                    _ptr__5632[safe_add( _5640,_5641 )] = _ptr__5518[safe_add( _5531,_5651 )];
                                    ++ _5641;
                                  }
                                }
                                _ptr__5630[safe_add( _5638,_5641 )] = 2;
                                _ptr__5632[safe_add( _5640,_5641 )] = ((*mval)(_5649));
                                ++ _5641;
                                _ptr__5630[safe_add( _5638,_5641 )] = 5;
                                ++ _5641;
                                _ptr__5630[safe_add( safe_add( _5639,_5642 ),(int)1 )] = _5641;
                              }
                            }
                            {}
                            ++ _5642;
                          }
                        }
                      }
                    }
                    _ptr__5630[safe_add( safe_add( _5634,_5643 ),(int)1 )] = _5642;
                    ++ _5643;
                  }
                }
              }
            }
          }
          if ((_5642 != _5625))
          {
            {
              throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Invalid num nonzeros"));
            }
          }
          {}
          if ((_5643 != _5626))
          {
            {
              throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Invalid num elements"));
            }
          }
          {}
          if ((_5641 != _5627))
          {
            {
              throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Invalid num code atoms"));
            }
          }
          {}
        }
      }
      else
      {
        {
          int _11168 = (int)0;
          int _11169 = _5532;
          for (int _5652 = _11168; _5652 < _11169; ++_5652)
          {
            {
              int _11170 = (int)0;
              int _11171 = mdim1;
              for (int _5653 = _11170; _5653 < _11171; ++_5653)
              {
                {
                  int _11172 = (int)0;
                  int _11173 = _5533;
                  for (int _5654 = _11172; _5654 < _11173; ++_5654)
                  {
                    {
                      int _5655 = safe_add( safe_mul( _5652,_5533 ),_5654 );
                      int _5656 = safe_add( _5653,safe_mul( _5654,mdim1 ) );
                      int _11174 = _ptr__5516[safe_add( _5524,_5655 )];
                      int _11175 = _ptr__5516[safe_add( safe_add( _5524,_5655 ),(int)1 )];
                      for (int _5657 = _11174; _5657 < _11175; ++_5657)
                      {
                        {
                          _ptr__5631[safe_add( _5635,_5642 )] = _ptr__5517[safe_add( _5527,_5657 )];
                          _ptr__5632[safe_add( _5637,_5642 )] = (_ptr__5518[safe_add( _5528,_5657 )] * ((*mval)(_5656)));
                          if ((_5522 > (int)0))
                          {
                            {
                              int _11176 = _ptr__5516[safe_add( _5529,_5657 )];
                              int _11177 = _ptr__5516[safe_add( safe_add( _5529,_5657 ),(int)1 )];
                              for (int _5658 = _11176; _5658 < _11177; ++_5658)
                              {
                                {
                                  _ptr__5630[safe_add( _5638,_5641 )] = _ptr__5516[safe_add( _5530,_5658 )];
                                  _ptr__5632[safe_add( _5640,_5641 )] = _ptr__5518[safe_add( _5531,_5658 )];
                                  ++ _5641;
                                }
                              }
                              _ptr__5630[safe_add( _5638,_5641 )] = 2;
                              _ptr__5632[safe_add( _5640,_5641 )] = ((*mval)(_5656));
                              ++ _5641;
                              _ptr__5630[safe_add( _5638,_5641 )] = 5;
                              ++ _5641;
                              _ptr__5630[safe_add( safe_add( _5639,_5642 ),(int)1 )] = _5641;
                            }
                          }
                          {}
                          ++ _5642;
                        }
                      }
                    }
                  }
                  _ptr__5630[safe_add( safe_add( _5634,_5643 ),(int)1 )] = _5642;
                  ++ _5643;
                }
              }
            }
          }
        }
      }
      _5515->clear();
    }
  }
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_ExprMulRight::computeshape(int _5659,std::shared_ptr< monty::ndarray< int,1 > > _5660){
  _checked_ptr_1<int> _ptr__5660(_5660 ? _5660->raw() : nullptr, _5660 ? _5660->size(0) : 0);
  if (((int)((_5660)->size(0)) == (int)1))
  {
    {
      return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)1),(int)(_5659)});
    }
  }
  else
  {
    {
      return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_ptr__5660[(int)0]),(int)(_5659)});
    }
  }
}
int mosek::fusion::p_ExprMulRight::validate(int _5661,int _5662,std::shared_ptr< monty::ndarray< int,1 > > _5663,std::shared_ptr< monty::ndarray< int,1 > > _5664,std::shared_ptr< monty::ndarray< double,1 > > _5665,monty::rc_ptr< ::mosek::fusion::Expression > _5666){
  _checked_ptr_1<int> _ptr__5663(_5663 ? _5663->raw() : nullptr, _5663 ? _5663->size(0) : 0);
  _checked_ptr_1<int> _ptr__5664(_5664 ? _5664->raw() : nullptr, _5664 ? _5664->size(0) : 0);
  _checked_ptr_1<double> _ptr__5665(_5665 ? _5665->raw() : nullptr, _5665 ? _5665->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _5667 = _5666->getShape();
  _checked_ptr_1<int> _ptr__5667(_5667 ? _5667->raw() : nullptr,_5667 ? _5667->size(0) : 0);
  if (((int)((_5667)->size(0)) != (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions"));
    }
  }
  {}
  int _5668 = _ptr__5667[(int)0];
  int _5669 = _ptr__5667[(int)1];
  if (((_5661 < (int)0) || ((_5662 < (int)0) || ((_5668 < (int)0) || (_5669 < (int)0)))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions"));
    }
  }
  {}
  if ((_5661 != _5669))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand dimensions"));
    }
  }
  {}
  if ((((int)((_5663)->size(0)) != (int)((_5664)->size(0))) || ((int)((_5663)->size(0)) != (int)((_5665)->size(0)))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Invalid matrix data"));
    }
  }
  {}
  int _5670 = (int)((_5663)->size(0));
  {
    bool _5671 = false;
    int _11178 = (int)0;
    int _11179 = _5670;
    for (int _5672 = _11178; _5672 < _11179; ++_5672)
    {
      {
        _5671 = (_5671 || ((_ptr__5663[_5672] < (int)0) || ((_ptr__5663[_5672] >= _5661) || ((_ptr__5664[_5672] < (int)0) || (_ptr__5664[_5672] >= _5662)))));
      }
    }
    if (_5671)
    {
      {
        throw ::mosek::fusion::LengthError(std::string ("Invalid matrix data"));
      }
    }
    {}
  }
  {
    bool _5673 = false;
    int _11180 = (int)0;
    int _11181 = (_5670 - (int)1);
    for (int _5674 = _11180; _5674 < _11181; ++_5674)
    {
      {
        _5673 = (_5673 || ((_ptr__5663[_5674] > _ptr__5663[safe_add( _5674,(int)1 )]) || ((_ptr__5663[_5674] == _ptr__5663[safe_add( _5674,(int)1 )]) && (_ptr__5664[_5674] >= _ptr__5664[safe_add( _5674,(int)1 )]))));
      }
    }
    if (_5673)
    {
      {
        throw ::mosek::fusion::LengthError(std::string ("Unsorted matrix data"));
      }
    }
    {}
  }
  return (int)1;
}
std::string mosek::fusion::ExprMulRight :: toString() { return mosek::fusion::p_ExprMulRight::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprMulRight::toString(){
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprMulRight(M,"))->__mosek_2fusion_2Utils_2StringBuffer__a(expr->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
void mosek::fusion::p_ExprMulRight::destroy(){expr.reset();mval.reset();msubj.reset();msubi.reset();}void mosek::fusion::ExprMulRight::destroy() { mosek::fusion::p_ExprMulRight::_get_impl(this)->destroy(); }mosek::fusion::ExprMulLeft::ExprMulLeft(mosek::fusion::p_ExprMulLeft *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprMulLeft()" << this << std::endl; */ }mosek::fusion::ExprMulLeft::~ExprMulLeft() {  /* std::cout << "~ExprMulLeft()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprMulLeft::p_ExprMulLeft  (::mosek::fusion::ExprMulLeft * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprMulLeft::t mosek::fusion::p_ExprMulLeft::_new_ExprMulLeft  (int _5675,    int _5676,    std::shared_ptr< monty::ndarray< int,1 > > _5677,    std::shared_ptr< monty::ndarray< int,1 > > _5678,    std::shared_ptr< monty::ndarray< double,1 > > _5679,    monty::rc_ptr< ::mosek::fusion::Expression > _5680,    int _5681){ return new mosek::fusion::ExprMulLeft(_5675,_5676,_5677,_5678,_5679,_5680,_5681); }mosek::fusion::ExprMulLeft::ExprMulLeft  (int _5675,    int _5676,    std::shared_ptr< monty::ndarray< int,1 > > _5677,    std::shared_ptr< monty::ndarray< int,1 > > _5678,    std::shared_ptr< monty::ndarray< double,1 > > _5679,    monty::rc_ptr< ::mosek::fusion::Expression > _5680,    int _5681) :    ExprMulLeft(new mosek::fusion::p_ExprMulLeft(this)){ mosek::fusion::p_ExprMulLeft::_get_impl(this)->_initialize(_5675,_5676,_5677,_5678,_5679,_5680,_5681); }void mosek::fusion::p_ExprMulLeft::_initialize  (int _5675,    int _5676,    std::shared_ptr< monty::ndarray< int,1 > > _5677,    std::shared_ptr< monty::ndarray< int,1 > > _5678,    std::shared_ptr< monty::ndarray< double,1 > > _5679,    monty::rc_ptr< ::mosek::fusion::Expression > _5680,    int _5681){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__5677(_5677 ? _5677->raw() : nullptr, _5677 ? _5677->size(0) : 0);
    _checked_ptr_1<int> _ptr__5678(_5678 ? _5678->raw() : nullptr, _5678 ? _5678->size(0) : 0);
    _checked_ptr_1<double> _ptr__5679(_5679 ? _5679->raw() : nullptr, _5679 ? _5679->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(::mosek::fusion::p_ExprMulLeft::computeshape(_5675,_5676,_5680->getShape()));
    mosek::fusion::p_ExprMulLeft::_get_impl(::mosek::fusion::ExprMulLeft::t(_pubthis))->mdim0 = _5675;
    mosek::fusion::p_ExprMulLeft::_get_impl(::mosek::fusion::ExprMulLeft::t(_pubthis))->mdim1 = _5676;
    mosek::fusion::p_ExprMulLeft::_get_impl(::mosek::fusion::ExprMulLeft::t(_pubthis))->msubi = _5677;
    mosek::fusion::p_ExprMulLeft::_get_impl(::mosek::fusion::ExprMulLeft::t(_pubthis))->msubj = _5678;
    mosek::fusion::p_ExprMulLeft::_get_impl(::mosek::fusion::ExprMulLeft::t(_pubthis))->mval = _5679;
    mosek::fusion::p_ExprMulLeft::_get_impl(::mosek::fusion::ExprMulLeft::t(_pubthis))->expr = _5680;
  }
}mosek::fusion::ExprMulLeft::t mosek::fusion::p_ExprMulLeft::_new_ExprMulLeft  (int _5682,    int _5683,    std::shared_ptr< monty::ndarray< int,1 > > _5684,    std::shared_ptr< monty::ndarray< int,1 > > _5685,    std::shared_ptr< monty::ndarray< double,1 > > _5686,    monty::rc_ptr< ::mosek::fusion::Expression > _5687){ return new mosek::fusion::ExprMulLeft(_5682,_5683,_5684,_5685,_5686,_5687); }mosek::fusion::ExprMulLeft::ExprMulLeft  (int _5682,    int _5683,    std::shared_ptr< monty::ndarray< int,1 > > _5684,    std::shared_ptr< monty::ndarray< int,1 > > _5685,    std::shared_ptr< monty::ndarray< double,1 > > _5686,    monty::rc_ptr< ::mosek::fusion::Expression > _5687) :    ExprMulLeft(new mosek::fusion::p_ExprMulLeft(this)){ mosek::fusion::p_ExprMulLeft::_get_impl(this)->_initialize(_5682,_5683,_5684,_5685,_5686,_5687); }void mosek::fusion::p_ExprMulLeft::_initialize  (int _5682,    int _5683,    std::shared_ptr< monty::ndarray< int,1 > > _5684,    std::shared_ptr< monty::ndarray< int,1 > > _5685,    std::shared_ptr< monty::ndarray< double,1 > > _5686,    monty::rc_ptr< ::mosek::fusion::Expression > _5687){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__5684(_5684 ? _5684->raw() : nullptr, _5684 ? _5684->size(0) : 0);
    _checked_ptr_1<int> _ptr__5685(_5685 ? _5685->raw() : nullptr, _5685 ? _5685->size(0) : 0);
    _checked_ptr_1<double> _ptr__5686(_5686 ? _5686->raw() : nullptr, _5686 ? _5686->size(0) : 0);
    mosek::fusion::p_ExprMulLeft::_initialize(_5682,_5683,_5684,_5685,_5686,_5687,::mosek::fusion::p_ExprMulLeft::validate(_5682,_5683,_5684,_5685,_5686,_5687));
  }
}void mosek::fusion::ExprMulLeft :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _5688,monty::rc_ptr< ::mosek::fusion::WorkStack > _5689,monty::rc_ptr< ::mosek::fusion::WorkStack > _5690) { mosek::fusion::p_ExprMulLeft::_get_impl(this)->eval(_5688,_5689,_5690); }void mosek::fusion::p_ExprMulLeft::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _5688,monty::rc_ptr< ::mosek::fusion::WorkStack > _5689,monty::rc_ptr< ::mosek::fusion::WorkStack > _5690){
  mosek::fusion::p_ExprMulLeft::_get_impl(::mosek::fusion::ExprMulLeft::t(_pubthis))->expr->eval(_5689,_5688,_5690);
  _5689->pop_expr();
  int _5691 = mosek::fusion::p_WorkStack::_get_impl(_5689)->nd;
  int _5692 = mosek::fusion::p_WorkStack::_get_impl(_5689)->nnz;
  int _5693 = mosek::fusion::p_WorkStack::_get_impl(_5689)->nelem;
  int _5694 = mosek::fusion::p_WorkStack::_get_impl(_5689)->ncodeatom;
  bool _5695 = mosek::fusion::p_WorkStack::_get_impl(_5689)->hassp;
  int _5696 = mosek::fusion::p_WorkStack::_get_impl(_5689)->shape_base;
  int _5697 = mosek::fusion::p_WorkStack::_get_impl(_5689)->ptr_base;
  int _5698 = mosek::fusion::p_WorkStack::_get_impl(_5689)->sp_base;
  int _5699 = mosek::fusion::p_WorkStack::_get_impl(_5689)->nidxs_base;
  int _5700 = mosek::fusion::p_WorkStack::_get_impl(_5689)->cof_base;
  int _5701 = mosek::fusion::p_WorkStack::_get_impl(_5689)->codeptr_base;
  int _5702 = mosek::fusion::p_WorkStack::_get_impl(_5689)->code_base;
  int _5703 = mosek::fusion::p_WorkStack::_get_impl(_5689)->cconst_base;
  std::shared_ptr< monty::ndarray< int,1 > > _5704 = mosek::fusion::p_WorkStack::_get_impl(_5689)->i32;
  _checked_ptr_1<int> _ptr__5704(_5704 ? _5704->raw() : nullptr,_5704 ? _5704->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _5705 = mosek::fusion::p_WorkStack::_get_impl(_5689)->i64;
  _checked_ptr_1<long long> _ptr__5705(_5705 ? _5705->raw() : nullptr,_5705 ? _5705->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _5706 = mosek::fusion::p_WorkStack::_get_impl(_5689)->f64;
  _checked_ptr_1<double> _ptr__5706(_5706 ? _5706->raw() : nullptr,_5706 ? _5706->size(0) : 0);
  if ((_5691 != (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operator shape for multiplication"));
    }
  }
  {}
  int _5707 = (int)9999;
  int _5708 = (int)9999;
  int _5709 = (int)9999;
  int _5710 = _ptr__5704[_5696];
  int _5711 = _ptr__5704[safe_add( _5696,(int)1 )];
  int _5712 = (int)((msubi)->size(0));
  bool _5713 = (_5712 < safe_mul( (long long)mdim0,(long long)mdim1 ));
  bool _5714 = false;
  int _5715 = (int)0;
  int _5716 = (int)0;
  long long _5717 = (long long)0;
  if (_5695)
  {
    {
      _5707 = _5690->alloci32(_5693);
      _5708 = _5690->alloci32(_5693);
      _5709 = _5690->alloci32(safe_add( _5711,(int)1 ));
      std::shared_ptr< monty::ndarray< int,1 > > _5718 = mosek::fusion::p_WorkStack::_get_impl(_5690)->i32;
      _checked_ptr_1<int> _ptr__5718(_5718 ? _5718->raw() : nullptr,_5718 ? _5718->size(0) : 0);
      {
        int _11182 = (int)0;
        int _11183 = safe_add( _5711,(int)1 );
        for (int _5719 = _11182; _5719 < _11183; ++_5719)
        {
          {
            _ptr__5718[safe_add( _5709,_5719 )] = (int)0;
          }
        }
        int _11184 = (int)0;
        int _11185 = _5693;
        for (int _5720 = _11184; _5720 < _11185; ++_5720)
        {
          {
            ++ _ptr__5718[safe_add( safe_add( _5709,(_ptr__5705[safe_add( _5698,_5720 )] % _5711) ),(int)1 )];
          }
        }
        int _11186 = (int)0;
        int _11187 = _5711;
        for (int _5721 = _11186; _5721 < _11187; ++_5721)
        {
          {
            _ptr__5718[safe_add( safe_add( _5709,_5721 ),(int)1 )] += _ptr__5718[safe_add( _5709,_5721 )];
          }
        }
        int _11188 = (int)0;
        int _11189 = _5693;
        for (int _5722 = _11188; _5722 < _11189; ++_5722)
        {
          {
            long long _5723 = (_ptr__5705[safe_add( _5698,_5722 )] % _5711);
            _ptr__5718[safe_add( _5707,_ptr__5718[safe_add( _5709,_5723 )] )] = _5722;
            ++ _ptr__5718[safe_add( _5709,_5723 )];
          }
        }
        int _11190 = (int)0;
        int _11191 = _5711;
        for (int _5724 = _11190; _5724 < _11191; ++_5724)
        {
          {
            _ptr__5718[(safe_add( _5709,_5711 ) - _5724)] = _ptr__5718[((safe_add( _5709,_5711 ) - _5724) - (int)1)];
          }
        }
        _ptr__5718[_5709] = (int)0;
      }
      if (_5713)
      {
        {
          int _5725 = (int)0;
          while ( (_5725 < _5712) )
          {
            {
              int _5726 = ((*msubi)(_5725));
              int _5727 = safe_add( _5725,(int)1 );
              while ( ((_5727 < _5712) && (((*msubi)(_5727)) == ((*msubi)(_5725)))) )
              {
                {
                  ++ _5727;
                }
              }
              int _11192 = (int)0;
              int _11193 = _5711;
              for (int _5728 = _11192; _5728 < _11193; ++_5728)
              {
                {
                  bool _5729 = false;
                  int _5730 = _5727;
                  int _5731 = _5725;
                  int _5732 = _ptr__5718[safe_add( safe_add( _5709,_5728 ),(int)1 )];
                  int _5733 = _ptr__5718[safe_add( _5709,_5728 )];
                  while ( ((_5731 < _5730) && (_5733 < _5732)) )
                  {
                    {
                      int _5734 = _ptr__5718[safe_add( _5707,_5733 )];
                      if ((((*msubj)(_5731)) < (_ptr__5705[safe_add( _5698,_5734 )] / _5711)))
                      {
                        {
                          ++ _5731;
                        }
                      }
                      else if((((*msubj)(_5731)) > (_ptr__5705[safe_add( _5698,_5734 )] / _5711)))
                      {
                        {
                          ++ _5733;
                        }
                      }
                      else
                      {
                        {
                          _5729 = true;
                          _5717 += (_ptr__5704[safe_add( safe_add( _5697,_5734 ),(int)1 )] - _ptr__5704[safe_add( _5697,_5734 )]);
                          if ((_5694 > (int)0))
                          {
                            {
                              _5715 += safe_add( (_ptr__5704[safe_add( _5701,_ptr__5704[safe_add( safe_add( _5697,_5734 ),(int)1 )] )] - _ptr__5704[safe_add( _5701,_ptr__5704[safe_add( _5697,_5734 )] )]),safe_mul( (int)2,(_ptr__5704[safe_add( safe_add( _5697,_5734 ),(int)1 )] - _ptr__5704[safe_add( _5697,_5734 )]) ) );
                            }
                          }
                          {}
                          ++ _5733;
                          ++ _5731;
                        }
                      }
                    }
                  }
                  if (_5729)
                  {
                    {
                      ++ _5716;
                    }
                  }
                  {}
                }
              }
              _5725 = _5727;
            }
          }
        }
      }
      else
      {
        {
          _5716 = safe_mul( mdim0,_5711 );
          _5717 = safe_mul( (long long)_5692,mdim0 );
          if ((_5694 > (int)0))
          {
            {
              _5715 = (int)safe_add( safe_mul( _5694,mdim0 ),safe_mul( (int)2,_5717 ) );
            }
          }
          {}
        }
      }
    }
  }
  else
  {
    {
      if (_5713)
      {
        {
          int _5735 = (int)0;
          while ( (_5735 < _5712) )
          {
            {
              int _5736 = safe_add( _5735,(int)1 );
              while ( ((_5736 < _5712) && (((*msubi)(_5735)) == ((*msubi)(_5736)))) )
              {
                {
                  ++ _5736;
                }
              }
              int _5737 = ((*msubi)(_5735));
              int _11194 = (int)0;
              int _11195 = _5711;
              for (int _5738 = _11194; _5738 < _11195; ++_5738)
              {
                {
                  bool _5739 = false;
                  int _11196 = _5735;
                  int _11197 = _5736;
                  for (int _5740 = _11196; _5740 < _11197; ++_5740)
                  {
                    {
                      int _5741 = safe_add( safe_mul( ((*msubj)(_5740)),_5711 ),_5738 );
                      _5717 += (_ptr__5704[safe_add( safe_add( _5697,_5741 ),(int)1 )] - _ptr__5704[safe_add( _5697,_5741 )]);
                      if ((_5694 > (int)0))
                      {
                        {
                          _5715 += safe_add( (_ptr__5704[safe_add( _5701,_ptr__5704[safe_add( safe_add( _5697,_5741 ),(int)1 )] )] - _ptr__5704[safe_add( _5701,_ptr__5704[safe_add( _5697,_5741 )] )]),safe_mul( (int)2,(_ptr__5704[safe_add( safe_add( _5697,_5741 ),(int)1 )] - _ptr__5704[safe_add( _5697,_5741 )]) ) );
                        }
                      }
                      {}
                      _5739 = true;
                    }
                  }
                  if (_5739)
                  {
                    {
                      ++ _5716;
                    }
                  }
                  {}
                }
              }
              _5735 = _5736;
            }
          }
        }
      }
      else
      {
        {
          _5717 = safe_mul( (long long)_5692,mdim0 );
          if ((_5694 > (int)0))
          {
            {
              _5715 = (int)safe_add( safe_mul( _5694,mdim0 ),safe_mul( (int)2,_5717 ) );
            }
          }
          {}
          _5716 = safe_mul( mdim0,_5711 );
        }
      }
    }
  }
  if ((!(_5717 <= (int)0x7fffffff)))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Maximum number of nonzeros exceeded in multiplication"));
    }
  }
  {}
  _5714 = (_5716 < safe_mul( mdim0,_5711 ));
  int _5742 = (int)2;
  _5688->alloc_expr(_5742,_5716,(int)_5717,_5714,_5715);
  int _5743 = mosek::fusion::p_WorkStack::_get_impl(_5688)->ptr_base;
  int _5744 = mosek::fusion::p_WorkStack::_get_impl(_5688)->nidxs_base;
  int _11198;
  bool _11199 = _5714;
  if (_11199)
  {
    _11198 = mosek::fusion::p_WorkStack::_get_impl(_5688)->sp_base;
  }
  else
  {
    _11198 = _5688->alloci64(_5716);
  }
  int _5745 = _11198;
  int _5746 = mosek::fusion::p_WorkStack::_get_impl(_5688)->cof_base;
  int _5747 = mosek::fusion::p_WorkStack::_get_impl(_5688)->shape_base;
  int _5748 = mosek::fusion::p_WorkStack::_get_impl(_5688)->code_base;
  int _5749 = mosek::fusion::p_WorkStack::_get_impl(_5688)->codeptr_base;
  int _5750 = mosek::fusion::p_WorkStack::_get_impl(_5688)->cconst_base;
  std::shared_ptr< monty::ndarray< long long,1 > > _5751 = mosek::fusion::p_WorkStack::_get_impl(_5688)->i64;
  _checked_ptr_1<long long> _ptr__5751(_5751 ? _5751->raw() : nullptr,_5751 ? _5751->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _5752 = mosek::fusion::p_WorkStack::_get_impl(_5688)->f64;
  _checked_ptr_1<double> _ptr__5752(_5752 ? _5752->raw() : nullptr,_5752 ? _5752->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _5753 = mosek::fusion::p_WorkStack::_get_impl(_5688)->i32;
  _checked_ptr_1<int> _ptr__5753(_5753 ? _5753->raw() : nullptr,_5753 ? _5753->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _5754 = mosek::fusion::p_WorkStack::_get_impl(_5690)->i32;
  _checked_ptr_1<int> _ptr__5754(_5754 ? _5754->raw() : nullptr,_5754 ? _5754->size(0) : 0);
  _ptr__5753[_5747] = mdim0;
  _ptr__5753[safe_add( _5747,(int)1 )] = _5711;
  _ptr__5753[_5743] = (int)0;
  if ((_5715 > (int)0))
  {
    {
      _ptr__5753[_5749] = (int)0;
    }
  }
  {}
  if (_5695)
  {
    {
      if (_5713)
      {
        {
          int _5755 = (int)0;
          int _5756 = (int)0;
          int _5757 = (int)0;
          int _5758 = (int)0;
          while ( (_5758 < _5712) )
          {
            {
              int _5759 = ((*msubi)(_5758));
              int _5760 = safe_add( _5758,(int)1 );
              while ( ((_5760 < _5712) && (((*msubi)(_5760)) == ((*msubi)(_5758)))) )
              {
                {
                  ++ _5760;
                }
              }
              int _11200 = (int)0;
              int _11201 = _5711;
              for (int _5761 = _11200; _5761 < _11201; ++_5761)
              {
                {
                  bool _5762 = false;
                  int _5763 = _5760;
                  int _5764 = _5758;
                  int _5765 = _ptr__5754[safe_add( safe_add( _5709,_5761 ),(int)1 )];
                  int _5766 = _ptr__5754[safe_add( _5709,_5761 )];
                  while ( ((_5764 < _5763) && (_5766 < _5765)) )
                  {
                    {
                      int _5767 = _ptr__5754[safe_add( _5707,_5766 )];
                      if ((((*msubj)(_5764)) < (_ptr__5705[safe_add( _5698,_5767 )] / _5711)))
                      {
                        {
                          ++ _5764;
                        }
                      }
                      else if((((*msubj)(_5764)) > (_ptr__5705[safe_add( _5698,_5767 )] / _5711)))
                      {
                        {
                          ++ _5766;
                        }
                      }
                      else
                      {
                        {
                          _5762 = true;
                          int _11202 = _ptr__5704[safe_add( _5697,_5767 )];
                          int _11203 = _ptr__5704[safe_add( safe_add( _5697,_5767 ),(int)1 )];
                          for (int _5768 = _11202; _5768 < _11203; ++_5768)
                          {
                            {
                              _ptr__5751[safe_add( _5744,_5757 )] = _ptr__5705[safe_add( _5699,_5768 )];
                              _ptr__5752[safe_add( _5746,_5757 )] = (_ptr__5706[safe_add( _5700,_5768 )] * ((*mval)(_5764)));
                              if ((_5715 > (int)0))
                              {
                                {
                                  int _11204 = _ptr__5704[safe_add( _5701,_5768 )];
                                  int _11205 = _ptr__5704[safe_add( safe_add( _5701,_5768 ),(int)1 )];
                                  for (int _5769 = _11204; _5769 < _11205; ++_5769)
                                  {
                                    {
                                      _ptr__5753[safe_add( _5748,_5755 )] = _ptr__5704[safe_add( _5702,_5769 )];
                                      _ptr__5752[safe_add( _5750,_5755 )] = _ptr__5752[safe_add( _5703,_5769 )];
                                      ++ _5755;
                                    }
                                  }
                                  _ptr__5753[safe_add( _5748,_5755 )] = 2;
                                  _ptr__5752[safe_add( _5750,_5755 )] = ((*mval)(_5764));
                                  ++ _5755;
                                  _ptr__5753[safe_add( _5748,_5755 )] = 5;
                                  _ptr__5753[safe_add( safe_add( _5749,_5757 ),(int)1 )] = _5755;
                                }
                              }
                              {}
                              ++ _5757;
                            }
                          }
                          ++ _5764;
                          ++ _5766;
                        }
                      }
                    }
                  }
                  if (_5762)
                  {
                    {
                      _ptr__5753[safe_add( safe_add( _5743,_5756 ),(int)1 )] = _5757;
                      _ptr__5751[safe_add( _5745,_5756 )] = safe_add( safe_mul( _5759,_5711 ),_5761 );
                      ++ _5756;
                    }
                  }
                  {}
                }
              }
              _5758 = _5760;
            }
          }
        }
      }
      else
      {
        {
          int _5770 = (int)0;
          int _5771 = (int)0;
          int _5772 = (int)0;
          int _11206 = (int)0;
          int _11207 = mdim0;
          for (int _5773 = _11206; _5773 < _11207; ++_5773)
          {
            {
              int _11208 = (int)0;
              int _11209 = _5711;
              for (int _5774 = _11208; _5774 < _11209; ++_5774)
              {
                {
                  int _11210 = _ptr__5754[safe_add( _5709,_5774 )];
                  int _11211 = _ptr__5754[safe_add( safe_add( _5709,_5774 ),(int)1 )];
                  for (int _5775 = _11210; _5775 < _11211; ++_5775)
                  {
                    {
                      int _5776 = _ptr__5754[safe_add( _5707,_5775 )];
                      long long _5777 = safe_add( safe_mul( _5773,mdim1 ),(_ptr__5705[safe_add( _5698,_5776 )] / _5711) );
                      int _11212 = _ptr__5704[safe_add( _5697,_5776 )];
                      int _11213 = _ptr__5704[safe_add( safe_add( _5697,_5776 ),(int)1 )];
                      for (int _5778 = _11212; _5778 < _11213; ++_5778)
                      {
                        {
                          _ptr__5751[safe_add( _5744,_5772 )] = _ptr__5705[safe_add( _5699,_5778 )];
                          _ptr__5752[safe_add( _5746,_5772 )] = (_ptr__5706[safe_add( _5700,_5778 )] * ((*mval)(_5777)));
                          if ((_5715 > (int)0))
                          {
                            {
                              int _11214 = _ptr__5704[safe_add( _5701,_5778 )];
                              int _11215 = _ptr__5704[safe_add( safe_add( _5701,_5778 ),(int)1 )];
                              for (int _5779 = _11214; _5779 < _11215; ++_5779)
                              {
                                {
                                  _ptr__5753[safe_add( _5748,_5770 )] = _ptr__5704[safe_add( _5702,_5779 )];
                                  _ptr__5752[safe_add( _5750,_5770 )] = _ptr__5706[safe_add( _5703,_5779 )];
                                  ++ _5770;
                                }
                              }
                              _ptr__5753[safe_add( _5748,_5770 )] = 2;
                              _ptr__5752[safe_add( _5750,_5770 )] = ((*mval)(_5777));
                              ++ _5770;
                              _ptr__5753[safe_add( _5748,_5770 )] = 5;
                              ++ _5770;
                              _ptr__5753[safe_add( safe_add( _5749,_5772 ),(int)1 )] = _5770;
                            }
                          }
                          {}
                          ++ _5772;
                        }
                      }
                    }
                  }
                  _ptr__5753[safe_add( safe_add( _5743,_5771 ),(int)1 )] = _5772;
                  ++ _5771;
                }
              }
            }
          }
          if ((_5771 != _5716))
          {
            {
              throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Incorrect number of elements"));
            }
          }
          {}
          if ((_5772 != _5717))
          {
            {
              throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Incorrect number of non-zeros"));
            }
          }
          {}
          if ((_5770 != _5715))
          {
            {
              throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Incorrect number of code atoms"));
            }
          }
          {}
        }
      }
    }
  }
  else
  {
    {
      int _5780 = (int)0;
      int _5781 = (int)0;
      int _5782 = (int)0;
      int _5783 = (int)0;
      while ( (_5781 < _5712) )
      {
        {
          int _5784 = safe_add( _5781,(int)1 );
          while ( ((_5784 < _5712) && (((*msubi)(_5781)) == ((*msubi)(_5784)))) )
          {
            {
              ++ _5784;
            }
          }
          int _5785 = ((*msubi)(_5781));
          int _11216 = (int)0;
          int _11217 = _5711;
          for (int _5786 = _11216; _5786 < _11217; ++_5786)
          {
            {
              bool _5787 = false;
              int _11218 = _5781;
              int _11219 = _5784;
              for (int _5788 = _11218; _5788 < _11219; ++_5788)
              {
                {
                  int _5789 = safe_add( safe_mul( ((*msubj)(_5788)),_5711 ),_5786 );
                  int _11220 = _ptr__5704[safe_add( _5697,_5789 )];
                  int _11221 = _ptr__5704[safe_add( safe_add( _5697,_5789 ),(int)1 )];
                  for (int _5790 = _11220; _5790 < _11221; ++_5790)
                  {
                    {
                      _ptr__5751[safe_add( _5744,_5783 )] = _ptr__5705[safe_add( _5699,_5790 )];
                      _ptr__5752[safe_add( _5746,_5783 )] = (_ptr__5706[safe_add( _5700,_5790 )] * ((*mval)(_5788)));
                      if ((_5715 > (int)0))
                      {
                        {
                          int _11222 = _ptr__5704[safe_add( _5701,_5790 )];
                          int _11223 = _ptr__5704[safe_add( safe_add( _5701,_5790 ),(int)1 )];
                          for (int _5791 = _11222; _5791 < _11223; ++_5791)
                          {
                            {
                              _ptr__5753[safe_add( _5748,_5780 )] = _ptr__5704[safe_add( _5702,_5791 )];
                              _ptr__5752[safe_add( _5750,_5780 )] = _ptr__5706[safe_add( _5703,_5791 )];
                              ++ _5780;
                            }
                          }
                          _ptr__5753[safe_add( _5748,_5780 )] = 2;
                          _ptr__5752[safe_add( _5750,_5780 )] = ((*mval)(_5788));
                          ++ _5780;
                          _ptr__5753[safe_add( _5748,_5780 )] = 5;
                          ++ _5780;
                          _ptr__5753[safe_add( safe_add( _5749,_5783 ),(int)1 )] = _5780;
                        }
                      }
                      {}
                      ++ _5783;
                    }
                  }
                  _5787 = true;
                }
              }
              if (_5787)
              {
                {
                  _ptr__5751[safe_add( _5745,_5782 )] = safe_add( safe_mul( _5785,_5711 ),_5786 );
                  _ptr__5753[safe_add( safe_add( _5743,_5782 ),(int)1 )] = _5783;
                  ++ _5782;
                }
              }
              {}
            }
          }
          _5781 = _5784;
        }
      }
      if ((_5782 != _5716))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Incorrect number of elements"));
        }
      }
      {}
      if ((_5783 != _5717))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Incorrect number of non-zeros"));
        }
      }
      {}
      if ((_5780 != _5715))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Incorrect number of code atoms"));
        }
      }
      {}
    }
  }
  if ((!_5714))
  {
    {
      _5688->popi64(_5716);
    }
  }
  {}
  _5690->clear();
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_ExprMulLeft::computeshape(int _5792,int _5793,std::shared_ptr< monty::ndarray< int,1 > > _5794){
  _checked_ptr_1<int> _ptr__5794(_5794 ? _5794->raw() : nullptr, _5794 ? _5794->size(0) : 0);
  if (((int)((_5794)->size(0)) != (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching dimensions"));
    }
  }
  else if((_5793 != _ptr__5794[(int)0]))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching dimensions"));
    }
  }
  {}
  return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_5792),(int)(_ptr__5794[(int)1])});
}
int mosek::fusion::p_ExprMulLeft::validate(int _5795,int _5796,std::shared_ptr< monty::ndarray< int,1 > > _5797,std::shared_ptr< monty::ndarray< int,1 > > _5798,std::shared_ptr< monty::ndarray< double,1 > > _5799,monty::rc_ptr< ::mosek::fusion::Expression > _5800){
  _checked_ptr_1<int> _ptr__5797(_5797 ? _5797->raw() : nullptr, _5797 ? _5797->size(0) : 0);
  _checked_ptr_1<int> _ptr__5798(_5798 ? _5798->raw() : nullptr, _5798 ? _5798->size(0) : 0);
  _checked_ptr_1<double> _ptr__5799(_5799 ? _5799->raw() : nullptr, _5799 ? _5799->size(0) : 0);
  if ((_5800->getND() != (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions"));
    }
  }
  {}
  int _5801 = _5800->getDim((int)0);
  int _5802 = _5800->getDim((int)0);
  if (((_5795 < (int)0) || (_5796 < (int)0)))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions"));
    }
  }
  {}
  if ((_5796 != _5801))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand dimensions"));
    }
  }
  {}
  if ((((int)((_5797)->size(0)) != (int)((_5798)->size(0))) || ((int)((_5797)->size(0)) != (int)((_5799)->size(0)))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Invalid matrix data"));
    }
  }
  {}
  int _5803 = (int)((_5797)->size(0));
  bool _5804 = false;
  bool _5805 = false;
  {
    int _11224 = (int)0;
    int _11225 = _5803;
    for (int _5806 = _11224; _5806 < _11225; ++_5806)
    {
      {
        _5804 = (_5804 || ((_ptr__5797[_5806] < (int)0) || ((_ptr__5797[_5806] >= _5795) || ((_ptr__5798[_5806] < (int)0) || (_ptr__5798[_5806] >= _5796)))));
      }
    }
    if ((!_5804))
    {
      {
        int _11226 = (int)0;
        int _11227 = (_5803 - (int)1);
        for (int _5807 = _11226; _5807 < _11227; ++_5807)
        {
          {
            _5805 = (_5805 || ((_ptr__5797[_5807] > _ptr__5797[safe_add( _5807,(int)1 )]) || ((_ptr__5797[_5807] == _ptr__5797[safe_add( _5807,(int)1 )]) && (_ptr__5798[_5807] >= _ptr__5798[safe_add( _5807,(int)1 )]))));
          }
        }
      }
    }
    {}
  }
  if (_5804)
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Invalid matrix data"));
    }
  }
  {}
  if (_5805)
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Unsorted matrix data"));
    }
  }
  {}
  return (int)1;
}
std::string mosek::fusion::ExprMulLeft :: toString() { return mosek::fusion::p_ExprMulLeft::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprMulLeft::toString(){
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprMulLeft(M("))->__mosek_2fusion_2Utils_2StringBuffer__a(mdim0)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(mdim1)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("),"))->__mosek_2fusion_2Utils_2StringBuffer__a(expr->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
void mosek::fusion::p_ExprMulLeft::destroy(){expr.reset();mval.reset();msubj.reset();msubi.reset();}void mosek::fusion::ExprMulLeft::destroy() { mosek::fusion::p_ExprMulLeft::_get_impl(this)->destroy(); }mosek::fusion::ExprMulVar::ExprMulVar(mosek::fusion::p_ExprMulVar *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprMulVar()" << this << std::endl; */ }mosek::fusion::ExprMulVar::~ExprMulVar() {  /* std::cout << "~ExprMulVar()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprMulVar::p_ExprMulVar  (::mosek::fusion::ExprMulVar * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprMulVar::t mosek::fusion::p_ExprMulVar::_new_ExprMulVar  (bool _5808,    int _5809,    int _5810,    std::shared_ptr< monty::ndarray< int,1 > > _5811,    std::shared_ptr< monty::ndarray< int,1 > > _5812,    std::shared_ptr< monty::ndarray< double,1 > > _5813,    monty::rc_ptr< ::mosek::fusion::Variable > _5814){ return new mosek::fusion::ExprMulVar(_5808,_5809,_5810,_5811,_5812,_5813,_5814); }mosek::fusion::ExprMulVar::ExprMulVar  (bool _5808,    int _5809,    int _5810,    std::shared_ptr< monty::ndarray< int,1 > > _5811,    std::shared_ptr< monty::ndarray< int,1 > > _5812,    std::shared_ptr< monty::ndarray< double,1 > > _5813,    monty::rc_ptr< ::mosek::fusion::Variable > _5814) :    ExprMulVar(new mosek::fusion::p_ExprMulVar(this)){ mosek::fusion::p_ExprMulVar::_get_impl(this)->_initialize(_5808,_5809,_5810,_5811,_5812,_5813,_5814); }void mosek::fusion::p_ExprMulVar::_initialize  (bool _5808,    int _5809,    int _5810,    std::shared_ptr< monty::ndarray< int,1 > > _5811,    std::shared_ptr< monty::ndarray< int,1 > > _5812,    std::shared_ptr< monty::ndarray< double,1 > > _5813,    monty::rc_ptr< ::mosek::fusion::Variable > _5814){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__5811(_5811 ? _5811->raw() : nullptr, _5811 ? _5811->size(0) : 0);
    _checked_ptr_1<int> _ptr__5812(_5812 ? _5812->raw() : nullptr, _5812 ? _5812->size(0) : 0);
    _checked_ptr_1<double> _ptr__5813(_5813 ? _5813->raw() : nullptr, _5813 ? _5813->size(0) : 0);
    mosek::fusion::p_ExprMulVar::_initialize(_5808,_5809,_5810,_5811,_5812,_5813,_5814,(int)1);
    std::shared_ptr< monty::ndarray< int,1 > > _5815 = _5814->getShape();
    _checked_ptr_1<int> _ptr__5815(_5815 ? _5815->raw() : nullptr,_5815 ? _5815->size(0) : 0);
    int _5816 = (int)((_5815)->size(0));
    if ((_5816 != (int)2))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand dimensions"));
      }
    }
    else if((_5808 && (_ptr__5815[(int)0] != _5810)))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand dimensions"));
      }
    }
    else if(((!_5808) && (_ptr__5815[(int)1] != _5809)))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand dimensions"));
      }
    }
    {}
    if ((((int)((_5811)->size(0)) != (int)((_5812)->size(0))) || ((int)((_5811)->size(0)) != (int)((_5813)->size(0)))))
    {
      {
        throw ::mosek::fusion::LengthError(std::string ("Mismatching matrix data lengths"));
      }
    }
    {}
    validate(_5809,_5810,_5811,_5812,_5813);
  }
}mosek::fusion::ExprMulVar::t mosek::fusion::p_ExprMulVar::_new_ExprMulVar  (bool _5817,    int _5818,    int _5819,    std::shared_ptr< monty::ndarray< int,1 > > _5820,    std::shared_ptr< monty::ndarray< int,1 > > _5821,    std::shared_ptr< monty::ndarray< double,1 > > _5822,    monty::rc_ptr< ::mosek::fusion::Variable > _5823,    int _5824){ return new mosek::fusion::ExprMulVar(_5817,_5818,_5819,_5820,_5821,_5822,_5823,_5824); }mosek::fusion::ExprMulVar::ExprMulVar  (bool _5817,    int _5818,    int _5819,    std::shared_ptr< monty::ndarray< int,1 > > _5820,    std::shared_ptr< monty::ndarray< int,1 > > _5821,    std::shared_ptr< monty::ndarray< double,1 > > _5822,    monty::rc_ptr< ::mosek::fusion::Variable > _5823,    int _5824) :    ExprMulVar(new mosek::fusion::p_ExprMulVar(this)){ mosek::fusion::p_ExprMulVar::_get_impl(this)->_initialize(_5817,_5818,_5819,_5820,_5821,_5822,_5823,_5824); }void mosek::fusion::p_ExprMulVar::_initialize  (bool _5817,    int _5818,    int _5819,    std::shared_ptr< monty::ndarray< int,1 > > _5820,    std::shared_ptr< monty::ndarray< int,1 > > _5821,    std::shared_ptr< monty::ndarray< double,1 > > _5822,    monty::rc_ptr< ::mosek::fusion::Variable > _5823,    int _5824){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__5820(_5820 ? _5820->raw() : nullptr, _5820 ? _5820->size(0) : 0);
    _checked_ptr_1<int> _ptr__5821(_5821 ? _5821->raw() : nullptr, _5821 ? _5821->size(0) : 0);
    _checked_ptr_1<double> _ptr__5822(_5822 ? _5822->raw() : nullptr, _5822 ? _5822->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(::mosek::fusion::p_ExprMulVar::resshape(_5818,_5819,_5823->getShape(),_5817));
    mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->left = _5817;
    mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->x = _5823;
    mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->mdimi = _5818;
    mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->mdimj = _5819;
    mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->msubi = ::mosek::fusion::Utils::Tools::arraycopy(_5820);
    mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->msubj = ::mosek::fusion::Utils::Tools::arraycopy(_5821);
    mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->mcof = ::mosek::fusion::Utils::Tools::arraycopy(_5822);
  }
}void mosek::fusion::ExprMulVar :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _5825,monty::rc_ptr< ::mosek::fusion::WorkStack > _5826,monty::rc_ptr< ::mosek::fusion::WorkStack > _5827) { mosek::fusion::p_ExprMulVar::_get_impl(this)->eval(_5825,_5826,_5827); }void mosek::fusion::p_ExprMulVar::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _5825,monty::rc_ptr< ::mosek::fusion::WorkStack > _5826,monty::rc_ptr< ::mosek::fusion::WorkStack > _5827){
  if (left)
  {
    {
      _pubthis->eval_left(_5825,_5826,_5827);
    }
  }
  else
  {
    {
      _pubthis->eval_right(_5825,_5826,_5827);
    }
  }
}
void mosek::fusion::ExprMulVar :: eval_right(monty::rc_ptr< ::mosek::fusion::WorkStack > _5828,monty::rc_ptr< ::mosek::fusion::WorkStack > _5829,monty::rc_ptr< ::mosek::fusion::WorkStack > _5830) { mosek::fusion::p_ExprMulVar::_get_impl(this)->eval_right(_5828,_5829,_5830); }void mosek::fusion::p_ExprMulVar::eval_right(monty::rc_ptr< ::mosek::fusion::WorkStack > _5828,monty::rc_ptr< ::mosek::fusion::WorkStack > _5829,monty::rc_ptr< ::mosek::fusion::WorkStack > _5830){
  int _5831 = mosek::fusion::p_WorkStack::_get_impl(_5829)->pi32;
  int _5832 = mosek::fusion::p_WorkStack::_get_impl(_5829)->pi64;
  int _5833 = x->numInst();
  int _5834 = _5829->alloci64(_5833);
  int _5835 = _5829->alloci64(_5833);
  int _5836 = _5829->alloci32(_5833);
  int _5837 = _5829->alloci32(_5833);
  std::shared_ptr< monty::ndarray< int,1 > > _5838 = x->getShape();
  _checked_ptr_1<int> _ptr__5838(_5838 ? _5838->raw() : nullptr,_5838 ? _5838->size(0) : 0);
  int _5839 = (int)((_5838)->size(0));
  long long _5840 = safe_mul( _ptr__5838[(int)0],_ptr__5838[(int)1] );
  int _5841 = _ptr__5838[(int)1];
  int _5842 = _ptr__5838[(int)0];
  int _5843 = _5829->alloci32(safe_add( _5842,(int)1 ));
  int _5844 = (int)((mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->msubi)->size(0));
  std::shared_ptr< monty::ndarray< int,1 > > _5845 = mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->msubi;
  _checked_ptr_1<int> _ptr__5845(_5845 ? _5845->raw() : nullptr,_5845 ? _5845->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _5846 = mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->msubj;
  _checked_ptr_1<int> _ptr__5846(_5846 ? _5846->raw() : nullptr,_5846 ? _5846->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _5847 = mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->mcof;
  _checked_ptr_1<double> _ptr__5847(_5847 ? _5847->raw() : nullptr,_5847 ? _5847->size(0) : 0);
  int _5848 = mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->mdimi;
  int _5849 = mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->mdimj;
  bool _5850 = ((_5844 / _5848) == _5849);
  int _5851 = _5829->alloci32(_5844);
  int _5852 = _5829->alloci32(safe_add( mdimj,(int)1 ));
  std::shared_ptr< monty::ndarray< int,1 > > _5853 = mosek::fusion::p_WorkStack::_get_impl(_5829)->i32;
  _checked_ptr_1<int> _ptr__5853(_5853 ? _5853->raw() : nullptr,_5853 ? _5853->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _5854 = mosek::fusion::p_WorkStack::_get_impl(_5829)->i64;
  _checked_ptr_1<long long> _ptr__5854(_5854 ? _5854->raw() : nullptr,_5854 ? _5854->size(0) : 0);
  int _5855 = (int)0;
  int _5856 = (int)0;
  x->inst(_5835,_5854,_5834,_5854);
  if (_5850)
  {
    {
      int _5857 = (int)0;
      if ((_5833 > (int)0))
      {
        {
          _5857 = (int)1;
          if ((_5842 > (int)1))
          {
            {
              if ((_5841 == (int)1))
              {
                {
                  int _11228 = (int)1;
                  int _11229 = _5833;
                  for (int _5858 = _11228; _5858 < _11229; ++_5858)
                  {
                    {
                      if ((_ptr__5854[safe_add( _5835,_5858 )] > _ptr__5854[(safe_add( _5835,_5858 ) - (int)1)]))
                      {
                        {
                          ++ _5857;
                        }
                      }
                      {}
                    }
                  }
                }
              }
              else
              {
                {
                  int _11230 = (int)1;
                  int _11231 = _5833;
                  for (int _5859 = _11230; _5859 < _11231; ++_5859)
                  {
                    {
                      if (((_ptr__5854[safe_add( _5835,_5859 )] / _5841) > (_ptr__5854[(safe_add( _5835,_5859 ) - (int)1)] / _5841)))
                      {
                        {
                          ++ _5857;
                        }
                      }
                      {}
                    }
                  }
                }
              }
            }
          }
          {}
        }
      }
      {}
      _5856 = safe_mul( _5857,_5849 );
      _5855 = safe_mul( _5833,_5849 );
      bool _5860 = (_5857 < _5842);
      _5828->alloc_expr((int)2,_5856,_5855,_5860);
      int _5861 = mosek::fusion::p_WorkStack::_get_impl(_5828)->ptr_base;
      int _5862 = mosek::fusion::p_WorkStack::_get_impl(_5828)->shape_base;
      int _5863 = mosek::fusion::p_WorkStack::_get_impl(_5828)->nidxs_base;
      int _11232;
      bool _11233 = _5860;
      if (_11233)
      {
        _11232 = mosek::fusion::p_WorkStack::_get_impl(_5828)->sp_base;
      }
      else
      {
        _11232 = _5828->alloci64(_5856);
      }
      int _5864 = _11232;
      int _5865 = mosek::fusion::p_WorkStack::_get_impl(_5828)->cof_base;
      std::shared_ptr< monty::ndarray< int,1 > > _5866 = mosek::fusion::p_WorkStack::_get_impl(_5828)->i32;
      _checked_ptr_1<int> _ptr__5866(_5866 ? _5866->raw() : nullptr,_5866 ? _5866->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _5867 = mosek::fusion::p_WorkStack::_get_impl(_5828)->i64;
      _checked_ptr_1<long long> _ptr__5867(_5867 ? _5867->raw() : nullptr,_5867 ? _5867->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _5868 = mosek::fusion::p_WorkStack::_get_impl(_5828)->f64;
      _checked_ptr_1<double> _ptr__5868(_5868 ? _5868->raw() : nullptr,_5868 ? _5868->size(0) : 0);
      _ptr__5866[_5862] = _5842;
      _ptr__5866[safe_add( _5862,(int)1 )] = _5849;
      {
        int _5869 = (int)0;
        int _5870 = (int)0;
        int _5871 = (int)0;
        _ptr__5866[_5861] = (int)0;
        while ( (_5869 < _5833) )
        {
          {
            int _5872 = _5869;
            ++ _5869;
            while ( ((_5869 < _5833) && ((_ptr__5854[safe_add( _5835,_5869 )] / _5841) == (_ptr__5854[safe_add( _5835,_5872 )] / _5841))) )
            {
              {
                ++ _5869;
              }
            }
            long long _5873 = (_ptr__5854[safe_add( _5835,_5872 )] / _5841);
            int _11234 = (int)0;
            int _11235 = _5849;
            for (int _5874 = _11234; _5874 < _11235; ++_5874)
            {
              {
                int _11236 = _5872;
                int _11237 = _5869;
                for (int _5875 = _11236; _5875 < _11237; ++_5875)
                {
                  {
                    long long _5876 = (_ptr__5854[safe_add( _5835,_5875 )] % _5841);
                    _ptr__5867[safe_add( _5863,_5871 )] = _ptr__5854[safe_add( _5834,_5875 )];
                    _ptr__5868[safe_add( _5865,_5871 )] = _ptr__5847[safe_add( safe_mul( _5876,_5849 ),_5874 )];
                    ++ _5871;
                  }
                }
                _ptr__5866[safe_add( safe_add( _5861,_5870 ),(int)1 )] = _5871;
                _ptr__5867[safe_add( _5864,_5870 )] = safe_add( safe_mul( _5873,_5849 ),_5874 );
                ++ _5870;
              }
            }
          }
        }
      }
      if ((!_5860))
      {
        {
          _5828->popi64(_5856);
        }
      }
      {}
    }
  }
  else
  {
    {
      {
        if ((_5849 == (int)1))
        {
          {
            int _11238 = (int)0;
            int _11239 = _5844;
            for (int _5877 = _11238; _5877 < _11239; ++_5877)
            {
              {
                _ptr__5853[safe_add( _5851,_5877 )] = _5877;
              }
            }
            _ptr__5853[_5852] = (int)0;
            _ptr__5853[safe_add( _5852,(int)1 )] = _5844;
          }
        }
        else
        {
          {
            _ptr__5853[_5852] = (int)0;
            int _11240 = (int)0;
            int _11241 = safe_add( _5849,(int)1 );
            for (int _5878 = _11240; _5878 < _11241; ++_5878)
            {
              {
                _ptr__5853[safe_add( _5852,_5878 )] = (int)0;
              }
            }
            int _11242 = (int)0;
            int _11243 = _5844;
            for (int _5879 = _11242; _5879 < _11243; ++_5879)
            {
              {
                ++ _ptr__5853[safe_add( safe_add( _5852,_ptr__5846[_5879] ),(int)1 )];
              }
            }
            int _11244 = (int)0;
            int _11245 = mdimj;
            for (int _5880 = _11244; _5880 < _11245; ++_5880)
            {
              {
                _ptr__5853[safe_add( safe_add( _5852,_5880 ),(int)1 )] += _ptr__5853[safe_add( _5852,_5880 )];
              }
            }
            int _11246 = (int)0;
            int _11247 = _5844;
            for (int _5881 = _11246; _5881 < _11247; ++_5881)
            {
              {
                _ptr__5853[safe_add( _5851,_ptr__5853[safe_add( _5852,_ptr__5846[_5881] )] )] = _5881;
                ++ _ptr__5853[safe_add( _5852,_ptr__5846[_5881] )];
              }
            }
            int _11248 = (int)0;
            int _11249 = _5849;
            for (int _5882 = _11248; _5882 < _11249; ++_5882)
            {
              {
                _ptr__5853[(safe_add( _5852,_5849 ) - _5882)] = _ptr__5853[((safe_add( _5852,_5849 ) - _5882) - (int)1)];
              }
            }
            _ptr__5853[_5852] = (int)0;
          }
        }
      }
      if (((_5833 / _5842) == _5841))
      {
        {
          int _5883 = (int)0;
          {
            int _5884 = (int)0;
            while ( (_5884 < _5844) )
            {
              {
                ++ _5884;
                while ( ((_5884 < _5844) && (_ptr__5846[_ptr__5853[(safe_add( _5851,_5884 ) - (int)1)]] == _ptr__5846[_ptr__5853[safe_add( _5851,_5884 )]])) )
                {
                  {
                    ++ _5884;
                  }
                }
                ++ _5883;
              }
            }
          }
          _5856 = safe_mul( _5883,_5842 );
          _5855 = safe_mul( _5844,_5842 );
          bool _5885 = (_5883 < _5849);
          _5828->alloc_expr((int)2,_5856,_5855,_5885);
          int _5886 = mosek::fusion::p_WorkStack::_get_impl(_5828)->ptr_base;
          int _5887 = mosek::fusion::p_WorkStack::_get_impl(_5828)->shape_base;
          int _5888 = mosek::fusion::p_WorkStack::_get_impl(_5828)->nidxs_base;
          int _11250;
          bool _11251 = _5885;
          if (_11251)
          {
            _11250 = mosek::fusion::p_WorkStack::_get_impl(_5828)->sp_base;
          }
          else
          {
            _11250 = _5828->alloci64(_5856);
          }
          int _5889 = _11250;
          int _5890 = mosek::fusion::p_WorkStack::_get_impl(_5828)->cof_base;
          ((*mosek::fusion::p_WorkStack::_get_impl(_5828)->i32)(_5887)) = _5842;
          ((*mosek::fusion::p_WorkStack::_get_impl(_5828)->i32)(safe_add( _5887,(int)1 ))) = _5849;
          std::shared_ptr< monty::ndarray< int,1 > > _5891 = mosek::fusion::p_WorkStack::_get_impl(_5828)->i32;
          _checked_ptr_1<int> _ptr__5891(_5891 ? _5891->raw() : nullptr,_5891 ? _5891->size(0) : 0);
          std::shared_ptr< monty::ndarray< long long,1 > > _5892 = mosek::fusion::p_WorkStack::_get_impl(_5828)->i64;
          _checked_ptr_1<long long> _ptr__5892(_5892 ? _5892->raw() : nullptr,_5892 ? _5892->size(0) : 0);
          std::shared_ptr< monty::ndarray< double,1 > > _5893 = mosek::fusion::p_WorkStack::_get_impl(_5828)->f64;
          _checked_ptr_1<double> _ptr__5893(_5893 ? _5893->raw() : nullptr,_5893 ? _5893->size(0) : 0);
          _ptr__5891[_5886] = (int)0;
          int _5894 = (int)0;
          int _5895 = (int)0;
          int _11252 = (int)0;
          int _11253 = _5842;
          for (int _5896 = _11252; _5896 < _11253; ++_5896)
          {
            {
              int _5897 = (int)0;
              while ( (_5897 < _5844) )
              {
                {
                  int _5898 = _5897;
                  ++ _5897;
                  while ( ((_5897 < _5844) && (_ptr__5846[_ptr__5853[safe_add( _5851,_5898 )]] == _ptr__5846[_ptr__5853[safe_add( _5851,_5897 )]])) )
                  {
                    {
                      ++ _5897;
                    }
                  }
                  int _5899 = _ptr__5846[_ptr__5853[safe_add( _5851,_5898 )]];
                  int _11254 = _5898;
                  int _11255 = _5897;
                  for (int _5900 = _11254; _5900 < _11255; ++_5900)
                  {
                    {
                      int _5901 = _ptr__5845[_ptr__5853[safe_add( _5851,_5900 )]];
                      _ptr__5892[safe_add( _5888,_5895 )] = _ptr__5854[safe_add( safe_add( _5834,safe_mul( _5896,_5841 ) ),_5901 )];
                      _ptr__5893[safe_add( _5890,_5895 )] = _ptr__5847[_ptr__5853[safe_add( _5851,_5900 )]];
                      ++ _5895;
                    }
                  }
                  _ptr__5892[safe_add( _5889,_5894 )] = safe_add( safe_mul( _5896,_5849 ),_5899 );
                  _ptr__5891[safe_add( safe_add( _5886,_5894 ),(int)1 )] = _5895;
                  ++ _5894;
                }
              }
            }
          }
          if ((!_5885))
          {
            {
              _5828->popi64(_5856);
            }
          }
          {}
        }
      }
      else
      {
        {
          int _11256 = (int)0;
          int _11257 = safe_add( _5842,(int)1 );
          for (int _5902 = _11256; _5902 < _11257; ++_5902)
          {
            {
              _ptr__5853[safe_add( _5843,_5902 )] = (int)0;
            }
          }
          if ((_5839 == (int)1))
          {
            {
              int _11258 = (int)0;
              int _11259 = _5833;
              for (int _5903 = _11258; _5903 < _11259; ++_5903)
              {
                {
                  _ptr__5853[safe_add( _5836,_5903 )] = (int)0;
                }
              }
              int _11260 = (int)0;
              int _11261 = _5833;
              for (int _5904 = _11260; _5904 < _11261; ++_5904)
              {
                {
                  _ptr__5853[safe_add( _5837,_5904 )] = (int)_ptr__5854[safe_add( _5835,_5904 )];
                }
              }
              _ptr__5853[_5843] = (int)0;
              _ptr__5853[safe_add( _5843,(int)1 )] = _5833;
            }
          }
          else
          {
            {
              int _11262 = (int)0;
              int _11263 = _5833;
              for (int _5905 = _11262; _5905 < _11263; ++_5905)
              {
                {
                  _ptr__5853[safe_add( _5836,_5905 )] = (int)(_ptr__5854[safe_add( _5835,_5905 )] / _ptr__5838[(int)1]);
                }
              }
              int _11264 = (int)0;
              int _11265 = _5833;
              for (int _5906 = _11264; _5906 < _11265; ++_5906)
              {
                {
                  _ptr__5853[safe_add( _5837,_5906 )] = (int)(_ptr__5854[safe_add( _5835,_5906 )] % _ptr__5838[(int)1]);
                }
              }
              _ptr__5853[_5843] = (int)0;
              int _11266 = (int)0;
              int _11267 = _5833;
              for (int _5907 = _11266; _5907 < _11267; ++_5907)
              {
                {
                  ++ _ptr__5853[safe_add( safe_add( _5843,_ptr__5853[safe_add( _5836,_5907 )] ),(int)1 )];
                }
              }
              int _11268 = (int)0;
              int _11269 = _5842;
              for (int _5908 = _11268; _5908 < _11269; ++_5908)
              {
                {
                  _ptr__5853[safe_add( safe_add( _5843,_5908 ),(int)1 )] += _ptr__5853[safe_add( _5843,_5908 )];
                }
              }
            }
          }
          int _11270 = (int)0;
          int _11271 = _5842;
          for (int _5909 = _11270; _5909 < _11271; ++_5909)
          {
            {
              int _11272 = (int)0;
              int _11273 = mdimj;
              for (int _5910 = _11272; _5910 < _11273; ++_5910)
              {
                {
                  int _5911 = (int)0;
                  int _5912 = _ptr__5853[safe_add( safe_add( _5843,_5909 ),(int)1 )];
                  int _5913 = _ptr__5853[safe_add( safe_add( _5852,_5910 ),(int)1 )];
                  int _5914 = _ptr__5853[safe_add( _5843,_5909 )];
                  int _5915 = _ptr__5853[safe_add( _5852,_5910 )];
                  while ( ((_5915 < _5913) && (_5914 < _5912)) )
                  {
                    {
                      if ((_ptr__5845[_ptr__5853[safe_add( _5851,_5915 )]] < _ptr__5853[safe_add( _5837,_5914 )]))
                      {
                        {
                          ++ _5915;
                        }
                      }
                      else if((_ptr__5845[_ptr__5853[safe_add( _5851,_5915 )]] > _ptr__5853[safe_add( _5837,_5914 )]))
                      {
                        {
                          ++ _5914;
                        }
                      }
                      else
                      {
                        {
                          ++ _5911;
                          ++ _5915;
                          ++ _5914;
                        }
                      }
                    }
                  }
                  if ((_5911 > (int)0))
                  {
                    {
                      _5855 += _5911;
                      ++ _5856;
                    }
                  }
                  {}
                }
              }
            }
          }
          bool _5916 = (_5856 < safe_mul( _5841,mdimi ));
          _5828->alloc_expr((int)2,_5856,_5855,_5916);
          int _5917 = mosek::fusion::p_WorkStack::_get_impl(_5828)->ptr_base;
          int _5918 = mosek::fusion::p_WorkStack::_get_impl(_5828)->shape_base;
          int _5919 = mosek::fusion::p_WorkStack::_get_impl(_5828)->nidxs_base;
          int _5920 = mosek::fusion::p_WorkStack::_get_impl(_5828)->sp_base;
          int _5921 = mosek::fusion::p_WorkStack::_get_impl(_5828)->cof_base;
          ((*mosek::fusion::p_WorkStack::_get_impl(_5828)->i32)(_5918)) = _5842;
          ((*mosek::fusion::p_WorkStack::_get_impl(_5828)->i32)(safe_add( _5918,(int)1 ))) = mdimj;
          std::shared_ptr< monty::ndarray< int,1 > > _5922 = mosek::fusion::p_WorkStack::_get_impl(_5828)->i32;
          _checked_ptr_1<int> _ptr__5922(_5922 ? _5922->raw() : nullptr,_5922 ? _5922->size(0) : 0);
          std::shared_ptr< monty::ndarray< long long,1 > > _5923 = mosek::fusion::p_WorkStack::_get_impl(_5828)->i64;
          _checked_ptr_1<long long> _ptr__5923(_5923 ? _5923->raw() : nullptr,_5923 ? _5923->size(0) : 0);
          std::shared_ptr< monty::ndarray< double,1 > > _5924 = mosek::fusion::p_WorkStack::_get_impl(_5828)->f64;
          _checked_ptr_1<double> _ptr__5924(_5924 ? _5924->raw() : nullptr,_5924 ? _5924->size(0) : 0);
          {
            int _5925 = (int)0;
            int _5926 = (int)0;
            int _5927 = (int)0;
            _ptr__5922[_5917] = (int)0;
            int _11274 = (int)0;
            int _11275 = _5842;
            for (int _5928 = _11274; _5928 < _11275; ++_5928)
            {
              {
                int _11276 = (int)0;
                int _11277 = mdimj;
                for (int _5929 = _11276; _5929 < _11277; ++_5929)
                {
                  {
                    int _5930 = (int)0;
                    int _5931 = _ptr__5853[safe_add( safe_add( _5843,_5928 ),(int)1 )];
                    int _5932 = _ptr__5853[safe_add( safe_add( _5852,_5929 ),(int)1 )];
                    int _5933 = _ptr__5853[safe_add( _5843,_5928 )];
                    int _5934 = _ptr__5853[safe_add( _5852,_5929 )];
                    while ( ((_5934 < _5932) && (_5933 < _5931)) )
                    {
                      {
                        if ((_ptr__5845[_ptr__5853[safe_add( _5851,_5934 )]] < _ptr__5853[safe_add( _5837,_5933 )]))
                        {
                          {
                            ++ _5934;
                          }
                        }
                        else if((_ptr__5845[_ptr__5853[safe_add( _5851,_5934 )]] > _ptr__5853[safe_add( _5837,_5933 )]))
                        {
                          {
                            ++ _5933;
                          }
                        }
                        else
                        {
                          {
                            _ptr__5923[safe_add( _5919,_5927 )] = _ptr__5854[safe_add( _5834,_5933 )];
                            _ptr__5924[safe_add( _5921,_5927 )] = _ptr__5847[_ptr__5853[safe_add( _5851,_5934 )]];
                            ++ _5930;
                            ++ _5927;
                            ++ _5934;
                            ++ _5933;
                          }
                        }
                      }
                    }
                    if ((_5930 > (int)0))
                    {
                      {
                        _ptr__5922[safe_add( safe_add( _5917,_5926 ),(int)1 )] = _5927;
                        _ptr__5923[safe_add( _5920,_5926 )] = _5925;
                        ++ _5926;
                      }
                    }
                    {}
                    ++ _5925;
                  }
                }
              }
            }
          }
          if ((!_5916))
          {
            {
              _5828->popi64(_5856);
            }
          }
          {}
        }
      }
    }
  }
  mosek::fusion::p_WorkStack::_get_impl(_5829)->pi32 = _5831;
  mosek::fusion::p_WorkStack::_get_impl(_5829)->pi64 = _5832;
}
void mosek::fusion::ExprMulVar :: eval_left(monty::rc_ptr< ::mosek::fusion::WorkStack > _5935,monty::rc_ptr< ::mosek::fusion::WorkStack > _5936,monty::rc_ptr< ::mosek::fusion::WorkStack > _5937) { mosek::fusion::p_ExprMulVar::_get_impl(this)->eval_left(_5935,_5936,_5937); }void mosek::fusion::p_ExprMulVar::eval_left(monty::rc_ptr< ::mosek::fusion::WorkStack > _5935,monty::rc_ptr< ::mosek::fusion::WorkStack > _5936,monty::rc_ptr< ::mosek::fusion::WorkStack > _5937){
  int _5938 = x->numInst();
  std::shared_ptr< monty::ndarray< int,1 > > _5939 = x->getShape();
  _checked_ptr_1<int> _ptr__5939(_5939 ? _5939->raw() : nullptr,_5939 ? _5939->size(0) : 0);
  int _5940 = (int)((_5939)->size(0));
  int _5941 = _5937->alloci64(_5938);
  int _5942 = _5937->alloci64(_5938);
  int _5943 = _5937->alloci32(_5938);
  int _5944 = _5937->alloci32(_5938);
  int _5945 = _5937->alloci32(_5938);
  int _5946 = _5937->alloci32(safe_add( mdimi,(int)1 ));
  std::shared_ptr< monty::ndarray< int,1 > > _5947 = x->getShape();
  _checked_ptr_1<int> _ptr__5947(_5947 ? _5947->raw() : nullptr,_5947 ? _5947->size(0) : 0);
  int _5948 = (int)((_5947)->size(0));
  int _11278;
  bool _11279 = (_5948 == (int)1);
  if (_11279)
  {
    _11278 = (int)1;
  }
  else
  {
    _11278 = _ptr__5947[(int)1];
  }
  int _5949 = _11278;
  int _5950 = _ptr__5947[(int)0];
  int _5951 = _5937->alloci32(safe_add( _5949,(int)1 ));
  std::shared_ptr< monty::ndarray< int,1 > > _5952 = mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->msubi;
  _checked_ptr_1<int> _ptr__5952(_5952 ? _5952->raw() : nullptr,_5952 ? _5952->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _5953 = mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->msubj;
  _checked_ptr_1<int> _ptr__5953(_5953 ? _5953->raw() : nullptr,_5953 ? _5953->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _5954 = mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->mcof;
  _checked_ptr_1<double> _ptr__5954(_5954 ? _5954->raw() : nullptr,_5954 ? _5954->size(0) : 0);
  int _5955 = mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->mdimi;
  int _5956 = mosek::fusion::p_ExprMulVar::_get_impl(::mosek::fusion::ExprMulVar::t(_pubthis))->mdimj;
  int _5957 = (int)0;
  int _5958 = (int)0;
  std::shared_ptr< monty::ndarray< int,1 > > _5959 = mosek::fusion::p_WorkStack::_get_impl(_5937)->i32;
  _checked_ptr_1<int> _ptr__5959(_5959 ? _5959->raw() : nullptr,_5959 ? _5959->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _5960 = mosek::fusion::p_WorkStack::_get_impl(_5937)->i64;
  _checked_ptr_1<long long> _ptr__5960(_5960 ? _5960->raw() : nullptr,_5960 ? _5960->size(0) : 0);
  int _5961 = (int)((_5954)->size(0));
  x->inst(_5942,_5960,_5941,_5960);
  if ((x->numInst() < x->getSize()))
  {
    {
      {
        int _11280 = (int)0;
        int _11281 = safe_add( _5955,(int)1 );
        for (int _5962 = _11280; _5962 < _11281; ++_5962)
        {
          {
            _ptr__5959[safe_add( _5946,_5962 )] = (int)0;
          }
        }
        int _11282 = (int)0;
        int _11283 = (int)((_5952)->size(0));
        for (int _5963 = _11282; _5963 < _11283; ++_5963)
        {
          {
            ++ _ptr__5959[safe_add( safe_add( _5946,_ptr__5952[_5963] ),(int)1 )];
          }
        }
        int _11284 = (int)0;
        int _11285 = _5955;
        for (int _5964 = _11284; _5964 < _11285; ++_5964)
        {
          {
            _ptr__5959[safe_add( safe_add( _5946,_5964 ),(int)1 )] += _ptr__5959[safe_add( _5946,_5964 )];
          }
        }
        if ((_5948 == (int)1))
        {
          {
            int _11286 = (int)0;
            int _11287 = _5938;
            for (int _5965 = _11286; _5965 < _11287; ++_5965)
            {
              {
                _ptr__5959[safe_add( _5943,_5965 )] = (int)_ptr__5960[safe_add( _5942,_5965 )];
              }
            }
            int _11288 = (int)0;
            int _11289 = _5938;
            for (int _5966 = _11288; _5966 < _11289; ++_5966)
            {
              {
                _ptr__5959[safe_add( _5944,_5966 )] = (int)0;
              }
            }
          }
        }
        else
        {
          {
            int _11290 = (int)0;
            int _11291 = _5938;
            for (int _5967 = _11290; _5967 < _11291; ++_5967)
            {
              {
                _ptr__5959[safe_add( _5943,_5967 )] = (int)(_ptr__5960[safe_add( _5942,_5967 )] / _5949);
              }
            }
            int _11292 = (int)0;
            int _11293 = _5938;
            for (int _5968 = _11292; _5968 < _11293; ++_5968)
            {
              {
                _ptr__5959[safe_add( _5944,_5968 )] = (int)(_ptr__5960[safe_add( _5942,_5968 )] % _5949);
              }
            }
          }
        }
        if ((_5948 > (int)1))
        {
          {
            int _11294 = (int)0;
            int _11295 = safe_add( _5949,(int)1 );
            for (int _5969 = _11294; _5969 < _11295; ++_5969)
            {
              {
                _ptr__5959[safe_add( _5951,_5969 )] = (int)0;
              }
            }
            int _11296 = (int)0;
            int _11297 = _5938;
            for (int _5970 = _11296; _5970 < _11297; ++_5970)
            {
              {
                ++ _ptr__5959[safe_add( safe_add( _5951,_ptr__5959[safe_add( _5944,_5970 )] ),(int)1 )];
              }
            }
            int _11298 = (int)0;
            int _11299 = _5949;
            for (int _5971 = _11298; _5971 < _11299; ++_5971)
            {
              {
                _ptr__5959[safe_add( safe_add( _5951,_5971 ),(int)1 )] += _ptr__5959[safe_add( _5951,_5971 )];
              }
            }
            int _11300 = (int)0;
            int _11301 = _5938;
            for (int _5972 = _11300; _5972 < _11301; ++_5972)
            {
              {
                _ptr__5959[safe_add( _5945,_ptr__5959[safe_add( _5951,_ptr__5959[safe_add( _5944,_5972 )] )] )] = _5972;
                ++ _ptr__5959[safe_add( _5951,_ptr__5959[safe_add( _5944,_5972 )] )];
              }
            }
            int _11302 = (int)0;
            int _11303 = _5949;
            for (int _5973 = _11302; _5973 < _11303; ++_5973)
            {
              {
                _ptr__5959[(safe_add( _5951,_5949 ) - _5973)] = _ptr__5959[((safe_add( _5951,_5949 ) - _5973) - (int)1)];
              }
            }
            _ptr__5959[_5951] = (int)0;
          }
        }
        else
        {
          {
            _ptr__5959[_5951] = (int)0;
            _ptr__5959[safe_add( _5951,(int)1 )] = _5938;
            int _11304 = (int)0;
            int _11305 = _5938;
            for (int _5974 = _11304; _5974 < _11305; ++_5974)
            {
              {
                _ptr__5959[safe_add( _5945,_5974 )] = _5974;
              }
            }
          }
        }
        int _11306 = (int)0;
        int _11307 = _5955;
        for (int _5975 = _11306; _5975 < _11307; ++_5975)
        {
          {
            int _11308 = (int)0;
            int _11309 = _5949;
            for (int _5976 = _11308; _5976 < _11309; ++_5976)
            {
              {
                int _5977 = (int)0;
                int _5978 = _ptr__5959[safe_add( safe_add( _5951,_5976 ),(int)1 )];
                int _5979 = _ptr__5959[safe_add( safe_add( _5946,_5975 ),(int)1 )];
                int _5980 = _ptr__5959[safe_add( _5951,_5976 )];
                int _5981 = _ptr__5959[safe_add( _5946,_5975 )];
                while ( ((_5981 < _5979) && (_5980 < _5978)) )
                {
                  {
                    if ((_ptr__5953[_5981] < _ptr__5959[safe_add( _5943,_ptr__5959[safe_add( _5945,_5980 )] )]))
                    {
                      {
                        ++ _5981;
                      }
                    }
                    else if((_ptr__5953[_5981] > _ptr__5959[safe_add( _5943,_ptr__5959[safe_add( _5945,_5980 )] )]))
                    {
                      {
                        ++ _5980;
                      }
                    }
                    else
                    {
                      {
                        ++ _5977;
                        ++ _5981;
                        ++ _5980;
                      }
                    }
                  }
                }
                if ((_5977 > (int)0))
                {
                  {
                    _5957 += _5977;
                    ++ _5958;
                  }
                }
                {}
              }
            }
          }
        }
      }
    }
  }
  else
  {
    {
      _5957 = safe_mul( _5961,_5949 );
      int _5982 = (int)0;
      while ( (_5982 < _5961) )
      {
        {
          int _5983 = safe_add( _5982,(int)1 );
          while ( ((_5983 < _5961) && (_ptr__5952[_5982] == _ptr__5952[_5983])) )
          {
            {
              ++ _5983;
            }
          }
          ++ _5958;
          _5982 = _5983;
        }
      }
      _5958 *= _5949;
    }
  }
  bool _11310;
  bool _11311 = (_5958 < safe_mul( _5949,_5955 ));
  if (_11311)
  {
    _11310 = true;
  }
  else
  {
    _11310 = false;
  }
  bool _5984 = _11310;
  int _5985 = _5948;
  _5935->alloc_expr(_5985,_5958,_5957,_5984);
  int _5986 = mosek::fusion::p_WorkStack::_get_impl(_5935)->ptr_base;
  int _5987 = mosek::fusion::p_WorkStack::_get_impl(_5935)->shape_base;
  int _5988 = mosek::fusion::p_WorkStack::_get_impl(_5935)->nidxs_base;
  int _11312;
  bool _11313 = _5984;
  if (_11313)
  {
    _11312 = mosek::fusion::p_WorkStack::_get_impl(_5935)->sp_base;
  }
  else
  {
    _11312 = _5935->alloci64(_5958);
  }
  int _5989 = _11312;
  int _5990 = mosek::fusion::p_WorkStack::_get_impl(_5935)->cof_base;
  std::shared_ptr< monty::ndarray< int,1 > > _5991 = mosek::fusion::p_WorkStack::_get_impl(_5935)->i32;
  _checked_ptr_1<int> _ptr__5991(_5991 ? _5991->raw() : nullptr,_5991 ? _5991->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _5992 = mosek::fusion::p_WorkStack::_get_impl(_5935)->i64;
  _checked_ptr_1<long long> _ptr__5992(_5992 ? _5992->raw() : nullptr,_5992 ? _5992->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _5993 = mosek::fusion::p_WorkStack::_get_impl(_5935)->f64;
  _checked_ptr_1<double> _ptr__5993(_5993 ? _5993->raw() : nullptr,_5993 ? _5993->size(0) : 0);
  _ptr__5991[_5987] = _5955;
  if ((_5948 > (int)1))
  {
    {
      _ptr__5991[safe_add( _5987,(int)1 )] = _5949;
    }
  }
  {}
  if ((x->numInst() < x->getSize()))
  {
    {
      int _5994 = (int)0;
      int _5995 = (int)0;
      int _5996 = (int)0;
      _ptr__5991[_5986] = (int)0;
      int _11314 = (int)0;
      int _11315 = _5955;
      for (int _5997 = _11314; _5997 < _11315; ++_5997)
      {
        {
          int _11316 = (int)0;
          int _11317 = _5949;
          for (int _5998 = _11316; _5998 < _11317; ++_5998)
          {
            {
              int _5999 = (int)0;
              int _6000 = _ptr__5959[safe_add( safe_add( _5951,_5998 ),(int)1 )];
              int _6001 = _ptr__5959[safe_add( safe_add( _5946,_5997 ),(int)1 )];
              int _6002 = _ptr__5959[safe_add( _5951,_5998 )];
              int _6003 = _ptr__5959[safe_add( _5946,_5997 )];
              while ( ((_6003 < _6001) && (_6002 < _6000)) )
              {
                {
                  if ((_ptr__5953[_6003] < _ptr__5959[safe_add( _5943,_ptr__5959[safe_add( _5945,_6002 )] )]))
                  {
                    {
                      ++ _6003;
                    }
                  }
                  else if((_ptr__5953[_6003] > _ptr__5959[safe_add( _5943,_ptr__5959[safe_add( _5945,_6002 )] )]))
                  {
                    {
                      ++ _6002;
                    }
                  }
                  else
                  {
                    {
                      _ptr__5992[safe_add( _5988,_5996 )] = _ptr__5960[safe_add( _5941,_ptr__5959[safe_add( _5945,_6002 )] )];
                      _ptr__5993[safe_add( _5990,_5996 )] = _ptr__5954[_6003];
                      ++ _5999;
                      ++ _5996;
                      ++ _6003;
                      ++ _6002;
                    }
                  }
                }
              }
              if ((_5999 > (int)0))
              {
                {
                  _ptr__5991[safe_add( safe_add( _5986,_5995 ),(int)1 )] = _5996;
                  _ptr__5992[safe_add( _5989,_5995 )] = _5994;
                  ++ _5995;
                }
              }
              {}
              ++ _5994;
            }
          }
        }
      }
    }
  }
  else
  {
    {
      int _6004 = (int)0;
      int _6005 = (int)0;
      _ptr__5991[_5986] = (int)0;
      int _6006 = (int)0;
      while ( (_6006 < _5961) )
      {
        {
          int _6007 = safe_add( _6006,(int)1 );
          while ( ((_6007 < _5961) && (_ptr__5952[_6007] == _ptr__5952[_6006])) )
          {
            {
              ++ _6007;
            }
          }
          int _11318 = (int)0;
          int _11319 = _5949;
          for (int _6008 = _11318; _6008 < _11319; ++_6008)
          {
            {
              int _11320 = _6006;
              int _11321 = _6007;
              for (int _6009 = _11320; _6009 < _11321; ++_6009)
              {
                {
                  _ptr__5992[safe_add( _5988,_6004 )] = _ptr__5960[safe_add( safe_add( _5941,safe_mul( _ptr__5953[_6009],_5949 ) ),_6008 )];
                  _ptr__5993[safe_add( _5990,_6004 )] = _ptr__5954[_6009];
                  ++ _6004;
                }
              }
              _ptr__5991[safe_add( safe_add( _5986,_6005 ),(int)1 )] = _6004;
              _ptr__5992[safe_add( _5989,_6005 )] = safe_add( safe_mul( _ptr__5952[_6006],_5949 ),_6008 );
              ++ _6005;
            }
          }
          _6006 = _6007;
        }
      }
    }
  }
  if ((!_5984))
  {
    {
      _5935->popi64(_5958);
    }
  }
  {}
  _5937->clear();
}
void mosek::fusion::p_ExprMulVar::validate(int _6010,int _6011,std::shared_ptr< monty::ndarray< int,1 > > _6012,std::shared_ptr< monty::ndarray< int,1 > > _6013,std::shared_ptr< monty::ndarray< double,1 > > _6014){
  _checked_ptr_1<int> _ptr__6012(_6012 ? _6012->raw() : nullptr, _6012 ? _6012->size(0) : 0);
  _checked_ptr_1<int> _ptr__6013(_6013 ? _6013->raw() : nullptr, _6013 ? _6013->size(0) : 0);
  _checked_ptr_1<double> _ptr__6014(_6014 ? _6014->raw() : nullptr, _6014 ? _6014->size(0) : 0);
  bool _6015 = true;
  {
    int _11322 = (int)0;
    int _11323 = (int)((_6012)->size(0));
    for (int _6016 = _11322; _6016 < _11323; ++_6016)
    {
      {
        if (((_ptr__6012[_6016] < (int)0) || ((_ptr__6012[_6016] >= _6010) || ((_ptr__6013[_6016] < (int)0) || (_ptr__6013[_6016] >= _6011)))))
        {
          {
            _6015 = false;
          }
        }
        {}
      }
    }
    int _11324 = (int)1;
    int _11325 = (int)((_6012)->size(0));
    for (int _6017 = _11324; _6017 < _11325; ++_6017)
    {
      {
        if (((_ptr__6012[(_6017 - (int)1)] > _ptr__6012[_6017]) || ((_ptr__6012[(_6017 - (int)1)] == _ptr__6012[_6017]) && (_ptr__6013[(_6017 - (int)1)] >= _ptr__6013[_6017]))))
        {
          {
            _6015 = false;
          }
        }
        {}
      }
    }
  }
  if ((!_6015))
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Invalid matrix data"));
    }
  }
  {}
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_ExprMulVar::resshape(int _6018,int _6019,std::shared_ptr< monty::ndarray< int,1 > > _6020,bool _6021){
  _checked_ptr_1<int> _ptr__6020(_6020 ? _6020->raw() : nullptr, _6020 ? _6020->size(0) : 0);
  if (_6021)
  {
    {
      return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_6018),(int)(_ptr__6020[(int)1])});
    }
  }
  else
  {
    {
      return std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_ptr__6020[(int)0]),(int)(_6019)});
    }
  }
}
std::string mosek::fusion::ExprMulVar :: toString() { return mosek::fusion::p_ExprMulVar::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprMulVar::toString(){
  if (left)
  {
    {
      return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprMulVar(M,"))->__mosek_2fusion_2Utils_2StringBuffer__a(x->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
    }
  }
  else
  {
    {
      return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprMulVar("))->__mosek_2fusion_2Utils_2StringBuffer__a(x->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (",M)"))->toString();
    }
  }
}
void mosek::fusion::p_ExprMulVar::destroy(){x.reset();mcof.reset();msubj.reset();msubi.reset();}void mosek::fusion::ExprMulVar::destroy() { mosek::fusion::p_ExprMulVar::_get_impl(this)->destroy(); }mosek::fusion::ExprMulScalarVar::ExprMulScalarVar(mosek::fusion::p_ExprMulScalarVar *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprMulScalarVar()" << this << std::endl; */ }mosek::fusion::ExprMulScalarVar::~ExprMulScalarVar() {  /* std::cout << "~ExprMulScalarVar()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprMulScalarVar::p_ExprMulScalarVar  (::mosek::fusion::ExprMulScalarVar * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprMulScalarVar::t mosek::fusion::p_ExprMulScalarVar::_new_ExprMulScalarVar  (int _6022,    int _6023,    std::shared_ptr< monty::ndarray< int,1 > > _6024,    std::shared_ptr< monty::ndarray< int,1 > > _6025,    std::shared_ptr< monty::ndarray< double,1 > > _6026,    monty::rc_ptr< ::mosek::fusion::Variable > _6027){ return new mosek::fusion::ExprMulScalarVar(_6022,_6023,_6024,_6025,_6026,_6027); }mosek::fusion::ExprMulScalarVar::ExprMulScalarVar  (int _6022,    int _6023,    std::shared_ptr< monty::ndarray< int,1 > > _6024,    std::shared_ptr< monty::ndarray< int,1 > > _6025,    std::shared_ptr< monty::ndarray< double,1 > > _6026,    monty::rc_ptr< ::mosek::fusion::Variable > _6027) :    ExprMulScalarVar(new mosek::fusion::p_ExprMulScalarVar(this)){ mosek::fusion::p_ExprMulScalarVar::_get_impl(this)->_initialize(_6022,_6023,_6024,_6025,_6026,_6027); }void mosek::fusion::p_ExprMulScalarVar::_initialize  (int _6022,    int _6023,    std::shared_ptr< monty::ndarray< int,1 > > _6024,    std::shared_ptr< monty::ndarray< int,1 > > _6025,    std::shared_ptr< monty::ndarray< double,1 > > _6026,    monty::rc_ptr< ::mosek::fusion::Variable > _6027){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__6024(_6024 ? _6024->raw() : nullptr, _6024 ? _6024->size(0) : 0);
    _checked_ptr_1<int> _ptr__6025(_6025 ? _6025->raw() : nullptr, _6025 ? _6025->size(0) : 0);
    _checked_ptr_1<double> _ptr__6026(_6026 ? _6026->raw() : nullptr, _6026 ? _6026->size(0) : 0);
    mosek::fusion::p_ExprMulScalarVar::_initialize(_6022,_6023,::mosek::fusion::Utils::Tools::arraycopy(_6024),::mosek::fusion::Utils::Tools::arraycopy(_6025),::mosek::fusion::Utils::Tools::arraycopy(_6026),_6027,(int)1);
    if ((_6027->getND() != (int)0))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Invalid Variable size"));
      }
    }
    {}
    if (((_6022 < (int)0) || ((_6023 < (int)0) || (((int)((_6024)->size(0)) != (int)((_6025)->size(0))) || ((int)((_6024)->size(0)) != (int)((_6026)->size(0)))))))
    {
      {
        throw ::mosek::fusion::LengthError(std::string ("Invalid Matrix data"));
      }
    }
    {}
    bool _6028 = false;
    int _11326 = (int)0;
    int _11327 = (int)((_6024)->size(0));
    for (int _6029 = _11326; _6029 < _11327; ++_6029)
    {
      {
        if (((_ptr__6024[_6029] < (int)0) || ((_ptr__6024[_6029] >= _6022) || ((_ptr__6025[_6029] < (int)0) || (_ptr__6025[_6029] >= _6023)))))
        {
          {
            _6028 = true;
          }
        }
        {}
      }
    }
    if (_6028)
    {
      {
        throw ::mosek::fusion::IndexError(std::string ("Invalid Matrix data"));
      }
    }
    {}
    bool _6030 = false;
    int _11328 = (int)1;
    int _11329 = (int)((_6024)->size(0));
    for (int _6031 = _11328; _6031 < _11329; ++_6031)
    {
      {
        if (((_ptr__6024[_6031] < _ptr__6024[(_6031 - (int)1)]) || ((_ptr__6024[_6031] == _ptr__6024[(_6031 - (int)1)]) && (_ptr__6025[_6031] <= _ptr__6025[(_6031 - (int)1)]))))
        {
          {
            _6030 = true;
          }
        }
        {}
      }
    }
    if (_6030)
    {
      {
        throw ::mosek::fusion::IndexError(std::string ("Matrix data not correctly sorted"));
      }
    }
    {}
  }
}mosek::fusion::ExprMulScalarVar::t mosek::fusion::p_ExprMulScalarVar::_new_ExprMulScalarVar  (int _6032,    int _6033,    std::shared_ptr< monty::ndarray< int,1 > > _6034,    std::shared_ptr< monty::ndarray< int,1 > > _6035,    std::shared_ptr< monty::ndarray< double,1 > > _6036,    monty::rc_ptr< ::mosek::fusion::Variable > _6037,    int _6038){ return new mosek::fusion::ExprMulScalarVar(_6032,_6033,_6034,_6035,_6036,_6037,_6038); }mosek::fusion::ExprMulScalarVar::ExprMulScalarVar  (int _6032,    int _6033,    std::shared_ptr< monty::ndarray< int,1 > > _6034,    std::shared_ptr< monty::ndarray< int,1 > > _6035,    std::shared_ptr< monty::ndarray< double,1 > > _6036,    monty::rc_ptr< ::mosek::fusion::Variable > _6037,    int _6038) :    ExprMulScalarVar(new mosek::fusion::p_ExprMulScalarVar(this)){ mosek::fusion::p_ExprMulScalarVar::_get_impl(this)->_initialize(_6032,_6033,_6034,_6035,_6036,_6037,_6038); }void mosek::fusion::p_ExprMulScalarVar::_initialize  (int _6032,    int _6033,    std::shared_ptr< monty::ndarray< int,1 > > _6034,    std::shared_ptr< monty::ndarray< int,1 > > _6035,    std::shared_ptr< monty::ndarray< double,1 > > _6036,    monty::rc_ptr< ::mosek::fusion::Variable > _6037,    int _6038){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__6034(_6034 ? _6034->raw() : nullptr, _6034 ? _6034->size(0) : 0);
    _checked_ptr_1<int> _ptr__6035(_6035 ? _6035->raw() : nullptr, _6035 ? _6035->size(0) : 0);
    _checked_ptr_1<double> _ptr__6036(_6036 ? _6036->raw() : nullptr, _6036 ? _6036->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_6032),(int)(_6033)}));
    mosek::fusion::p_ExprMulScalarVar::_get_impl(::mosek::fusion::ExprMulScalarVar::t(_pubthis))->mdimi = _6032;
    mosek::fusion::p_ExprMulScalarVar::_get_impl(::mosek::fusion::ExprMulScalarVar::t(_pubthis))->mdimj = _6033;
    mosek::fusion::p_ExprMulScalarVar::_get_impl(::mosek::fusion::ExprMulScalarVar::t(_pubthis))->msubi = _6034;
    mosek::fusion::p_ExprMulScalarVar::_get_impl(::mosek::fusion::ExprMulScalarVar::t(_pubthis))->msubj = _6035;
    mosek::fusion::p_ExprMulScalarVar::_get_impl(::mosek::fusion::ExprMulScalarVar::t(_pubthis))->mcof = _6036;
    mosek::fusion::p_ExprMulScalarVar::_get_impl(::mosek::fusion::ExprMulScalarVar::t(_pubthis))->x = _6037;
  }
}void mosek::fusion::ExprMulScalarVar :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _6039,monty::rc_ptr< ::mosek::fusion::WorkStack > _6040,monty::rc_ptr< ::mosek::fusion::WorkStack > _6041) { mosek::fusion::p_ExprMulScalarVar::_get_impl(this)->eval(_6039,_6040,_6041); }void mosek::fusion::p_ExprMulScalarVar::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _6039,monty::rc_ptr< ::mosek::fusion::WorkStack > _6040,monty::rc_ptr< ::mosek::fusion::WorkStack > _6041){
  if ((x->numInst() == (int)0))
  {
    {
      _6039->alloc_expr((int)2,(int)0,(int)0,false);
      ((*mosek::fusion::p_WorkStack::_get_impl(_6039)->i32)(mosek::fusion::p_WorkStack::_get_impl(_6039)->shape_base)) = mdimi;
      ((*mosek::fusion::p_WorkStack::_get_impl(_6039)->i32)(safe_add( mosek::fusion::p_WorkStack::_get_impl(_6039)->shape_base,(int)1 ))) = mdimj;
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< long long,1 > > _6042 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)1)));
      _checked_ptr_1<long long> _ptr__6042(_6042 ? _6042->raw() : nullptr,_6042 ? _6042->size(0) : 0);
      x->inst((int)0,_6042);
      long long _6043 = _ptr__6042[(int)0];
      int _6044 = (int)((msubi)->size(0));
      int _6045 = _6044;
      bool _6046 = (_6044 < safe_mul( mdimi,mdimj ));
      _6039->alloc_expr((int)2,_6044,_6045,_6046);
      int _6047 = mosek::fusion::p_WorkStack::_get_impl(_6039)->ptr_base;
      ((*mosek::fusion::p_WorkStack::_get_impl(_6039)->i32)(mosek::fusion::p_WorkStack::_get_impl(_6039)->shape_base)) = mdimi;
      ((*mosek::fusion::p_WorkStack::_get_impl(_6039)->i32)(safe_add( mosek::fusion::p_WorkStack::_get_impl(_6039)->shape_base,(int)1 ))) = mdimj;
      int _6048 = mosek::fusion::p_WorkStack::_get_impl(_6039)->nidxs_base;
      int _6049 = mosek::fusion::p_WorkStack::_get_impl(_6039)->sp_base;
      int _6050 = mosek::fusion::p_WorkStack::_get_impl(_6039)->cof_base;
      std::shared_ptr< monty::ndarray< int,1 > > _6051 = mosek::fusion::p_WorkStack::_get_impl(_6039)->i32;
      _checked_ptr_1<int> _ptr__6051(_6051 ? _6051->raw() : nullptr,_6051 ? _6051->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _6052 = mosek::fusion::p_WorkStack::_get_impl(_6039)->i64;
      _checked_ptr_1<long long> _ptr__6052(_6052 ? _6052->raw() : nullptr,_6052 ? _6052->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _6053 = mosek::fusion::p_WorkStack::_get_impl(_6039)->f64;
      _checked_ptr_1<double> _ptr__6053(_6053 ? _6053->raw() : nullptr,_6053 ? _6053->size(0) : 0);
      {
        int _11330 = (int)0;
        int _11331 = _6045;
        for (int _6054 = _11330; _6054 < _11331; ++_6054)
        {
          {
            _ptr__6053[safe_add( _6050,_6054 )] = ((*mcof)(_6054));
          }
        }
        int _11332 = (int)0;
        int _11333 = _6045;
        for (int _6055 = _11332; _6055 < _11333; ++_6055)
        {
          {
            _ptr__6052[safe_add( _6048,_6055 )] = _6043;
          }
        }
        if (_6046)
        {
          {
            int _11334 = (int)0;
            int _11335 = _6044;
            for (int _6056 = _11334; _6056 < _11335; ++_6056)
            {
              {
                _ptr__6052[safe_add( _6049,_6056 )] = safe_add( safe_mul( ((*msubi)(_6056)),mdimj ),((*msubj)(_6056)) );
              }
            }
          }
        }
        {}
        int _11336 = (int)0;
        int _11337 = safe_add( _6044,(int)1 );
        for (int _6057 = _11336; _6057 < _11337; ++_6057)
        {
          {
            _ptr__6051[safe_add( _6047,_6057 )] = _6057;
          }
        }
      }
    }
  }
}
std::string mosek::fusion::ExprMulScalarVar :: toString() { return mosek::fusion::p_ExprMulScalarVar::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprMulScalarVar::toString(){
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprMulScalarVar(M("))->__mosek_2fusion_2Utils_2StringBuffer__a(mdimi)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(mdimj)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("), "))->__mosek_2fusion_2Utils_2StringBuffer__a(x->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
void mosek::fusion::p_ExprMulScalarVar::destroy(){x.reset();mcof.reset();msubj.reset();msubi.reset();}void mosek::fusion::ExprMulScalarVar::destroy() { mosek::fusion::p_ExprMulScalarVar::_get_impl(this)->destroy(); }mosek::fusion::ExprMulVarScalarConst::ExprMulVarScalarConst(mosek::fusion::p_ExprMulVarScalarConst *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprMulVarScalarConst()" << this << std::endl; */ }mosek::fusion::ExprMulVarScalarConst::~ExprMulVarScalarConst() {  /* std::cout << "~ExprMulVarScalarConst()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprMulVarScalarConst::p_ExprMulVarScalarConst  (::mosek::fusion::ExprMulVarScalarConst * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprMulVarScalarConst::t mosek::fusion::p_ExprMulVarScalarConst::_new_ExprMulVarScalarConst  (monty::rc_ptr< ::mosek::fusion::Variable > _6058,    double _6059){ return new mosek::fusion::ExprMulVarScalarConst(_6058,_6059); }mosek::fusion::ExprMulVarScalarConst::ExprMulVarScalarConst  (monty::rc_ptr< ::mosek::fusion::Variable > _6058,    double _6059) :    ExprMulVarScalarConst(new mosek::fusion::p_ExprMulVarScalarConst(this)){ mosek::fusion::p_ExprMulVarScalarConst::_get_impl(this)->_initialize(_6058,_6059); }void mosek::fusion::p_ExprMulVarScalarConst::_initialize  (monty::rc_ptr< ::mosek::fusion::Variable > _6058,    double _6059){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(_6058->getShape());
    mosek::fusion::p_ExprMulVarScalarConst::_get_impl(::mosek::fusion::ExprMulVarScalarConst::t(_pubthis))->x = _6058;
    mosek::fusion::p_ExprMulVarScalarConst::_get_impl(::mosek::fusion::ExprMulVarScalarConst::t(_pubthis))->c = _6059;
  }
}void mosek::fusion::ExprMulVarScalarConst :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _6060,monty::rc_ptr< ::mosek::fusion::WorkStack > _6061,monty::rc_ptr< ::mosek::fusion::WorkStack > _6062) { mosek::fusion::p_ExprMulVarScalarConst::_get_impl(this)->eval(_6060,_6061,_6062); }void mosek::fusion::p_ExprMulVarScalarConst::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _6060,monty::rc_ptr< ::mosek::fusion::WorkStack > _6061,monty::rc_ptr< ::mosek::fusion::WorkStack > _6062){
  int _6063 = x->numInst();
  int _6064 = _6063;
  std::shared_ptr< monty::ndarray< int,1 > > _6065 = x->getShape();
  _checked_ptr_1<int> _ptr__6065(_6065 ? _6065->raw() : nullptr,_6065 ? _6065->size(0) : 0);
  int _6066 = (int)((_6065)->size(0));
  bool _6067 = (::mosek::fusion::p_Set::size(_6065) > _6064);
  _6060->alloc_expr(_6066,_6064,_6063,_6067);
  int _6068 = mosek::fusion::p_WorkStack::_get_impl(_6060)->ptr_base;
  int _6069 = mosek::fusion::p_WorkStack::_get_impl(_6060)->nidxs_base;
  int _6070 = mosek::fusion::p_WorkStack::_get_impl(_6060)->sp_base;
  int _6071 = mosek::fusion::p_WorkStack::_get_impl(_6060)->cof_base;
  int _6072 = mosek::fusion::p_WorkStack::_get_impl(_6060)->shape_base;
  if (_6067)
  {
    {
      x->inst(_6070,mosek::fusion::p_WorkStack::_get_impl(_6060)->i64,_6069,mosek::fusion::p_WorkStack::_get_impl(_6060)->i64);
    }
  }
  else
  {
    {
      x->inst(_6069,mosek::fusion::p_WorkStack::_get_impl(_6060)->i64);
    }
  }
  std::shared_ptr< monty::ndarray< int,1 > > _6073 = mosek::fusion::p_WorkStack::_get_impl(_6060)->i32;
  _checked_ptr_1<int> _ptr__6073(_6073 ? _6073->raw() : nullptr,_6073 ? _6073->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _6074 = mosek::fusion::p_WorkStack::_get_impl(_6060)->i64;
  _checked_ptr_1<long long> _ptr__6074(_6074 ? _6074->raw() : nullptr,_6074 ? _6074->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _6075 = mosek::fusion::p_WorkStack::_get_impl(_6060)->f64;
  _checked_ptr_1<double> _ptr__6075(_6075 ? _6075->raw() : nullptr,_6075 ? _6075->size(0) : 0);
  {
    int _11338 = (int)0;
    int _11339 = _6066;
    for (int _6076 = _11338; _6076 < _11339; ++_6076)
    {
      {
        _ptr__6073[safe_add( _6072,_6076 )] = _ptr__6065[_6076];
      }
    }
    int _11340 = (int)0;
    int _11341 = safe_add( _6064,(int)1 );
    for (int _6077 = _11340; _6077 < _11341; ++_6077)
    {
      {
        _ptr__6073[safe_add( _6068,_6077 )] = _6077;
      }
    }
    int _11342 = (int)0;
    int _11343 = _6063;
    for (int _6078 = _11342; _6078 < _11343; ++_6078)
    {
      {
        _ptr__6075[safe_add( _6071,_6078 )] = 1.0;
      }
    }
  }
}
std::string mosek::fusion::ExprMulVarScalarConst :: toString() { return mosek::fusion::p_ExprMulVarScalarConst::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprMulVarScalarConst::toString(){
  return std::string ("ExprMulVarScalarConst()");
}
void mosek::fusion::p_ExprMulVarScalarConst::destroy(){x.reset();}void mosek::fusion::ExprMulVarScalarConst::destroy() { mosek::fusion::p_ExprMulVarScalarConst::_get_impl(this)->destroy(); }mosek::fusion::ExprAdd::ExprAdd(mosek::fusion::p_ExprAdd *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprAdd()" << this << std::endl; */ }mosek::fusion::ExprAdd::~ExprAdd() {  /* std::cout << "~ExprAdd()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprAdd::p_ExprAdd  (::mosek::fusion::ExprAdd * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprAdd::t mosek::fusion::p_ExprAdd::_new_ExprAdd  (monty::rc_ptr< ::mosek::fusion::Expression > _6079,    monty::rc_ptr< ::mosek::fusion::Expression > _6080,    double _6081,    double _6082){ return new mosek::fusion::ExprAdd(_6079,_6080,_6081,_6082); }mosek::fusion::ExprAdd::ExprAdd  (monty::rc_ptr< ::mosek::fusion::Expression > _6079,    monty::rc_ptr< ::mosek::fusion::Expression > _6080,    double _6081,    double _6082) :    ExprAdd(new mosek::fusion::p_ExprAdd(this)){ mosek::fusion::p_ExprAdd::_get_impl(this)->_initialize(_6079,_6080,_6081,_6082); }void mosek::fusion::p_ExprAdd::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _6079,    monty::rc_ptr< ::mosek::fusion::Expression > _6080,    double _6081,    double _6082){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(_6079->getShape());
    mosek::fusion::p_ExprAdd::_get_impl(::mosek::fusion::ExprAdd::t(_pubthis))->e1 = _6079;
    mosek::fusion::p_ExprAdd::_get_impl(::mosek::fusion::ExprAdd::t(_pubthis))->e2 = _6080;
    mosek::fusion::p_ExprAdd::_get_impl(::mosek::fusion::ExprAdd::t(_pubthis))->m1 = _6081;
    mosek::fusion::p_ExprAdd::_get_impl(::mosek::fusion::ExprAdd::t(_pubthis))->m2 = _6082;
    if ((_6079->getND() != _6080->getND()))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand shapes"));
      }
    }
    {}
    int _11344 = (int)0;
    int _11345 = _6079->getND();
    for (int _6083 = _11344; _6083 < _11345; ++_6083)
    {
      {
        if ((_6079->getDim(_6083) != _6080->getDim(_6083)))
        {
          {
            throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand shapes"));
          }
        }
        {}
      }
    }
  }
}void mosek::fusion::ExprAdd :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _6084,monty::rc_ptr< ::mosek::fusion::WorkStack > _6085,monty::rc_ptr< ::mosek::fusion::WorkStack > _6086) { mosek::fusion::p_ExprAdd::_get_impl(this)->eval(_6084,_6085,_6086); }void mosek::fusion::p_ExprAdd::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _6084,monty::rc_ptr< ::mosek::fusion::WorkStack > _6085,monty::rc_ptr< ::mosek::fusion::WorkStack > _6086){
  e1->eval(_6085,_6084,_6086);
  e2->eval(_6085,_6084,_6086);
  _6085->pop_expr();
  int _6087 = mosek::fusion::p_WorkStack::_get_impl(_6085)->nd;
  int _6088 = mosek::fusion::p_WorkStack::_get_impl(_6085)->shape_base;
  int _6089 = mosek::fusion::p_WorkStack::_get_impl(_6085)->nelem;
  int _6090 = mosek::fusion::p_WorkStack::_get_impl(_6085)->nnz;
  int _6091 = mosek::fusion::p_WorkStack::_get_impl(_6085)->ncodeatom;
  bool _6092 = mosek::fusion::p_WorkStack::_get_impl(_6085)->hassp;
  int _6093 = mosek::fusion::p_WorkStack::_get_impl(_6085)->ptr_base;
  int _6094 = mosek::fusion::p_WorkStack::_get_impl(_6085)->sp_base;
  int _6095 = mosek::fusion::p_WorkStack::_get_impl(_6085)->nidxs_base;
  int _6096 = mosek::fusion::p_WorkStack::_get_impl(_6085)->cof_base;
  int _6097 = mosek::fusion::p_WorkStack::_get_impl(_6085)->code_base;
  int _6098 = mosek::fusion::p_WorkStack::_get_impl(_6085)->codeptr_base;
  int _6099 = mosek::fusion::p_WorkStack::_get_impl(_6085)->cconst_base;
  _6085->pop_expr();
  int _6100 = mosek::fusion::p_WorkStack::_get_impl(_6085)->nd;
  int _6101 = mosek::fusion::p_WorkStack::_get_impl(_6085)->shape_base;
  int _6102 = mosek::fusion::p_WorkStack::_get_impl(_6085)->nelem;
  int _6103 = mosek::fusion::p_WorkStack::_get_impl(_6085)->nnz;
  int _6104 = mosek::fusion::p_WorkStack::_get_impl(_6085)->ncodeatom;
  bool _6105 = mosek::fusion::p_WorkStack::_get_impl(_6085)->hassp;
  int _6106 = mosek::fusion::p_WorkStack::_get_impl(_6085)->ptr_base;
  int _6107 = mosek::fusion::p_WorkStack::_get_impl(_6085)->sp_base;
  int _6108 = mosek::fusion::p_WorkStack::_get_impl(_6085)->nidxs_base;
  int _6109 = mosek::fusion::p_WorkStack::_get_impl(_6085)->cof_base;
  int _6110 = mosek::fusion::p_WorkStack::_get_impl(_6085)->code_base;
  int _6111 = mosek::fusion::p_WorkStack::_get_impl(_6085)->codeptr_base;
  int _6112 = mosek::fusion::p_WorkStack::_get_impl(_6085)->cconst_base;
  std::shared_ptr< monty::ndarray< int,1 > > _6113 = mosek::fusion::p_WorkStack::_get_impl(_6085)->i32;
  _checked_ptr_1<int> _ptr__6113(_6113 ? _6113->raw() : nullptr,_6113 ? _6113->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _6114 = mosek::fusion::p_WorkStack::_get_impl(_6085)->i64;
  _checked_ptr_1<long long> _ptr__6114(_6114 ? _6114->raw() : nullptr,_6114 ? _6114->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _6115 = mosek::fusion::p_WorkStack::_get_impl(_6085)->f64;
  _checked_ptr_1<double> _ptr__6115(_6115 ? _6115->raw() : nullptr,_6115 ? _6115->size(0) : 0);
  bool _6116 = ((_6104 > (int)0) || (_6091 > (int)0));
  if ((_6100 != _6087))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand shapes"));
    }
  }
  {}
  int _11346 = (int)0;
  int _11347 = _6100;
  for (int _6117 = _11346; _6117 < _11347; ++_6117)
  {
    {
      if ((_ptr__6113[safe_add( _6101,_6117 )] != _ptr__6113[safe_add( _6088,_6117 )]))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand shapes"));
        }
      }
      {}
    }
  }
  if (((!_6105) && (!_6092)))
  {
    {
      int _6118 = _6102;
      int _6119 = safe_add( _6103,_6090 );
      int _6120 = (int)0;
      if (_6116)
      {
        {
          int _11348;
          bool _11349 = (_6104 > (int)0);
          if (_11349)
          {
            _11348 = safe_add( _6104,safe_mul( _6103,(int)2 ) );
          }
          else
          {
            _11348 = _6103;
          }
          _6120 += _11348;
          int _11350;
          bool _11351 = (_6091 > (int)0);
          if (_11351)
          {
            _11350 = safe_add( _6091,safe_mul( _6090,(int)2 ) );
          }
          else
          {
            _11350 = _6090;
          }
          _6120 += _11350;
        }
      }
      {}
      int _6121 = _6100;
      _6084->alloc_expr(_6121,_6118,_6119,false,_6120);
      int _6122 = mosek::fusion::p_WorkStack::_get_impl(_6084)->shape_base;
      int _6123 = mosek::fusion::p_WorkStack::_get_impl(_6084)->ptr_base;
      int _6124 = mosek::fusion::p_WorkStack::_get_impl(_6084)->sp_base;
      int _6125 = mosek::fusion::p_WorkStack::_get_impl(_6084)->nidxs_base;
      int _6126 = mosek::fusion::p_WorkStack::_get_impl(_6084)->cof_base;
      int _6127 = mosek::fusion::p_WorkStack::_get_impl(_6084)->code_base;
      int _6128 = mosek::fusion::p_WorkStack::_get_impl(_6084)->codeptr_base;
      int _6129 = mosek::fusion::p_WorkStack::_get_impl(_6084)->cconst_base;
      std::shared_ptr< monty::ndarray< int,1 > > _6130 = mosek::fusion::p_WorkStack::_get_impl(_6084)->i32;
      _checked_ptr_1<int> _ptr__6130(_6130 ? _6130->raw() : nullptr,_6130 ? _6130->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _6131 = mosek::fusion::p_WorkStack::_get_impl(_6084)->i64;
      _checked_ptr_1<long long> _ptr__6131(_6131 ? _6131->raw() : nullptr,_6131 ? _6131->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _6132 = mosek::fusion::p_WorkStack::_get_impl(_6084)->f64;
      _checked_ptr_1<double> _ptr__6132(_6132 ? _6132->raw() : nullptr,_6132 ? _6132->size(0) : 0);
      int _11352 = (int)0;
      int _11353 = _6121;
      for (int _6133 = _11352; _6133 < _11353; ++_6133)
      {
        {
          _ptr__6130[safe_add( _6122,_6133 )] = _ptr__6113[safe_add( _6101,_6133 )];
        }
      }
      int _6134 = (int)0;
      int _6135 = (int)0;
      if ((_6120 > (int)0))
      {
        {
          _ptr__6130[_6128] = (int)0;
        }
      }
      {}
      _ptr__6130[_6123] = (int)0;
      int _11354 = (int)0;
      int _11355 = _6118;
      for (int _6136 = _11354; _6136 < _11355; ++_6136)
      {
        {
          int _11356 = _ptr__6113[safe_add( _6106,_6136 )];
          int _11357 = _ptr__6113[safe_add( safe_add( _6106,_6136 ),(int)1 )];
          for (int _6137 = _11356; _6137 < _11357; ++_6137)
          {
            {
              _ptr__6131[safe_add( _6125,_6135 )] = _ptr__6114[safe_add( _6108,_6137 )];
              _ptr__6132[safe_add( _6126,_6135 )] = (_ptr__6115[safe_add( _6109,_6137 )] * m1);
              if ((_6104 > (int)0))
              {
                {
                  int _11358 = _ptr__6113[safe_add( _6111,_6137 )];
                  int _11359 = _ptr__6113[safe_add( safe_add( _6111,_6137 ),(int)1 )];
                  for (int _6138 = _11358; _6138 < _11359; ++_6138)
                  {
                    {
                      _ptr__6130[safe_add( _6127,_6134 )] = _ptr__6113[safe_add( _6110,_6138 )];
                      _ptr__6132[safe_add( _6129,_6134 )] = _ptr__6115[safe_add( _6112,_6138 )];
                      ++ _6134;
                    }
                  }
                  _ptr__6130[safe_add( _6127,_6134 )] = 2;
                  _ptr__6132[safe_add( _6129,_6134 )] = m1;
                  ++ _6134;
                  _ptr__6130[safe_add( _6127,_6134 )] = 5;
                  ++ _6134;
                  _ptr__6130[safe_add( safe_add( _6128,_6135 ),(int)1 )] = _6134;
                }
              }
              else
              {
                {
                  if ((_6120 > (int)0))
                  {
                    {
                      _ptr__6130[safe_add( _6127,_6134 )] = 2;
                      _ptr__6132[safe_add( _6129,_6134 )] = 0.0;
                      ++ _6134;
                      _ptr__6130[safe_add( safe_add( _6128,_6135 ),(int)1 )] = _6134;
                    }
                  }
                  {}
                }
              }
              ++ _6135;
            }
          }
          int _11360 = _ptr__6113[safe_add( _6093,_6136 )];
          int _11361 = _ptr__6113[safe_add( safe_add( _6093,_6136 ),(int)1 )];
          for (int _6139 = _11360; _6139 < _11361; ++_6139)
          {
            {
              _ptr__6131[safe_add( _6125,_6135 )] = _ptr__6114[safe_add( _6095,_6139 )];
              _ptr__6132[safe_add( _6126,_6135 )] = (_ptr__6115[safe_add( _6096,_6139 )] * m2);
              if ((_6091 > (int)0))
              {
                {
                  int _11362 = _ptr__6113[safe_add( _6098,_6139 )];
                  int _11363 = _ptr__6113[safe_add( safe_add( _6098,_6139 ),(int)1 )];
                  for (int _6140 = _11362; _6140 < _11363; ++_6140)
                  {
                    {
                      _ptr__6130[safe_add( _6127,_6134 )] = _ptr__6113[safe_add( _6097,_6140 )];
                      _ptr__6132[safe_add( _6129,_6134 )] = _ptr__6115[safe_add( _6099,_6140 )];
                      ++ _6134;
                    }
                  }
                  _ptr__6130[safe_add( _6127,_6134 )] = 2;
                  _ptr__6132[safe_add( _6129,_6134 )] = m2;
                  ++ _6134;
                  _ptr__6130[safe_add( _6127,_6134 )] = 5;
                  ++ _6134;
                  _ptr__6130[safe_add( safe_add( _6128,_6135 ),(int)1 )] = _6134;
                }
              }
              else
              {
                {
                  if ((_6120 > (int)0))
                  {
                    {
                      _ptr__6130[safe_add( _6127,_6134 )] = 2;
                      _ptr__6132[safe_add( _6129,_6134 )] = 0.0;
                      ++ _6134;
                      _ptr__6130[safe_add( safe_add( _6128,_6135 ),(int)1 )] = _6134;
                    }
                  }
                  {}
                }
              }
              ++ _6135;
            }
          }
          _ptr__6130[safe_add( safe_add( _6123,_6136 ),(int)1 )] = _6135;
        }
      }
    }
  }
  else if(((!_6105) || (!_6092)))
  {
    {
      if ((!_6092))
      {
        {
          int _6141 = _6089;
          int _6142 = _6090;
          int _6143 = _6093;
          int _6144 = _6094;
          int _6145 = _6095;
          int _6146 = _6091;
          int _6147 = _6098;
          int _6148 = _6097;
          int _6149 = _6099;
          int _6150 = _6096;
          _6089 = _6102;
          _6090 = _6103;
          _6093 = _6106;
          _6094 = _6107;
          _6095 = _6108;
          _6091 = _6104;
          _6098 = _6111;
          _6097 = _6110;
          _6099 = _6112;
          _6096 = _6109;
          _6102 = _6141;
          _6103 = _6142;
          _6106 = _6143;
          _6107 = _6144;
          _6108 = _6145;
          _6104 = _6146;
          _6111 = _6147;
          _6110 = _6148;
          _6112 = _6149;
          _6109 = _6150;
        }
      }
      {}
      double _11364;
      bool _11365 = (!_6105);
      if (_11365)
      {
        _11364 = mosek::fusion::p_ExprAdd::_get_impl(::mosek::fusion::ExprAdd::t(_pubthis))->m1;
      }
      else
      {
        _11364 = mosek::fusion::p_ExprAdd::_get_impl(::mosek::fusion::ExprAdd::t(_pubthis))->m2;
      }
      double _6151 = _11364;
      double _11366;
      bool _11367 = (!_6105);
      if (_11367)
      {
        _11366 = mosek::fusion::p_ExprAdd::_get_impl(::mosek::fusion::ExprAdd::t(_pubthis))->m2;
      }
      else
      {
        _11366 = mosek::fusion::p_ExprAdd::_get_impl(::mosek::fusion::ExprAdd::t(_pubthis))->m1;
      }
      double _6152 = _11366;
      int _6153 = _6102;
      int _6154 = safe_add( _6103,_6090 );
      int _6155 = _6100;
      int _6156 = safe_add( _6104,_6091 );
      if (_6116)
      {
        {
          int _11368;
          bool _11369 = (_6104 > (int)0);
          if (_11369)
          {
            _11368 = safe_mul( (int)2,_6103 );
          }
          else
          {
            _11368 = _6103;
          }
          _6156 += _11368;
          int _11370;
          bool _11371 = (_6091 > (int)0);
          if (_11371)
          {
            _11370 = safe_mul( (int)2,_6090 );
          }
          else
          {
            _11370 = _6090;
          }
          _6156 += _11370;
        }
      }
      {}
      _6084->alloc_expr(_6155,_6153,_6154,false,_6156);
      int _6157 = mosek::fusion::p_WorkStack::_get_impl(_6084)->shape_base;
      int _6158 = mosek::fusion::p_WorkStack::_get_impl(_6084)->ptr_base;
      int _6159 = mosek::fusion::p_WorkStack::_get_impl(_6084)->sp_base;
      int _6160 = mosek::fusion::p_WorkStack::_get_impl(_6084)->nidxs_base;
      int _6161 = mosek::fusion::p_WorkStack::_get_impl(_6084)->cof_base;
      int _6162 = mosek::fusion::p_WorkStack::_get_impl(_6084)->code_base;
      int _6163 = mosek::fusion::p_WorkStack::_get_impl(_6084)->codeptr_base;
      int _6164 = mosek::fusion::p_WorkStack::_get_impl(_6084)->cconst_base;
      std::shared_ptr< monty::ndarray< int,1 > > _6165 = mosek::fusion::p_WorkStack::_get_impl(_6084)->i32;
      _checked_ptr_1<int> _ptr__6165(_6165 ? _6165->raw() : nullptr,_6165 ? _6165->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _6166 = mosek::fusion::p_WorkStack::_get_impl(_6084)->i64;
      _checked_ptr_1<long long> _ptr__6166(_6166 ? _6166->raw() : nullptr,_6166 ? _6166->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _6167 = mosek::fusion::p_WorkStack::_get_impl(_6084)->f64;
      _checked_ptr_1<double> _ptr__6167(_6167 ? _6167->raw() : nullptr,_6167 ? _6167->size(0) : 0);
      {
        int _6168 = (int)0;
        int _6169 = (int)0;
        int _6170 = (int)0;
        int _11372 = (int)0;
        int _11373 = _6155;
        for (int _6171 = _11372; _6171 < _11373; ++_6171)
        {
          {
            _ptr__6165[safe_add( _6157,_6171 )] = _ptr__6113[safe_add( _6101,_6171 )];
          }
        }
        _ptr__6165[_6158] = (int)0;
        if ((_6156 > (int)0))
        {
          {
            _ptr__6165[_6163] = (int)0;
          }
        }
        {}
        int _6172 = (int)0;
        int _6173 = (int)0;
        while ( ((_6173 < _6102) || (_6172 < _6089)) )
        {
          {
            if (((_6173 < _6102) && ((_6172 >= _6089) || (_6173 < _ptr__6114[safe_add( _6094,_6172 )]))))
            {
              {
                int _11374 = _ptr__6113[safe_add( _6106,_6173 )];
                int _11375 = _ptr__6113[safe_add( safe_add( _6106,_6173 ),(int)1 )];
                for (int _6174 = _11374; _6174 < _11375; ++_6174)
                {
                  {
                    _ptr__6166[safe_add( _6160,_6170 )] = _ptr__6114[safe_add( _6108,_6174 )];
                    _ptr__6167[safe_add( _6161,_6170 )] = (_ptr__6115[safe_add( _6109,_6174 )] * _6151);
                    if ((_6104 > (int)0))
                    {
                      {
                        int _11376 = _ptr__6113[safe_add( _6111,_6174 )];
                        int _11377 = _ptr__6113[safe_add( safe_add( _6111,_6174 ),(int)1 )];
                        for (int _6175 = _11376; _6175 < _11377; ++_6175)
                        {
                          {
                            _ptr__6165[safe_add( _6162,_6168 )] = _ptr__6113[safe_add( _6110,_6175 )];
                            _ptr__6167[safe_add( _6164,_6168 )] = _ptr__6115[safe_add( _6112,_6175 )];
                            ++ _6168;
                          }
                        }
                        _ptr__6165[safe_add( _6162,_6168 )] = 2;
                        _ptr__6167[safe_add( _6164,_6168 )] = _6151;
                        ++ _6168;
                        _ptr__6165[safe_add( _6162,_6168 )] = 5;
                        ++ _6168;
                        _ptr__6165[safe_add( safe_add( _6163,_6170 ),(int)1 )] = _6168;
                      }
                    }
                    else
                    {
                      {
                        if ((_6156 > (int)0))
                        {
                          {
                            _ptr__6165[safe_add( _6162,_6168 )] = 2;
                            _ptr__6167[safe_add( _6164,_6168 )] = 0.0;
                            ++ _6168;
                            _ptr__6165[safe_add( safe_add( _6163,_6170 ),(int)1 )] = _6168;
                          }
                        }
                        {}
                      }
                    }
                    ++ _6170;
                  }
                }
                _ptr__6165[safe_add( safe_add( _6158,_6169 ),(int)1 )] = _6170;
                ++ _6173;
              }
            }
            else if(((_6172 < _6089) && ((_6173 >= _6102) || (_6173 > _ptr__6114[safe_add( _6094,_6172 )]))))
            {
              {
                int _11378 = _ptr__6113[safe_add( _6093,_6172 )];
                int _11379 = _ptr__6113[safe_add( safe_add( _6093,_6172 ),(int)1 )];
                for (int _6176 = _11378; _6176 < _11379; ++_6176)
                {
                  {
                    _ptr__6166[safe_add( _6160,_6170 )] = _ptr__6114[safe_add( _6095,_6176 )];
                    _ptr__6167[safe_add( _6161,_6170 )] = (_ptr__6115[safe_add( _6096,_6176 )] * _6152);
                    if ((_6091 > (int)0))
                    {
                      {
                        int _11380 = _ptr__6113[safe_add( _6098,_6176 )];
                        int _11381 = _ptr__6113[safe_add( safe_add( _6098,_6176 ),(int)1 )];
                        for (int _6177 = _11380; _6177 < _11381; ++_6177)
                        {
                          {
                            _ptr__6165[safe_add( _6162,_6168 )] = _ptr__6113[safe_add( _6097,_6177 )];
                            _ptr__6167[safe_add( _6164,_6168 )] = _ptr__6115[safe_add( _6099,_6177 )];
                            ++ _6168;
                          }
                        }
                        _ptr__6165[safe_add( _6162,_6168 )] = 2;
                        _ptr__6167[safe_add( _6164,_6168 )] = _6152;
                        ++ _6168;
                        _ptr__6165[safe_add( _6162,_6168 )] = 5;
                        ++ _6168;
                        _ptr__6165[safe_add( safe_add( _6163,_6170 ),(int)1 )] = _6168;
                      }
                    }
                    else
                    {
                      {
                        if ((_6156 > (int)0))
                        {
                          {
                            _ptr__6165[safe_add( _6162,_6168 )] = 2;
                            _ptr__6167[safe_add( _6164,_6168 )] = 0.0;
                            ++ _6168;
                            _ptr__6165[safe_add( safe_add( _6163,_6170 ),(int)1 )] = _6168;
                          }
                        }
                        {}
                      }
                    }
                    ++ _6170;
                  }
                }
                _ptr__6165[safe_add( safe_add( _6158,_6169 ),(int)1 )] = _6170;
                ++ _6172;
              }
            }
            else
            {
              {
                int _11382 = _ptr__6113[safe_add( _6106,_6173 )];
                int _11383 = _ptr__6113[safe_add( safe_add( _6106,_6173 ),(int)1 )];
                for (int _6178 = _11382; _6178 < _11383; ++_6178)
                {
                  {
                    _ptr__6166[safe_add( _6160,_6170 )] = _ptr__6114[safe_add( _6108,_6178 )];
                    _ptr__6167[safe_add( _6161,_6170 )] = (_ptr__6115[safe_add( _6109,_6178 )] * _6151);
                    if ((_6104 > (int)0))
                    {
                      {
                        int _11384 = _ptr__6113[safe_add( _6111,_6178 )];
                        int _11385 = _ptr__6113[safe_add( safe_add( _6111,_6178 ),(int)1 )];
                        for (int _6179 = _11384; _6179 < _11385; ++_6179)
                        {
                          {
                            _ptr__6165[safe_add( _6162,_6168 )] = _ptr__6113[safe_add( _6110,_6179 )];
                            _ptr__6167[safe_add( _6164,_6168 )] = _ptr__6115[safe_add( _6112,_6179 )];
                            ++ _6168;
                          }
                        }
                        _ptr__6165[safe_add( _6162,_6168 )] = 2;
                        _ptr__6167[safe_add( _6164,_6168 )] = _6151;
                        ++ _6168;
                        _ptr__6165[safe_add( _6162,_6168 )] = 5;
                        ++ _6168;
                        _ptr__6165[safe_add( safe_add( _6163,_6170 ),(int)1 )] = _6168;
                      }
                    }
                    else
                    {
                      {
                        if ((_6156 > (int)0))
                        {
                          {
                            _ptr__6165[safe_add( _6162,_6168 )] = 2;
                            _ptr__6167[safe_add( _6164,_6168 )] = 0.0;
                            ++ _6168;
                            _ptr__6165[safe_add( safe_add( _6163,_6170 ),(int)1 )] = _6168;
                          }
                        }
                        {}
                      }
                    }
                    ++ _6170;
                  }
                }
                int _11386 = _ptr__6113[safe_add( _6093,_6172 )];
                int _11387 = _ptr__6113[safe_add( safe_add( _6093,_6172 ),(int)1 )];
                for (int _6180 = _11386; _6180 < _11387; ++_6180)
                {
                  {
                    _ptr__6166[safe_add( _6160,_6170 )] = _ptr__6114[safe_add( _6095,_6180 )];
                    _ptr__6167[safe_add( _6161,_6170 )] = (_ptr__6115[safe_add( _6096,_6180 )] * _6152);
                    if ((_6091 > (int)0))
                    {
                      {
                        int _11388 = _ptr__6113[safe_add( _6098,_6180 )];
                        int _11389 = _ptr__6113[safe_add( safe_add( _6098,_6180 ),(int)1 )];
                        for (int _6181 = _11388; _6181 < _11389; ++_6181)
                        {
                          {
                            _ptr__6165[safe_add( _6162,_6168 )] = _ptr__6113[safe_add( _6097,_6181 )];
                            _ptr__6167[safe_add( _6164,_6168 )] = _ptr__6115[safe_add( _6099,_6181 )];
                            ++ _6168;
                          }
                        }
                        _ptr__6165[safe_add( _6162,_6168 )] = 2;
                        _ptr__6167[safe_add( _6164,_6168 )] = _6152;
                        ++ _6168;
                        _ptr__6165[safe_add( _6162,_6168 )] = 5;
                        ++ _6168;
                        _ptr__6165[safe_add( safe_add( _6163,_6170 ),(int)1 )] = _6168;
                      }
                    }
                    else
                    {
                      {
                        if ((_6156 > (int)0))
                        {
                          {
                            _ptr__6165[safe_add( _6162,_6168 )] = 2;
                            _ptr__6167[safe_add( _6164,_6168 )] = 0.0;
                            ++ _6168;
                            _ptr__6165[safe_add( safe_add( _6163,_6170 ),(int)1 )] = _6168;
                          }
                        }
                        {}
                      }
                    }
                    ++ _6170;
                  }
                }
                _ptr__6165[safe_add( safe_add( _6158,_6169 ),(int)1 )] = _6170;
                ++ _6173;
                ++ _6172;
              }
            }
            ++ _6169;
          }
        }
        if ((_6170 != _6154))
        {
          {
            throw ::mosek::fusion::UnexpectedError(std::string ("Internal: invalid nnz"));
          }
        }
        {}
        if ((_6168 != _6156))
        {
          {
            throw ::mosek::fusion::UnexpectedError(std::string ("Internal: invalid codei"));
          }
        }
        {}
      }
    }
  }
  else
  {
    {
      int _6182 = safe_add( _6103,_6090 );
      int _6183 = (int)0;
      int _6184 = _6100;
      int _6185 = safe_add( _6104,_6091 );
      if (_6116)
      {
        {
          int _11390;
          bool _11391 = (_6104 > (int)0);
          if (_11391)
          {
            _11390 = safe_mul( (int)2,_6103 );
          }
          else
          {
            _11390 = _6103;
          }
          _6185 += _11390;
          int _11392;
          bool _11393 = (_6091 > (int)0);
          if (_11393)
          {
            _11392 = safe_mul( (int)2,_6090 );
          }
          else
          {
            _11392 = _6090;
          }
          _6185 += _11392;
        }
      }
      {}
      long long _6186 = (long long)1;
      int _11394 = (int)0;
      int _11395 = _6184;
      for (int _6187 = _11394; _6187 < _11395; ++_6187)
      {
        {
          _6186 *= _ptr__6113[safe_add( _6101,_6187 )];
        }
      }
      {
        int _6188 = (int)0;
        int _6189 = (int)0;
        while ( ((_6189 < _6102) && (_6188 < _6089)) )
        {
          {
            if ((_ptr__6114[safe_add( _6107,_6189 )] < _ptr__6114[safe_add( _6094,_6188 )]))
            {
              {
                ++ _6183;
                ++ _6189;
              }
            }
            else if((_ptr__6114[safe_add( _6107,_6189 )] > _ptr__6114[safe_add( _6094,_6188 )]))
            {
              {
                ++ _6183;
                ++ _6188;
              }
            }
            else
            {
              {
                ++ _6183;
                ++ _6189;
                ++ _6188;
              }
            }
          }
        }
        _6183 += (safe_add( (_6102 - _6189),_6089 ) - _6188);
      }
      bool _6190 = (_6183 < _6186);
      _6084->alloc_expr(_6184,_6183,_6182,_6190,_6185);
      int _6191 = mosek::fusion::p_WorkStack::_get_impl(_6084)->shape_base;
      int _6192 = mosek::fusion::p_WorkStack::_get_impl(_6084)->ptr_base;
      int _11396;
      bool _11397 = _6190;
      if (_11397)
      {
        _11396 = mosek::fusion::p_WorkStack::_get_impl(_6084)->sp_base;
      }
      else
      {
        _11396 = _6084->alloci64(_6183);
      }
      int _6193 = _11396;
      int _6194 = mosek::fusion::p_WorkStack::_get_impl(_6084)->nidxs_base;
      int _6195 = mosek::fusion::p_WorkStack::_get_impl(_6084)->cof_base;
      int _6196 = mosek::fusion::p_WorkStack::_get_impl(_6084)->code_base;
      int _6197 = mosek::fusion::p_WorkStack::_get_impl(_6084)->codeptr_base;
      int _6198 = mosek::fusion::p_WorkStack::_get_impl(_6084)->cconst_base;
      std::shared_ptr< monty::ndarray< int,1 > > _6199 = mosek::fusion::p_WorkStack::_get_impl(_6084)->i32;
      _checked_ptr_1<int> _ptr__6199(_6199 ? _6199->raw() : nullptr,_6199 ? _6199->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _6200 = mosek::fusion::p_WorkStack::_get_impl(_6084)->i64;
      _checked_ptr_1<long long> _ptr__6200(_6200 ? _6200->raw() : nullptr,_6200 ? _6200->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _6201 = mosek::fusion::p_WorkStack::_get_impl(_6084)->f64;
      _checked_ptr_1<double> _ptr__6201(_6201 ? _6201->raw() : nullptr,_6201 ? _6201->size(0) : 0);
      int _11398 = (int)0;
      int _11399 = _6184;
      for (int _6202 = _11398; _6202 < _11399; ++_6202)
      {
        {
          _ptr__6199[safe_add( _6191,_6202 )] = _ptr__6113[safe_add( _6101,_6202 )];
        }
      }
      {
        _ptr__6199[_6192] = (int)0;
        if ((_6185 > (int)0))
        {
          {
            _ptr__6199[_6197] = (int)0;
          }
        }
        {}
        int _6203 = (int)0;
        int _6204 = (int)0;
        int _6205 = (int)0;
        int _6206 = (int)0;
        int _6207 = (int)0;
        while ( ((_6207 < _6102) && (_6206 < _6089)) )
        {
          {
            if ((_ptr__6114[safe_add( _6107,_6207 )] < _ptr__6114[safe_add( _6094,_6206 )]))
            {
              {
                int _11400 = _ptr__6113[safe_add( _6106,_6207 )];
                int _11401 = _ptr__6113[safe_add( safe_add( _6106,_6207 ),(int)1 )];
                for (int _6208 = _11400; _6208 < _11401; ++_6208)
                {
                  {
                    _ptr__6200[safe_add( _6194,_6205 )] = _ptr__6114[safe_add( _6108,_6208 )];
                    _ptr__6201[safe_add( _6195,_6205 )] = (m1 * _ptr__6115[safe_add( _6109,_6208 )]);
                    if ((_6104 > (int)0))
                    {
                      {
                        int _11402 = _ptr__6113[safe_add( _6111,_6208 )];
                        int _11403 = _ptr__6113[safe_add( safe_add( _6111,_6208 ),(int)1 )];
                        for (int _6209 = _11402; _6209 < _11403; ++_6209)
                        {
                          {
                            _ptr__6199[safe_add( _6196,_6203 )] = _ptr__6113[safe_add( _6110,_6209 )];
                            _ptr__6201[safe_add( _6198,_6203 )] = _ptr__6115[safe_add( _6112,_6209 )];
                            ++ _6203;
                          }
                        }
                        _ptr__6199[safe_add( _6196,_6203 )] = 2;
                        _ptr__6201[safe_add( _6198,_6203 )] = m1;
                        ++ _6203;
                        _ptr__6199[safe_add( _6196,_6203 )] = 5;
                        ++ _6203;
                        _ptr__6199[safe_add( safe_add( _6197,_6205 ),(int)1 )] = _6203;
                      }
                    }
                    else
                    {
                      {
                        if ((_6185 > (int)0))
                        {
                          {
                            _ptr__6199[safe_add( _6196,_6203 )] = 2;
                            _ptr__6201[safe_add( _6198,_6203 )] = (int)0;
                            ++ _6203;
                            _ptr__6199[safe_add( safe_add( _6197,_6205 ),(int)1 )] = _6203;
                          }
                        }
                        {}
                      }
                    }
                    ++ _6205;
                  }
                }
                _ptr__6200[safe_add( _6193,_6204 )] = _ptr__6114[safe_add( _6107,_6207 )];
                _ptr__6199[safe_add( safe_add( _6192,_6204 ),(int)1 )] = _6205;
                ++ _6204;
                ++ _6207;
              }
            }
            else if((_ptr__6114[safe_add( _6094,_6206 )] < _ptr__6114[safe_add( _6107,_6207 )]))
            {
              {
                int _11404 = _ptr__6113[safe_add( _6093,_6206 )];
                int _11405 = _ptr__6113[safe_add( safe_add( _6093,_6206 ),(int)1 )];
                for (int _6210 = _11404; _6210 < _11405; ++_6210)
                {
                  {
                    _ptr__6200[safe_add( _6194,_6205 )] = _ptr__6114[safe_add( _6095,_6210 )];
                    _ptr__6201[safe_add( _6195,_6205 )] = (m2 * _ptr__6115[safe_add( _6096,_6210 )]);
                    if ((_6091 > (int)0))
                    {
                      {
                        int _11406 = _ptr__6113[safe_add( _6098,_6210 )];
                        int _11407 = _ptr__6113[safe_add( safe_add( _6098,_6210 ),(int)1 )];
                        for (int _6211 = _11406; _6211 < _11407; ++_6211)
                        {
                          {
                            _ptr__6199[safe_add( _6196,_6203 )] = _ptr__6113[safe_add( _6097,_6211 )];
                            _ptr__6201[safe_add( _6198,_6203 )] = _ptr__6115[safe_add( _6099,_6211 )];
                            ++ _6203;
                          }
                        }
                        _ptr__6199[safe_add( _6196,_6203 )] = 2;
                        _ptr__6201[safe_add( _6198,_6203 )] = m2;
                        ++ _6203;
                        _ptr__6199[safe_add( _6196,_6203 )] = 5;
                        ++ _6203;
                        _ptr__6199[safe_add( safe_add( _6197,_6205 ),(int)1 )] = _6203;
                      }
                    }
                    else
                    {
                      {
                        if ((_6185 > (int)0))
                        {
                          {
                            _ptr__6199[safe_add( _6196,_6203 )] = 2;
                            _ptr__6201[safe_add( _6198,_6203 )] = (int)0;
                            ++ _6203;
                            _ptr__6199[safe_add( safe_add( _6197,_6205 ),(int)1 )] = _6203;
                          }
                        }
                        {}
                      }
                    }
                    ++ _6205;
                  }
                }
                _ptr__6200[safe_add( _6193,_6204 )] = _ptr__6114[safe_add( _6094,_6206 )];
                _ptr__6199[safe_add( safe_add( _6192,_6204 ),(int)1 )] = _6205;
                ++ _6204;
                ++ _6206;
              }
            }
            else
            {
              {
                int _11408 = _ptr__6113[safe_add( _6106,_6207 )];
                int _11409 = _ptr__6113[safe_add( safe_add( _6106,_6207 ),(int)1 )];
                for (int _6212 = _11408; _6212 < _11409; ++_6212)
                {
                  {
                    _ptr__6200[safe_add( _6194,_6205 )] = _ptr__6114[safe_add( _6108,_6212 )];
                    _ptr__6201[safe_add( _6195,_6205 )] = (m1 * _ptr__6115[safe_add( _6109,_6212 )]);
                    if ((_6104 > (int)0))
                    {
                      {
                        int _11410 = _ptr__6113[safe_add( _6111,_6212 )];
                        int _11411 = _ptr__6113[safe_add( safe_add( _6111,_6212 ),(int)1 )];
                        for (int _6213 = _11410; _6213 < _11411; ++_6213)
                        {
                          {
                            _ptr__6199[safe_add( _6196,_6203 )] = _ptr__6113[safe_add( _6110,_6213 )];
                            _ptr__6201[safe_add( _6198,_6203 )] = _ptr__6115[safe_add( _6112,_6213 )];
                            ++ _6203;
                          }
                        }
                        _ptr__6199[safe_add( _6196,_6203 )] = 2;
                        _ptr__6201[safe_add( _6198,_6203 )] = m1;
                        ++ _6203;
                        _ptr__6199[safe_add( _6196,_6203 )] = 5;
                        ++ _6203;
                        _ptr__6199[safe_add( safe_add( _6197,_6205 ),(int)1 )] = _6203;
                      }
                    }
                    else
                    {
                      {
                        if ((_6185 > (int)0))
                        {
                          {
                            _ptr__6199[safe_add( _6196,_6203 )] = 2;
                            _ptr__6201[safe_add( _6198,_6203 )] = (int)0;
                            ++ _6203;
                            _ptr__6199[safe_add( safe_add( _6197,_6205 ),(int)1 )] = _6203;
                          }
                        }
                        {}
                      }
                    }
                    ++ _6205;
                  }
                }
                int _11412 = _ptr__6113[safe_add( _6093,_6206 )];
                int _11413 = _ptr__6113[safe_add( safe_add( _6093,_6206 ),(int)1 )];
                for (int _6214 = _11412; _6214 < _11413; ++_6214)
                {
                  {
                    _ptr__6200[safe_add( _6194,_6205 )] = _ptr__6114[safe_add( _6095,_6214 )];
                    _ptr__6201[safe_add( _6195,_6205 )] = (m2 * _ptr__6115[safe_add( _6096,_6214 )]);
                    if ((_6091 > (int)0))
                    {
                      {
                        int _11414 = _ptr__6113[safe_add( _6098,_6214 )];
                        int _11415 = _ptr__6113[safe_add( safe_add( _6098,_6214 ),(int)1 )];
                        for (int _6215 = _11414; _6215 < _11415; ++_6215)
                        {
                          {
                            _ptr__6199[safe_add( _6196,_6203 )] = _ptr__6113[safe_add( _6097,_6215 )];
                            _ptr__6201[safe_add( _6198,_6203 )] = _ptr__6115[safe_add( _6099,_6215 )];
                            ++ _6203;
                          }
                        }
                        _ptr__6199[safe_add( _6196,_6203 )] = 2;
                        _ptr__6201[safe_add( _6198,_6203 )] = m2;
                        ++ _6203;
                        _ptr__6199[safe_add( _6196,_6203 )] = 5;
                        ++ _6203;
                        _ptr__6199[safe_add( safe_add( _6197,_6205 ),(int)1 )] = _6203;
                      }
                    }
                    else
                    {
                      {
                        if ((_6185 > (int)0))
                        {
                          {
                            _ptr__6199[safe_add( _6196,_6203 )] = 2;
                            _ptr__6201[safe_add( _6198,_6203 )] = (int)0;
                            ++ _6203;
                            _ptr__6199[safe_add( safe_add( _6197,_6205 ),(int)1 )] = _6203;
                          }
                        }
                        {}
                      }
                    }
                    ++ _6205;
                  }
                }
                _ptr__6200[safe_add( _6193,_6204 )] = _ptr__6114[safe_add( _6107,_6207 )];
                _ptr__6199[safe_add( safe_add( _6192,_6204 ),(int)1 )] = _6205;
                ++ _6204;
                ++ _6207;
                ++ _6206;
              }
            }
          }
        }
        while ( (_6207 < _6102) )
        {
          {
            int _11416 = _ptr__6113[safe_add( _6106,_6207 )];
            int _11417 = _ptr__6113[safe_add( safe_add( _6106,_6207 ),(int)1 )];
            for (int _6216 = _11416; _6216 < _11417; ++_6216)
            {
              {
                _ptr__6200[safe_add( _6194,_6205 )] = _ptr__6114[safe_add( _6108,_6216 )];
                _ptr__6201[safe_add( _6195,_6205 )] = (m1 * _ptr__6115[safe_add( _6109,_6216 )]);
                if ((_6104 > (int)0))
                {
                  {
                    int _11418 = _ptr__6113[safe_add( _6111,_6216 )];
                    int _11419 = _ptr__6113[safe_add( safe_add( _6111,_6216 ),(int)1 )];
                    for (int _6217 = _11418; _6217 < _11419; ++_6217)
                    {
                      {
                        _ptr__6199[safe_add( _6196,_6203 )] = _ptr__6113[safe_add( _6110,_6217 )];
                        _ptr__6201[safe_add( _6198,_6203 )] = _ptr__6115[safe_add( _6112,_6217 )];
                        ++ _6203;
                      }
                    }
                    _ptr__6199[safe_add( _6196,_6203 )] = 2;
                    _ptr__6201[safe_add( _6198,_6203 )] = m1;
                    ++ _6203;
                    _ptr__6199[safe_add( _6196,_6203 )] = 5;
                    ++ _6203;
                    _ptr__6199[safe_add( safe_add( _6197,_6205 ),(int)1 )] = _6203;
                  }
                }
                else
                {
                  {
                    if ((_6185 > (int)0))
                    {
                      {
                        _ptr__6199[safe_add( _6196,_6203 )] = 2;
                        _ptr__6201[safe_add( _6198,_6203 )] = (int)0;
                        ++ _6203;
                        _ptr__6199[safe_add( safe_add( _6197,_6205 ),(int)1 )] = _6203;
                      }
                    }
                    {}
                  }
                }
                ++ _6205;
              }
            }
            _ptr__6200[safe_add( _6193,_6204 )] = _ptr__6114[safe_add( _6107,_6207 )];
            _ptr__6199[safe_add( safe_add( _6192,_6204 ),(int)1 )] = _6205;
            ++ _6204;
            ++ _6207;
          }
        }
        while ( (_6206 < _6089) )
        {
          {
            int _11420 = _ptr__6113[safe_add( _6093,_6206 )];
            int _11421 = _ptr__6113[safe_add( safe_add( _6093,_6206 ),(int)1 )];
            for (int _6218 = _11420; _6218 < _11421; ++_6218)
            {
              {
                _ptr__6200[safe_add( _6194,_6205 )] = _ptr__6114[safe_add( _6095,_6218 )];
                _ptr__6201[safe_add( _6195,_6205 )] = (m2 * _ptr__6115[safe_add( _6096,_6218 )]);
                if ((_6091 > (int)0))
                {
                  {
                    int _11422 = _ptr__6113[safe_add( _6098,_6218 )];
                    int _11423 = _ptr__6113[safe_add( safe_add( _6098,_6218 ),(int)1 )];
                    for (int _6219 = _11422; _6219 < _11423; ++_6219)
                    {
                      {
                        _ptr__6199[safe_add( _6196,_6203 )] = _ptr__6113[safe_add( _6097,_6219 )];
                        _ptr__6201[safe_add( _6198,_6203 )] = _ptr__6115[safe_add( _6099,_6219 )];
                        ++ _6203;
                      }
                    }
                    _ptr__6199[safe_add( _6196,_6203 )] = 2;
                    _ptr__6201[safe_add( _6198,_6203 )] = m2;
                    ++ _6203;
                    _ptr__6199[safe_add( _6196,_6203 )] = 5;
                    ++ _6203;
                    _ptr__6199[safe_add( safe_add( _6197,_6205 ),(int)1 )] = _6203;
                  }
                }
                else
                {
                  {
                    if ((_6185 > (int)0))
                    {
                      {
                        _ptr__6199[safe_add( _6196,_6203 )] = 2;
                        _ptr__6201[safe_add( _6198,_6203 )] = (int)0;
                        ++ _6203;
                        _ptr__6199[safe_add( safe_add( _6197,_6205 ),(int)1 )] = _6203;
                      }
                    }
                    {}
                  }
                }
                ++ _6205;
              }
            }
            _ptr__6200[safe_add( _6193,_6204 )] = _ptr__6114[safe_add( _6094,_6206 )];
            _ptr__6199[safe_add( safe_add( _6192,_6204 ),(int)1 )] = _6205;
            ++ _6204;
            ++ _6206;
          }
        }
      }
      if ((!_6190))
      {
        {
          _6084->popi64(_6183);
        }
      }
      {}
    }
  }
}
std::string mosek::fusion::ExprAdd :: toString() { return mosek::fusion::p_ExprAdd::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprAdd::toString(){
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprAdd("))->__mosek_2fusion_2Utils_2StringBuffer__a(e1->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(e2->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("; "))->__mosek_2fusion_2Utils_2StringBuffer__a(m1)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(m2)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
void mosek::fusion::p_ExprAdd::destroy(){e2.reset();e1.reset();}void mosek::fusion::ExprAdd::destroy() { mosek::fusion::p_ExprAdd::_get_impl(this)->destroy(); }mosek::fusion::ExprWSum::ExprWSum(mosek::fusion::p_ExprWSum *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprWSum()" << this << std::endl; */ }mosek::fusion::ExprWSum::~ExprWSum() {  /* std::cout << "~ExprWSum()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprWSum::p_ExprWSum  (::mosek::fusion::ExprWSum * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprWSum::t mosek::fusion::p_ExprWSum::_new_ExprWSum  (std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _6220,    std::shared_ptr< monty::ndarray< double,1 > > _6221){ return new mosek::fusion::ExprWSum(_6220,_6221); }mosek::fusion::ExprWSum::ExprWSum  (std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _6220,    std::shared_ptr< monty::ndarray< double,1 > > _6221) :    ExprWSum(new mosek::fusion::p_ExprWSum(this)){ mosek::fusion::p_ExprWSum::_get_impl(this)->_initialize(_6220,_6221); }void mosek::fusion::p_ExprWSum::_initialize  (std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _6220,    std::shared_ptr< monty::ndarray< double,1 > > _6221){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<double> _ptr__6221(_6221 ? _6221->raw() : nullptr, _6221 ? _6221->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(((*_6220)((int)0))->getShape());
    if (((int)((_6221)->size(0)) != (int)((_6220)->size(0))))
    {
      {
        throw ::mosek::fusion::LengthError(std::string ("Mismatching weights and expressions array lengths"));
      }
    }
    {}
    mosek::fusion::p_ExprWSum::_get_impl(::mosek::fusion::ExprWSum::t(_pubthis))->w = ::mosek::fusion::Utils::Tools::arraycopy(_6221);
    std::shared_ptr< monty::ndarray< int,1 > > _6222 = ((*_6220)((int)0))->getShape();
    _checked_ptr_1<int> _ptr__6222(_6222 ? _6222->raw() : nullptr,_6222 ? _6222->size(0) : 0);
    int _6223 = (int)((_6222)->size(0));
    int _11424 = (int)1;
    int _11425 = (int)((_6220)->size(0));
    for (int _6224 = _11424; _6224 < _11425; ++_6224)
    {
      {
        std::shared_ptr< monty::ndarray< int,1 > > _6225 = ((*_6220)(_6224))->getShape();
        _checked_ptr_1<int> _ptr__6225(_6225 ? _6225->raw() : nullptr,_6225 ? _6225->size(0) : 0);
        if ((_6223 != (int)((_6225)->size(0))))
        {
          {
            throw ::mosek::fusion::DimensionError(std::string ("Mismatching expression shapes"));
          }
        }
        else
        {
          {
            int _11426 = (int)0;
            int _11427 = _6223;
            for (int _6226 = _11426; _6226 < _11427; ++_6226)
            {
              {
                if ((_ptr__6222[_6226] != _ptr__6225[_6226]))
                {
                  {
                    throw ::mosek::fusion::DimensionError(std::string ("Mismatching expression shapes"));
                  }
                }
                {}
              }
            }
          }
        }
      }
    }
    std::vector<monty::rc_ptr< ::mosek::fusion::Expression >> _11428;
    for (int _6227 = (int)0, _11429 = (int)((_6220)->size(0)); _6227 < _11429 ; ++_6227)
    {
      _11428.push_back(((*_6220)(_6227)));
    }
    auto _11430 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >(monty::shape(_11428.size()),_11428.begin(),_11428.end()));
    mosek::fusion::p_ExprWSum::_get_impl(::mosek::fusion::ExprWSum::t(_pubthis))->es = _11430;
  }
}void mosek::fusion::ExprWSum :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _6228,monty::rc_ptr< ::mosek::fusion::WorkStack > _6229,monty::rc_ptr< ::mosek::fusion::WorkStack > _6230) { mosek::fusion::p_ExprWSum::_get_impl(this)->eval(_6228,_6229,_6230); }void mosek::fusion::p_ExprWSum::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _6228,monty::rc_ptr< ::mosek::fusion::WorkStack > _6229,monty::rc_ptr< ::mosek::fusion::WorkStack > _6230){
  int _6231 = (int)((es)->size(0));
  int _11431 = (int)0;
  int _11432 = _6231;
  for (int _6232 = _11431; _6232 < _11432; ++_6232)
  {
    {
      ((*es)(_6232))->eval(_6229,_6228,_6230);
    }
  }
  std::shared_ptr< monty::ndarray< int,1 > > _6233 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6231)));
  _checked_ptr_1<int> _ptr__6233(_6233 ? _6233->raw() : nullptr,_6233 ? _6233->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _6234 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6231)));
  _checked_ptr_1<int> _ptr__6234(_6234 ? _6234->raw() : nullptr,_6234 ? _6234->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _6235 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6231)));
  _checked_ptr_1<int> _ptr__6235(_6235 ? _6235->raw() : nullptr,_6235 ? _6235->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _6236 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6231)));
  _checked_ptr_1<int> _ptr__6236(_6236 ? _6236->raw() : nullptr,_6236 ? _6236->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _6237 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6231)));
  _checked_ptr_1<int> _ptr__6237(_6237 ? _6237->raw() : nullptr,_6237 ? _6237->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _6238 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6231)));
  _checked_ptr_1<int> _ptr__6238(_6238 ? _6238->raw() : nullptr,_6238 ? _6238->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _6239 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6231)));
  _checked_ptr_1<int> _ptr__6239(_6239 ? _6239->raw() : nullptr,_6239 ? _6239->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _6240 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6231)));
  _checked_ptr_1<int> _ptr__6240(_6240 ? _6240->raw() : nullptr,_6240 ? _6240->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _6241 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6231)));
  _checked_ptr_1<int> _ptr__6241(_6241 ? _6241->raw() : nullptr,_6241 ? _6241->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _6242 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6231)));
  _checked_ptr_1<int> _ptr__6242(_6242 ? _6242->raw() : nullptr,_6242 ? _6242->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _6243 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6231)));
  _checked_ptr_1<int> _ptr__6243(_6243 ? _6243->raw() : nullptr,_6243 ? _6243->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _6244 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6231)));
  _checked_ptr_1<int> _ptr__6244(_6244 ? _6244->raw() : nullptr,_6244 ? _6244->size(0) : 0);
  std::shared_ptr< monty::ndarray< bool,1 > > _6245 = std::shared_ptr< monty::ndarray< bool,1 > >(new monty::ndarray< bool,1 >(monty::shape(_6231)));
  int _11433 = (int)0;
  int _11434 = _6231;
  for (int _6246 = _11433; _6246 < _11434; ++_6246)
  {
    {
      _6229->pop_expr();
      _ptr__6233[((_6231 - (int)1) - _6246)] = mosek::fusion::p_WorkStack::_get_impl(_6229)->nd;
      _ptr__6234[((_6231 - (int)1) - _6246)] = mosek::fusion::p_WorkStack::_get_impl(_6229)->nelem;
      _ptr__6235[((_6231 - (int)1) - _6246)] = mosek::fusion::p_WorkStack::_get_impl(_6229)->nnz;
      _ptr__6236[((_6231 - (int)1) - _6246)] = mosek::fusion::p_WorkStack::_get_impl(_6229)->ncodeatom;
      _ptr__6237[((_6231 - (int)1) - _6246)] = mosek::fusion::p_WorkStack::_get_impl(_6229)->ptr_base;
      _ptr__6239[((_6231 - (int)1) - _6246)] = mosek::fusion::p_WorkStack::_get_impl(_6229)->sp_base;
      _ptr__6238[((_6231 - (int)1) - _6246)] = mosek::fusion::p_WorkStack::_get_impl(_6229)->nidxs_base;
      _ptr__6240[((_6231 - (int)1) - _6246)] = mosek::fusion::p_WorkStack::_get_impl(_6229)->cof_base;
      _ptr__6241[((_6231 - (int)1) - _6246)] = mosek::fusion::p_WorkStack::_get_impl(_6229)->shape_base;
      _ptr__6242[((_6231 - (int)1) - _6246)] = mosek::fusion::p_WorkStack::_get_impl(_6229)->code_base;
      _ptr__6243[((_6231 - (int)1) - _6246)] = mosek::fusion::p_WorkStack::_get_impl(_6229)->codeptr_base;
      _ptr__6244[((_6231 - (int)1) - _6246)] = mosek::fusion::p_WorkStack::_get_impl(_6229)->cconst_base;
      ((*_6245)(((_6231 - (int)1) - _6246))) = mosek::fusion::p_WorkStack::_get_impl(_6229)->hassp;
    }
  }
  std::shared_ptr< monty::ndarray< int,1 > > _6247 = mosek::fusion::p_WorkStack::_get_impl(_6229)->i32;
  _checked_ptr_1<int> _ptr__6247(_6247 ? _6247->raw() : nullptr,_6247 ? _6247->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _6248 = mosek::fusion::p_WorkStack::_get_impl(_6229)->i64;
  _checked_ptr_1<long long> _ptr__6248(_6248 ? _6248->raw() : nullptr,_6248 ? _6248->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _6249 = mosek::fusion::p_WorkStack::_get_impl(_6229)->f64;
  _checked_ptr_1<double> _ptr__6249(_6249 ? _6249->raw() : nullptr,_6249 ? _6249->size(0) : 0);
  {
    bool _6250 = true;
    int _11435 = (int)1;
    int _11436 = _6231;
    for (int _6251 = _11435; _6251 < _11436; ++_6251)
    {
      {
        _6250 = (_6250 && (_ptr__6233[(int)0] == _ptr__6233[_6251]));
        int _11437 = (int)0;
        int _11438 = _ptr__6233[(int)0];
        for (int _6252 = _11437; _6252 < _11438; ++_6252)
        {
          {
            _6250 = (_6250 && (_ptr__6247[safe_add( _ptr__6241[(int)0],_6252 )] == _ptr__6247[safe_add( _ptr__6241[_6251],_6252 )]));
          }
        }
      }
    }
    if ((!_6250))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand shapes"));
      }
    }
    {}
  }
  std::vector<int> _11439;
  for (int _6254 = (int)0, _11440 = _ptr__6233[(int)0]; _6254 < _11440 ; ++_6254)
  {
    _11439.push_back(_ptr__6247[safe_add( _ptr__6241[(int)0],_6254 )]);
  }
  auto _11441 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_11439.size()),_11439.begin(),_11439.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _6253 = _11441;
  _checked_ptr_1<int> _ptr__6253(_6253 ? _6253->raw() : nullptr,_6253 ? _6253->size(0) : 0);
  bool _6255 = false;
  int _11442 = (int)0;
  int _11443 = _6231;
  for (int _6256 = _11442; _6256 < _11443; ++_6256)
  {
    {
      if ((!((*_6245)(_6256))))
      {
        {
          _6255 = true;
        }
      }
      {}
    }
  }
  bool _6257 = false;
  int _11444 = (int)0;
  int _11445 = _6231;
  for (int _6258 = _11444; _6258 < _11445; ++_6258)
  {
    {
      if ((_ptr__6236[_6258] > (int)0))
      {
        {
          _6257 = true;
        }
      }
      {}
    }
  }
  int _6259 = (int)0;
  int _6260 = (int)0;
  int _6261 = (int)0;
  if (_6255)
  {
    {
      _6260 = (int)::mosek::fusion::p_Set::size(_6253);
      int _11446 = (int)0;
      int _11447 = _6231;
      for (int _6262 = _11446; _6262 < _11447; ++_6262)
      {
        {
          _6261 += _ptr__6235[_6262];
          if (_6257)
          {
            {
              int _11448;
              bool _11449 = (_ptr__6236[_6262] > (int)0);
              if (_11449)
              {
                _11448 = safe_add( _ptr__6236[_6262],safe_mul( (int)2,_ptr__6235[_6262] ) );
              }
              else
              {
                _11448 = _ptr__6235[_6262];
              }
              _6259 += _11448;
            }
          }
          {}
        }
      }
    }
  }
  else
  {
    {
      bool _6263 = false;
      std::shared_ptr< monty::ndarray< int,1 > > _6264 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6231)));
      _checked_ptr_1<int> _ptr__6264(_6264 ? _6264->raw() : nullptr,_6264 ? _6264->size(0) : 0);
      int _11450 = (int)0;
      int _11451 = _6231;
      for (int _6265 = _11450; _6265 < _11451; ++_6265)
      {
        {
          _6261 += _ptr__6235[_6265];
          if (_6257)
          {
            {
              int _11452;
              bool _11453 = (_ptr__6236[_6265] > (int)0);
              if (_11453)
              {
                _11452 = safe_add( _ptr__6236[_6265],safe_mul( (int)2,_ptr__6235[_6265] ) );
              }
              else
              {
                _11452 = _ptr__6235[_6265];
              }
              _6259 += _11452;
            }
          }
          {}
        }
      }
      while ( (!_6263) )
      {
        {
          long long _6266 = (-(int)1);
          int _11454 = (int)0;
          int _11455 = _6231;
          for (int _6267 = _11454; _6267 < _11455; ++_6267)
          {
            {
              if (((_ptr__6264[_6267] < _ptr__6234[_6267]) && ((_6266 < (int)0) || (_ptr__6248[safe_add( _ptr__6239[_6267],_ptr__6264[_6267] )] < _6266))))
              {
                {
                  _6266 = _ptr__6248[safe_add( _ptr__6239[_6267],_ptr__6264[_6267] )];
                }
              }
              {}
            }
          }
          if ((_6266 < (int)0))
          {
            {
              _6263 = true;
            }
          }
          else
          {
            {
              int _11456 = (int)0;
              int _11457 = _6231;
              for (int _6268 = _11456; _6268 < _11457; ++_6268)
              {
                {
                  if (((_ptr__6264[_6268] < _ptr__6234[_6268]) && (_6266 == _ptr__6248[safe_add( _ptr__6239[_6268],_ptr__6264[_6268] )])))
                  {
                    {
                      ++ _ptr__6264[_6268];
                    }
                  }
                  {}
                }
              }
              ++ _6260;
            }
          }
        }
      }
    }
  }
  _6228->alloc_expr(_ptr__6233[(int)0],_6260,_6261,(!_6255),_6259);
  int _6269 = mosek::fusion::p_WorkStack::_get_impl(_6228)->ptr_base;
  int _6270 = mosek::fusion::p_WorkStack::_get_impl(_6228)->nidxs_base;
  int _6271 = mosek::fusion::p_WorkStack::_get_impl(_6228)->sp_base;
  int _6272 = mosek::fusion::p_WorkStack::_get_impl(_6228)->shape_base;
  int _6273 = mosek::fusion::p_WorkStack::_get_impl(_6228)->cof_base;
  int _6274 = mosek::fusion::p_WorkStack::_get_impl(_6228)->code_base;
  int _6275 = mosek::fusion::p_WorkStack::_get_impl(_6228)->codeptr_base;
  int _6276 = mosek::fusion::p_WorkStack::_get_impl(_6228)->cconst_base;
  std::shared_ptr< monty::ndarray< int,1 > > _6277 = mosek::fusion::p_WorkStack::_get_impl(_6228)->i32;
  _checked_ptr_1<int> _ptr__6277(_6277 ? _6277->raw() : nullptr,_6277 ? _6277->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _6278 = mosek::fusion::p_WorkStack::_get_impl(_6228)->i64;
  _checked_ptr_1<long long> _ptr__6278(_6278 ? _6278->raw() : nullptr,_6278 ? _6278->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _6279 = mosek::fusion::p_WorkStack::_get_impl(_6228)->f64;
  _checked_ptr_1<double> _ptr__6279(_6279 ? _6279->raw() : nullptr,_6279 ? _6279->size(0) : 0);
  int _11458 = (int)0;
  int _11459 = _ptr__6233[(int)0];
  for (int _6280 = _11458; _6280 < _11459; ++_6280)
  {
    {
      _ptr__6277[safe_add( _6272,_6280 )] = _ptr__6247[safe_add( _ptr__6241[(int)0],_6280 )];
    }
  }
  if ((_6259 > (int)0))
  {
    {
      _ptr__6277[_6275] = (int)0;
    }
  }
  {}
  int _11460 = (int)0;
  int _11461 = safe_add( _6260,(int)1 );
  for (int _6281 = _11460; _6281 < _11461; ++_6281)
  {
    {
      _ptr__6277[safe_add( _6269,_6281 )] = (int)0;
    }
  }
  if (_6255)
  {
    {
      int _6282 = (-(int)9999);
      if ((_6259 > (int)0))
      {
        {
          _6282 = _6230->alloci32(safe_add( _6260,(int)1 ));
        }
      }
      {}
      std::shared_ptr< monty::ndarray< int,1 > > _6283 = mosek::fusion::p_WorkStack::_get_impl(_6230)->i32;
      _checked_ptr_1<int> _ptr__6283(_6283 ? _6283->raw() : nullptr,_6283 ? _6283->size(0) : 0);
      if ((_6259 > (int)0))
      {
        {
          int _11462 = (int)0;
          int _11463 = safe_add( _6260,(int)1 );
          for (int _6284 = _11462; _6284 < _11463; ++_6284)
          {
            {
              _ptr__6283[safe_add( _6282,_6284 )] = (int)0;
            }
          }
        }
      }
      {}
      int _11464 = (int)0;
      int _11465 = _6231;
      for (int _6285 = _11464; _6285 < _11465; ++_6285)
      {
        {
          if (((*_6245)(_6285)))
          {
            {
              int _11466 = (int)0;
              int _11467 = _ptr__6234[_6285];
              for (int _6286 = _11466; _6286 < _11467; ++_6286)
              {
                {
                  _ptr__6277[safe_add( safe_add( _6269,_ptr__6248[safe_add( _ptr__6239[_6285],_6286 )] ),(int)1 )] += (_ptr__6247[safe_add( safe_add( _ptr__6237[_6285],_6286 ),(int)1 )] - _ptr__6247[safe_add( _ptr__6237[_6285],_6286 )]);
                }
              }
              if ((_ptr__6236[_6285] > (int)0))
              {
                {
                  int _11468 = (int)0;
                  int _11469 = _ptr__6234[_6285];
                  for (int _6287 = _11468; _6287 < _11469; ++_6287)
                  {
                    {
                      _ptr__6283[safe_add( safe_add( _6282,_ptr__6248[safe_add( _ptr__6239[_6285],_6287 )] ),(int)1 )] += safe_add( (_ptr__6247[safe_add( _ptr__6243[_6285],_ptr__6247[safe_add( safe_add( _ptr__6237[_6285],_6287 ),(int)1 )] )] - _ptr__6247[safe_add( _ptr__6243[_6285],_ptr__6247[safe_add( _ptr__6237[_6285],_6287 )] )]),safe_mul( (int)2,(_ptr__6247[safe_add( safe_add( _ptr__6237[_6285],_6287 ),(int)1 )] - _ptr__6247[safe_add( _ptr__6237[_6285],_6287 )]) ) );
                    }
                  }
                }
              }
              else if(_6257)
              {
                {
                  int _11470 = (int)0;
                  int _11471 = _ptr__6234[_6285];
                  for (int _6288 = _11470; _6288 < _11471; ++_6288)
                  {
                    {
                      _ptr__6283[safe_add( safe_add( _6282,_ptr__6248[safe_add( _ptr__6239[_6285],_6288 )] ),(int)1 )] += (int)1;
                    }
                  }
                }
              }
              {}
            }
          }
          else
          {
            {
              int _11472 = (int)0;
              int _11473 = _ptr__6234[_6285];
              for (int _6289 = _11472; _6289 < _11473; ++_6289)
              {
                {
                  _ptr__6277[safe_add( safe_add( _6269,_6289 ),(int)1 )] += (_ptr__6247[safe_add( safe_add( _ptr__6237[_6285],_6289 ),(int)1 )] - _ptr__6247[safe_add( _ptr__6237[_6285],_6289 )]);
                }
              }
              if ((_ptr__6236[_6285] > (int)0))
              {
                {
                  int _11474 = (int)0;
                  int _11475 = _ptr__6234[_6285];
                  for (int _6290 = _11474; _6290 < _11475; ++_6290)
                  {
                    {
                      _ptr__6283[safe_add( safe_add( _6282,_6290 ),(int)1 )] += safe_add( (_ptr__6247[safe_add( _ptr__6243[_6285],_ptr__6247[safe_add( safe_add( _ptr__6237[_6285],_6290 ),(int)1 )] )] - _ptr__6247[safe_add( _ptr__6243[_6285],_ptr__6247[safe_add( _ptr__6237[_6285],_6290 )] )]),safe_mul( (int)2,(_ptr__6247[safe_add( safe_add( _ptr__6237[_6285],_6290 ),(int)1 )] - _ptr__6247[safe_add( _ptr__6237[_6285],_6290 )]) ) );
                    }
                  }
                }
              }
              else if(_6257)
              {
                {
                  int _11476 = (int)0;
                  int _11477 = _ptr__6234[_6285];
                  for (int _6291 = _11476; _6291 < _11477; ++_6291)
                  {
                    {
                      _ptr__6283[safe_add( safe_add( _6282,_6291 ),(int)1 )] += (int)1;
                    }
                  }
                }
              }
              {}
            }
          }
        }
      }
      int _11478 = (int)0;
      int _11479 = _6260;
      for (int _6292 = _11478; _6292 < _11479; ++_6292)
      {
        {
          _ptr__6277[safe_add( safe_add( _6269,_6292 ),(int)1 )] += _ptr__6277[safe_add( _6269,_6292 )];
        }
      }
      if ((_6259 > (int)0))
      {
        {
          int _11480 = (int)0;
          int _11481 = _6260;
          for (int _6293 = _11480; _6293 < _11481; ++_6293)
          {
            {
              _ptr__6283[safe_add( safe_add( _6282,_6293 ),(int)1 )] += _ptr__6283[safe_add( _6282,_6293 )];
            }
          }
        }
      }
      {}
      int _11482 = (int)0;
      int _11483 = _6231;
      for (int _6294 = _11482; _6294 < _11483; ++_6294)
      {
        {
          if (((*_6245)(_6294)))
          {
            {
              int _11484 = (int)0;
              int _11485 = _ptr__6234[_6294];
              for (int _6295 = _11484; _6295 < _11485; ++_6295)
              {
                {
                  int _6296 = _ptr__6247[safe_add( _ptr__6237[_6294],_6295 )];
                  int _6297 = _ptr__6247[safe_add( safe_add( _ptr__6237[_6294],_6295 ),(int)1 )];
                  long long _6298 = _ptr__6248[safe_add( _ptr__6239[_6294],_6295 )];
                  int _6299 = _ptr__6277[safe_add( _6269,_6298 )];
                  int _11486;
                  bool _11487 = _6257;
                  if (_11487)
                  {
                    _11486 = _ptr__6283[safe_add( _6282,_6298 )];
                  }
                  else
                  {
                    _11486 = (-(int)10000);
                  }
                  int _6300 = _11486;
                  int _11488 = _6296;
                  int _11489 = _6297;
                  for (int _6301 = _11488; _6301 < _11489; ++_6301)
                  {
                    {
                      _ptr__6278[safe_add( _6270,_6299 )] = _ptr__6248[safe_add( _ptr__6238[_6294],_6301 )];
                      _ptr__6279[safe_add( _6273,_6299 )] = (((*w)(_6294)) * _ptr__6249[safe_add( _ptr__6240[_6294],_6301 )]);
                      if (_6257)
                      {
                        {
                          if ((_ptr__6236[_6294] > (int)0))
                          {
                            {
                              int _11490 = _ptr__6247[safe_add( _ptr__6243[_6294],_6301 )];
                              int _11491 = _ptr__6247[safe_add( safe_add( _ptr__6243[_6294],_6301 ),(int)1 )];
                              for (int _6302 = _11490; _6302 < _11491; ++_6302)
                              {
                                {
                                  _ptr__6277[safe_add( _6274,_6300 )] = _ptr__6247[safe_add( _ptr__6242[_6294],_6302 )];
                                  _ptr__6279[safe_add( _6276,_6300 )] = _ptr__6249[safe_add( _ptr__6244[_6294],_6302 )];
                                  ++ _6300;
                                }
                              }
                              _ptr__6277[safe_add( _6274,_6300 )] = 2;
                              _ptr__6279[safe_add( _6276,_6300 )] = ((*w)(_6294));
                              ++ _6300;
                              _ptr__6277[safe_add( _6274,_6300 )] = 5;
                              ++ _6300;
                            }
                          }
                          else
                          {
                            {
                              _ptr__6277[safe_add( _6274,_6300 )] = 2;
                              _ptr__6279[safe_add( _6276,_6300 )] = 0.0;
                              ++ _6300;
                            }
                          }
                          _ptr__6277[safe_add( safe_add( _6275,_6299 ),(int)1 )] = _6300;
                        }
                      }
                      {}
                      ++ _6299;
                    }
                  }
                  if (_6257)
                  {
                    {
                      _ptr__6283[safe_add( _6282,_6298 )] = _6300;
                    }
                  }
                  {}
                  _ptr__6277[safe_add( _6269,_6298 )] += (_6297 - _6296);
                }
              }
            }
          }
          else
          {
            {
              int _11492 = (int)0;
              int _11493 = _ptr__6234[_6294];
              for (int _6303 = _11492; _6303 < _11493; ++_6303)
              {
                {
                  int _6304 = _ptr__6247[safe_add( _ptr__6237[_6294],_6303 )];
                  int _6305 = _ptr__6247[safe_add( safe_add( _ptr__6237[_6294],_6303 ),(int)1 )];
                  int _6306 = _6303;
                  int _6307 = _ptr__6277[safe_add( _6269,_6306 )];
                  int _11494;
                  bool _11495 = _6257;
                  if (_11495)
                  {
                    _11494 = _ptr__6283[safe_add( _6282,_6306 )];
                  }
                  else
                  {
                    _11494 = (-(int)10000);
                  }
                  int _6308 = _11494;
                  int _11496 = _6304;
                  int _11497 = _6305;
                  for (int _6309 = _11496; _6309 < _11497; ++_6309)
                  {
                    {
                      _ptr__6278[safe_add( _6270,_6307 )] = _ptr__6248[safe_add( _ptr__6238[_6294],_6309 )];
                      _ptr__6279[safe_add( _6273,_6307 )] = (((*w)(_6294)) * _ptr__6249[safe_add( _ptr__6240[_6294],_6309 )]);
                      if (_6257)
                      {
                        {
                          if ((_ptr__6236[_6294] > (int)0))
                          {
                            {
                              int _11498 = _ptr__6247[safe_add( _ptr__6243[_6294],_6309 )];
                              int _11499 = _ptr__6247[safe_add( safe_add( _ptr__6243[_6294],_6309 ),(int)1 )];
                              for (int _6310 = _11498; _6310 < _11499; ++_6310)
                              {
                                {
                                  _ptr__6277[safe_add( _6274,_6308 )] = _ptr__6247[safe_add( _ptr__6242[_6294],_6310 )];
                                  _ptr__6279[safe_add( _6276,_6308 )] = _ptr__6249[safe_add( _ptr__6244[_6294],_6310 )];
                                  ++ _6308;
                                }
                              }
                              _ptr__6277[safe_add( _6274,_6308 )] = 2;
                              _ptr__6279[safe_add( _6276,_6308 )] = ((*w)(_6294));
                              ++ _6308;
                              _ptr__6277[safe_add( _6274,_6308 )] = 5;
                              ++ _6308;
                              _ptr__6277[safe_add( safe_add( _6275,_6307 ),(int)1 )] = _6308;
                            }
                          }
                          else
                          {
                            {
                              _ptr__6277[safe_add( _6274,_6308 )] = 2;
                              _ptr__6279[safe_add( _6276,_6308 )] = 0.0;
                              ++ _6308;
                            }
                          }
                          _ptr__6277[safe_add( safe_add( _6275,_6307 ),(int)1 )] = _6308;
                        }
                      }
                      {}
                      ++ _6307;
                    }
                  }
                  if (_6257)
                  {
                    {
                      _ptr__6283[safe_add( _6282,_6306 )] = _6308;
                    }
                  }
                  {}
                  _ptr__6277[safe_add( _6269,_6306 )] += (_6305 - _6304);
                }
              }
            }
          }
        }
      }
      int _11500 = (int)0;
      int _11501 = _6260;
      for (int _6311 = _11500; _6311 < _11501; ++_6311)
      {
        {
          _ptr__6277[(safe_add( _6269,_6260 ) - _6311)] = _ptr__6277[((safe_add( _6269,_6260 ) - _6311) - (int)1)];
        }
      }
      _ptr__6277[_6269] = (int)0;
    }
  }
  else
  {
    {
      bool _6312 = false;
      std::shared_ptr< monty::ndarray< int,1 > > _6313 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6231)));
      _checked_ptr_1<int> _ptr__6313(_6313 ? _6313->raw() : nullptr,_6313 ? _6313->size(0) : 0);
      int _6314 = (int)0;
      int _6315 = (int)0;
      int _6316 = (int)0;
      while ( (!_6312) )
      {
        {
          long long _6317 = (-(int)1);
          int _11502 = (int)0;
          int _11503 = _6231;
          for (int _6318 = _11502; _6318 < _11503; ++_6318)
          {
            {
              if (((_ptr__6313[_6318] < _ptr__6234[_6318]) && ((_6317 < (int)0) || (_ptr__6248[safe_add( _ptr__6239[_6318],_ptr__6313[_6318] )] < _6317))))
              {
                {
                  _6317 = _ptr__6248[safe_add( _ptr__6239[_6318],_ptr__6313[_6318] )];
                }
              }
              {}
            }
          }
          if ((_6317 < (int)0))
          {
            {
              _6312 = true;
            }
          }
          else
          {
            {
              int _11504 = (int)0;
              int _11505 = _6231;
              for (int _6319 = _11504; _6319 < _11505; ++_6319)
              {
                {
                  if (((_ptr__6313[_6319] < _ptr__6234[_6319]) && (_6317 == _ptr__6248[safe_add( _ptr__6239[_6319],_ptr__6313[_6319] )])))
                  {
                    {
                      int _11506 = _ptr__6247[safe_add( _ptr__6237[_6319],_ptr__6313[_6319] )];
                      int _11507 = _ptr__6247[safe_add( safe_add( _ptr__6237[_6319],_ptr__6313[_6319] ),(int)1 )];
                      for (int _6320 = _11506; _6320 < _11507; ++_6320)
                      {
                        {
                          _ptr__6278[safe_add( _6270,_6316 )] = _ptr__6248[safe_add( _ptr__6238[_6319],_6320 )];
                          _ptr__6279[safe_add( _6273,_6316 )] = (((*w)(_6319)) * _ptr__6249[safe_add( _ptr__6240[_6319],_6320 )]);
                          if (_6257)
                          {
                            {
                              if ((_ptr__6236[_6319] > (int)0))
                              {
                                {
                                  int _11508 = _ptr__6247[safe_add( _ptr__6243[_6319],_6320 )];
                                  int _11509 = _ptr__6247[safe_add( safe_add( _ptr__6243[_6319],_6320 ),(int)1 )];
                                  for (int _6321 = _11508; _6321 < _11509; ++_6321)
                                  {
                                    {
                                      _ptr__6277[safe_add( _6274,_6314 )] = _ptr__6247[safe_add( _ptr__6242[_6319],_6321 )];
                                      _ptr__6279[safe_add( _6276,_6314 )] = _ptr__6249[safe_add( _ptr__6244[_6319],_6321 )];
                                      ++ _6314;
                                    }
                                  }
                                  _ptr__6277[safe_add( _6274,_6314 )] = 2;
                                  _ptr__6279[safe_add( _6276,_6314 )] = ((*w)(_6319));
                                  ++ _6314;
                                  _ptr__6277[safe_add( _6274,_6314 )] = 5;
                                  ++ _6314;
                                }
                              }
                              else
                              {
                                {
                                  _ptr__6277[safe_add( _6274,_6314 )] = 2;
                                  _ptr__6279[safe_add( _6276,_6314 )] = 0.0;
                                  ++ _6314;
                                }
                              }
                              _ptr__6277[safe_add( safe_add( _6275,_6316 ),(int)1 )] = _6314;
                            }
                          }
                          {}
                          ++ _6316;
                        }
                      }
                      ++ _ptr__6313[_6319];
                    }
                  }
                  {}
                }
              }
              _ptr__6277[safe_add( safe_add( _6269,_6315 ),(int)1 )] = _6316;
              _ptr__6278[safe_add( _6271,_6315 )] = _6317;
            }
          }
          ++ _6315;
        }
      }
    }
  }
  _6230->clear();
}
std::string mosek::fusion::ExprWSum :: toString() { return mosek::fusion::p_ExprWSum::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprWSum::toString(){
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _6322 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprWSum(["));
  _6322->__mosek_2fusion_2Utils_2StringBuffer__a(((*es)((int)0))->toString());
  int _11510 = (int)1;
  int _11511 = (int)((es)->size(0));
  for (int _6323 = _11510; _6323 < _11511; ++_6323)
  {
    {
      _6322->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(((*es)(_6323))->toString());
    }
  }
  _6322->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("])"));
  return _6322->toString();
}
void mosek::fusion::p_ExprWSum::destroy(){w.reset();es.reset();}void mosek::fusion::ExprWSum::destroy() { mosek::fusion::p_ExprWSum::_get_impl(this)->destroy(); }mosek::fusion::ExprSumReduce::ExprSumReduce(mosek::fusion::p_ExprSumReduce *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprSumReduce()" << this << std::endl; */ }mosek::fusion::ExprSumReduce::~ExprSumReduce() {  /* std::cout << "~ExprSumReduce()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprSumReduce::p_ExprSumReduce  (::mosek::fusion::ExprSumReduce * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprSumReduce::t mosek::fusion::p_ExprSumReduce::_new_ExprSumReduce  (int _6324,    monty::rc_ptr< ::mosek::fusion::Expression > _6325){ return new mosek::fusion::ExprSumReduce(_6324,_6325); }mosek::fusion::ExprSumReduce::ExprSumReduce  (int _6324,    monty::rc_ptr< ::mosek::fusion::Expression > _6325) :    ExprSumReduce(new mosek::fusion::p_ExprSumReduce(this)){ mosek::fusion::p_ExprSumReduce::_get_impl(this)->_initialize(_6324,_6325); }void mosek::fusion::p_ExprSumReduce::_initialize  (int _6324,    monty::rc_ptr< ::mosek::fusion::Expression > _6325){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(::mosek::fusion::p_ExprSumReduce::computeShape(_6324,_6325->getShape()));
    mosek::fusion::p_ExprSumReduce::_get_impl(::mosek::fusion::ExprSumReduce::t(_pubthis))->expr = _6325;
    mosek::fusion::p_ExprSumReduce::_get_impl(::mosek::fusion::ExprSumReduce::t(_pubthis))->dim = _6324;
    std::shared_ptr< monty::ndarray< int,1 > > _6326 = _6325->getShape();
    _checked_ptr_1<int> _ptr__6326(_6326 ? _6326->raw() : nullptr,_6326 ? _6326->size(0) : 0);
    if (((int)((_6326)->size(0)) <= _6324))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Invalid summing dimension"));
      }
    }
    {}
  }
}void mosek::fusion::ExprSumReduce :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _6327,monty::rc_ptr< ::mosek::fusion::WorkStack > _6328,monty::rc_ptr< ::mosek::fusion::WorkStack > _6329) { mosek::fusion::p_ExprSumReduce::_get_impl(this)->eval(_6327,_6328,_6329); }void mosek::fusion::p_ExprSumReduce::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _6327,monty::rc_ptr< ::mosek::fusion::WorkStack > _6328,monty::rc_ptr< ::mosek::fusion::WorkStack > _6329){
  expr->eval(_6328,_6327,_6329);
  _6328->pop_expr();
  int _6330 = mosek::fusion::p_WorkStack::_get_impl(_6328)->nd;
  int _6331 = mosek::fusion::p_WorkStack::_get_impl(_6328)->shape_base;
  int _6332 = mosek::fusion::p_WorkStack::_get_impl(_6328)->nelem;
  int _6333 = mosek::fusion::p_WorkStack::_get_impl(_6328)->nnz;
  int _6334 = mosek::fusion::p_WorkStack::_get_impl(_6328)->ncodeatom;
  bool _6335 = mosek::fusion::p_WorkStack::_get_impl(_6328)->hassp;
  int _6336 = mosek::fusion::p_WorkStack::_get_impl(_6328)->ptr_base;
  int _6337 = mosek::fusion::p_WorkStack::_get_impl(_6328)->sp_base;
  int _6338 = mosek::fusion::p_WorkStack::_get_impl(_6328)->nidxs_base;
  int _6339 = mosek::fusion::p_WorkStack::_get_impl(_6328)->cof_base;
  int _6340 = mosek::fusion::p_WorkStack::_get_impl(_6328)->code_base;
  int _6341 = mosek::fusion::p_WorkStack::_get_impl(_6328)->codeptr_base;
  int _6342 = mosek::fusion::p_WorkStack::_get_impl(_6328)->cconst_base;
  std::shared_ptr< monty::ndarray< int,1 > > _6343 = mosek::fusion::p_WorkStack::_get_impl(_6328)->i32;
  _checked_ptr_1<int> _ptr__6343(_6343 ? _6343->raw() : nullptr,_6343 ? _6343->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _6344 = mosek::fusion::p_WorkStack::_get_impl(_6328)->i64;
  _checked_ptr_1<long long> _ptr__6344(_6344 ? _6344->raw() : nullptr,_6344 ? _6344->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _6345 = mosek::fusion::p_WorkStack::_get_impl(_6328)->f64;
  _checked_ptr_1<double> _ptr__6345(_6345 ? _6345->raw() : nullptr,_6345 ? _6345->size(0) : 0);
  int _6346 = (int)99999;
  int _6347 = (int)99999;
  int _6348 = (int)99999;
  if (_6335)
  {
    {
      int _6349 = (int)0;
      int _11512 = (int)0;
      int _11513 = _6330;
      for (int _6350 = _11512; _6350 < _11513; ++_6350)
      {
        {
          if ((_6349 < _ptr__6343[safe_add( _6331,_6350 )]))
          {
            {
              _6349 = _ptr__6343[safe_add( _6331,_6350 )];
            }
          }
          {}
        }
      }
      _6346 = _6329->alloci32(safe_add( _6349,(int)1 ));
      _6347 = _6329->alloci32(_6332);
      _6348 = _6329->alloci32(_6332);
    }
  }
  {}
  std::shared_ptr< monty::ndarray< int,1 > > _6351 = mosek::fusion::p_WorkStack::_get_impl(_6329)->i32;
  _checked_ptr_1<int> _ptr__6351(_6351 ? _6351->raw() : nullptr,_6351 ? _6351->size(0) : 0);
  if (_6335)
  {
    {
      int _6352 = _6347;
      int _6353 = _6348;
      int _11514 = (int)0;
      int _11515 = _6332;
      for (int _6354 = _11514; _6354 < _11515; ++_6354)
      {
        {
          _ptr__6351[safe_add( _6352,_6354 )] = _6354;
        }
      }
      if ((dim < (_6330 - (int)1)))
      {
        {
          std::shared_ptr< monty::ndarray< long long,1 > > _6355 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_6330)));
          _checked_ptr_1<long long> _ptr__6355(_6355 ? _6355->raw() : nullptr,_6355 ? _6355->size(0) : 0);
          _ptr__6355[(_6330 - (int)1)] = (int)1;
          int _11516 = (int)1;
          int _11517 = _6330;
          for (int _6356 = _11516; _6356 < _11517; ++_6356)
          {
            {
              _ptr__6355[((_6330 - _6356) - (int)1)] = safe_mul( _ptr__6355[(_6330 - _6356)],_ptr__6343[(safe_add( _6331,_6330 ) - _6356)] );
            }
          }
          std::shared_ptr< monty::ndarray< int,1 > > _6357 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((_6330 - (int)1))));
          _checked_ptr_1<int> _ptr__6357(_6357 ? _6357->raw() : nullptr,_6357 ? _6357->size(0) : 0);
          int _11518 = (int)0;
          int _11519 = dim;
          for (int _6358 = _11518; _6358 < _11519; ++_6358)
          {
            {
              _ptr__6357[((_6330 - _6358) - (int)2)] = _6358;
            }
          }
          int _11520 = safe_add( dim,(int)1 );
          int _11521 = _6330;
          for (int _6359 = _11520; _6359 < _11521; ++_6359)
          {
            {
              _ptr__6357[((_6330 - _6359) - (int)1)] = _6359;
            }
          }
          int _11522 = (int)0;
          int _11523 = (_6330 - (int)1);
          for (int _6360 = _11522; _6360 < _11523; ++_6360)
          {
            {
              int _6361 = _ptr__6357[_6360];
              int _6362 = _ptr__6343[safe_add( _6331,_6361 )];
              int _11524 = (int)0;
              int _11525 = safe_add( _6362,(int)1 );
              for (int _6363 = _11524; _6363 < _11525; ++_6363)
              {
                {
                  _ptr__6351[safe_add( _6346,_6363 )] = (int)0;
                }
              }
              int _11526 = (int)0;
              int _11527 = _6332;
              for (int _6364 = _11526; _6364 < _11527; ++_6364)
              {
                {
                  ++ _ptr__6351[safe_add( safe_add( _6346,(int)1 ),((_ptr__6344[safe_add( _6337,_6364 )] / _ptr__6355[_6361]) % _6362) )];
                }
              }
              int _11528 = (int)0;
              int _11529 = _6362;
              for (int _6365 = _11528; _6365 < _11529; ++_6365)
              {
                {
                  _ptr__6351[safe_add( safe_add( _6346,_6365 ),(int)1 )] += _ptr__6351[safe_add( _6346,_6365 )];
                }
              }
              int _11530 = (int)0;
              int _11531 = _6332;
              for (int _6366 = _11530; _6366 < _11531; ++_6366)
              {
                {
                  int _6367 = _ptr__6351[safe_add( _6352,_6366 )];
                  long long _6368 = ((_ptr__6344[safe_add( _6337,_6367 )] / _ptr__6355[_6361]) % _6362);
                  _ptr__6351[safe_add( _6353,_ptr__6351[safe_add( _6346,_6368 )] )] = _6367;
                  ++ _ptr__6351[safe_add( _6346,_6368 )];
                }
              }
              int _6369 = _6353;
              _6353 = _6352;
              _6352 = _6369;
            }
          }
        }
      }
      {}
      int _6370 = (int)1;
      int _11532 = (int)0;
      int _11533 = dim;
      for (int _6371 = _11532; _6371 < _11533; ++_6371)
      {
        {
          _6370 *= _ptr__6343[safe_add( _6331,_6371 )];
        }
      }
      int _6372 = _ptr__6343[safe_add( _6331,dim )];
      int _6373 = (int)1;
      int _11534 = safe_add( dim,(int)1 );
      int _11535 = _6330;
      for (int _6374 = _11534; _6374 < _11535; ++_6374)
      {
        {
          _6373 *= _ptr__6343[safe_add( _6331,_6374 )];
        }
      }
      int _6375 = safe_mul( _6373,_6372 );
      int _6376 = _6373;
      int _6377 = (int)1;
      int _6378 = (int)0;
      long long _6379 = (-(int)1);
      long long _6380 = (-(int)1);
      int _11536 = (int)0;
      int _11537 = _6332;
      for (int _6381 = _11536; _6381 < _11537; ++_6381)
      {
        {
          int _6382 = _ptr__6351[safe_add( _6352,_6381 )];
          long long _6383 = ((_ptr__6344[safe_add( _6337,_6382 )] / _6375) % _6370);
          long long _6384 = (_ptr__6344[safe_add( _6337,_6382 )] % _6373);
          if (((_6380 != _6383) || (_6379 != _6384)))
          {
            {
              _6380 = _6383;
              _6379 = _6384;
              ++ _6378;
            }
          }
          {}
        }
      }
      int _6385 = (_6330 - (int)1);
      bool _6386 = (_6378 < safe_mul( _6370,_6373 ));
      int _6387 = _6333;
      int _6388 = _6334;
      _6327->alloc_expr(_6385,_6378,_6387,_6386,_6388);
      int _6389 = mosek::fusion::p_WorkStack::_get_impl(_6327)->ptr_base;
      int _6390 = mosek::fusion::p_WorkStack::_get_impl(_6327)->nidxs_base;
      int _11538;
      bool _11539 = _6386;
      if (_11539)
      {
        _11538 = mosek::fusion::p_WorkStack::_get_impl(_6327)->sp_base;
      }
      else
      {
        _11538 = _6327->alloci64(_6378);
      }
      int _6391 = _11538;
      int _6392 = mosek::fusion::p_WorkStack::_get_impl(_6327)->cof_base;
      int _6393 = mosek::fusion::p_WorkStack::_get_impl(_6327)->shape_base;
      int _6394 = mosek::fusion::p_WorkStack::_get_impl(_6327)->code_base;
      int _6395 = mosek::fusion::p_WorkStack::_get_impl(_6327)->codeptr_base;
      int _6396 = mosek::fusion::p_WorkStack::_get_impl(_6327)->cconst_base;
      std::shared_ptr< monty::ndarray< int,1 > > _6397 = mosek::fusion::p_WorkStack::_get_impl(_6327)->i32;
      _checked_ptr_1<int> _ptr__6397(_6397 ? _6397->raw() : nullptr,_6397 ? _6397->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _6398 = mosek::fusion::p_WorkStack::_get_impl(_6327)->i64;
      _checked_ptr_1<long long> _ptr__6398(_6398 ? _6398->raw() : nullptr,_6398 ? _6398->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _6399 = mosek::fusion::p_WorkStack::_get_impl(_6327)->f64;
      _checked_ptr_1<double> _ptr__6399(_6399 ? _6399->raw() : nullptr,_6399 ? _6399->size(0) : 0);
      int _11540 = (int)0;
      int _11541 = dim;
      for (int _6400 = _11540; _6400 < _11541; ++_6400)
      {
        {
          _ptr__6397[safe_add( _6393,_6400 )] = _ptr__6343[safe_add( _6331,_6400 )];
        }
      }
      int _11542 = safe_add( dim,(int)1 );
      int _11543 = _6330;
      for (int _6401 = _11542; _6401 < _11543; ++_6401)
      {
        {
          _ptr__6397[(safe_add( _6393,_6401 ) - (int)1)] = _ptr__6343[safe_add( _6331,_6401 )];
        }
      }
      _ptr__6397[_6389] = (int)0;
      if ((_6388 > (int)0))
      {
        {
          _ptr__6397[_6395] = (int)0;
        }
      }
      {}
      int _6402 = (int)0;
      int _6403 = (int)0;
      int _6404 = (int)0;
      int _6405 = (int)0;
      while ( (_6405 < _6332) )
      {
        {
          int _6406 = _6405;
          long long _6407 = ((_ptr__6344[safe_add( _6337,_ptr__6351[safe_add( _6352,_6406 )] )] / _6375) % _6370);
          long long _6408 = (_ptr__6344[safe_add( _6337,_ptr__6351[safe_add( _6352,_6406 )] )] % _6373);
          ++ _6405;
          while ( ((_6405 < _6332) && ((_6407 == ((_ptr__6344[safe_add( _6337,_ptr__6351[safe_add( _6352,_6405 )] )] / _6375) % _6370)) && (_6408 == (_ptr__6344[safe_add( _6337,_ptr__6351[safe_add( _6352,_6405 )] )] % _6373)))) )
          {
            {
              ++ _6405;
            }
          }
          int _11544 = _6406;
          int _11545 = _6405;
          for (int _6409 = _11544; _6409 < _11545; ++_6409)
          {
            {
              int _6410 = _ptr__6351[safe_add( _6352,_6409 )];
              int _11546 = _ptr__6343[safe_add( _6336,_6410 )];
              int _11547 = _ptr__6343[safe_add( safe_add( _6336,_6410 ),(int)1 )];
              for (int _6411 = _11546; _6411 < _11547; ++_6411)
              {
                {
                  _ptr__6398[safe_add( _6390,_6404 )] = _ptr__6344[safe_add( _6338,_6411 )];
                  _ptr__6399[safe_add( _6392,_6404 )] = _ptr__6345[safe_add( _6339,_6411 )];
                  if ((_6388 > (int)0))
                  {
                    {
                      int _11548 = _ptr__6343[safe_add( _6341,_6411 )];
                      int _11549 = _ptr__6343[safe_add( safe_add( _6341,_6411 ),(int)1 )];
                      for (int _6412 = _11548; _6412 < _11549; ++_6412)
                      {
                        {
                          _ptr__6397[safe_add( _6394,_6402 )] = _ptr__6343[safe_add( _6340,_6412 )];
                          _ptr__6399[safe_add( _6396,_6402 )] = _ptr__6345[safe_add( _6342,_6412 )];
                          ++ _6402;
                        }
                      }
                      _ptr__6397[safe_add( safe_add( _6395,_6404 ),(int)1 )] = _6402;
                    }
                  }
                  {}
                  ++ _6404;
                }
              }
            }
          }
          _ptr__6398[safe_add( _6391,_6403 )] = safe_add( safe_mul( _6407,_6373 ),_6408 );
          _ptr__6397[safe_add( safe_add( _6389,_6403 ),(int)1 )] = _6404;
          ++ _6403;
        }
      }
      if ((!_6386))
      {
        {
          _6327->popi64(_6378);
        }
      }
      {}
    }
  }
  else
  {
    {
      int _6413 = (int)1;
      int _11550 = (int)0;
      int _11551 = dim;
      for (int _6414 = _11550; _6414 < _11551; ++_6414)
      {
        {
          _6413 *= _ptr__6343[safe_add( _6331,_6414 )];
        }
      }
      int _6415 = _ptr__6343[safe_add( _6331,dim )];
      int _6416 = (int)1;
      int _11552 = safe_add( dim,(int)1 );
      int _11553 = _6330;
      for (int _6417 = _11552; _6417 < _11553; ++_6417)
      {
        {
          _6416 *= _ptr__6343[safe_add( _6331,_6417 )];
        }
      }
      int _6418 = safe_mul( _6416,_6415 );
      int _6419 = _6416;
      int _6420 = (int)1;
      int _6421 = safe_mul( _6413,_6416 );
      int _6422 = _6333;
      int _6423 = _6334;
      _6327->alloc_expr((_6330 - (int)1),_6421,_6422,false,_6423);
      int _6424 = mosek::fusion::p_WorkStack::_get_impl(_6327)->ptr_base;
      int _6425 = mosek::fusion::p_WorkStack::_get_impl(_6327)->nidxs_base;
      int _6426 = mosek::fusion::p_WorkStack::_get_impl(_6327)->cof_base;
      int _6427 = mosek::fusion::p_WorkStack::_get_impl(_6327)->shape_base;
      int _6428 = mosek::fusion::p_WorkStack::_get_impl(_6327)->code_base;
      int _6429 = mosek::fusion::p_WorkStack::_get_impl(_6327)->codeptr_base;
      int _6430 = mosek::fusion::p_WorkStack::_get_impl(_6327)->cconst_base;
      std::shared_ptr< monty::ndarray< int,1 > > _6431 = mosek::fusion::p_WorkStack::_get_impl(_6327)->i32;
      _checked_ptr_1<int> _ptr__6431(_6431 ? _6431->raw() : nullptr,_6431 ? _6431->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _6432 = mosek::fusion::p_WorkStack::_get_impl(_6327)->i64;
      _checked_ptr_1<long long> _ptr__6432(_6432 ? _6432->raw() : nullptr,_6432 ? _6432->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _6433 = mosek::fusion::p_WorkStack::_get_impl(_6327)->f64;
      _checked_ptr_1<double> _ptr__6433(_6433 ? _6433->raw() : nullptr,_6433 ? _6433->size(0) : 0);
      int _11554 = (int)0;
      int _11555 = dim;
      for (int _6434 = _11554; _6434 < _11555; ++_6434)
      {
        {
          _ptr__6431[safe_add( _6427,_6434 )] = _ptr__6343[safe_add( _6331,_6434 )];
        }
      }
      int _11556 = safe_add( dim,(int)1 );
      int _11557 = _6330;
      for (int _6435 = _11556; _6435 < _11557; ++_6435)
      {
        {
          _ptr__6431[(safe_add( _6427,_6435 ) - (int)1)] = _ptr__6343[safe_add( _6331,_6435 )];
        }
      }
      int _6436 = (int)0;
      int _6437 = (int)0;
      _ptr__6431[_6424] = (int)0;
      if ((_6423 > (int)0))
      {
        {
          _ptr__6431[_6429] = (int)0;
        }
      }
      {}
      int _6438 = (int)0;
      int _11558 = (int)0;
      int _11559 = _6413;
      for (int _6439 = _11558; _6439 < _11559; ++_6439)
      {
        {
          int _11560 = (int)0;
          int _11561 = _6416;
          for (int _6440 = _11560; _6440 < _11561; ++_6440)
          {
            {
              int _11562 = (int)0;
              int _11563 = _6415;
              for (int _6441 = _11562; _6441 < _11563; ++_6441)
              {
                {
                  int _6442 = safe_add( safe_add( safe_mul( _6439,_6418 ),safe_mul( _6441,_6419 ) ),_6440 );
                  int _11564 = _ptr__6343[safe_add( _6336,_6442 )];
                  int _11565 = _ptr__6343[safe_add( safe_add( _6336,_6442 ),(int)1 )];
                  for (int _6443 = _11564; _6443 < _11565; ++_6443)
                  {
                    {
                      _ptr__6432[safe_add( _6425,_6437 )] = _ptr__6344[safe_add( _6338,_6443 )];
                      _ptr__6433[safe_add( _6426,_6437 )] = _ptr__6345[safe_add( _6339,_6443 )];
                      if ((_6423 > (int)0))
                      {
                        {
                          int _11566 = _ptr__6343[safe_add( _6341,_6443 )];
                          int _11567 = _ptr__6343[safe_add( safe_add( _6341,_6443 ),(int)1 )];
                          for (int _6444 = _11566; _6444 < _11567; ++_6444)
                          {
                            {
                              _ptr__6431[safe_add( _6428,_6438 )] = _ptr__6343[safe_add( _6340,_6444 )];
                              _ptr__6433[safe_add( _6430,_6438 )] = _ptr__6345[safe_add( _6342,_6444 )];
                              ++ _6438;
                            }
                          }
                          _ptr__6431[safe_add( safe_add( _6429,_6437 ),(int)1 )] = _6438;
                        }
                      }
                      {}
                      ++ _6437;
                    }
                  }
                }
              }
              _ptr__6431[safe_add( safe_add( _6424,_6436 ),(int)1 )] = _6437;
              ++ _6436;
            }
          }
        }
      }
    }
  }
  _6329->clear();
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_ExprSumReduce::computeShape(int _6445,std::shared_ptr< monty::ndarray< int,1 > > _6446){
  _checked_ptr_1<int> _ptr__6446(_6446 ? _6446->raw() : nullptr, _6446 ? _6446->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _6447 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(((int)((_6446)->size(0)) - (int)1))));
  _checked_ptr_1<int> _ptr__6447(_6447 ? _6447->raw() : nullptr,_6447 ? _6447->size(0) : 0);
  int _11568 = (int)0;
  int _11569 = _6445;
  for (int _6448 = _11568; _6448 < _11569; ++_6448)
  {
    {
      _ptr__6447[_6448] = _ptr__6446[_6448];
    }
  }
  int _11570 = safe_add( _6445,(int)1 );
  int _11571 = (int)((_6446)->size(0));
  for (int _6449 = _11570; _6449 < _11571; ++_6449)
  {
    {
      _ptr__6447[(_6449 - (int)1)] = _ptr__6446[_6449];
    }
  }
  return _6447;
}
std::string mosek::fusion::ExprSumReduce :: toString() { return mosek::fusion::p_ExprSumReduce::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprSumReduce::toString(){
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprSumReduce("))->__mosek_2fusion_2Utils_2StringBuffer__a(dim)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(expr->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
void mosek::fusion::p_ExprSumReduce::destroy(){expr.reset();}void mosek::fusion::ExprSumReduce::destroy() { mosek::fusion::p_ExprSumReduce::_get_impl(this)->destroy(); }mosek::fusion::ExprDenseTril::ExprDenseTril(mosek::fusion::p_ExprDenseTril *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprDenseTril()" << this << std::endl; */ }mosek::fusion::ExprDenseTril::~ExprDenseTril() {  /* std::cout << "~ExprDenseTril()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprDenseTril::p_ExprDenseTril  (::mosek::fusion::ExprDenseTril * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprDenseTril::t mosek::fusion::p_ExprDenseTril::_new_ExprDenseTril  (int _6450,    int _6451,    monty::rc_ptr< ::mosek::fusion::Expression > _6452,    int _6453){ return new mosek::fusion::ExprDenseTril(_6450,_6451,_6452,_6453); }mosek::fusion::ExprDenseTril::ExprDenseTril  (int _6450,    int _6451,    monty::rc_ptr< ::mosek::fusion::Expression > _6452,    int _6453) :    ExprDenseTril(new mosek::fusion::p_ExprDenseTril(this)){ mosek::fusion::p_ExprDenseTril::_get_impl(this)->_initialize(_6450,_6451,_6452,_6453); }void mosek::fusion::p_ExprDenseTril::_initialize  (int _6450,    int _6451,    monty::rc_ptr< ::mosek::fusion::Expression > _6452,    int _6453){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(_6452->getShape());
    mosek::fusion::p_ExprDenseTril::_get_impl(::mosek::fusion::ExprDenseTril::t(_pubthis))->expr = _6452;
    mosek::fusion::p_ExprDenseTril::_get_impl(::mosek::fusion::ExprDenseTril::t(_pubthis))->dim0 = _6450;
    mosek::fusion::p_ExprDenseTril::_get_impl(::mosek::fusion::ExprDenseTril::t(_pubthis))->dim1 = _6451;
  }
}mosek::fusion::ExprDenseTril::t mosek::fusion::p_ExprDenseTril::_new_ExprDenseTril  (int _6454,    int _6455,    monty::rc_ptr< ::mosek::fusion::Expression > _6456){ return new mosek::fusion::ExprDenseTril(_6454,_6455,_6456); }mosek::fusion::ExprDenseTril::ExprDenseTril  (int _6454,    int _6455,    monty::rc_ptr< ::mosek::fusion::Expression > _6456) :    ExprDenseTril(new mosek::fusion::p_ExprDenseTril(this)){ mosek::fusion::p_ExprDenseTril::_get_impl(this)->_initialize(_6454,_6455,_6456); }void mosek::fusion::p_ExprDenseTril::_initialize  (int _6454,    int _6455,    monty::rc_ptr< ::mosek::fusion::Expression > _6456){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_ExprDenseTril::_initialize(_6454,_6455,_6456,(int)1);
    std::shared_ptr< monty::ndarray< int,1 > > _6457 = _6456->getShape();
    _checked_ptr_1<int> _ptr__6457(_6457 ? _6457->raw() : nullptr,_6457 ? _6457->size(0) : 0);
    if (((dim0 == dim1) || ((dim0 < (int)0) || ((dim0 >= (int)((_6457)->size(0))) || ((dim1 < (int)0) || ((dim1 >= (int)((_6457)->size(0))) || (_ptr__6457[dim0] != _ptr__6457[dim1])))))))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Invalid dimension definitions"));
      }
    }
    {}
  }
}void mosek::fusion::ExprDenseTril :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _6458,monty::rc_ptr< ::mosek::fusion::WorkStack > _6459,monty::rc_ptr< ::mosek::fusion::WorkStack > _6460) { mosek::fusion::p_ExprDenseTril::_get_impl(this)->eval(_6458,_6459,_6460); }void mosek::fusion::p_ExprDenseTril::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _6458,monty::rc_ptr< ::mosek::fusion::WorkStack > _6459,monty::rc_ptr< ::mosek::fusion::WorkStack > _6460){
  expr->eval(_6459,_6458,_6460);
  _6459->pop_expr();
  int _6461 = mosek::fusion::p_WorkStack::_get_impl(_6459)->nd;
  int _6462 = mosek::fusion::p_WorkStack::_get_impl(_6459)->nnz;
  int _6463 = mosek::fusion::p_WorkStack::_get_impl(_6459)->nelem;
  int _6464 = mosek::fusion::p_WorkStack::_get_impl(_6459)->ncodeatom;
  bool _6465 = mosek::fusion::p_WorkStack::_get_impl(_6459)->hassp;
  int _6466 = mosek::fusion::p_WorkStack::_get_impl(_6459)->shape_base;
  int _6467 = mosek::fusion::p_WorkStack::_get_impl(_6459)->ptr_base;
  int _6468 = mosek::fusion::p_WorkStack::_get_impl(_6459)->code_base;
  int _6469 = mosek::fusion::p_WorkStack::_get_impl(_6459)->codeptr_base;
  int _6470 = mosek::fusion::p_WorkStack::_get_impl(_6459)->cconst_base;
  int _6471 = mosek::fusion::p_WorkStack::_get_impl(_6459)->nidxs_base;
  int _6472 = mosek::fusion::p_WorkStack::_get_impl(_6459)->sp_base;
  int _6473 = mosek::fusion::p_WorkStack::_get_impl(_6459)->cof_base;
  std::shared_ptr< monty::ndarray< int,1 > > _6474 = mosek::fusion::p_WorkStack::_get_impl(_6459)->i32;
  _checked_ptr_1<int> _ptr__6474(_6474 ? _6474->raw() : nullptr,_6474 ? _6474->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _6475 = mosek::fusion::p_WorkStack::_get_impl(_6459)->i64;
  _checked_ptr_1<long long> _ptr__6475(_6475 ? _6475->raw() : nullptr,_6475 ? _6475->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _6476 = mosek::fusion::p_WorkStack::_get_impl(_6459)->f64;
  _checked_ptr_1<double> _ptr__6476(_6476 ? _6476->raw() : nullptr,_6476 ? _6476->size(0) : 0);
  int _11572;
  bool _11573 = (dim0 < dim1);
  if (_11573)
  {
    _11572 = dim0;
  }
  else
  {
    _11572 = dim1;
  }
  int _6477 = _11572;
  int _11574;
  bool _11575 = (dim0 > dim1);
  if (_11575)
  {
    _11574 = dim0;
  }
  else
  {
    _11574 = dim1;
  }
  int _6478 = _11574;
  bool _6479 = (dim0 < dim1);
  if (((dim0 == dim1) || ((dim0 < (int)0) || ((dim0 >= _6461) || ((dim1 < (int)0) || (dim1 >= _6461))))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid symmetry dimensions"));
    }
  }
  else if((_ptr__6474[safe_add( _6466,dim0 )] != _ptr__6474[safe_add( _6466,dim1 )]))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Not symmetric in given dimensions"));
    }
  }
  {}
  std::vector<int> _11576;
  for (int _6481 = (int)0, _11577 = (int)5; _6481 < _11577 ; ++_6481)
  {
    _11576.push_back((int)1);
  }
  auto _11578 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_11576.size()),_11576.begin(),_11576.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _6480 = _11578;
  _checked_ptr_1<int> _ptr__6480(_6480 ? _6480->raw() : nullptr,_6480 ? _6480->size(0) : 0);
  int _11579 = (int)0;
  int _11580 = _6477;
  for (int _6482 = _11579; _6482 < _11580; ++_6482)
  {
    {
      _ptr__6480[(int)0] *= _ptr__6474[safe_add( _6466,_6482 )];
    }
  }
  _ptr__6480[(int)1] = _ptr__6474[safe_add( _6466,dim0 )];
  int _11581 = safe_add( _6477,(int)1 );
  int _11582 = _6478;
  for (int _6483 = _11581; _6483 < _11582; ++_6483)
  {
    {
      _ptr__6480[(int)2] *= _ptr__6474[safe_add( _6466,_6483 )];
    }
  }
  _ptr__6480[(int)3] = _ptr__6474[safe_add( _6466,dim1 )];
  int _11583 = safe_add( _6478,(int)1 );
  int _11584 = _6461;
  for (int _6484 = _11583; _6484 < _11584; ++_6484)
  {
    {
      _ptr__6480[(int)4] *= _ptr__6474[safe_add( _6466,_6484 )];
    }
  }
  std::shared_ptr< monty::ndarray< int,1 > > _6485 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)5)));
  _checked_ptr_1<int> _ptr__6485(_6485 ? _6485->raw() : nullptr,_6485 ? _6485->size(0) : 0);
  _ptr__6485[(int)4] = (int)1;
  int _11585 = (int)1;
  int _11586 = (int)5;
  for (int _6486 = _11585; _6486 < _11586; ++_6486)
  {
    {
      _ptr__6485[(((int)5 - _6486) - (int)1)] = safe_mul( _ptr__6485[((int)5 - _6486)],_ptr__6480[((int)5 - _6486)] );
    }
  }
  int _6487 = (int)0;
  int _6488 = safe_mul( safe_mul( safe_mul( _ptr__6480[(int)0],_ptr__6480[(int)2] ),_ptr__6480[(int)4] ),(safe_mul( _ptr__6480[(int)1],safe_add( _ptr__6480[(int)1],(int)1 ) ) / (int)2) );
  int _6489 = (int)0;
  {
    if (_6465)
    {
      {
        int _6490 = _ptr__6480[(int)1];
        if (_6479)
        {
          {
            int _11587 = (int)0;
            int _11588 = _6463;
            for (int _6491 = _11587; _6491 < _11588; ++_6491)
            {
              {
                long long _6492 = ((_ptr__6475[safe_add( _6472,_6491 )] / _ptr__6485[(int)1]) % _6490);
                long long _6493 = ((_ptr__6475[safe_add( _6472,_6491 )] / _ptr__6485[(int)3]) % _6490);
                if ((_6492 >= _6493))
                {
                  {
                    _6487 += (_ptr__6474[safe_add( safe_add( _6467,_6491 ),(int)1 )] - _ptr__6474[safe_add( _6467,_6491 )]);
                    if ((_6464 > (int)0))
                    {
                      {
                        _6489 += (_ptr__6474[safe_add( _6469,_ptr__6474[safe_add( safe_add( _6467,_6491 ),(int)1 )] )] - _ptr__6474[safe_add( _6469,_ptr__6474[safe_add( _6467,_6491 )] )]);
                      }
                    }
                    {}
                  }
                }
                {}
              }
            }
          }
        }
        else
        {
          {
            int _11589 = (int)0;
            int _11590 = _6463;
            for (int _6494 = _11589; _6494 < _11590; ++_6494)
            {
              {
                long long _6495 = ((_ptr__6475[safe_add( _6472,_6494 )] / _ptr__6485[(int)1]) % _ptr__6480[(int)1]);
                long long _6496 = ((_ptr__6475[safe_add( _6472,_6494 )] / _ptr__6485[(int)3]) % _ptr__6480[(int)3]);
                if ((_6495 <= _6496))
                {
                  {
                    _6487 += (_ptr__6474[safe_add( safe_add( _6467,_6494 ),(int)1 )] - _ptr__6474[safe_add( _6467,_6494 )]);
                    if ((_6464 > (int)0))
                    {
                      {
                        _6489 += (_ptr__6474[safe_add( _6469,_ptr__6474[safe_add( safe_add( _6467,_6494 ),(int)1 )] )] - _ptr__6474[safe_add( _6469,_ptr__6474[safe_add( _6467,_6494 )] )]);
                      }
                    }
                    {}
                  }
                }
                {}
              }
            }
          }
        }
      }
    }
    else
    {
      {
        if (_6479)
        {
          {
            int _11591 = (int)0;
            int _11592 = _ptr__6480[(int)0];
            for (int _6497 = _11591; _6497 < _11592; ++_6497)
            {
              {
                int _11593 = (int)0;
                int _11594 = _ptr__6480[(int)1];
                for (int _6498 = _11593; _6498 < _11594; ++_6498)
                {
                  {
                    int _11595 = (int)0;
                    int _11596 = _ptr__6480[(int)2];
                    for (int _6499 = _11595; _6499 < _11596; ++_6499)
                    {
                      {
                        int _11597 = (int)0;
                        int _11598 = safe_add( _6498,(int)1 );
                        for (int _6500 = _11597; _6500 < _11598; ++_6500)
                        {
                          {
                            int _11599 = (int)0;
                            int _11600 = _ptr__6480[(int)4];
                            for (int _6501 = _11599; _6501 < _11600; ++_6501)
                            {
                              {
                                int _6502 = safe_add( safe_add( safe_add( safe_add( safe_mul( _6497,_ptr__6485[(int)0] ),safe_mul( _6498,_ptr__6485[(int)1] ) ),safe_mul( _6499,_ptr__6485[(int)2] ) ),safe_mul( _6500,_ptr__6485[(int)3] ) ),safe_mul( _6501,_ptr__6485[(int)4] ) );
                                _6487 += (_ptr__6474[safe_add( safe_add( _6467,_6502 ),(int)1 )] - _ptr__6474[safe_add( _6467,_6502 )]);
                                if ((_6464 > (int)0))
                                {
                                  {
                                    _6489 += (_ptr__6474[safe_add( _6469,_ptr__6474[safe_add( safe_add( _6467,_6502 ),(int)1 )] )] - _ptr__6474[safe_add( _6469,_ptr__6474[safe_add( _6467,_6502 )] )]);
                                  }
                                }
                                {}
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        else
        {
          {
            int _11601 = (int)0;
            int _11602 = _ptr__6480[(int)0];
            for (int _6503 = _11601; _6503 < _11602; ++_6503)
            {
              {
                int _11603 = (int)0;
                int _11604 = _ptr__6480[(int)1];
                for (int _6504 = _11603; _6504 < _11604; ++_6504)
                {
                  {
                    int _11605 = (int)0;
                    int _11606 = _ptr__6480[(int)2];
                    for (int _6505 = _11605; _6505 < _11606; ++_6505)
                    {
                      {
                        int _11607 = _6504;
                        int _11608 = _ptr__6480[(int)3];
                        for (int _6506 = _11607; _6506 < _11608; ++_6506)
                        {
                          {
                            int _11609 = (int)0;
                            int _11610 = _ptr__6480[(int)4];
                            for (int _6507 = _11609; _6507 < _11610; ++_6507)
                            {
                              {
                                int _6508 = safe_add( safe_add( safe_add( safe_add( safe_mul( _6503,_ptr__6485[(int)0] ),safe_mul( _6504,_ptr__6485[(int)1] ) ),safe_mul( _6505,_ptr__6485[(int)2] ) ),safe_mul( _6506,_ptr__6485[(int)3] ) ),safe_mul( _6507,_ptr__6485[(int)4] ) );
                                _6487 += (_ptr__6474[safe_add( safe_add( _6467,_6508 ),(int)1 )] - _ptr__6474[safe_add( _6467,_6508 )]);
                                if ((_6464 > (int)0))
                                {
                                  {
                                    _6489 += (_ptr__6474[safe_add( _6469,_ptr__6474[safe_add( safe_add( _6467,_6508 ),(int)1 )] )] - _ptr__6474[safe_add( _6469,_ptr__6474[safe_add( _6467,_6508 )] )]);
                                  }
                                }
                                {}
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  int _6509 = (safe_mul( safe_mul( safe_mul( safe_mul( _ptr__6480[(int)0],_ptr__6480[(int)2] ),_ptr__6480[(int)4] ),_ptr__6480[(int)1] ),safe_add( _ptr__6480[(int)1],(int)1 ) ) / (int)2);
  _6458->alloc_expr(_6461,_6488,_6487,true,_6489);
  int _6510 = mosek::fusion::p_WorkStack::_get_impl(_6458)->ptr_base;
  int _6511 = mosek::fusion::p_WorkStack::_get_impl(_6458)->shape_base;
  int _6512 = mosek::fusion::p_WorkStack::_get_impl(_6458)->nidxs_base;
  int _6513 = mosek::fusion::p_WorkStack::_get_impl(_6458)->sp_base;
  int _6514 = mosek::fusion::p_WorkStack::_get_impl(_6458)->cof_base;
  int _6515 = mosek::fusion::p_WorkStack::_get_impl(_6458)->code_base;
  int _6516 = mosek::fusion::p_WorkStack::_get_impl(_6458)->codeptr_base;
  int _6517 = mosek::fusion::p_WorkStack::_get_impl(_6458)->cconst_base;
  std::shared_ptr< monty::ndarray< int,1 > > _6518 = mosek::fusion::p_WorkStack::_get_impl(_6458)->i32;
  _checked_ptr_1<int> _ptr__6518(_6518 ? _6518->raw() : nullptr,_6518 ? _6518->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _6519 = mosek::fusion::p_WorkStack::_get_impl(_6458)->i64;
  _checked_ptr_1<long long> _ptr__6519(_6519 ? _6519->raw() : nullptr,_6519 ? _6519->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _6520 = mosek::fusion::p_WorkStack::_get_impl(_6458)->f64;
  _checked_ptr_1<double> _ptr__6520(_6520 ? _6520->raw() : nullptr,_6520 ? _6520->size(0) : 0);
  _ptr__6518[_6510] = (int)0;
  if ((_6489 > (int)0))
  {
    {
      _ptr__6518[_6516] = (int)0;
    }
  }
  {}
  int _11611 = (int)0;
  int _11612 = _6461;
  for (int _6521 = _11611; _6521 < _11612; ++_6521)
  {
    {
      _ptr__6518[safe_add( _6511,_6521 )] = _ptr__6474[safe_add( _6466,_6521 )];
    }
  }
  if (_6479)
  {
    {
      int _6522 = (int)0;
      int _11613 = (int)0;
      int _11614 = _ptr__6480[(int)0];
      for (int _6523 = _11613; _6523 < _11614; ++_6523)
      {
        {
          int _11615 = (int)0;
          int _11616 = _ptr__6480[(int)1];
          for (int _6524 = _11615; _6524 < _11616; ++_6524)
          {
            {
              int _11617 = (int)0;
              int _11618 = _ptr__6480[(int)2];
              for (int _6525 = _11617; _6525 < _11618; ++_6525)
              {
                {
                  int _11619 = (int)0;
                  int _11620 = safe_add( _6524,(int)1 );
                  for (int _6526 = _11619; _6526 < _11620; ++_6526)
                  {
                    {
                      int _11621 = (int)0;
                      int _11622 = _ptr__6480[(int)4];
                      for (int _6527 = _11621; _6527 < _11622; ++_6527)
                      {
                        {
                          _ptr__6519[safe_add( _6513,_6522 )] = safe_add( safe_add( safe_add( safe_add( safe_mul( _6523,_ptr__6485[(int)0] ),safe_mul( _6524,_ptr__6485[(int)1] ) ),safe_mul( _6525,_ptr__6485[(int)2] ) ),safe_mul( _6526,_ptr__6485[(int)3] ) ),safe_mul( _6527,_ptr__6485[(int)4] ) );
                          ++ _6522;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      if ((_6522 != _6488))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Invalid nelem"));
        }
      }
      {}
    }
  }
  else
  {
    {
      int _6528 = (int)0;
      int _11623 = (int)0;
      int _11624 = _ptr__6480[(int)0];
      for (int _6529 = _11623; _6529 < _11624; ++_6529)
      {
        {
          int _11625 = (int)0;
          int _11626 = _ptr__6480[(int)1];
          for (int _6530 = _11625; _6530 < _11626; ++_6530)
          {
            {
              int _11627 = (int)0;
              int _11628 = _ptr__6480[(int)2];
              for (int _6531 = _11627; _6531 < _11628; ++_6531)
              {
                {
                  int _11629 = _6530;
                  int _11630 = _ptr__6480[(int)3];
                  for (int _6532 = _11629; _6532 < _11630; ++_6532)
                  {
                    {
                      int _11631 = (int)0;
                      int _11632 = _ptr__6480[(int)4];
                      for (int _6533 = _11631; _6533 < _11632; ++_6533)
                      {
                        {
                          _ptr__6519[safe_add( _6513,_6528 )] = safe_add( safe_add( safe_add( safe_add( safe_mul( _6529,_ptr__6485[(int)0] ),safe_mul( _6530,_ptr__6485[(int)1] ) ),safe_mul( _6531,_ptr__6485[(int)2] ) ),safe_mul( _6532,_ptr__6485[(int)3] ) ),safe_mul( _6533,_ptr__6485[(int)4] ) );
                          ++ _6528;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      if ((_6528 != _6488))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Invalid nelem"));
        }
      }
      {}
    }
  }
  {
    int _6534 = (int)0;
    int _6535 = (int)0;
    if (_6465)
    {
      {
        int _6536 = (int)0;
        int _6537 = (int)0;
        while ( ((_6537 < _6463) && (_6536 < _6509)) )
        {
          {
            if ((_ptr__6475[safe_add( _6472,_6537 )] < _ptr__6519[safe_add( _6513,_6536 )]))
            {
              {
                ++ _6537;
              }
            }
            else if((_ptr__6475[safe_add( _6472,_6537 )] > _ptr__6519[safe_add( _6513,_6536 )]))
            {
              {
                _ptr__6518[safe_add( safe_add( _6510,_6536 ),(int)1 )] = _6534;
                ++ _6536;
              }
            }
            else
            {
              {
                int _11633 = _ptr__6474[safe_add( _6467,_6537 )];
                int _11634 = _ptr__6474[safe_add( safe_add( _6467,_6537 ),(int)1 )];
                for (int _6538 = _11633; _6538 < _11634; ++_6538)
                {
                  {
                    _ptr__6519[safe_add( _6512,_6534 )] = _ptr__6475[safe_add( _6471,_6538 )];
                    _ptr__6520[safe_add( _6514,_6534 )] = _ptr__6476[safe_add( _6473,_6538 )];
                    if ((_6489 > (int)0))
                    {
                      {
                        int _11635 = _ptr__6474[safe_add( _6469,_6538 )];
                        int _11636 = _ptr__6474[safe_add( safe_add( _6469,_6538 ),(int)1 )];
                        for (int _6539 = _11635; _6539 < _11636; ++_6539)
                        {
                          {
                            _ptr__6518[safe_add( _6515,_6535 )] = _ptr__6474[safe_add( _6468,_6539 )];
                            _ptr__6520[safe_add( _6517,_6535 )] = _ptr__6476[safe_add( _6470,_6539 )];
                            ++ _6535;
                          }
                        }
                        _ptr__6518[safe_add( safe_add( _6516,_6534 ),(int)1 )] = _6535;
                      }
                    }
                    {}
                    ++ _6534;
                  }
                }
                _ptr__6518[safe_add( safe_add( _6510,_6536 ),(int)1 )] = _6534;
                ++ _6537;
                ++ _6536;
              }
            }
          }
        }
        while ( (_6536 < _6509) )
        {
          {
            _ptr__6518[safe_add( safe_add( _6510,_6536 ),(int)1 )] = _6534;
            ++ _6536;
          }
        }
      }
    }
    else
    {
      {
        int _11637 = (int)0;
        int _11638 = _6509;
        for (int _6540 = _11637; _6540 < _11638; ++_6540)
        {
          {
            long long _6541 = _ptr__6519[safe_add( _6513,_6540 )];
            int _11639 = _ptr__6474[safe_add( _6467,_6541 )];
            int _11640 = _ptr__6474[safe_add( safe_add( _6467,_6541 ),(int)1 )];
            for (int _6542 = _11639; _6542 < _11640; ++_6542)
            {
              {
                _ptr__6519[safe_add( _6512,_6534 )] = _ptr__6475[safe_add( _6471,_6542 )];
                _ptr__6520[safe_add( _6514,_6534 )] = _ptr__6476[safe_add( _6473,_6542 )];
                if ((_6489 > (int)0))
                {
                  {
                    int _11641 = _ptr__6474[safe_add( _6469,_6542 )];
                    int _11642 = _ptr__6474[safe_add( safe_add( _6469,_6542 ),(int)1 )];
                    for (int _6543 = _11641; _6543 < _11642; ++_6543)
                    {
                      {
                        _ptr__6518[safe_add( _6515,_6535 )] = _ptr__6474[safe_add( _6468,_6543 )];
                        _ptr__6520[safe_add( _6517,_6535 )] = _ptr__6476[safe_add( _6470,_6543 )];
                        ++ _6535;
                      }
                    }
                    _ptr__6518[safe_add( safe_add( _6516,_6534 ),(int)1 )] = _6535;
                  }
                }
                {}
                ++ _6534;
              }
            }
            _ptr__6518[safe_add( safe_add( _6510,_6540 ),(int)1 )] = _6534;
          }
        }
      }
    }
    if ((_6534 != _6487))
    {
      {
        throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Invalid nnz"));
      }
    }
    {}
  }
}
std::string mosek::fusion::ExprDenseTril :: toString() { return mosek::fusion::p_ExprDenseTril::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprDenseTril::toString(){
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprDenseTril(symdim=("))->__mosek_2fusion_2Utils_2StringBuffer__a(dim0)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(dim1)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("),"))->__mosek_2fusion_2Utils_2StringBuffer__a(expr->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
void mosek::fusion::p_ExprDenseTril::destroy(){expr.reset();}void mosek::fusion::ExprDenseTril::destroy() { mosek::fusion::p_ExprDenseTril::_get_impl(this)->destroy(); }mosek::fusion::ExprDense::ExprDense(mosek::fusion::p_ExprDense *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprDense()" << this << std::endl; */ }mosek::fusion::ExprDense::~ExprDense() {  /* std::cout << "~ExprDense()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprDense::p_ExprDense  (::mosek::fusion::ExprDense * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprDense::t mosek::fusion::p_ExprDense::_new_ExprDense  (monty::rc_ptr< ::mosek::fusion::Expression > _6544){ return new mosek::fusion::ExprDense(_6544); }mosek::fusion::ExprDense::ExprDense  (monty::rc_ptr< ::mosek::fusion::Expression > _6544) :    ExprDense(new mosek::fusion::p_ExprDense(this)){ mosek::fusion::p_ExprDense::_get_impl(this)->_initialize(_6544); }void mosek::fusion::p_ExprDense::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _6544){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(_6544->getShape());
    mosek::fusion::p_ExprDense::_get_impl(::mosek::fusion::ExprDense::t(_pubthis))->expr = _6544;
  }
}void mosek::fusion::ExprDense :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _6545,monty::rc_ptr< ::mosek::fusion::WorkStack > _6546,monty::rc_ptr< ::mosek::fusion::WorkStack > _6547) { mosek::fusion::p_ExprDense::_get_impl(this)->eval(_6545,_6546,_6547); }void mosek::fusion::p_ExprDense::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _6545,monty::rc_ptr< ::mosek::fusion::WorkStack > _6546,monty::rc_ptr< ::mosek::fusion::WorkStack > _6547){
  expr->eval(_6546,_6545,_6547);
  _6546->pop_expr();
  int _6548 = mosek::fusion::p_WorkStack::_get_impl(_6546)->nd;
  int _6549 = mosek::fusion::p_WorkStack::_get_impl(_6546)->nnz;
  int _6550 = mosek::fusion::p_WorkStack::_get_impl(_6546)->nelem;
  int _6551 = mosek::fusion::p_WorkStack::_get_impl(_6546)->ncodeatom;
  bool _6552 = mosek::fusion::p_WorkStack::_get_impl(_6546)->hassp;
  int _6553 = mosek::fusion::p_WorkStack::_get_impl(_6546)->shape_base;
  int _6554 = mosek::fusion::p_WorkStack::_get_impl(_6546)->ptr_base;
  int _6555 = mosek::fusion::p_WorkStack::_get_impl(_6546)->nidxs_base;
  int _6556 = mosek::fusion::p_WorkStack::_get_impl(_6546)->cof_base;
  int _6557 = mosek::fusion::p_WorkStack::_get_impl(_6546)->sp_base;
  int _6558 = mosek::fusion::p_WorkStack::_get_impl(_6546)->codeptr_base;
  int _6559 = mosek::fusion::p_WorkStack::_get_impl(_6546)->code_base;
  int _6560 = mosek::fusion::p_WorkStack::_get_impl(_6546)->cconst_base;
  std::shared_ptr< monty::ndarray< int,1 > > _6561 = mosek::fusion::p_WorkStack::_get_impl(_6546)->i32;
  _checked_ptr_1<int> _ptr__6561(_6561 ? _6561->raw() : nullptr,_6561 ? _6561->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _6562 = mosek::fusion::p_WorkStack::_get_impl(_6546)->i64;
  _checked_ptr_1<long long> _ptr__6562(_6562 ? _6562->raw() : nullptr,_6562 ? _6562->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _6563 = mosek::fusion::p_WorkStack::_get_impl(_6546)->f64;
  _checked_ptr_1<double> _ptr__6563(_6563 ? _6563->raw() : nullptr,_6563 ? _6563->size(0) : 0);
  int _6564 = (int)1;
  if (_6552)
  {
    {
      bool _6565 = true;
      int _11643 = (int)0;
      int _11644 = _6548;
      for (int _6566 = _11643; _6566 < _11644; ++_6566)
      {
        {
          int _6567 = safe_mul( _6564,_ptr__6561[safe_add( _6553,_6566 )] );
          _6565 = (_6565 && ((_ptr__6561[safe_add( _6553,_6566 )] == (int)0) || ((_6567 / _ptr__6561[safe_add( _6553,_6566 )]) == _6564)));
          _6564 = _6567;
        }
      }
      if ((!_6565))
      {
        {
          throw ::mosek::fusion::LengthError(std::string ("The domain is too large"));
        }
      }
      {}
    }
  }
  else
  {
    {
      _6564 = _6550;
    }
  }
  _6545->alloc_expr(_6548,_6564,_6549,false,_6551);
  int _6568 = mosek::fusion::p_WorkStack::_get_impl(_6545)->shape_base;
  int _6569 = mosek::fusion::p_WorkStack::_get_impl(_6545)->ptr_base;
  int _6570 = mosek::fusion::p_WorkStack::_get_impl(_6545)->nidxs_base;
  int _6571 = mosek::fusion::p_WorkStack::_get_impl(_6545)->cof_base;
  int _6572 = mosek::fusion::p_WorkStack::_get_impl(_6545)->codeptr_base;
  int _6573 = mosek::fusion::p_WorkStack::_get_impl(_6545)->code_base;
  int _6574 = mosek::fusion::p_WorkStack::_get_impl(_6545)->cconst_base;
  std::shared_ptr< monty::ndarray< int,1 > > _6575 = mosek::fusion::p_WorkStack::_get_impl(_6545)->i32;
  _checked_ptr_1<int> _ptr__6575(_6575 ? _6575->raw() : nullptr,_6575 ? _6575->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _6576 = mosek::fusion::p_WorkStack::_get_impl(_6545)->i64;
  _checked_ptr_1<long long> _ptr__6576(_6576 ? _6576->raw() : nullptr,_6576 ? _6576->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _6577 = mosek::fusion::p_WorkStack::_get_impl(_6545)->f64;
  _checked_ptr_1<double> _ptr__6577(_6577 ? _6577->raw() : nullptr,_6577 ? _6577->size(0) : 0);
  {
    int _11645 = (int)0;
    int _11646 = _6548;
    for (int _6578 = _11645; _6578 < _11646; ++_6578)
    {
      {
        _ptr__6575[safe_add( _6568,_6578 )] = _ptr__6561[safe_add( _6553,_6578 )];
      }
    }
    int _11647 = (int)0;
    int _11648 = _6549;
    for (int _6579 = _11647; _6579 < _11648; ++_6579)
    {
      {
        _ptr__6576[safe_add( _6570,_6579 )] = _ptr__6562[safe_add( _6555,_6579 )];
      }
    }
    int _11649 = (int)0;
    int _11650 = _6549;
    for (int _6580 = _11649; _6580 < _11650; ++_6580)
    {
      {
        _ptr__6577[safe_add( _6571,_6580 )] = _ptr__6563[safe_add( _6556,_6580 )];
      }
    }
    if ((_6551 > (int)0))
    {
      {
        int _11651 = (int)0;
        int _11652 = safe_add( _6549,(int)1 );
        for (int _6581 = _11651; _6581 < _11652; ++_6581)
        {
          {
            _ptr__6575[safe_add( _6572,_6581 )] = _ptr__6561[safe_add( _6558,_6581 )];
          }
        }
        int _11653 = (int)0;
        int _11654 = _6551;
        for (int _6582 = _11653; _6582 < _11654; ++_6582)
        {
          {
            _ptr__6575[safe_add( _6573,_6582 )] = _ptr__6561[safe_add( _6559,_6582 )];
          }
        }
        int _11655 = (int)0;
        int _11656 = _6551;
        for (int _6583 = _11655; _6583 < _11656; ++_6583)
        {
          {
            _ptr__6577[safe_add( _6574,_6583 )] = _ptr__6563[safe_add( _6560,_6583 )];
          }
        }
      }
    }
    {}
    if ((!_6552))
    {
      {
        int _11657 = (int)0;
        int _11658 = safe_add( _6564,(int)1 );
        for (int _6584 = _11657; _6584 < _11658; ++_6584)
        {
          {
            _ptr__6575[safe_add( _6569,_6584 )] = _ptr__6561[safe_add( _6554,_6584 )];
          }
        }
      }
    }
    else
    {
      {
        int _11659 = (int)0;
        int _11660 = safe_add( _6564,(int)1 );
        for (int _6585 = _11659; _6585 < _11660; ++_6585)
        {
          {
            _ptr__6575[safe_add( _6569,_6585 )] = (int)0;
          }
        }
        int _11661 = (int)0;
        int _11662 = _6550;
        for (int _6586 = _11661; _6586 < _11662; ++_6586)
        {
          {
            _ptr__6575[safe_add( safe_add( _6569,_ptr__6562[safe_add( _6557,_6586 )] ),(int)1 )] = (_ptr__6561[safe_add( safe_add( _6554,_6586 ),(int)1 )] - _ptr__6561[safe_add( _6554,_6586 )]);
          }
        }
        int _11663 = (int)0;
        int _11664 = _6564;
        for (int _6587 = _11663; _6587 < _11664; ++_6587)
        {
          {
            _ptr__6575[safe_add( safe_add( _6569,_6587 ),(int)1 )] += _ptr__6575[safe_add( _6569,_6587 )];
          }
        }
      }
    }
  }
}
std::string mosek::fusion::ExprDense :: toString() { return mosek::fusion::p_ExprDense::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprDense::toString(){
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprDense("))->__mosek_2fusion_2Utils_2StringBuffer__a(expr->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
void mosek::fusion::p_ExprDense::destroy(){expr.reset();}void mosek::fusion::ExprDense::destroy() { mosek::fusion::p_ExprDense::_get_impl(this)->destroy(); }mosek::fusion::ExprSymmetrize::ExprSymmetrize(mosek::fusion::p_ExprSymmetrize *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprSymmetrize()" << this << std::endl; */ }mosek::fusion::ExprSymmetrize::~ExprSymmetrize() {  /* std::cout << "~ExprSymmetrize()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprSymmetrize::p_ExprSymmetrize  (::mosek::fusion::ExprSymmetrize * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprSymmetrize::t mosek::fusion::p_ExprSymmetrize::_new_ExprSymmetrize  (int _6588,    int _6589,    monty::rc_ptr< ::mosek::fusion::Expression > _6590,    int _6591){ return new mosek::fusion::ExprSymmetrize(_6588,_6589,_6590,_6591); }mosek::fusion::ExprSymmetrize::ExprSymmetrize  (int _6588,    int _6589,    monty::rc_ptr< ::mosek::fusion::Expression > _6590,    int _6591) :    ExprSymmetrize(new mosek::fusion::p_ExprSymmetrize(this)){ mosek::fusion::p_ExprSymmetrize::_get_impl(this)->_initialize(_6588,_6589,_6590,_6591); }void mosek::fusion::p_ExprSymmetrize::_initialize  (int _6588,    int _6589,    monty::rc_ptr< ::mosek::fusion::Expression > _6590,    int _6591){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(_6590->getShape());
    mosek::fusion::p_ExprSymmetrize::_get_impl(::mosek::fusion::ExprSymmetrize::t(_pubthis))->expr = _6590;
    if ((_6588 < _6589))
    {
      {
        mosek::fusion::p_ExprSymmetrize::_get_impl(::mosek::fusion::ExprSymmetrize::t(_pubthis))->dim0 = _6588;
        mosek::fusion::p_ExprSymmetrize::_get_impl(::mosek::fusion::ExprSymmetrize::t(_pubthis))->dim1 = _6589;
      }
    }
    else
    {
      {
        mosek::fusion::p_ExprSymmetrize::_get_impl(::mosek::fusion::ExprSymmetrize::t(_pubthis))->dim0 = _6589;
        mosek::fusion::p_ExprSymmetrize::_get_impl(::mosek::fusion::ExprSymmetrize::t(_pubthis))->dim1 = _6588;
      }
    }
  }
}mosek::fusion::ExprSymmetrize::t mosek::fusion::p_ExprSymmetrize::_new_ExprSymmetrize  (int _6592,    int _6593,    monty::rc_ptr< ::mosek::fusion::Expression > _6594){ return new mosek::fusion::ExprSymmetrize(_6592,_6593,_6594); }mosek::fusion::ExprSymmetrize::ExprSymmetrize  (int _6592,    int _6593,    monty::rc_ptr< ::mosek::fusion::Expression > _6594) :    ExprSymmetrize(new mosek::fusion::p_ExprSymmetrize(this)){ mosek::fusion::p_ExprSymmetrize::_get_impl(this)->_initialize(_6592,_6593,_6594); }void mosek::fusion::p_ExprSymmetrize::_initialize  (int _6592,    int _6593,    monty::rc_ptr< ::mosek::fusion::Expression > _6594){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_ExprSymmetrize::_initialize(_6592,_6593,_6594,(int)1);
    std::shared_ptr< monty::ndarray< int,1 > > _6595 = _6594->getShape();
    _checked_ptr_1<int> _ptr__6595(_6595 ? _6595->raw() : nullptr,_6595 ? _6595->size(0) : 0);
    if (((dim0 < (int)0) || ((dim0 == dim1) || ((dim1 >= (int)((_6595)->size(0))) || (_ptr__6595[dim0] != _ptr__6595[dim1])))))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Invalid dimension definitions"));
      }
    }
    {}
  }
}void mosek::fusion::ExprSymmetrize :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _6596,monty::rc_ptr< ::mosek::fusion::WorkStack > _6597,monty::rc_ptr< ::mosek::fusion::WorkStack > _6598) { mosek::fusion::p_ExprSymmetrize::_get_impl(this)->eval(_6596,_6597,_6598); }void mosek::fusion::p_ExprSymmetrize::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _6596,monty::rc_ptr< ::mosek::fusion::WorkStack > _6597,monty::rc_ptr< ::mosek::fusion::WorkStack > _6598){
  expr->eval(_6597,_6596,_6598);
  _6597->pop_expr();
  int _6599 = (int)0;
  int _6600 = mosek::fusion::p_WorkStack::_get_impl(_6597)->nd;
  int _6601 = mosek::fusion::p_WorkStack::_get_impl(_6597)->nnz;
  int _6602 = mosek::fusion::p_WorkStack::_get_impl(_6597)->nelem;
  int _6603 = mosek::fusion::p_WorkStack::_get_impl(_6597)->ncodeatom;
  bool _6604 = mosek::fusion::p_WorkStack::_get_impl(_6597)->hassp;
  int _6605 = mosek::fusion::p_WorkStack::_get_impl(_6597)->shape_base;
  int _6606 = mosek::fusion::p_WorkStack::_get_impl(_6597)->ptr_base;
  int _6607 = mosek::fusion::p_WorkStack::_get_impl(_6597)->code_base;
  int _6608 = mosek::fusion::p_WorkStack::_get_impl(_6597)->codeptr_base;
  int _6609 = mosek::fusion::p_WorkStack::_get_impl(_6597)->cconst_base;
  int _6610 = mosek::fusion::p_WorkStack::_get_impl(_6597)->nidxs_base;
  int _6611 = mosek::fusion::p_WorkStack::_get_impl(_6597)->sp_base;
  int _6612 = mosek::fusion::p_WorkStack::_get_impl(_6597)->cof_base;
  std::shared_ptr< monty::ndarray< int,1 > > _6613 = mosek::fusion::p_WorkStack::_get_impl(_6597)->i32;
  _checked_ptr_1<int> _ptr__6613(_6613 ? _6613->raw() : nullptr,_6613 ? _6613->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _6614 = mosek::fusion::p_WorkStack::_get_impl(_6597)->i64;
  _checked_ptr_1<long long> _ptr__6614(_6614 ? _6614->raw() : nullptr,_6614 ? _6614->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _6615 = mosek::fusion::p_WorkStack::_get_impl(_6597)->f64;
  _checked_ptr_1<double> _ptr__6615(_6615 ? _6615->raw() : nullptr,_6615 ? _6615->size(0) : 0);
  int _11665 = (int)0;
  int _11666 = _6600;
  for (int _6616 = _11665; _6616 < _11666; ++_6616)
  {
    {
      int _6617 = _ptr__6613[safe_add( _6605,_6616 )];
      if ((_6617 > _6599))
      {
        {
          _6617 = _6599;
        }
      }
      {}
    }
  }
  int _6618 = _6598->alloci32(_6602);
  int _6619 = _6598->alloci32(_6602);
  int _6620 = _6598->alloci32(safe_add( _6599,(int)1 ));
  int _6621 = _6598->alloci64(_6602);
  std::shared_ptr< monty::ndarray< int,1 > > _6622 = mosek::fusion::p_WorkStack::_get_impl(_6598)->i32;
  _checked_ptr_1<int> _ptr__6622(_6622 ? _6622->raw() : nullptr,_6622 ? _6622->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _6623 = mosek::fusion::p_WorkStack::_get_impl(_6598)->i64;
  _checked_ptr_1<long long> _ptr__6623(_6623 ? _6623->raw() : nullptr,_6623 ? _6623->size(0) : 0);
  int _6624 = (int)0;
  int _6625 = (int)0;
  int _6626 = (int)0;
  std::vector<int> _11667;
  for (int _6628 = (int)0, _11668 = (int)5; _6628 < _11668 ; ++_6628)
  {
    _11667.push_back((int)1);
  }
  auto _11669 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_11667.size()),_11667.begin(),_11667.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _6627 = _11669;
  _checked_ptr_1<int> _ptr__6627(_6627 ? _6627->raw() : nullptr,_6627 ? _6627->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _6629 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)5)));
  _checked_ptr_1<long long> _ptr__6629(_6629 ? _6629->raw() : nullptr,_6629 ? _6629->size(0) : 0);
  int _11670 = (int)0;
  int _11671 = dim0;
  for (int _6630 = _11670; _6630 < _11671; ++_6630)
  {
    {
      _ptr__6627[(int)0] *= _ptr__6613[safe_add( _6605,_6630 )];
    }
  }
  _ptr__6627[(int)1] = _ptr__6613[safe_add( _6605,dim0 )];
  int _11672 = safe_add( dim0,(int)1 );
  int _11673 = dim1;
  for (int _6631 = _11672; _6631 < _11673; ++_6631)
  {
    {
      _ptr__6627[(int)2] *= _ptr__6613[safe_add( _6605,_6631 )];
    }
  }
  _ptr__6627[(int)3] = _ptr__6613[safe_add( _6605,dim1 )];
  int _11674 = safe_add( dim1,(int)1 );
  int _11675 = _6600;
  for (int _6632 = _11674; _6632 < _11675; ++_6632)
  {
    {
      _ptr__6627[(int)4] *= _ptr__6613[safe_add( _6605,_6632 )];
    }
  }
  _ptr__6629[(int)4] = (int)1;
  int _11676 = (int)1;
  int _11677 = (int)5;
  for (int _6633 = _11676; _6633 < _11677; ++_6633)
  {
    {
      _ptr__6629[(((int)5 - _6633) - (int)1)] = safe_mul( _ptr__6629[((int)5 - _6633)],_ptr__6627[((int)5 - _6633)] );
    }
  }
  if (_6604)
  {
    {
      int _6634 = _6618;
      int _11678 = (int)0;
      int _11679 = _6602;
      for (int _6635 = _11678; _6635 < _11679; ++_6635)
      {
        {
          _ptr__6622[safe_add( _6634,_6635 )] = _6635;
        }
      }
      int _6636 = _6619;
      std::shared_ptr< monty::ndarray< int,1 > > _6637 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)1),(int)((int)2),(int)((int)3),(int)((int)0)});
      _checked_ptr_1<int> _ptr__6637(_6637 ? _6637->raw() : nullptr,_6637 ? _6637->size(0) : 0);
      int _11680 = (int)0;
      int _11681 = (int)4;
      for (int _6638 = _11680; _6638 < _11681; ++_6638)
      {
        {
          long long _6639 = _ptr__6629[_ptr__6637[_6638]];
          int _6640 = _ptr__6627[_ptr__6637[_6638]];
          if ((_6640 > (int)1))
          {
            {
              int _11682 = (int)0;
              int _11683 = safe_add( _6640,(int)1 );
              for (int _6641 = _11682; _6641 < _11683; ++_6641)
              {
                {
                  _ptr__6622[safe_add( _6620,_6641 )] = (int)0;
                }
              }
              int _11684 = (int)0;
              int _11685 = _6602;
              for (int _6642 = _11684; _6642 < _11685; ++_6642)
              {
                {
                  ++ _ptr__6622[safe_add( safe_add( _6620,((_ptr__6614[safe_add( _6611,_ptr__6622[safe_add( _6634,_6642 )] )] / _6639) % _6640) ),(int)1 )];
                }
              }
              int _11686 = (int)0;
              int _11687 = _ptr__6627[(int)3];
              for (int _6643 = _11686; _6643 < _11687; ++_6643)
              {
                {
                  _ptr__6622[safe_add( safe_add( _6620,_6643 ),(int)1 )] += _ptr__6622[safe_add( _6620,_6643 )];
                }
              }
              int _11688 = (int)0;
              int _11689 = _6602;
              for (int _6644 = _11688; _6644 < _11689; ++_6644)
              {
                {
                  int _6645 = _ptr__6622[safe_add( _6634,_6644 )];
                  long long _6646 = ((_ptr__6614[safe_add( _6611,_6645 )] / _6639) % _6640);
                  _ptr__6622[safe_add( _6636,_ptr__6622[safe_add( _6620,_6646 )] )] = _6645;
                  ++ _ptr__6622[safe_add( _6620,_6646 )];
                }
              }
              int _6647 = _6634;
              _6634 = _6636;
              _6636 = _6647;
            }
          }
          {}
        }
      }
      int _11690 = (int)0;
      int _11691 = _6602;
      for (int _6648 = _11690; _6648 < _11691; ++_6648)
      {
        {
          _ptr__6623[safe_add( _6621,_6648 )] = safe_add( safe_add( safe_add( safe_add( safe_mul( ((_ptr__6614[safe_add( _6611,_6648 )] / _ptr__6629[(int)0]) % _ptr__6627[(int)0]),_ptr__6629[(int)0] ),safe_mul( ((_ptr__6614[safe_add( _6611,_6648 )] / _ptr__6629[(int)1]) % _ptr__6627[(int)1]),_ptr__6629[(int)3] ) ),safe_mul( ((_ptr__6614[safe_add( _6611,_6648 )] / _ptr__6629[(int)2]) % _ptr__6627[(int)2]),_ptr__6629[(int)2] ) ),safe_mul( ((_ptr__6614[safe_add( _6611,_6648 )] / _ptr__6629[(int)3]) % _ptr__6627[(int)3]),_ptr__6629[(int)1] ) ),safe_mul( ((_ptr__6614[safe_add( _6611,_6648 )] / _ptr__6629[(int)4]) % _ptr__6627[(int)4]),_ptr__6629[(int)4] ) );
        }
      }
      {
        int _6649 = (int)0;
        int _6650 = (int)0;
        while ( ((_6650 < _6602) || (_6649 < _6602)) )
        {
          {
            int _6651 = _ptr__6622[safe_add( _6634,_6649 )];
            if (((_6650 < _6602) && ((_6649 == _6602) || (_ptr__6614[safe_add( _6611,_6650 )] < _ptr__6623[safe_add( _6621,_6651 )]))))
            {
              {
                _6625 += (_ptr__6613[safe_add( safe_add( _6606,_6650 ),(int)1 )] - _ptr__6613[safe_add( _6606,_6650 )]);
                if ((_6603 > (int)0))
                {
                  {
                    _6626 += safe_add( (_ptr__6613[safe_add( _6608,_ptr__6613[safe_add( safe_add( _6606,_6650 ),(int)1 )] )] - _ptr__6613[safe_add( _6608,_ptr__6613[safe_add( _6606,_6650 )] )]),safe_mul( (int)2,(_ptr__6613[safe_add( safe_add( _6606,_6650 ),(int)1 )] - _ptr__6613[safe_add( _6606,_6650 )]) ) );
                  }
                }
                {}
                ++ _6624;
                ++ _6650;
              }
            }
            else if(((_6649 < _6602) && ((_6650 == _6602) || (_ptr__6614[safe_add( _6611,_6650 )] > _ptr__6623[safe_add( _6621,_6651 )]))))
            {
              {
                _6625 += (_ptr__6613[safe_add( safe_add( _6606,_6651 ),(int)1 )] - _ptr__6613[safe_add( _6606,_6651 )]);
                if ((_6603 > (int)0))
                {
                  {
                    _6626 += safe_add( (_ptr__6613[safe_add( _6608,_ptr__6613[safe_add( safe_add( _6606,_6651 ),(int)1 )] )] - _ptr__6613[safe_add( _6608,_ptr__6613[safe_add( _6606,_6651 )] )]),safe_mul( (int)2,(_ptr__6613[safe_add( safe_add( _6606,_6651 ),(int)1 )] - _ptr__6613[safe_add( _6606,_6651 )]) ) );
                  }
                }
                {}
                ++ _6624;
                ++ _6649;
              }
            }
            else if((_ptr__6614[safe_add( _6611,_6650 )] != _ptr__6623[safe_add( _6621,_6651 )]))
            {
              {
                _6625 += (_ptr__6613[safe_add( safe_add( _6606,_6650 ),(int)1 )] - _ptr__6613[safe_add( _6606,_6650 )]);
                _6625 += (_ptr__6613[safe_add( safe_add( _6606,_6651 ),(int)1 )] - _ptr__6613[safe_add( _6606,_6651 )]);
                if ((_6603 > (int)0))
                {
                  {
                    _6626 += safe_add( (_ptr__6613[safe_add( _6608,_ptr__6613[safe_add( safe_add( _6606,_6650 ),(int)1 )] )] - _ptr__6613[safe_add( _6608,_ptr__6613[safe_add( _6606,_6650 )] )]),safe_mul( (int)2,(_ptr__6613[safe_add( safe_add( _6606,_6650 ),(int)1 )] - _ptr__6613[safe_add( _6606,_6650 )]) ) );
                    _6626 += safe_add( (_ptr__6613[safe_add( _6608,_ptr__6613[safe_add( safe_add( _6606,_6651 ),(int)1 )] )] - _ptr__6613[safe_add( _6608,_ptr__6613[safe_add( _6606,_6651 )] )]),safe_mul( (int)2,(_ptr__6613[safe_add( safe_add( _6606,_6651 ),(int)1 )] - _ptr__6613[safe_add( _6606,_6651 )]) ) );
                  }
                }
                {}
                ++ _6624;
                ++ _6649;
                ++ _6650;
              }
            }
            else
            {
              {
                _6625 += (_ptr__6613[safe_add( safe_add( _6606,_6650 ),(int)1 )] - _ptr__6613[safe_add( _6606,_6650 )]);
                if ((_6603 > (int)0))
                {
                  {
                    _6626 += (_ptr__6613[safe_add( _6608,_ptr__6613[safe_add( safe_add( _6606,_6650 ),(int)1 )] )] - _ptr__6613[safe_add( _6608,_ptr__6613[safe_add( _6606,_6650 )] )]);
                  }
                }
                {}
                ++ _6624;
                ++ _6649;
                ++ _6650;
              }
            }
          }
        }
      }
      _6596->alloc_expr(_6600,_6624,_6625,true,_6626);
      int _6652 = _6600;
      int _6653 = mosek::fusion::p_WorkStack::_get_impl(_6596)->ptr_base;
      int _6654 = mosek::fusion::p_WorkStack::_get_impl(_6596)->nidxs_base;
      int _6655 = mosek::fusion::p_WorkStack::_get_impl(_6596)->shape_base;
      int _6656 = mosek::fusion::p_WorkStack::_get_impl(_6596)->sp_base;
      int _6657 = mosek::fusion::p_WorkStack::_get_impl(_6596)->cof_base;
      int _6658 = mosek::fusion::p_WorkStack::_get_impl(_6596)->code_base;
      int _6659 = mosek::fusion::p_WorkStack::_get_impl(_6596)->codeptr_base;
      int _6660 = mosek::fusion::p_WorkStack::_get_impl(_6596)->cconst_base;
      std::shared_ptr< monty::ndarray< int,1 > > _6661 = mosek::fusion::p_WorkStack::_get_impl(_6596)->i32;
      _checked_ptr_1<int> _ptr__6661(_6661 ? _6661->raw() : nullptr,_6661 ? _6661->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _6662 = mosek::fusion::p_WorkStack::_get_impl(_6596)->i64;
      _checked_ptr_1<long long> _ptr__6662(_6662 ? _6662->raw() : nullptr,_6662 ? _6662->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _6663 = mosek::fusion::p_WorkStack::_get_impl(_6596)->f64;
      _checked_ptr_1<double> _ptr__6663(_6663 ? _6663->raw() : nullptr,_6663 ? _6663->size(0) : 0);
      int _11692 = (int)0;
      int _11693 = _6600;
      for (int _6664 = _11692; _6664 < _11693; ++_6664)
      {
        {
          _ptr__6661[safe_add( _6655,_6664 )] = _ptr__6613[safe_add( _6605,_6664 )];
        }
      }
      _ptr__6661[_6653] = (int)0;
      if ((_6626 > (int)0))
      {
        {
          _ptr__6661[_6659] = (int)0;
        }
      }
      {}
      {
        int _6665 = (int)0;
        int _6666 = (int)0;
        int _6667 = (int)0;
        int _6668 = (int)0;
        int _6669 = (int)0;
        _ptr__6661[_6653] = (int)0;
        while ( ((_6669 < _6602) || (_6668 < _6602)) )
        {
          {
            int _6670 = _ptr__6622[safe_add( _6634,_6668 )];
            if (((_6669 < _6602) && ((_6668 == _6602) || (_ptr__6614[safe_add( _6611,_6669 )] < _ptr__6623[safe_add( _6621,_6670 )]))))
            {
              {
                if ((_6626 == (int)0))
                {
                  {
                    int _11694 = _ptr__6613[safe_add( _6606,_6669 )];
                    int _11695 = _ptr__6613[safe_add( safe_add( _6606,_6669 ),(int)1 )];
                    for (int _6671 = _11694; _6671 < _11695; ++_6671)
                    {
                      {
                        _ptr__6662[safe_add( _6654,_6665 )] = _ptr__6614[safe_add( _6610,_6671 )];
                        _ptr__6663[safe_add( _6657,_6665 )] = (_ptr__6615[safe_add( _6612,_6671 )] * 0.5);
                        ++ _6665;
                      }
                    }
                  }
                }
                else
                {
                  {
                    int _11696 = _ptr__6613[safe_add( _6606,_6669 )];
                    int _11697 = _ptr__6613[safe_add( safe_add( _6606,_6669 ),(int)1 )];
                    for (int _6672 = _11696; _6672 < _11697; ++_6672)
                    {
                      {
                        _ptr__6662[safe_add( _6654,_6665 )] = _ptr__6614[safe_add( _6610,_6672 )];
                        _ptr__6663[safe_add( _6657,_6665 )] = (_ptr__6615[safe_add( _6612,_6672 )] * 0.5);
                        int _11698 = _ptr__6613[safe_add( _6608,_6672 )];
                        int _11699 = _ptr__6613[safe_add( safe_add( _6608,_6672 ),(int)1 )];
                        for (int _6673 = _11698; _6673 < _11699; ++_6673)
                        {
                          {
                            _ptr__6661[safe_add( _6658,_6666 )] = _ptr__6613[safe_add( _6607,_6673 )];
                            _ptr__6663[safe_add( _6660,_6666 )] = _ptr__6615[safe_add( _6609,_6673 )];
                            ++ _6666;
                          }
                        }
                        _ptr__6661[safe_add( _6658,_6666 )] = 2;
                        _ptr__6663[safe_add( _6660,_6666 )] = 0.5;
                        ++ _6666;
                        _ptr__6661[safe_add( _6658,_6666 )] = 5;
                        ++ _6666;
                        _ptr__6661[safe_add( safe_add( _6659,_6665 ),(int)1 )] = _6666;
                        ++ _6665;
                      }
                    }
                  }
                }
                _ptr__6662[safe_add( _6656,_6667 )] = _ptr__6614[safe_add( _6611,_6669 )];
                _ptr__6661[safe_add( safe_add( _6653,_6667 ),(int)1 )] = _6665;
                ++ _6667;
                ++ _6669;
              }
            }
            else if(((_6668 < _6602) && ((_6669 == _6602) || (_ptr__6614[safe_add( _6611,_6669 )] > _ptr__6623[safe_add( _6621,_6670 )]))))
            {
              {
                if ((_6626 == (int)0))
                {
                  {
                    int _11700 = _ptr__6613[safe_add( _6606,_6670 )];
                    int _11701 = _ptr__6613[safe_add( safe_add( _6606,_6670 ),(int)1 )];
                    for (int _6674 = _11700; _6674 < _11701; ++_6674)
                    {
                      {
                        _ptr__6662[safe_add( _6654,_6665 )] = _ptr__6614[safe_add( _6610,_6674 )];
                        _ptr__6663[safe_add( _6657,_6665 )] = (_ptr__6615[safe_add( _6612,_6674 )] * 0.5);
                        ++ _6665;
                      }
                    }
                  }
                }
                else
                {
                  {
                    int _11702 = _ptr__6613[safe_add( _6606,_6670 )];
                    int _11703 = _ptr__6613[safe_add( safe_add( _6606,_6670 ),(int)1 )];
                    for (int _6675 = _11702; _6675 < _11703; ++_6675)
                    {
                      {
                        _ptr__6662[safe_add( _6654,_6665 )] = _ptr__6614[safe_add( _6610,_6675 )];
                        _ptr__6663[safe_add( _6657,_6665 )] = (_ptr__6615[safe_add( _6612,_6675 )] * 0.5);
                        int _11704 = _ptr__6613[safe_add( _6608,_6675 )];
                        int _11705 = _ptr__6613[safe_add( safe_add( _6608,_6675 ),(int)1 )];
                        for (int _6676 = _11704; _6676 < _11705; ++_6676)
                        {
                          {
                            _ptr__6661[safe_add( _6658,_6666 )] = _ptr__6613[safe_add( _6607,_6676 )];
                            _ptr__6663[safe_add( _6660,_6666 )] = _ptr__6615[safe_add( _6609,_6676 )];
                            ++ _6666;
                          }
                        }
                        _ptr__6661[safe_add( _6658,_6666 )] = 2;
                        _ptr__6663[safe_add( _6660,_6666 )] = 0.5;
                        ++ _6666;
                        _ptr__6661[safe_add( _6658,_6666 )] = 5;
                        ++ _6666;
                        _ptr__6661[safe_add( safe_add( _6659,_6665 ),(int)1 )] = _6666;
                        ++ _6665;
                      }
                    }
                  }
                }
                _ptr__6662[safe_add( _6656,_6667 )] = _ptr__6614[safe_add( _6621,_6670 )];
                _ptr__6661[safe_add( safe_add( _6653,_6667 ),(int)1 )] = _6665;
                ++ _6667;
                ++ _6668;
              }
            }
            else if((_ptr__6614[safe_add( _6611,_6669 )] != _ptr__6623[safe_add( _6621,_6670 )]))
            {
              {
                if ((_6626 == (int)0))
                {
                  {
                    int _11706 = _ptr__6613[safe_add( _6606,_6669 )];
                    int _11707 = _ptr__6613[safe_add( safe_add( _6606,_6669 ),(int)1 )];
                    for (int _6677 = _11706; _6677 < _11707; ++_6677)
                    {
                      {
                        _ptr__6662[safe_add( _6654,_6665 )] = _ptr__6614[safe_add( _6610,_6677 )];
                        _ptr__6663[safe_add( _6657,_6665 )] = (_ptr__6615[safe_add( _6612,_6677 )] * 0.5);
                        ++ _6665;
                      }
                    }
                    int _11708 = _ptr__6613[safe_add( _6606,_6670 )];
                    int _11709 = _ptr__6613[safe_add( safe_add( _6606,_6670 ),(int)1 )];
                    for (int _6678 = _11708; _6678 < _11709; ++_6678)
                    {
                      {
                        _ptr__6662[safe_add( _6654,_6665 )] = _ptr__6614[safe_add( _6610,_6678 )];
                        _ptr__6663[safe_add( _6657,_6665 )] = (_ptr__6615[safe_add( _6612,_6678 )] * 0.5);
                        ++ _6665;
                      }
                    }
                  }
                }
                else
                {
                  {
                    int _11710 = _ptr__6613[safe_add( _6606,_6669 )];
                    int _11711 = _ptr__6613[safe_add( safe_add( _6606,_6669 ),(int)1 )];
                    for (int _6679 = _11710; _6679 < _11711; ++_6679)
                    {
                      {
                        _ptr__6662[safe_add( _6654,_6665 )] = _ptr__6614[safe_add( _6610,_6679 )];
                        _ptr__6663[safe_add( _6657,_6665 )] = (_ptr__6615[safe_add( _6612,_6679 )] * 0.5);
                        int _11712 = _ptr__6613[safe_add( _6608,_6679 )];
                        int _11713 = _ptr__6613[safe_add( safe_add( _6608,_6679 ),(int)1 )];
                        for (int _6680 = _11712; _6680 < _11713; ++_6680)
                        {
                          {
                            _ptr__6661[safe_add( _6658,_6666 )] = _ptr__6613[safe_add( _6607,_6680 )];
                            _ptr__6663[safe_add( _6660,_6666 )] = _ptr__6615[safe_add( _6609,_6680 )];
                            ++ _6666;
                          }
                        }
                        _ptr__6661[safe_add( _6658,_6666 )] = 2;
                        _ptr__6663[safe_add( _6660,_6666 )] = 0.5;
                        ++ _6666;
                        _ptr__6661[safe_add( _6658,_6666 )] = 5;
                        ++ _6666;
                        _ptr__6661[safe_add( safe_add( _6659,_6665 ),(int)1 )] = _6666;
                        ++ _6665;
                      }
                    }
                    int _11714 = _ptr__6613[safe_add( _6606,_6670 )];
                    int _11715 = _ptr__6613[safe_add( safe_add( _6606,_6670 ),(int)1 )];
                    for (int _6681 = _11714; _6681 < _11715; ++_6681)
                    {
                      {
                        _ptr__6662[safe_add( _6654,_6665 )] = _ptr__6614[safe_add( _6610,_6681 )];
                        _ptr__6663[safe_add( _6657,_6665 )] = (_ptr__6615[safe_add( _6612,_6681 )] * 0.5);
                        int _11716 = _ptr__6613[safe_add( _6608,_6681 )];
                        int _11717 = _ptr__6613[safe_add( safe_add( _6608,_6681 ),(int)1 )];
                        for (int _6682 = _11716; _6682 < _11717; ++_6682)
                        {
                          {
                            _ptr__6661[safe_add( _6658,_6666 )] = _ptr__6613[safe_add( _6607,_6682 )];
                            _ptr__6663[safe_add( _6660,_6666 )] = _ptr__6615[safe_add( _6609,_6682 )];
                            ++ _6666;
                          }
                        }
                        _ptr__6661[safe_add( _6658,_6666 )] = 2;
                        _ptr__6663[safe_add( _6660,_6666 )] = 0.5;
                        ++ _6666;
                        _ptr__6661[safe_add( _6658,_6666 )] = 5;
                        ++ _6666;
                        _ptr__6661[safe_add( safe_add( _6659,_6665 ),(int)1 )] = _6666;
                        ++ _6665;
                      }
                    }
                  }
                }
                _ptr__6662[safe_add( _6656,_6667 )] = _ptr__6614[safe_add( _6611,_6669 )];
                _ptr__6661[safe_add( safe_add( _6653,_6667 ),(int)1 )] = _6665;
                ++ _6667;
                ++ _6668;
                ++ _6669;
              }
            }
            else
            {
              {
                if ((_6626 == (int)0))
                {
                  {
                    int _11718 = _ptr__6613[safe_add( _6606,_6669 )];
                    int _11719 = _ptr__6613[safe_add( safe_add( _6606,_6669 ),(int)1 )];
                    for (int _6683 = _11718; _6683 < _11719; ++_6683)
                    {
                      {
                        _ptr__6662[safe_add( _6654,_6665 )] = _ptr__6614[safe_add( _6610,_6683 )];
                        _ptr__6663[safe_add( _6657,_6665 )] = _ptr__6615[safe_add( _6612,_6683 )];
                        ++ _6665;
                      }
                    }
                  }
                }
                else
                {
                  {
                    int _11720 = _ptr__6613[safe_add( _6606,_6669 )];
                    int _11721 = _ptr__6613[safe_add( safe_add( _6606,_6669 ),(int)1 )];
                    for (int _6684 = _11720; _6684 < _11721; ++_6684)
                    {
                      {
                        _ptr__6662[safe_add( _6654,_6665 )] = _ptr__6614[safe_add( _6610,_6684 )];
                        _ptr__6663[safe_add( _6657,_6665 )] = _ptr__6615[safe_add( _6612,_6684 )];
                        int _11722 = _ptr__6613[safe_add( _6608,_6684 )];
                        int _11723 = _ptr__6613[safe_add( safe_add( _6608,_6684 ),(int)1 )];
                        for (int _6685 = _11722; _6685 < _11723; ++_6685)
                        {
                          {
                            _ptr__6661[safe_add( _6658,_6666 )] = _ptr__6613[safe_add( _6607,_6685 )];
                            _ptr__6663[safe_add( _6660,_6666 )] = _ptr__6615[safe_add( _6609,_6685 )];
                            ++ _6666;
                          }
                        }
                        _ptr__6661[safe_add( safe_add( _6659,_6665 ),(int)1 )] = _6666;
                        ++ _6665;
                      }
                    }
                  }
                }
                _ptr__6662[safe_add( _6656,_6667 )] = _ptr__6614[safe_add( _6611,_6669 )];
                _ptr__6661[safe_add( safe_add( _6653,_6667 ),(int)1 )] = _6665;
                ++ _6667;
                ++ _6668;
                ++ _6669;
              }
            }
          }
        }
        if ((_6665 != _6625))
        {
          {
            throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Invalid nzi"));
          }
        }
        {}
      }
    }
  }
  else
  {
    {
      _6624 = _6602;
      _6625 = safe_mul( _6601,(int)2 );
      int _11724;
      bool _11725 = (_6603 > (int)0);
      if (_11725)
      {
        _11724 = safe_add( safe_mul( (int)2,_6603 ),safe_mul( safe_mul( (int)2,(int)2 ),_6601 ) );
      }
      else
      {
        _11724 = (int)0;
      }
      _6626 = _11724;
      int _11726 = (int)0;
      int _11727 = _ptr__6627[(int)0];
      for (int _6686 = _11726; _6686 < _11727; ++_6686)
      {
        {
          int _11728 = (int)0;
          int _11729 = _ptr__6627[(int)2];
          for (int _6687 = _11728; _6687 < _11729; ++_6687)
          {
            {
              int _11730 = (int)0;
              int _11731 = _ptr__6627[(int)4];
              for (int _6688 = _11730; _6688 < _11731; ++_6688)
              {
                {
                  int _11732 = (int)0;
                  int _11733 = _ptr__6627[(int)1];
                  for (int _6689 = _11732; _6689 < _11733; ++_6689)
                  {
                    {
                      long long _6690 = safe_add( safe_add( safe_add( safe_add( safe_mul( _ptr__6629[(int)0],_6686 ),safe_mul( _ptr__6629[(int)1],_6689 ) ),safe_mul( _ptr__6629[(int)2],_6687 ) ),safe_mul( _ptr__6629[(int)3],_6689 ) ),safe_mul( _ptr__6629[(int)4],_6688 ) );
                      _6625 -= (_ptr__6613[safe_add( safe_add( _6606,_6690 ),(int)1 )] - _ptr__6613[safe_add( _6606,_6690 )]);
                      if ((_6603 > (int)0))
                      {
                        {
                          _6626 -= safe_add( (_ptr__6613[safe_add( _6608,_ptr__6613[safe_add( safe_add( _6606,_6690 ),(int)1 )] )] - _ptr__6613[safe_add( _6608,_ptr__6613[safe_add( _6606,_6690 )] )]),safe_mul( safe_mul( (int)2,(int)2 ),(_ptr__6613[safe_add( safe_add( _6606,_6690 ),(int)1 )] - _ptr__6613[safe_add( _6606,_6690 )]) ) );
                        }
                      }
                      {}
                    }
                  }
                }
              }
            }
          }
        }
      }
      _6596->alloc_expr(_6600,_6624,_6625,false,_6626);
      int _6691 = mosek::fusion::p_WorkStack::_get_impl(_6596)->ptr_base;
      int _6692 = mosek::fusion::p_WorkStack::_get_impl(_6596)->shape_base;
      int _6693 = mosek::fusion::p_WorkStack::_get_impl(_6596)->code_base;
      int _6694 = mosek::fusion::p_WorkStack::_get_impl(_6596)->codeptr_base;
      int _6695 = mosek::fusion::p_WorkStack::_get_impl(_6596)->nidxs_base;
      int _6696 = mosek::fusion::p_WorkStack::_get_impl(_6596)->sp_base;
      int _6697 = mosek::fusion::p_WorkStack::_get_impl(_6596)->cof_base;
      int _6698 = mosek::fusion::p_WorkStack::_get_impl(_6596)->cconst_base;
      std::shared_ptr< monty::ndarray< int,1 > > _6699 = mosek::fusion::p_WorkStack::_get_impl(_6596)->i32;
      _checked_ptr_1<int> _ptr__6699(_6699 ? _6699->raw() : nullptr,_6699 ? _6699->size(0) : 0);
      std::shared_ptr< monty::ndarray< long long,1 > > _6700 = mosek::fusion::p_WorkStack::_get_impl(_6596)->i64;
      _checked_ptr_1<long long> _ptr__6700(_6700 ? _6700->raw() : nullptr,_6700 ? _6700->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _6701 = mosek::fusion::p_WorkStack::_get_impl(_6596)->f64;
      _checked_ptr_1<double> _ptr__6701(_6701 ? _6701->raw() : nullptr,_6701 ? _6701->size(0) : 0);
      int _6702 = (int)0;
      int _6703 = (int)0;
      int _6704 = (int)0;
      int _11734 = (int)0;
      int _11735 = _6600;
      for (int _6705 = _11734; _6705 < _11735; ++_6705)
      {
        {
          _ptr__6699[safe_add( _6692,_6705 )] = _ptr__6613[safe_add( _6605,_6705 )];
        }
      }
      _ptr__6699[_6691] = (int)0;
      if ((_6626 > (int)0))
      {
        {
          _ptr__6699[_6694] = (int)0;
        }
      }
      {}
      int _6706 = (int)0;
      int _11736 = (int)0;
      int _11737 = _ptr__6627[(int)0];
      for (int _6707 = _11736; _6707 < _11737; ++_6707)
      {
        {
          int _11738 = (int)0;
          int _11739 = _ptr__6627[(int)1];
          for (int _6708 = _11738; _6708 < _11739; ++_6708)
          {
            {
              int _11740 = (int)0;
              int _11741 = _ptr__6627[(int)2];
              for (int _6709 = _11740; _6709 < _11741; ++_6709)
              {
                {
                  int _11742 = (int)0;
                  int _11743 = _ptr__6627[(int)3];
                  for (int _6710 = _11742; _6710 < _11743; ++_6710)
                  {
                    {
                      int _11744 = (int)0;
                      int _11745 = _ptr__6627[(int)4];
                      for (int _6711 = _11744; _6711 < _11745; ++_6711)
                      {
                        {
                          if ((_6708 == _6710))
                          {
                            {
                              if ((_6626 == (int)0))
                              {
                                {
                                  int _11746 = _ptr__6613[safe_add( _6606,_6706 )];
                                  int _11747 = _ptr__6613[safe_add( safe_add( _6606,_6706 ),(int)1 )];
                                  for (int _6712 = _11746; _6712 < _11747; ++_6712)
                                  {
                                    {
                                      _ptr__6700[safe_add( _6695,_6702 )] = _ptr__6614[safe_add( _6610,_6712 )];
                                      _ptr__6701[safe_add( _6697,_6702 )] = _ptr__6615[safe_add( _6612,_6712 )];
                                      ++ _6702;
                                    }
                                  }
                                }
                              }
                              else
                              {
                                {
                                  int _11748 = _ptr__6613[safe_add( _6606,_6706 )];
                                  int _11749 = _ptr__6613[safe_add( safe_add( _6606,_6706 ),(int)1 )];
                                  for (int _6713 = _11748; _6713 < _11749; ++_6713)
                                  {
                                    {
                                      _ptr__6700[safe_add( _6695,_6702 )] = _ptr__6614[safe_add( _6610,_6713 )];
                                      _ptr__6701[safe_add( _6697,_6702 )] = _ptr__6615[safe_add( _6612,_6713 )];
                                      int _11750 = _ptr__6613[safe_add( _6608,_6713 )];
                                      int _11751 = _ptr__6613[safe_add( safe_add( _6608,_6713 ),(int)1 )];
                                      for (int _6714 = _11750; _6714 < _11751; ++_6714)
                                      {
                                        {
                                          _ptr__6699[safe_add( _6693,_6704 )] = _ptr__6613[safe_add( _6607,_6714 )];
                                          _ptr__6701[safe_add( _6698,_6704 )] = _ptr__6615[safe_add( _6609,_6714 )];
                                          ++ _6704;
                                        }
                                      }
                                      _ptr__6699[safe_add( safe_add( _6694,_6702 ),(int)1 )] = _6704;
                                      ++ _6702;
                                    }
                                  }
                                }
                              }
                              _ptr__6699[safe_add( safe_add( _6691,_6703 ),(int)1 )] = _6702;
                              ++ _6706;
                            }
                          }
                          else
                          {
                            {
                              long long _6715 = safe_add( safe_add( safe_add( safe_add( safe_mul( _6707,_ptr__6629[(int)0] ),safe_mul( _6710,_ptr__6629[(int)1] ) ),safe_mul( _6709,_ptr__6629[(int)2] ) ),safe_mul( _6708,_ptr__6629[(int)3] ) ),_6711 );
                              if ((_6626 == (int)0))
                              {
                                {
                                  int _11752 = _ptr__6613[safe_add( _6606,_6706 )];
                                  int _11753 = _ptr__6613[safe_add( safe_add( _6606,_6706 ),(int)1 )];
                                  for (int _6716 = _11752; _6716 < _11753; ++_6716)
                                  {
                                    {
                                      _ptr__6700[safe_add( _6695,_6702 )] = _ptr__6614[safe_add( _6610,_6716 )];
                                      _ptr__6701[safe_add( _6697,_6702 )] = (_ptr__6615[safe_add( _6612,_6716 )] * 0.5);
                                      ++ _6702;
                                    }
                                  }
                                  int _11754 = _ptr__6613[safe_add( _6606,_6715 )];
                                  int _11755 = _ptr__6613[safe_add( safe_add( _6606,_6715 ),(int)1 )];
                                  for (int _6717 = _11754; _6717 < _11755; ++_6717)
                                  {
                                    {
                                      _ptr__6700[safe_add( _6695,_6702 )] = _ptr__6614[safe_add( _6610,_6717 )];
                                      _ptr__6701[safe_add( _6697,_6702 )] = (_ptr__6615[safe_add( _6612,_6717 )] * 0.5);
                                      ++ _6702;
                                    }
                                  }
                                }
                              }
                              else
                              {
                                {
                                  int _11756 = _ptr__6613[safe_add( _6606,_6706 )];
                                  int _11757 = _ptr__6613[safe_add( safe_add( _6606,_6706 ),(int)1 )];
                                  for (int _6718 = _11756; _6718 < _11757; ++_6718)
                                  {
                                    {
                                      _ptr__6700[safe_add( _6695,_6702 )] = _ptr__6614[safe_add( _6610,_6718 )];
                                      _ptr__6701[safe_add( _6697,_6702 )] = (_ptr__6615[safe_add( _6612,_6718 )] * 0.5);
                                      int _11758 = _ptr__6613[safe_add( _6608,_6718 )];
                                      int _11759 = _ptr__6613[safe_add( safe_add( _6608,_6718 ),(int)1 )];
                                      for (int _6719 = _11758; _6719 < _11759; ++_6719)
                                      {
                                        {
                                          _ptr__6699[safe_add( _6693,_6704 )] = _ptr__6613[safe_add( _6607,_6719 )];
                                          _ptr__6701[safe_add( _6698,_6704 )] = _ptr__6615[safe_add( _6609,_6719 )];
                                          ++ _6704;
                                        }
                                      }
                                      _ptr__6699[safe_add( _6693,_6704 )] = 2;
                                      _ptr__6701[safe_add( _6698,_6704 )] = 0.5;
                                      ++ _6704;
                                      _ptr__6699[safe_add( _6693,_6704 )] = 5;
                                      ++ _6704;
                                      _ptr__6699[safe_add( safe_add( _6694,_6702 ),(int)1 )] = _6704;
                                      ++ _6702;
                                    }
                                  }
                                  int _11760 = _ptr__6613[safe_add( _6606,_6715 )];
                                  int _11761 = _ptr__6613[safe_add( safe_add( _6606,_6715 ),(int)1 )];
                                  for (int _6720 = _11760; _6720 < _11761; ++_6720)
                                  {
                                    {
                                      _ptr__6700[safe_add( _6695,_6702 )] = _ptr__6614[safe_add( _6610,_6720 )];
                                      _ptr__6701[safe_add( _6697,_6702 )] = (_ptr__6615[safe_add( _6612,_6720 )] * 0.5);
                                      int _11762 = _ptr__6613[safe_add( _6608,_6720 )];
                                      int _11763 = _ptr__6613[safe_add( safe_add( _6608,_6720 ),(int)1 )];
                                      for (int _6721 = _11762; _6721 < _11763; ++_6721)
                                      {
                                        {
                                          _ptr__6699[safe_add( _6693,_6704 )] = _ptr__6613[safe_add( _6607,_6721 )];
                                          _ptr__6701[safe_add( _6698,_6704 )] = _ptr__6615[safe_add( _6609,_6721 )];
                                          ++ _6704;
                                        }
                                      }
                                      _ptr__6699[safe_add( _6693,_6704 )] = 2;
                                      _ptr__6701[safe_add( _6698,_6704 )] = 0.5;
                                      ++ _6704;
                                      _ptr__6699[safe_add( _6693,_6704 )] = 5;
                                      ++ _6704;
                                      _ptr__6699[safe_add( safe_add( _6694,_6702 ),(int)1 )] = _6704;
                                      ++ _6702;
                                    }
                                  }
                                }
                              }
                              _ptr__6699[safe_add( safe_add( _6691,_6703 ),(int)1 )] = _6702;
                              ++ _6706;
                            }
                          }
                          ++ _6703;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      if ((_6702 != _6625))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Invalid nnz"));
        }
      }
      {}
      if ((_6703 != _6624))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Invalid nelem"));
        }
      }
      {}
    }
  }
  _6598->clear();
  _6596->peek_expr();
  if ((mosek::fusion::p_WorkStack::_get_impl(_6596)->nnz != ((*mosek::fusion::p_WorkStack::_get_impl(_6596)->i32)(safe_add( mosek::fusion::p_WorkStack::_get_impl(_6596)->ptr_base,mosek::fusion::p_WorkStack::_get_impl(_6596)->nelem )))))
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Invalid ptr"));
    }
  }
  {}
  if ((((*mosek::fusion::p_WorkStack::_get_impl(_6596)->i32)(mosek::fusion::p_WorkStack::_get_impl(_6596)->ptr_base)) != (int)0))
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("Internal: Invalid ptr"));
    }
  }
  {}
}
std::string mosek::fusion::ExprSymmetrize :: toString() { return mosek::fusion::p_ExprSymmetrize::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprSymmetrize::toString(){
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprSymmetrize(symdim=("))->__mosek_2fusion_2Utils_2StringBuffer__a(dim0)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(dim1)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("),"))->__mosek_2fusion_2Utils_2StringBuffer__a(expr->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
void mosek::fusion::p_ExprSymmetrize::destroy(){expr.reset();}void mosek::fusion::ExprSymmetrize::destroy() { mosek::fusion::p_ExprSymmetrize::_get_impl(this)->destroy(); }mosek::fusion::ExprCondense::ExprCondense(mosek::fusion::p_ExprCondense *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprCondense()" << this << std::endl; */ }mosek::fusion::ExprCondense::~ExprCondense() {  /* std::cout << "~ExprCondense()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprCondense::p_ExprCondense  (::mosek::fusion::ExprCondense * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprCondense::t mosek::fusion::p_ExprCondense::_new_ExprCondense  (monty::rc_ptr< ::mosek::fusion::Expression > _6722){ return new mosek::fusion::ExprCondense(_6722); }mosek::fusion::ExprCondense::ExprCondense  (monty::rc_ptr< ::mosek::fusion::Expression > _6722) :    ExprCondense(new mosek::fusion::p_ExprCondense(this)){ mosek::fusion::p_ExprCondense::_get_impl(this)->_initialize(_6722); }void mosek::fusion::p_ExprCondense::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _6722){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(_6722->getShape());
    mosek::fusion::p_ExprCondense::_get_impl(::mosek::fusion::ExprCondense::t(_pubthis))->expr = _6722;
  }
}void mosek::fusion::ExprCondense :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _6723,monty::rc_ptr< ::mosek::fusion::WorkStack > _6724,monty::rc_ptr< ::mosek::fusion::WorkStack > _6725) { mosek::fusion::p_ExprCondense::_get_impl(this)->eval(_6723,_6724,_6725); }void mosek::fusion::p_ExprCondense::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _6723,monty::rc_ptr< ::mosek::fusion::WorkStack > _6724,monty::rc_ptr< ::mosek::fusion::WorkStack > _6725){
  expr->eval(_6723,_6724,_6725);
  _6723->peek_expr();
  if (mosek::fusion::p_WorkStack::_get_impl(_6723)->hassp)
  {
    {
      int _6726 = _6723->popi32();
      _6723->popi32(_6726);
      int _6727 = _6723->popi32();
      int _6728 = _6723->popi32();
      _6723->popi32();
      _6723->popi64(_6727);
      _6723->pushi32((int)0);
      _6723->pushi32(_6728);
      _6723->pushi32(_6727);
      _6723->pushi32(_6727);
      _6723->pushi32((int)1);
      _6723->peek_expr();
    }
  }
  {}
}
std::string mosek::fusion::ExprCondense :: toString() { return mosek::fusion::p_ExprCondense::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprCondense::toString(){
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprCondense("))->__mosek_2fusion_2Utils_2StringBuffer__a(expr->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
void mosek::fusion::p_ExprCondense::destroy(){expr.reset();}void mosek::fusion::ExprCondense::destroy() { mosek::fusion::p_ExprCondense::_get_impl(this)->destroy(); }mosek::fusion::ExprFromVar::ExprFromVar(mosek::fusion::p_ExprFromVar *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprFromVar()" << this << std::endl; */ }mosek::fusion::ExprFromVar::~ExprFromVar() {  /* std::cout << "~ExprFromVar()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprFromVar::p_ExprFromVar  (::mosek::fusion::ExprFromVar * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprFromVar::t mosek::fusion::p_ExprFromVar::_new_ExprFromVar  (monty::rc_ptr< ::mosek::fusion::Variable > _6729){ return new mosek::fusion::ExprFromVar(_6729); }mosek::fusion::ExprFromVar::ExprFromVar  (monty::rc_ptr< ::mosek::fusion::Variable > _6729) :    ExprFromVar(new mosek::fusion::p_ExprFromVar(this)){ mosek::fusion::p_ExprFromVar::_get_impl(this)->_initialize(_6729); }void mosek::fusion::p_ExprFromVar::_initialize  (monty::rc_ptr< ::mosek::fusion::Variable > _6729){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(_6729->getShape());
    mosek::fusion::p_ExprFromVar::_get_impl(::mosek::fusion::ExprFromVar::t(_pubthis))->x = _6729;
  }
}void mosek::fusion::ExprFromVar :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _6730,monty::rc_ptr< ::mosek::fusion::WorkStack > _6731,monty::rc_ptr< ::mosek::fusion::WorkStack > _6732) { mosek::fusion::p_ExprFromVar::_get_impl(this)->eval(_6730,_6731,_6732); }void mosek::fusion::p_ExprFromVar::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _6730,monty::rc_ptr< ::mosek::fusion::WorkStack > _6731,monty::rc_ptr< ::mosek::fusion::WorkStack > _6732){
  std::shared_ptr< monty::ndarray< int,1 > > _6733 = _pubthis->getShape();
  _checked_ptr_1<int> _ptr__6733(_6733 ? _6733->raw() : nullptr,_6733 ? _6733->size(0) : 0);
  long long _6734 = ::mosek::fusion::p_Set::size(_6733);
  int _6735 = x->numInst();
  int _6736 = _6735;
  bool _6737 = (_6734 > _6735);
  _6730->alloc_expr((int)((_6733)->size(0)),_6735,_6736,_6737);
  int _6738 = mosek::fusion::p_WorkStack::_get_impl(_6730)->ptr_base;
  int _6739 = mosek::fusion::p_WorkStack::_get_impl(_6730)->nidxs_base;
  int _6740 = mosek::fusion::p_WorkStack::_get_impl(_6730)->sp_base;
  int _6741 = mosek::fusion::p_WorkStack::_get_impl(_6730)->cof_base;
  int _6742 = mosek::fusion::p_WorkStack::_get_impl(_6730)->shape_base;
  std::shared_ptr< monty::ndarray< int,1 > > _6743 = mosek::fusion::p_WorkStack::_get_impl(_6730)->i32;
  _checked_ptr_1<int> _ptr__6743(_6743 ? _6743->raw() : nullptr,_6743 ? _6743->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _6744 = mosek::fusion::p_WorkStack::_get_impl(_6730)->i64;
  _checked_ptr_1<long long> _ptr__6744(_6744 ? _6744->raw() : nullptr,_6744 ? _6744->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _6745 = mosek::fusion::p_WorkStack::_get_impl(_6730)->f64;
  _checked_ptr_1<double> _ptr__6745(_6745 ? _6745->raw() : nullptr,_6745 ? _6745->size(0) : 0);
  int _11764 = (int)0;
  int _11765 = (int)((_6733)->size(0));
  for (int _6746 = _11764; _6746 < _11765; ++_6746)
  {
    {
      _ptr__6743[safe_add( _6742,_6746 )] = _ptr__6733[_6746];
    }
  }
  {
    int _11766 = (int)0;
    int _11767 = safe_add( _6735,(int)1 );
    for (int _6747 = _11766; _6747 < _11767; ++_6747)
    {
      {
        _ptr__6743[safe_add( _6738,_6747 )] = _6747;
      }
    }
    int _11768 = (int)0;
    int _11769 = _6736;
    for (int _6748 = _11768; _6748 < _11769; ++_6748)
    {
      {
        _ptr__6745[safe_add( _6741,_6748 )] = 1.0;
      }
    }
  }
  if (_6737)
  {
    {
      x->inst(_6740,_6744,_6739,_6744);
    }
  }
  else
  {
    {
      x->inst(_6739,_6744);
    }
  }
}
std::string mosek::fusion::ExprFromVar :: toString() { return mosek::fusion::p_ExprFromVar::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprFromVar::toString(){
  return ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("Expr("))->__mosek_2fusion_2Utils_2StringBuffer__a(x->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"))->toString();
}
void mosek::fusion::p_ExprFromVar::destroy(){x.reset();}void mosek::fusion::ExprFromVar::destroy() { mosek::fusion::p_ExprFromVar::_get_impl(this)->destroy(); }mosek::fusion::ExprReshape::ExprReshape(mosek::fusion::p_ExprReshape *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "ExprReshape()" << this << std::endl; */ }mosek::fusion::ExprReshape::~ExprReshape() {  /* std::cout << "~ExprReshape()" << this << std::endl << std::flush; */ }mosek::fusion::p_ExprReshape::p_ExprReshape  (::mosek::fusion::ExprReshape * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::ExprReshape::t mosek::fusion::p_ExprReshape::_new_ExprReshape  (std::shared_ptr< monty::ndarray< int,1 > > _6749,    monty::rc_ptr< ::mosek::fusion::Expression > _6750){ return new mosek::fusion::ExprReshape(_6749,_6750); }mosek::fusion::ExprReshape::ExprReshape  (std::shared_ptr< monty::ndarray< int,1 > > _6749,    monty::rc_ptr< ::mosek::fusion::Expression > _6750) :    ExprReshape(new mosek::fusion::p_ExprReshape(this)){ mosek::fusion::p_ExprReshape::_get_impl(this)->_initialize(_6749,_6750); }void mosek::fusion::p_ExprReshape::_initialize  (std::shared_ptr< monty::ndarray< int,1 > > _6749,    monty::rc_ptr< ::mosek::fusion::Expression > _6750){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__6749(_6749 ? _6749->raw() : nullptr, _6749 ? _6749->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(::mosek::fusion::Utils::Tools::arraycopy(_6749));
    long long _6751 = _6750->getSize();
    if ((::mosek::fusion::p_Set::size(_6749) != _6750->getSize()))
    {
      {
        throw ::mosek::fusion::LengthError(std::string ("Cannot reshape to mismatching shape"));
      }
    }
    {}
    mosek::fusion::p_ExprReshape::_get_impl(::mosek::fusion::ExprReshape::t(_pubthis))->e = _6750;
  }
}void mosek::fusion::ExprReshape :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _6752,monty::rc_ptr< ::mosek::fusion::WorkStack > _6753,monty::rc_ptr< ::mosek::fusion::WorkStack > _6754) { mosek::fusion::p_ExprReshape::_get_impl(this)->eval(_6752,_6753,_6754); }void mosek::fusion::p_ExprReshape::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _6752,monty::rc_ptr< ::mosek::fusion::WorkStack > _6753,monty::rc_ptr< ::mosek::fusion::WorkStack > _6754){
  std::shared_ptr< monty::ndarray< int,1 > > _6755 = _pubthis->getShape();
  _checked_ptr_1<int> _ptr__6755(_6755 ? _6755->raw() : nullptr,_6755 ? _6755->size(0) : 0);
  e->eval(_6752,_6753,_6754);
  _6752->peek_expr();
  int _6756 = _6752->popi32();
  long long _6757 = (int)1;
  int _11770 = (int)0;
  int _11771 = _6756;
  for (int _6758 = _11770; _6758 < _11771; ++_6758)
  {
    {
      _6757 *= _6752->popi32();
    }
  }
  if ((_6757 != _pubthis->getSize()))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("The two shapes have different sizes"));
    }
  }
  {}
  int _11772 = (int)0;
  int _11773 = (int)((_6755)->size(0));
  for (int _6759 = _11772; _6759 < _11773; ++_6759)
  {
    {
      _6752->pushi32(_ptr__6755[_6759]);
    }
  }
  _6752->pushi32((int)((_6755)->size(0)));
}
std::string mosek::fusion::ExprReshape :: toString() { return mosek::fusion::p_ExprReshape::_get_impl(this)->toString(); }std::string mosek::fusion::p_ExprReshape::toString(){
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _6760 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer()->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("ExprReshape(("));
  if ((_pubthis->getND() > (int)0))
  {
    {
      _6760->__mosek_2fusion_2Utils_2StringBuffer__a(_pubthis->getDim((int)0));
      int _11774 = (int)1;
      int _11775 = _pubthis->getND();
      for (int _6761 = _11774; _6761 < _11775; ++_6761)
      {
        {
          _6760->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(_pubthis->getDim(_6761));
        }
      }
    }
  }
  {}
  _6760->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("),"))->__mosek_2fusion_2Utils_2StringBuffer__a(e->toString())->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"));
  return _6760->toString();
}
void mosek::fusion::p_ExprReshape::destroy(){e.reset();}void mosek::fusion::ExprReshape::destroy() { mosek::fusion::p_ExprReshape::_get_impl(this)->destroy(); }mosek::fusion::BaseExpression::BaseExpression(mosek::fusion::p_BaseExpression *_impl) : _impl(_impl) { /*std::cout << "BaseExpression() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::BaseExpression::~BaseExpression() { delete _impl; _impl = nullptr; }mosek::fusion::p_BaseExpression::p_BaseExpression  (::mosek::fusion::BaseExpression * _pubthis) :     _pubthis(_pubthis){}void mosek::fusion::p_BaseExpression::_initialize  (std::shared_ptr< monty::ndarray< int,1 > > _6762){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__6762(_6762 ? _6762->raw() : nullptr, _6762 ? _6762->size(0) : 0);
    mosek::fusion::p_BaseExpression::_get_impl(::mosek::fusion::BaseExpression::t(_pubthis))->shape = _6762;
  }
}std::string mosek::fusion::BaseExpression :: toString() { return mosek::fusion::p_BaseExpression::_get_impl(this)->toString(); }std::string mosek::fusion::p_BaseExpression::toString(){
  return std::string ("Expression()");
}
void mosek::fusion::p_BaseExpression::printStack(monty::rc_ptr< ::mosek::fusion::WorkStack > _6763){
  std::shared_ptr< monty::ndarray< int,1 > > _6764 = mosek::fusion::p_WorkStack::_get_impl(_6763)->i32;
  _checked_ptr_1<int> _ptr__6764(_6764 ? _6764->raw() : nullptr,_6764 ? _6764->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _6765 = mosek::fusion::p_WorkStack::_get_impl(_6763)->i64;
  _checked_ptr_1<long long> _ptr__6765(_6765 ? _6765->raw() : nullptr,_6765 ? _6765->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _6766 = mosek::fusion::p_WorkStack::_get_impl(_6763)->f64;
  _checked_ptr_1<double> _ptr__6766(_6766 ? _6766->raw() : nullptr,_6766 ? _6766->size(0) : 0);
  int _6767 = mosek::fusion::p_WorkStack::_get_impl(_6763)->ptr_base;
  int _6768 = mosek::fusion::p_WorkStack::_get_impl(_6763)->nidxs_base;
  int _6769 = mosek::fusion::p_WorkStack::_get_impl(_6763)->cof_base;
  int _6770 = mosek::fusion::p_WorkStack::_get_impl(_6763)->shape_base;
  int _6771 = mosek::fusion::p_WorkStack::_get_impl(_6763)->codeptr_base;
  int _6772 = mosek::fusion::p_WorkStack::_get_impl(_6763)->code_base;
  int _6773 = mosek::fusion::p_WorkStack::_get_impl(_6763)->cconst_base;
  int _6774 = mosek::fusion::p_WorkStack::_get_impl(_6763)->sp_base;
  int _6775 = mosek::fusion::p_WorkStack::_get_impl(_6763)->nelem;
  int _6776 = mosek::fusion::p_WorkStack::_get_impl(_6763)->nnz;
  int _6777 = mosek::fusion::p_WorkStack::_get_impl(_6763)->ncodeatom;
  int _6778 = mosek::fusion::p_WorkStack::_get_impl(_6763)->nd;
  bool _6779 = mosek::fusion::p_WorkStack::_get_impl(_6763)->hassp;
  std::vector<int> _11776;
  for (int _6780 = (int)0, _11777 = _6778; _6780 < _11777 ; ++_6780)
  {
    _11776.push_back(_ptr__6764[safe_add( _6770,_6780 )]);
  }
  auto _11778 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_11776.size()),_11776.begin(),_11776.end()));
  std::vector<int> _11779;
  for (int _6781 = (int)0, _11780 = safe_add( _6775,(int)1 ); _6781 < _11780 ; ++_6781)
  {
    _11779.push_back(_ptr__6764[safe_add( _6767,_6781 )]);
  }
  auto _11781 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_11779.size()),_11779.begin(),_11779.end()));
  ::mosek::fusion::p_Debug::o()->__mosek_2fusion_2Debug__p(std::string ("### "))->__mosek_2fusion_2Debug__p(_pubthis->toString())->__mosek_2fusion_2Debug__p(std::string (" ###"))->__mosek_2fusion_2Debug__lf()->__mosek_2fusion_2Debug__p(std::string ("  nelem     = "))->__mosek_2fusion_2Debug__p(_6775)->__mosek_2fusion_2Debug__lf()->__mosek_2fusion_2Debug__p(std::string ("  nnz       = "))->__mosek_2fusion_2Debug__p(_6776)->__mosek_2fusion_2Debug__lf()->__mosek_2fusion_2Debug__p(std::string ("  hassp     = "))->__mosek_2fusion_2Debug__p(_6779)->__mosek_2fusion_2Debug__p(std::string (" / "))->__mosek_2fusion_2Debug__p(_ptr__6764[((mosek::fusion::p_WorkStack::_get_impl(_6763)->pi32 - _6778) - (int)4)])->__mosek_2fusion_2Debug__lf()->__mosek_2fusion_2Debug__p(std::string ("  shape     = "))->__mosek_2fusion_2Debug__p(_11778)->__mosek_2fusion_2Debug__lf()->__mosek_2fusion_2Debug__p(std::string ("  ptr       = "))->__mosek_2fusion_2Debug__p(_11781)->__mosek_2fusion_2Debug__lf();
  if (mosek::fusion::p_WorkStack::_get_impl(_6763)->hassp)
  {
    {
      std::vector<long long> _11782;
      for (int _6782 = (int)0, _11783 = _6775; _6782 < _11783 ; ++_6782)
      {
        _11782.push_back(_ptr__6765[safe_add( _6774,_6782 )]);
      }
      auto _11784 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_11782.size()),_11782.begin(),_11782.end()));
      ::mosek::fusion::p_Debug::o()->__mosek_2fusion_2Debug__p(std::string ("  sp       = "))->__mosek_2fusion_2Debug__p(_11784)->__mosek_2fusion_2Debug__lf();
    }
  }
  {}
  int _11785 = (int)0;
  int _11786 = _6775;
  for (int _6783 = _11785; _6783 < _11786; ++_6783)
  {
    {
      ::mosek::fusion::p_Debug::o()->__mosek_2fusion_2Debug__p(std::string ("  row["))->__mosek_2fusion_2Debug__p(_6783)->__mosek_2fusion_2Debug__p(std::string ("]"))->__mosek_2fusion_2Debug__lf();
      std::vector<long long> _11787;
      for (int _6784 = _ptr__6764[safe_add( _6767,_6783 )], _11788 = _ptr__6764[safe_add( safe_add( _6767,_6783 ),(int)1 )]; _6784 < _11788 ; ++_6784)
      {
        _11787.push_back(_ptr__6765[safe_add( _6768,_6784 )]);
      }
      auto _11789 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_11787.size()),_11787.begin(),_11787.end()));
      std::vector<double> _11790;
      for (int _6785 = _ptr__6764[safe_add( _6767,_6783 )], _11791 = _ptr__6764[safe_add( safe_add( _6767,_6783 ),(int)1 )]; _6785 < _11791 ; ++_6785)
      {
        _11790.push_back(_ptr__6766[safe_add( _6769,_6785 )]);
      }
      auto _11792 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_11790.size()),_11790.begin(),_11790.end()));
      ::mosek::fusion::p_Debug::o()->__mosek_2fusion_2Debug__p(std::string ("    nidx : "))->__mosek_2fusion_2Debug__p(_11789)->__mosek_2fusion_2Debug__lf()->__mosek_2fusion_2Debug__p(std::string ("    cof  : "))->__mosek_2fusion_2Debug__p(_11792)->__mosek_2fusion_2Debug__lf();
      if ((_6777 > (int)0))
      {
        {
          int _11793 = _ptr__6764[safe_add( _6767,_6783 )];
          int _11794 = _ptr__6764[safe_add( safe_add( _6767,_6783 ),(int)1 )];
          for (int _6786 = _11793; _6786 < _11794; ++_6786)
          {
            {
              std::vector<int> _11795;
              for (int _6787 = _ptr__6764[safe_add( _6771,_6786 )], _11796 = _ptr__6764[safe_add( safe_add( _6771,_6786 ),(int)1 )]; _6787 < _11796 ; ++_6787)
              {
                _11795.push_back(_ptr__6764[safe_add( _6772,_6787 )]);
              }
              auto _11797 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_11795.size()),_11795.begin(),_11795.end()));
              std::vector<double> _11798;
              for (int _6788 = _ptr__6764[safe_add( _6771,_6786 )], _11799 = _ptr__6764[safe_add( safe_add( _6771,_6786 ),(int)1 )]; _6788 < _11799 ; ++_6788)
              {
                _11798.push_back(_ptr__6766[safe_add( _6773,_6788 )]);
              }
              auto _11800 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_11798.size()),_11798.begin(),_11798.end()));
              ::mosek::fusion::p_Debug::o()->__mosek_2fusion_2Debug__p(std::string ("      code["))->__mosek_2fusion_2Debug__p(_ptr__6765[safe_add( _6768,_6786 )])->__mosek_2fusion_2Debug__p(std::string ("] "))->__mosek_2fusion_2Debug__p(_11797)->__mosek_2fusion_2Debug__p(_11800)->__mosek_2fusion_2Debug__lf();
            }
          }
        }
      }
      {}
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression :: __mosek_2fusion_2BaseExpression__pick(std::shared_ptr< monty::ndarray< int,2 > > _6792) { return mosek::fusion::p_BaseExpression::_get_impl(this)->__mosek_2fusion_2BaseExpression__pick(_6792); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression::pick(std::shared_ptr< monty::ndarray< int,2 > > _6792) { return __mosek_2fusion_2BaseExpression__pick(_6792); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression::__mosek_2fusion_2Expression__pick(std::shared_ptr< monty::ndarray< int,2 > > _6792) { return __mosek_2fusion_2BaseExpression__pick(_6792); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_BaseExpression::__mosek_2fusion_2BaseExpression__pick(std::shared_ptr< monty::ndarray< int,2 > > _6792){
  return (::mosek::fusion::p_ExprPick::_new_ExprPick((::mosek::fusion::BaseExpression::t(_pubthis)).as<::mosek::fusion::Expression>(),_6792)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression :: __mosek_2fusion_2BaseExpression__pick(std::shared_ptr< monty::ndarray< int,1 > > _6793) { return mosek::fusion::p_BaseExpression::_get_impl(this)->__mosek_2fusion_2BaseExpression__pick(_6793); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression::pick(std::shared_ptr< monty::ndarray< int,1 > > _6793) { return __mosek_2fusion_2BaseExpression__pick(_6793); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression::__mosek_2fusion_2Expression__pick(std::shared_ptr< monty::ndarray< int,1 > > _6793) { return __mosek_2fusion_2BaseExpression__pick(_6793); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_BaseExpression::__mosek_2fusion_2BaseExpression__pick(std::shared_ptr< monty::ndarray< int,1 > > _6793){
  _checked_ptr_1<int> _ptr__6793(_6793 ? _6793->raw() : nullptr, _6793 ? _6793->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,2 > > _6794 = std::shared_ptr< monty::ndarray< int,2 > >(new monty::ndarray< int,2 >(monty::shape((int)((_6793)->size(0)),(int)1)));
  int _11801 = (int)0;
  int _11802 = (int)((_6793)->size(0));
  for (int _6795 = _11801; _6795 < _11802; ++_6795)
  {
    {
      ((*_6794)(_6795,(int)0)) = _ptr__6793[_6795];
    }
  }
  return (::mosek::fusion::p_ExprPick::_new_ExprPick((::mosek::fusion::BaseExpression::t(_pubthis)).as<::mosek::fusion::Expression>(),_6794)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression :: __mosek_2fusion_2BaseExpression__index(std::shared_ptr< monty::ndarray< int,1 > > _6796) { return mosek::fusion::p_BaseExpression::_get_impl(this)->__mosek_2fusion_2BaseExpression__index(_6796); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression::index(std::shared_ptr< monty::ndarray< int,1 > > _6796) { return __mosek_2fusion_2BaseExpression__index(_6796); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression::__mosek_2fusion_2Expression__index(std::shared_ptr< monty::ndarray< int,1 > > _6796) { return __mosek_2fusion_2BaseExpression__index(_6796); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_BaseExpression::__mosek_2fusion_2BaseExpression__index(std::shared_ptr< monty::ndarray< int,1 > > _6796){
  _checked_ptr_1<int> _ptr__6796(_6796 ? _6796->raw() : nullptr, _6796 ? _6796->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,2 > > _6797 = std::shared_ptr< monty::ndarray< int,2 > >(new monty::ndarray< int,2 >(monty::shape((int)1,(int)((_6796)->size(0)))));
  int _11803 = (int)0;
  int _11804 = (int)((_6796)->size(0));
  for (int _6798 = _11803; _6798 < _11804; ++_6798)
  {
    {
      ((*_6797)((int)0,_6798)) = _ptr__6796[_6798];
    }
  }
  return (::mosek::fusion::p_ExprPick::_new_ExprPick((::mosek::fusion::BaseExpression::t(_pubthis)).as<::mosek::fusion::Expression>(),_6797)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression :: __mosek_2fusion_2BaseExpression__index(int _6799) { return mosek::fusion::p_BaseExpression::_get_impl(this)->__mosek_2fusion_2BaseExpression__index(_6799); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression::index(int _6799) { return __mosek_2fusion_2BaseExpression__index(_6799); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression::__mosek_2fusion_2Expression__index(int _6799) { return __mosek_2fusion_2BaseExpression__index(_6799); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_BaseExpression::__mosek_2fusion_2BaseExpression__index(int _6799){
  std::shared_ptr< monty::ndarray< int,2 > > _6800 = std::shared_ptr< monty::ndarray< int,2 > >(new monty::ndarray< int,2 >(monty::shape((int)1,(int)1)));
  ((*_6800)((int)0,(int)0)) = _6799;
  return (::mosek::fusion::p_ExprPick::_new_ExprPick((::mosek::fusion::BaseExpression::t(_pubthis)).as<::mosek::fusion::Expression>(),_6800)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression :: __mosek_2fusion_2BaseExpression__slice(std::shared_ptr< monty::ndarray< int,1 > > _6801,std::shared_ptr< monty::ndarray< int,1 > > _6802) { return mosek::fusion::p_BaseExpression::_get_impl(this)->__mosek_2fusion_2BaseExpression__slice(_6801,_6802); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression::slice(std::shared_ptr< monty::ndarray< int,1 > > _6801,std::shared_ptr< monty::ndarray< int,1 > > _6802) { return __mosek_2fusion_2BaseExpression__slice(_6801,_6802); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression::__mosek_2fusion_2Expression__slice(std::shared_ptr< monty::ndarray< int,1 > > _6801,std::shared_ptr< monty::ndarray< int,1 > > _6802) { return __mosek_2fusion_2BaseExpression__slice(_6801,_6802); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_BaseExpression::__mosek_2fusion_2BaseExpression__slice(std::shared_ptr< monty::ndarray< int,1 > > _6801,std::shared_ptr< monty::ndarray< int,1 > > _6802){
  _checked_ptr_1<int> _ptr__6801(_6801 ? _6801->raw() : nullptr, _6801 ? _6801->size(0) : 0);
  _checked_ptr_1<int> _ptr__6802(_6802 ? _6802->raw() : nullptr, _6802 ? _6802->size(0) : 0);
  return (::mosek::fusion::p_ExprSlice::_new_ExprSlice((::mosek::fusion::BaseExpression::t(_pubthis)).as<::mosek::fusion::Expression>(),_6801,_6802)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression :: __mosek_2fusion_2BaseExpression__slice(int _6803,int _6804) { return mosek::fusion::p_BaseExpression::_get_impl(this)->__mosek_2fusion_2BaseExpression__slice(_6803,_6804); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression::slice(int _6803,int _6804) { return __mosek_2fusion_2BaseExpression__slice(_6803,_6804); }
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::BaseExpression::__mosek_2fusion_2Expression__slice(int _6803,int _6804) { return __mosek_2fusion_2BaseExpression__slice(_6803,_6804); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_BaseExpression::__mosek_2fusion_2BaseExpression__slice(int _6803,int _6804){
  return (::mosek::fusion::p_ExprSlice::_new_ExprSlice((::mosek::fusion::BaseExpression::t(_pubthis)).as<::mosek::fusion::Expression>(),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_6803)}),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_6804)}))).as<::mosek::fusion::Expression>();
}
long long mosek::fusion::BaseExpression :: getSize() { return mosek::fusion::p_BaseExpression::_get_impl(this)->getSize(); }long long mosek::fusion::p_BaseExpression::getSize(){
  return ::mosek::fusion::p_Set::size(shape);
}
int mosek::fusion::BaseExpression :: getND() { return mosek::fusion::p_BaseExpression::_get_impl(this)->getND(); }int mosek::fusion::p_BaseExpression::getND(){
  return (int)((shape)->size(0));
}
int mosek::fusion::BaseExpression :: getDim(int _6805) { return mosek::fusion::p_BaseExpression::_get_impl(this)->getDim(_6805); }int mosek::fusion::p_BaseExpression::getDim(int _6805){
  return ((*shape)(_6805));
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::BaseExpression :: getShape() { return mosek::fusion::p_BaseExpression::_get_impl(this)->getShape(); }std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_BaseExpression::getShape(){
  return ::mosek::fusion::Utils::Tools::arraycopy(shape);
}
void mosek::fusion::p_BaseExpression::destroy(){shape.reset();}void mosek::fusion::BaseExpression::destroy() { mosek::fusion::p_BaseExpression::_get_impl(this)->destroy(); }mosek::fusion::WorkStack::WorkStack(mosek::fusion::p_WorkStack *_impl) : _impl(_impl) { /*std::cout << "WorkStack() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::WorkStack::~WorkStack() { delete _impl; _impl = nullptr; }mosek::fusion::p_WorkStack::p_WorkStack  (::mosek::fusion::WorkStack * _pubthis) :     _pubthis(_pubthis){}int mosek::fusion::WorkStack::get_code_base() { return _impl->code_base; }
void mosek::fusion::WorkStack::set_code_base(int _val) { _impl->code_base = _val; }
int mosek::fusion::WorkStack::get_cconst_base() { return _impl->cconst_base; }
void mosek::fusion::WorkStack::set_cconst_base(int _val) { _impl->cconst_base = _val; }
int mosek::fusion::WorkStack::get_codeptr_base() { return _impl->codeptr_base; }
void mosek::fusion::WorkStack::set_codeptr_base(int _val) { _impl->codeptr_base = _val; }
int mosek::fusion::WorkStack::get_cof_base() { return _impl->cof_base; }
void mosek::fusion::WorkStack::set_cof_base(int _val) { _impl->cof_base = _val; }
int mosek::fusion::WorkStack::get_nidxs_base() { return _impl->nidxs_base; }
void mosek::fusion::WorkStack::set_nidxs_base(int _val) { _impl->nidxs_base = _val; }
int mosek::fusion::WorkStack::get_sp_base() { return _impl->sp_base; }
void mosek::fusion::WorkStack::set_sp_base(int _val) { _impl->sp_base = _val; }
int mosek::fusion::WorkStack::get_shape_base() { return _impl->shape_base; }
void mosek::fusion::WorkStack::set_shape_base(int _val) { _impl->shape_base = _val; }
int mosek::fusion::WorkStack::get_ptr_base() { return _impl->ptr_base; }
void mosek::fusion::WorkStack::set_ptr_base(int _val) { _impl->ptr_base = _val; }
bool mosek::fusion::WorkStack::get_hassp() { return _impl->hassp; }
void mosek::fusion::WorkStack::set_hassp(bool _val) { _impl->hassp = _val; }
int mosek::fusion::WorkStack::get_ncodeatom() { return _impl->ncodeatom; }
void mosek::fusion::WorkStack::set_ncodeatom(int _val) { _impl->ncodeatom = _val; }
int mosek::fusion::WorkStack::get_nelem() { return _impl->nelem; }
void mosek::fusion::WorkStack::set_nelem(int _val) { _impl->nelem = _val; }
int mosek::fusion::WorkStack::get_nnz() { return _impl->nnz; }
void mosek::fusion::WorkStack::set_nnz(int _val) { _impl->nnz = _val; }
int mosek::fusion::WorkStack::get_nd() { return _impl->nd; }
void mosek::fusion::WorkStack::set_nd(int _val) { _impl->nd = _val; }
int mosek::fusion::WorkStack::get_pf64() { return _impl->pf64; }
void mosek::fusion::WorkStack::set_pf64(int _val) { _impl->pf64 = _val; }
int mosek::fusion::WorkStack::get_pi64() { return _impl->pi64; }
void mosek::fusion::WorkStack::set_pi64(int _val) { _impl->pi64 = _val; }
int mosek::fusion::WorkStack::get_pi32() { return _impl->pi32; }
void mosek::fusion::WorkStack::set_pi32(int _val) { _impl->pi32 = _val; }
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::WorkStack::get_f64() { return _impl->f64; }
void mosek::fusion::WorkStack::set_f64(std::shared_ptr< monty::ndarray< double,1 > > _val) { _impl->f64 = _val; }
std::shared_ptr< monty::ndarray< long long,1 > > mosek::fusion::WorkStack::get_i64() { return _impl->i64; }
void mosek::fusion::WorkStack::set_i64(std::shared_ptr< monty::ndarray< long long,1 > > _val) { _impl->i64 = _val; }
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::WorkStack::get_i32() { return _impl->i32; }
void mosek::fusion::WorkStack::set_i32(std::shared_ptr< monty::ndarray< int,1 > > _val) { _impl->i32 = _val; }
mosek::fusion::WorkStack::t mosek::fusion::p_WorkStack::_new_WorkStack  (){ return new mosek::fusion::WorkStack(); }mosek::fusion::WorkStack::WorkStack  () :    WorkStack(new mosek::fusion::p_WorkStack(this)){ mosek::fusion::p_WorkStack::_get_impl(this)->_initialize(); }void mosek::fusion::p_WorkStack::_initialize  (){monty::rc_reserve __reserve_this(_pubthis);   {
    i32 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)256)));
    i64 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)256)));
    f64 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)256)));
    pi32 = (int)0;
    pi64 = (int)0;
    pf64 = (int)0;
    nd = (int)0;
    nnz = (int)0;
    nelem = (int)0;
    hassp = false;
    ncodeatom = (int)0;
    ptr_base = (int)0;
    shape_base = (int)0;
    sp_base = (int)0;
    nidxs_base = (int)0;
    cof_base = (int)0;
    cconst_base = (int)0;
    code_base = (int)0;
    codeptr_base = (int)0;
  }
}std::string mosek::fusion::WorkStack :: formatCurrent() { return mosek::fusion::p_WorkStack::_get_impl(this)->formatCurrent(); }std::string mosek::fusion::p_WorkStack::formatCurrent(){
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _6806 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  std::vector<int> _11805;
  for (int _6807 = (int)0, _11806 = nd; _6807 < _11806 ; ++_6807)
  {
    _11805.push_back(((*i32)(safe_add( shape_base,_6807 ))));
  }
  auto _11807 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_11805.size()),_11805.begin(),_11805.end()));
  std::vector<int> _11808;
  for (int _6808 = (int)0, _11809 = safe_add( nelem,(int)1 ); _6808 < _11809 ; ++_6808)
  {
    _11808.push_back(((*i32)(safe_add( ptr_base,_6808 ))));
  }
  auto _11810 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_11808.size()),_11808.begin(),_11808.end()));
  _6806->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("  nelem     = "))->__mosek_2fusion_2Utils_2StringBuffer__a(nelem)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("\n"))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("  nnz       = "))->__mosek_2fusion_2Utils_2StringBuffer__a(nnz)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("\n"))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("  hassp     = "))->__mosek_2fusion_2Utils_2StringBuffer__a(hassp)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (" / "))->__mosek_2fusion_2Utils_2StringBuffer__a(hassp)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("\n"))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("  shape     = "))->__mosek_2fusion_2Utils_2StringBuffer__a(_11807)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("\n"))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("  ptr       = "))->__mosek_2fusion_2Utils_2StringBuffer__a(_11810)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("\n"));
  if ((ncodeatom > (int)0))
  {
    {
      std::vector<int> _11811;
      for (int _6809 = (int)0, _11812 = safe_add( nnz,(int)1 ); _6809 < _11812 ; ++_6809)
      {
        _11811.push_back(((*i32)(safe_add( codeptr_base,_6809 ))));
      }
      auto _11813 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_11811.size()),_11811.begin(),_11811.end()));
      _6806->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("  codeptr   = "))->__mosek_2fusion_2Utils_2StringBuffer__a(_11813)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("\n"));
    }
  }
  {}
  if (hassp)
  {
    {
      std::vector<long long> _11814;
      for (int _6810 = (int)0, _11815 = nelem; _6810 < _11815 ; ++_6810)
      {
        _11814.push_back(((*i64)(safe_add( sp_base,_6810 ))));
      }
      auto _11816 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_11814.size()),_11814.begin(),_11814.end()));
      _6806->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("  sp        = "))->__mosek_2fusion_2Utils_2StringBuffer__a(_11816)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("\n"));
    }
  }
  {}
  int _11817 = (int)0;
  int _11818 = nelem;
  for (int _6811 = _11817; _6811 < _11818; ++_6811)
  {
    {
      std::vector<long long> _11819;
      for (int _6812 = ((*i32)(safe_add( ptr_base,_6811 ))), _11820 = ((*i32)(safe_add( safe_add( ptr_base,_6811 ),(int)1 ))); _6812 < _11820 ; ++_6812)
      {
        _11819.push_back(((*i64)(safe_add( nidxs_base,_6812 ))));
      }
      auto _11821 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_11819.size()),_11819.begin(),_11819.end()));
      std::vector<double> _11822;
      for (int _6813 = ((*i32)(safe_add( ptr_base,_6811 ))), _11823 = ((*i32)(safe_add( safe_add( ptr_base,_6811 ),(int)1 ))); _6813 < _11823 ; ++_6813)
      {
        _11822.push_back(((*f64)(safe_add( cof_base,_6813 ))));
      }
      auto _11824 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_11822.size()),_11822.begin(),_11822.end()));
      _6806->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("  row["))->__mosek_2fusion_2Utils_2StringBuffer__a(_6811)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("]"))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("\n"))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("    nidx : "))->__mosek_2fusion_2Utils_2StringBuffer__a(_11821)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("\n"))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("    cof  : "))->__mosek_2fusion_2Utils_2StringBuffer__a(_11824)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("\n"));
      if ((ncodeatom > (int)0))
      {
        {
          int _11825 = ((*i32)(safe_add( ptr_base,_6811 )));
          int _11826 = ((*i32)(safe_add( safe_add( ptr_base,_6811 ),(int)1 )));
          for (int _6814 = _11825; _6814 < _11826; ++_6814)
          {
            {
              std::vector<int> _11827;
              for (int _6815 = ((*i32)(safe_add( codeptr_base,_6814 ))), _11828 = ((*i32)(safe_add( safe_add( codeptr_base,_6814 ),(int)1 ))); _6815 < _11828 ; ++_6815)
              {
                _11827.push_back(((*i32)(safe_add( code_base,_6815 ))));
              }
              auto _11829 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_11827.size()),_11827.begin(),_11827.end()));
              std::vector<double> _11830;
              for (int _6816 = ((*i32)(safe_add( codeptr_base,_6814 ))), _11831 = ((*i32)(safe_add( safe_add( codeptr_base,_6814 ),(int)1 ))); _6816 < _11831 ; ++_6816)
              {
                _11830.push_back(((*f64)(safe_add( cconst_base,_6816 ))));
              }
              auto _11832 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_11830.size()),_11830.begin(),_11830.end()));
              _6806->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("      code["))->__mosek_2fusion_2Utils_2StringBuffer__a(((*i64)(safe_add( nidxs_base,_6814 ))))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("] "))->__mosek_2fusion_2Utils_2StringBuffer__a(_11829)->__mosek_2fusion_2Utils_2StringBuffer__a(_11832)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("\n"));
            }
          }
        }
      }
      {}
    }
  }
  return _6806->toString();
}
bool mosek::fusion::WorkStack :: peek_hassp() { return mosek::fusion::p_WorkStack::_get_impl(this)->peek_hassp(); }bool mosek::fusion::p_WorkStack::peek_hassp(){
  return (_pubthis->peeki32(safe_add( (int)3,_pubthis->peek_nd() )) != (int)0);
}
int mosek::fusion::WorkStack :: peek_nnz() { return mosek::fusion::p_WorkStack::_get_impl(this)->peek_nnz(); }int mosek::fusion::p_WorkStack::peek_nnz(){
  return _pubthis->peeki32(safe_add( (int)2,_pubthis->peek_nd() ));
}
int mosek::fusion::WorkStack :: peek_nelem() { return mosek::fusion::p_WorkStack::_get_impl(this)->peek_nelem(); }int mosek::fusion::p_WorkStack::peek_nelem(){
  return _pubthis->peeki32(safe_add( (int)1,_pubthis->peek_nd() ));
}
int mosek::fusion::WorkStack :: peek_dim(int _6817) { return mosek::fusion::p_WorkStack::_get_impl(this)->peek_dim(_6817); }int mosek::fusion::p_WorkStack::peek_dim(int _6817){
  return _pubthis->peeki32(safe_add( _6817,(int)1 ));
}
int mosek::fusion::WorkStack :: peek_nd() { return mosek::fusion::p_WorkStack::_get_impl(this)->peek_nd(); }int mosek::fusion::p_WorkStack::peek_nd(){
  return _pubthis->peeki32();
}
void mosek::fusion::WorkStack :: alloc_expr(int _6818,int _6819,int _6820,bool _6821) { mosek::fusion::p_WorkStack::_get_impl(this)->alloc_expr(_6818,_6819,_6820,_6821); }void mosek::fusion::p_WorkStack::alloc_expr(int _6818,int _6819,int _6820,bool _6821){
  _pubthis->alloc_expr(_6818,_6819,_6820,_6821,(int)0);
}
void mosek::fusion::WorkStack :: alloc_expr(int _6822,int _6823,int _6824,bool _6825,int _6826) { mosek::fusion::p_WorkStack::_get_impl(this)->alloc_expr(_6822,_6823,_6824,_6825,_6826); }void mosek::fusion::p_WorkStack::alloc_expr(int _6822,int _6823,int _6824,bool _6825,int _6826){
  cof_base = _pubthis->allocf64(_6824);
  cconst_base = _pubthis->allocf64(_6826);
  nidxs_base = _pubthis->alloci64(_6824);
  int _11833;
  bool _11834 = _6825;
  if (_11834)
  {
    _11833 = _pubthis->alloci64(_6823);
  }
  else
  {
    _11833 = (-(int)9999);
  }
  sp_base = _11833;
  code_base = _pubthis->alloci32(_6826);
  int _11835;
  bool _11836 = (_6826 > (int)0);
  if (_11836)
  {
    _11835 = _pubthis->alloci32(safe_add( _6824,(int)1 ));
  }
  else
  {
    _11835 = (-(int)9999);
  }
  codeptr_base = _11835;
  ptr_base = _pubthis->alloci32(safe_add( _6823,(int)1 ));
  _pubthis->pushi32(_6826);
  int _11837;
  bool _11838 = _6825;
  if (_11838)
  {
    _11837 = (int)1;
  }
  else
  {
    _11837 = (int)0;
  }
  _pubthis->pushi32(_11837);
  _pubthis->pushi32(_6824);
  _pubthis->pushi32(_6823);
  shape_base = _pubthis->alloci32(_6822);
  _pubthis->pushi32(_6822);
  mosek::fusion::p_WorkStack::_get_impl(::mosek::fusion::WorkStack::t(_pubthis))->ncodeatom = _6826;
  mosek::fusion::p_WorkStack::_get_impl(::mosek::fusion::WorkStack::t(_pubthis))->nd = _6822;
  mosek::fusion::p_WorkStack::_get_impl(::mosek::fusion::WorkStack::t(_pubthis))->nelem = _6823;
  mosek::fusion::p_WorkStack::_get_impl(::mosek::fusion::WorkStack::t(_pubthis))->nnz = _6824;
  mosek::fusion::p_WorkStack::_get_impl(::mosek::fusion::WorkStack::t(_pubthis))->hassp = _6825;
}
void mosek::fusion::WorkStack :: pop_expr() { mosek::fusion::p_WorkStack::_get_impl(this)->pop_expr(); }void mosek::fusion::p_WorkStack::pop_expr(){
  nd = _pubthis->popi32();
  shape_base = _pubthis->popi32(nd);
  nelem = _pubthis->popi32();
  nnz = _pubthis->popi32();
  hassp = (_pubthis->popi32() != (int)0);
  ncodeatom = _pubthis->popi32();
  ptr_base = _pubthis->popi32(safe_add( nelem,(int)1 ));
  int _11839;
  bool _11840 = (ncodeatom > (int)0);
  if (_11840)
  {
    _11839 = _pubthis->popi32(safe_add( nnz,(int)1 ));
  }
  else
  {
    _11839 = (-(int)9999);
  }
  codeptr_base = _11839;
  code_base = _pubthis->popi32(ncodeatom);
  int _11841;
  bool _11842 = hassp;
  if (_11842)
  {
    _11841 = _pubthis->popi64(nelem);
  }
  else
  {
    _11841 = (-(int)9999);
  }
  sp_base = _11841;
  nidxs_base = _pubthis->popi64(nnz);
  cconst_base = _pubthis->popf64(ncodeatom);
  cof_base = _pubthis->popf64(nnz);
}
void mosek::fusion::WorkStack :: move_expr(monty::rc_ptr< ::mosek::fusion::WorkStack > _6827) { mosek::fusion::p_WorkStack::_get_impl(this)->move_expr(_6827); }void mosek::fusion::p_WorkStack::move_expr(monty::rc_ptr< ::mosek::fusion::WorkStack > _6827){
  int _6828 = pi32;
  int _6829 = pi64;
  int _6830 = pf64;
  _pubthis->pop_expr();
  int _6831 = _6827->alloci32((_6828 - pi32));
  int _6832 = _6827->alloci64((_6829 - pi64));
  int _6833 = _6827->allocf64((_6830 - pf64));
  ::mosek::fusion::Utils::Tools::arraycopy(i32,pi32,mosek::fusion::p_WorkStack::_get_impl(_6827)->i32,_6831,(_6828 - pi32));
  ::mosek::fusion::Utils::Tools::arraycopy(i64,pi64,mosek::fusion::p_WorkStack::_get_impl(_6827)->i64,_6832,(_6829 - pi64));
  ::mosek::fusion::Utils::Tools::arraycopy(f64,pf64,mosek::fusion::p_WorkStack::_get_impl(_6827)->f64,_6833,(_6830 - pf64));
}
void mosek::fusion::WorkStack :: peek_expr() { mosek::fusion::p_WorkStack::_get_impl(this)->peek_expr(); }void mosek::fusion::p_WorkStack::peek_expr(){
  int _6834 = pi32;
  int _6835 = pi64;
  int _6836 = pf64;
  _pubthis->pop_expr();
  pi32 = _6834;
  pi64 = _6835;
  pf64 = _6836;
}
void mosek::fusion::WorkStack :: ensure_sparsity() { mosek::fusion::p_WorkStack::_get_impl(this)->ensure_sparsity(); }void mosek::fusion::p_WorkStack::ensure_sparsity(){
  int _6837 = ((*i32)((pi32 - (int)1)));
  bool _6838 = (((*i32)(((pi32 - _6837) - (int)3))) != (int)0);
  int _6839 = ((*i32)(((pi32 - _6837) - (int)1)));
  if ((!_6838))
  {
    {
      ((*i32)(((pi32 - _6837) - (int)3))) = (int)1;
      int _6840 = _pubthis->alloci64(_6839);
      int _11843 = (int)0;
      int _11844 = _6839;
      for (int _6841 = _11843; _6841 < _11844; ++_6841)
      {
        {
          ((*i64)(_6840)) = _6841;
        }
      }
    }
  }
  {}
}
void mosek::fusion::WorkStack :: clear() { mosek::fusion::p_WorkStack::_get_impl(this)->clear(); }void mosek::fusion::p_WorkStack::clear(){
  pi32 = (int)0;
  pi64 = (int)0;
  pf64 = (int)0;
}
int mosek::fusion::WorkStack :: allocf64(int _6842) { return mosek::fusion::p_WorkStack::_get_impl(this)->allocf64(_6842); }int mosek::fusion::p_WorkStack::allocf64(int _6842){
  _pubthis->ensuref64(_6842);
  int _6843 = pf64;
  pf64 += _6842;
  return _6843;
}
int mosek::fusion::WorkStack :: alloci64(int _6844) { return mosek::fusion::p_WorkStack::_get_impl(this)->alloci64(_6844); }int mosek::fusion::p_WorkStack::alloci64(int _6844){
  _pubthis->ensurei64(_6844);
  int _6845 = pi64;
  pi64 += _6844;
  return _6845;
}
int mosek::fusion::WorkStack :: alloci32(int _6846) { return mosek::fusion::p_WorkStack::_get_impl(this)->alloci32(_6846); }int mosek::fusion::p_WorkStack::alloci32(int _6846){
  if ((_6846 > (int)0))
  {
    {
      _pubthis->ensurei32(_6846);
      int _6847 = pi32;
      pi32 += _6846;
      return _6847;
    }
  }
  else
  {
    {
      return (int)0;
    }
  }
}
void mosek::fusion::WorkStack :: pushf64(double _6848) { mosek::fusion::p_WorkStack::_get_impl(this)->pushf64(_6848); }void mosek::fusion::p_WorkStack::pushf64(double _6848){
  _pubthis->ensuref64((int)1);
  ((*f64)(pf64)) = _6848;
  ++ pf64;
}
void mosek::fusion::WorkStack :: pushi64(long long _6849) { mosek::fusion::p_WorkStack::_get_impl(this)->pushi64(_6849); }void mosek::fusion::p_WorkStack::pushi64(long long _6849){
  _pubthis->ensurei64((int)1);
  ((*i64)(pi64)) = _6849;
  ++ pi64;
}
void mosek::fusion::WorkStack :: pushi32(int _6850) { mosek::fusion::p_WorkStack::_get_impl(this)->pushi32(_6850); }void mosek::fusion::p_WorkStack::pushi32(int _6850){
  _pubthis->ensurei32((int)1);
  ((*i32)(pi32)) = _6850;
  ++ pi32;
}
void mosek::fusion::WorkStack :: ensuref64(int _6851) { mosek::fusion::p_WorkStack::_get_impl(this)->ensuref64(_6851); }void mosek::fusion::p_WorkStack::ensuref64(int _6851){
  if ((safe_add( pf64,_6851 ) > (int)((f64)->size(0))))
  {
    {
      int _11845;
      bool _11846 = (_6851 < (int)((f64)->size(0)));
      if (_11846)
      {
        _11845 = safe_mul( (int)((f64)->size(0)),(int)2 );
      }
      else
      {
        _11845 = safe_add( (int)((f64)->size(0)),_6851 );
      }
      int _6852 = _11845;
      std::shared_ptr< monty::ndarray< double,1 > > _6853 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_6852)));
      _checked_ptr_1<double> _ptr__6853(_6853 ? _6853->raw() : nullptr,_6853 ? _6853->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(f64,(int)0,_6853,(int)0,pf64);
      f64 = _6853;
    }
  }
  {}
}
void mosek::fusion::WorkStack :: ensurei64(int _6854) { mosek::fusion::p_WorkStack::_get_impl(this)->ensurei64(_6854); }void mosek::fusion::p_WorkStack::ensurei64(int _6854){
  if ((safe_add( pi64,_6854 ) > (int)((i64)->size(0))))
  {
    {
      int _11847;
      bool _11848 = (_6854 < (int)((i64)->size(0)));
      if (_11848)
      {
        _11847 = (int)((i64)->size(0));
      }
      else
      {
        _11847 = _6854;
      }
      int _6855 = safe_add( (int)((i64)->size(0)),_11847 );
      std::shared_ptr< monty::ndarray< long long,1 > > _6856 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_6855)));
      _checked_ptr_1<long long> _ptr__6856(_6856 ? _6856->raw() : nullptr,_6856 ? _6856->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(i64,(int)0,_6856,(int)0,pi64);
      i64 = _6856;
    }
  }
  {}
}
void mosek::fusion::WorkStack :: ensurei32(int _6857) { mosek::fusion::p_WorkStack::_get_impl(this)->ensurei32(_6857); }void mosek::fusion::p_WorkStack::ensurei32(int _6857){
  if ((safe_add( pi32,_6857 ) > (int)((i32)->size(0))))
  {
    {
      int _11849;
      bool _11850 = (_6857 < (int)((i32)->size(0)));
      if (_11850)
      {
        _11849 = safe_mul( (int)((i32)->size(0)),(int)2 );
      }
      else
      {
        _11849 = safe_add( (int)((i32)->size(0)),_6857 );
      }
      int _6858 = _11849;
      std::shared_ptr< monty::ndarray< int,1 > > _6859 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6858)));
      _checked_ptr_1<int> _ptr__6859(_6859 ? _6859->raw() : nullptr,_6859 ? _6859->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(i32,(int)0,_6859,(int)0,pi32);
      i32 = _6859;
    }
  }
  {}
}
int mosek::fusion::WorkStack :: popf64(int _6860) { return mosek::fusion::p_WorkStack::_get_impl(this)->popf64(_6860); }int mosek::fusion::p_WorkStack::popf64(int _6860){
  pf64 -= _6860;
  if ((pf64 < (int)0))
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("Internal: stack underflow"));
    }
  }
  {}
  return pf64;
}
int mosek::fusion::WorkStack :: popi64(int _6861) { return mosek::fusion::p_WorkStack::_get_impl(this)->popi64(_6861); }int mosek::fusion::p_WorkStack::popi64(int _6861){
  pi64 -= _6861;
  if ((pi64 < (int)0))
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("Internal: stack underflow"));
    }
  }
  {}
  return pi64;
}
int mosek::fusion::WorkStack :: popi32(int _6862) { return mosek::fusion::p_WorkStack::_get_impl(this)->popi32(_6862); }int mosek::fusion::p_WorkStack::popi32(int _6862){
  pi32 -= _6862;
  if ((pi32 < (int)0))
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("Internal: stack underflow"));
    }
  }
  {}
  return pi32;
}
void mosek::fusion::WorkStack :: popf64(int _6863,std::shared_ptr< monty::ndarray< double,1 > > _6864,int _6865) { mosek::fusion::p_WorkStack::_get_impl(this)->popf64(_6863,_6864,_6865); }void mosek::fusion::p_WorkStack::popf64(int _6863,std::shared_ptr< monty::ndarray< double,1 > > _6864,int _6865){
  _checked_ptr_1<double> _ptr__6864(_6864 ? _6864->raw() : nullptr, _6864 ? _6864->size(0) : 0);
  pf64 -= _6863;
  if ((pf64 < (int)0))
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("Internal: stack underflow"));
    }
  }
  {}
  ::mosek::fusion::Utils::Tools::arraycopy(f64,pf64,_6864,_6865,_6863);
}
void mosek::fusion::WorkStack :: popi64(int _6866,std::shared_ptr< monty::ndarray< long long,1 > > _6867,int _6868) { mosek::fusion::p_WorkStack::_get_impl(this)->popi64(_6866,_6867,_6868); }void mosek::fusion::p_WorkStack::popi64(int _6866,std::shared_ptr< monty::ndarray< long long,1 > > _6867,int _6868){
  _checked_ptr_1<long long> _ptr__6867(_6867 ? _6867->raw() : nullptr, _6867 ? _6867->size(0) : 0);
  pi64 -= _6866;
  if ((pi64 < (int)0))
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("Internal: stack underflow"));
    }
  }
  {}
  ::mosek::fusion::Utils::Tools::arraycopy(i64,pi64,_6867,_6868,_6866);
}
void mosek::fusion::WorkStack :: popi32(int _6869,std::shared_ptr< monty::ndarray< int,1 > > _6870,int _6871) { mosek::fusion::p_WorkStack::_get_impl(this)->popi32(_6869,_6870,_6871); }void mosek::fusion::p_WorkStack::popi32(int _6869,std::shared_ptr< monty::ndarray< int,1 > > _6870,int _6871){
  _checked_ptr_1<int> _ptr__6870(_6870 ? _6870->raw() : nullptr, _6870 ? _6870->size(0) : 0);
  pi32 -= _6869;
  if ((pi32 < (int)0))
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("Internal: stack underflow"));
    }
  }
  {}
  ::mosek::fusion::Utils::Tools::arraycopy(i32,pi32,_6870,_6871,_6869);
}
double mosek::fusion::WorkStack :: popf64() { return mosek::fusion::p_WorkStack::_get_impl(this)->popf64(); }double mosek::fusion::p_WorkStack::popf64(){
  -- pf64;
  if ((pf64 < (int)0))
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("Internal: stack underflow"));
    }
  }
  {}
  return ((*f64)(pf64));
}
long long mosek::fusion::WorkStack :: popi64() { return mosek::fusion::p_WorkStack::_get_impl(this)->popi64(); }long long mosek::fusion::p_WorkStack::popi64(){
  if ((pi64 < (int)0))
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("Internal: stack underflow"));
    }
  }
  {}
  -- pi64;
  return ((*i64)(pi64));
}
int mosek::fusion::WorkStack :: popi32() { return mosek::fusion::p_WorkStack::_get_impl(this)->popi32(); }int mosek::fusion::p_WorkStack::popi32(){
  -- pi32;
  if ((pi32 < (int)0))
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("Internal: stack underflow"));
    }
  }
  {}
  return ((*i32)(pi32));
}
double mosek::fusion::WorkStack :: peekf64() { return mosek::fusion::p_WorkStack::_get_impl(this)->peekf64(); }double mosek::fusion::p_WorkStack::peekf64(){
  return ((*f64)((pf64 - (int)1)));
}
long long mosek::fusion::WorkStack :: peeki64() { return mosek::fusion::p_WorkStack::_get_impl(this)->peeki64(); }long long mosek::fusion::p_WorkStack::peeki64(){
  return ((*i64)((pi64 - (int)1)));
}
int mosek::fusion::WorkStack :: peeki32() { return mosek::fusion::p_WorkStack::_get_impl(this)->peeki32(); }int mosek::fusion::p_WorkStack::peeki32(){
  return ((*i32)((pi32 - (int)1)));
}
double mosek::fusion::WorkStack :: peekf64(int _6872) { return mosek::fusion::p_WorkStack::_get_impl(this)->peekf64(_6872); }double mosek::fusion::p_WorkStack::peekf64(int _6872){
  return ((*f64)(((pf64 - _6872) - (int)1)));
}
long long mosek::fusion::WorkStack :: peeki64(int _6873) { return mosek::fusion::p_WorkStack::_get_impl(this)->peeki64(_6873); }long long mosek::fusion::p_WorkStack::peeki64(int _6873){
  return ((*i64)(((pi64 - _6873) - (int)1)));
}
int mosek::fusion::WorkStack :: peeki32(int _6874) { return mosek::fusion::p_WorkStack::_get_impl(this)->peeki32(_6874); }int mosek::fusion::p_WorkStack::peeki32(int _6874){
  return ((*i32)(((pi32 - _6874) - (int)1)));
}
void mosek::fusion::p_WorkStack::destroy(){f64.reset();i64.reset();i32.reset();}void mosek::fusion::WorkStack::destroy() { mosek::fusion::p_WorkStack::_get_impl(this)->destroy(); }mosek::fusion::SymmetricExpr::SymmetricExpr(mosek::fusion::p_SymmetricExpr *_impl) : _impl(_impl) { /*std::cout << "SymmetricExpr() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::SymmetricExpr::~SymmetricExpr() { delete _impl; _impl = nullptr; }mosek::fusion::p_SymmetricExpr::p_SymmetricExpr  (::mosek::fusion::SymmetricExpr * _pubthis) :     _pubthis(_pubthis){}mosek::fusion::SymmetricExpr::t mosek::fusion::p_SymmetricExpr::_new_SymmetricExpr  (int _6875,    std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::SymmetricMatrix >,1 > > _6876,    std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _6877,    monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _6878){ return new mosek::fusion::SymmetricExpr(_6875,_6876,_6877,_6878); }mosek::fusion::SymmetricExpr::SymmetricExpr  (int _6875,    std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::SymmetricMatrix >,1 > > _6876,    std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _6877,    monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _6878) :    SymmetricExpr(new mosek::fusion::p_SymmetricExpr(this)){ mosek::fusion::p_SymmetricExpr::_get_impl(this)->_initialize(_6875,_6876,_6877,_6878); }void mosek::fusion::p_SymmetricExpr::_initialize  (int _6875,    std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::SymmetricMatrix >,1 > > _6876,    std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _6877,    monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _6878){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_SymmetricExpr::_get_impl(::mosek::fusion::SymmetricExpr::t(_pubthis))->n = _6875;
    mosek::fusion::p_SymmetricExpr::_get_impl(::mosek::fusion::SymmetricExpr::t(_pubthis))->Ms = _6876;
    mosek::fusion::p_SymmetricExpr::_get_impl(::mosek::fusion::SymmetricExpr::t(_pubthis))->xs = _6877;
    mosek::fusion::p_SymmetricExpr::_get_impl(::mosek::fusion::SymmetricExpr::t(_pubthis))->b = _6878;
  }
}monty::rc_ptr< ::mosek::fusion::SymmetricExpr > mosek::fusion::p_SymmetricExpr::add(monty::rc_ptr< ::mosek::fusion::SymmetricExpr > _6879,monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _6880){
  if ((mosek::fusion::p_SymmetricExpr::_get_impl(_6879)->n != _6880->getdim()))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Dimension does not match"));
    }
  }
  {}
  monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _11851;
  bool _11852 = (NULL != mosek::fusion::p_SymmetricExpr::_get_impl(_6879)->b.get());
  if (_11852)
  {
    _11851 = mosek::fusion::p_SymmetricExpr::_get_impl(_6879)->b->__mosek_2fusion_2SymmetricMatrix__add(_6880);
  }
  else
  {
    _11851 = _6880;
  }
  return ::mosek::fusion::p_SymmetricExpr::_new_SymmetricExpr(mosek::fusion::p_SymmetricExpr::_get_impl(_6879)->n,mosek::fusion::p_SymmetricExpr::_get_impl(_6879)->Ms,mosek::fusion::p_SymmetricExpr::_get_impl(_6879)->xs,_11851);
}
monty::rc_ptr< ::mosek::fusion::SymmetricExpr > mosek::fusion::p_SymmetricExpr::mul(monty::rc_ptr< ::mosek::fusion::SymmetricExpr > _6881,double _6882){
  std::vector<monty::rc_ptr< ::mosek::fusion::SymmetricMatrix >> _11853;
  for (int _6883 = (int)0, _11854 = (int)((mosek::fusion::p_SymmetricExpr::_get_impl(_6881)->Ms)->size(0)); _6883 < _11854 ; ++_6883)
  {
    _11853.push_back(((*mosek::fusion::p_SymmetricExpr::_get_impl(_6881)->Ms)(_6883))->__mosek_2fusion_2SymmetricMatrix__mul(_6882));
  }
  auto _11855 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::SymmetricMatrix >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::SymmetricMatrix >,1 >(monty::shape(_11853.size()),_11853.begin(),_11853.end()));
  monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _11856;
  bool _11857 = (NULL != mosek::fusion::p_SymmetricExpr::_get_impl(_6881)->b.get());
  if (_11857)
  {
    _11856 = mosek::fusion::p_SymmetricExpr::_get_impl(_6881)->b->__mosek_2fusion_2SymmetricMatrix__mul(_6882);
  }
  else
  {
    _11856 = nullptr;
  }
  return ::mosek::fusion::p_SymmetricExpr::_new_SymmetricExpr(mosek::fusion::p_SymmetricExpr::_get_impl(_6881)->n,_11855,mosek::fusion::p_SymmetricExpr::_get_impl(_6881)->xs,_11856);
}
monty::rc_ptr< ::mosek::fusion::SymmetricExpr > mosek::fusion::p_SymmetricExpr::add(monty::rc_ptr< ::mosek::fusion::SymmetricExpr > _6884,monty::rc_ptr< ::mosek::fusion::SymmetricExpr > _6885){
  if ((mosek::fusion::p_SymmetricExpr::_get_impl(_6884)->n != mosek::fusion::p_SymmetricExpr::_get_impl(_6885)->n))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching dimensions of operands"));
    }
  }
  {}
  std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::SymmetricMatrix >,1 > > _6886 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::SymmetricMatrix >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::SymmetricMatrix >,1 >(monty::shape(safe_add( (int)((mosek::fusion::p_SymmetricExpr::_get_impl(_6884)->Ms)->size(0)),(int)((mosek::fusion::p_SymmetricExpr::_get_impl(_6885)->Ms)->size(0)) ))));
  std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _6887 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >(monty::shape(safe_add( (int)((mosek::fusion::p_SymmetricExpr::_get_impl(_6884)->xs)->size(0)),(int)((mosek::fusion::p_SymmetricExpr::_get_impl(_6885)->xs)->size(0)) ))));
  int _6888 = (int)((mosek::fusion::p_SymmetricExpr::_get_impl(_6884)->Ms)->size(0));
  int _11858 = (int)0;
  int _11859 = (int)((mosek::fusion::p_SymmetricExpr::_get_impl(_6884)->Ms)->size(0));
  for (int _6889 = _11858; _6889 < _11859; ++_6889)
  {
    {
      ((*_6886)(_6889)) = ((*mosek::fusion::p_SymmetricExpr::_get_impl(_6884)->Ms)(_6889));
    }
  }
  int _11860 = (int)0;
  int _11861 = (int)((mosek::fusion::p_SymmetricExpr::_get_impl(_6885)->Ms)->size(0));
  for (int _6890 = _11860; _6890 < _11861; ++_6890)
  {
    {
      ((*_6886)(safe_add( _6890,_6888 ))) = ((*mosek::fusion::p_SymmetricExpr::_get_impl(_6885)->Ms)(_6890));
    }
  }
  int _6891 = (int)((mosek::fusion::p_SymmetricExpr::_get_impl(_6884)->xs)->size(0));
  int _11862 = (int)0;
  int _11863 = (int)((mosek::fusion::p_SymmetricExpr::_get_impl(_6884)->xs)->size(0));
  for (int _6892 = _11862; _6892 < _11863; ++_6892)
  {
    {
      ((*_6887)(_6892)) = ((*mosek::fusion::p_SymmetricExpr::_get_impl(_6884)->xs)(_6892));
    }
  }
  int _11864 = (int)0;
  int _11865 = (int)((mosek::fusion::p_SymmetricExpr::_get_impl(_6885)->xs)->size(0));
  for (int _6893 = _11864; _6893 < _11865; ++_6893)
  {
    {
      ((*_6887)(safe_add( _6893,_6891 ))) = ((*mosek::fusion::p_SymmetricExpr::_get_impl(_6885)->xs)(_6893));
    }
  }
  monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _11866;
  bool _11867 = ((NULL == mosek::fusion::p_SymmetricExpr::_get_impl(_6884)->b.get()) && (NULL == mosek::fusion::p_SymmetricExpr::_get_impl(_6885)->b.get()));
  if (_11867)
  {
    _11866 = nullptr;
  }
  else
  {
    monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _11868;
    bool _11869 = ((NULL != mosek::fusion::p_SymmetricExpr::_get_impl(_6884)->b.get()) && (NULL != mosek::fusion::p_SymmetricExpr::_get_impl(_6885)->b.get()));
    if (_11869)
    {
      _11868 = mosek::fusion::p_SymmetricExpr::_get_impl(_6884)->b->__mosek_2fusion_2SymmetricMatrix__add(mosek::fusion::p_SymmetricExpr::_get_impl(_6885)->b);
    }
    else
    {
      monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _11870;
      bool _11871 = (NULL != mosek::fusion::p_SymmetricExpr::_get_impl(_6884)->b.get());
      if (_11871)
      {
        _11870 = mosek::fusion::p_SymmetricExpr::_get_impl(_6884)->b;
      }
      else
      {
        _11870 = mosek::fusion::p_SymmetricExpr::_get_impl(_6885)->b;
      }
      _11868 = _11870;
    }
    _11866 = _11868;
  }
  monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _6894 = _11866;
  return ::mosek::fusion::p_SymmetricExpr::_new_SymmetricExpr(mosek::fusion::p_SymmetricExpr::_get_impl(_6884)->n,_6886,_6887,_6894);
}
std::string mosek::fusion::SymmetricExpr :: toString() { return mosek::fusion::p_SymmetricExpr::_get_impl(this)->toString(); }std::string mosek::fusion::p_SymmetricExpr::toString(){
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _6895 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  _6895->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("SymmetricExpr( ("))->__mosek_2fusion_2Utils_2StringBuffer__a(n)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(n)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (") )"));
  return _6895->toString();
}
void mosek::fusion::p_SymmetricExpr::destroy(){xs.reset();b.reset();Ms.reset();}void mosek::fusion::SymmetricExpr::destroy() { mosek::fusion::p_SymmetricExpr::_get_impl(this)->destroy(); }mosek::fusion::Expr::Expr(mosek::fusion::p_Expr *_impl) : mosek::fusion::BaseExpression(_impl) { /*std::cout << "Expr()" << this << std::endl; */ }mosek::fusion::Expr::~Expr() {  /* std::cout << "~Expr()" << this << std::endl << std::flush; */ }mosek::fusion::p_Expr::p_Expr  (::mosek::fusion::Expr * _pubthis) :     mosek::fusion::p_BaseExpression(_pubthis),    _pubthis(_pubthis){}mosek::fusion::Expr::t mosek::fusion::p_Expr::_new_Expr  (std::shared_ptr< monty::ndarray< long long,1 > > _6896,    std::shared_ptr< monty::ndarray< long long,1 > > _6897,    std::shared_ptr< monty::ndarray< double,1 > > _6898,    std::shared_ptr< monty::ndarray< double,1 > > _6899,    std::shared_ptr< monty::ndarray< int,1 > > _6900,    std::shared_ptr< monty::ndarray< long long,1 > > _6901){ return new mosek::fusion::Expr(_6896,_6897,_6898,_6899,_6900,_6901); }mosek::fusion::Expr::Expr  (std::shared_ptr< monty::ndarray< long long,1 > > _6896,    std::shared_ptr< monty::ndarray< long long,1 > > _6897,    std::shared_ptr< monty::ndarray< double,1 > > _6898,    std::shared_ptr< monty::ndarray< double,1 > > _6899,    std::shared_ptr< monty::ndarray< int,1 > > _6900,    std::shared_ptr< monty::ndarray< long long,1 > > _6901) :    Expr(new mosek::fusion::p_Expr(this)){ mosek::fusion::p_Expr::_get_impl(this)->_initialize(_6896,_6897,_6898,_6899,_6900,_6901); }void mosek::fusion::p_Expr::_initialize  (std::shared_ptr< monty::ndarray< long long,1 > > _6896,    std::shared_ptr< monty::ndarray< long long,1 > > _6897,    std::shared_ptr< monty::ndarray< double,1 > > _6898,    std::shared_ptr< monty::ndarray< double,1 > > _6899,    std::shared_ptr< monty::ndarray< int,1 > > _6900,    std::shared_ptr< monty::ndarray< long long,1 > > _6901){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<long long> _ptr__6896(_6896 ? _6896->raw() : nullptr, _6896 ? _6896->size(0) : 0);
    _checked_ptr_1<long long> _ptr__6897(_6897 ? _6897->raw() : nullptr, _6897 ? _6897->size(0) : 0);
    _checked_ptr_1<double> _ptr__6898(_6898 ? _6898->raw() : nullptr, _6898 ? _6898->size(0) : 0);
    _checked_ptr_1<double> _ptr__6899(_6899 ? _6899->raw() : nullptr, _6899 ? _6899->size(0) : 0);
    _checked_ptr_1<int> _ptr__6900(_6900 ? _6900->raw() : nullptr, _6900 ? _6900->size(0) : 0);
    _checked_ptr_1<long long> _ptr__6901(_6901 ? _6901->raw() : nullptr, _6901 ? _6901->size(0) : 0);
    std::shared_ptr< monty::ndarray< int,1 > > _11872;
    bool _11873 = (NULL != _6900.get());
    if (_11873)
    {
      _11872 = ::mosek::fusion::Utils::Tools::arraycopy(_6900);
    }
    else
    {
      _11872 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(((int)((_6896)->size(0)) - (int)1))});
    }
    std::shared_ptr< monty::ndarray< long long,1 > > _11874;
    bool _11875 = (NULL != _6901.get());
    if (_11875)
    {
      _11874 = ::mosek::fusion::Utils::Tools::arraycopy(_6901);
    }
    else
    {
      _11874 = nullptr;
    }
    mosek::fusion::p_Expr::_initialize(::mosek::fusion::Utils::Tools::arraycopy(_6896),::mosek::fusion::Utils::Tools::arraycopy(_6897),::mosek::fusion::Utils::Tools::arraycopy(_6898),::mosek::fusion::Utils::Tools::arraycopy(_6899),_11872,_11874,(int)1);
    int _6902 = ((int)((_6896)->size(0)) - (int)1);
    if ((_6902 < (int)0))
    {
      {
        throw ::mosek::fusion::ExpressionError(std::string ("Invalid ptrb"));
      }
    }
    {}
    long long _6903 = _ptr__6896[_6902];
    if (((_6903 < (int)0) || ((_6903 != (int)((_6898)->size(0))) || (_6903 != (int)((_6897)->size(0))))))
    {
      {
        throw ::mosek::fusion::ExpressionError(std::string ("Invalid ptrb construction"));
      }
    }
    {}
    bool _6904 = true;
    bool _6905 = true;
    bool _6906 = true;
    std::shared_ptr< monty::ndarray< int,1 > > _6907 = mosek::fusion::p_Expr::_get_impl(::mosek::fusion::Expr::t(_pubthis))->shape;
    _checked_ptr_1<int> _ptr__6907(_6907 ? _6907->raw() : nullptr,_6907 ? _6907->size(0) : 0);
    long long _6908 = ::mosek::fusion::p_Set::size(_6907);
    {
      int _11876 = (int)0;
      int _11877 = (int)((_6907)->size(0));
      for (int _6909 = _11876; _6909 < _11877; ++_6909)
      {
        {
          _6905 = (_6905 && (_ptr__6907[_6909] >= (int)0));
        }
      }
      int _11878 = (int)0;
      int _11879 = _6902;
      for (int _6910 = _11878; _6910 < _11879; ++_6910)
      {
        {
          _6904 = (_6904 && (_ptr__6896[_6910] <= _ptr__6896[safe_add( _6910,(int)1 )]));
        }
      }
      if (((NULL != _6901.get()) && ((int)((_6901)->size(0)) > (int)0)))
      {
        {
          _6906 = ((_ptr__6901[(int)0] >= (int)0) && (_ptr__6901[(_6902 - (int)1)] < _6908));
          int _11880 = (int)0;
          int _11881 = (_6902 - (int)1);
          for (int _6911 = _11880; _6911 < _11881; ++_6911)
          {
            {
              _6906 = (_6906 && (_ptr__6901[_6911] < _ptr__6901[safe_add( _6911,(int)1 )]));
            }
          }
        }
      }
      {}
    }
    if ((!_6905))
    {
      {
        throw ::mosek::fusion::ExpressionError(std::string ("Invalid shape"));
      }
    }
    {}
    if ((!_6904))
    {
      {
        throw ::mosek::fusion::ExpressionError(std::string ("Invalid ptrb"));
      }
    }
    {}
    if ((!_6906))
    {
      {
        throw ::mosek::fusion::ExpressionError(std::string ("Invalid sparsity pattern"));
      }
    }
    {}
  }
}mosek::fusion::Expr::t mosek::fusion::p_Expr::_new_Expr  (std::shared_ptr< monty::ndarray< long long,1 > > _6912,    std::shared_ptr< monty::ndarray< long long,1 > > _6913,    std::shared_ptr< monty::ndarray< double,1 > > _6914,    std::shared_ptr< monty::ndarray< double,1 > > _6915,    std::shared_ptr< monty::ndarray< int,1 > > _6916,    std::shared_ptr< monty::ndarray< long long,1 > > _6917,    int _6918){ return new mosek::fusion::Expr(_6912,_6913,_6914,_6915,_6916,_6917,_6918); }mosek::fusion::Expr::Expr  (std::shared_ptr< monty::ndarray< long long,1 > > _6912,    std::shared_ptr< monty::ndarray< long long,1 > > _6913,    std::shared_ptr< monty::ndarray< double,1 > > _6914,    std::shared_ptr< monty::ndarray< double,1 > > _6915,    std::shared_ptr< monty::ndarray< int,1 > > _6916,    std::shared_ptr< monty::ndarray< long long,1 > > _6917,    int _6918) :    Expr(new mosek::fusion::p_Expr(this)){ mosek::fusion::p_Expr::_get_impl(this)->_initialize(_6912,_6913,_6914,_6915,_6916,_6917,_6918); }void mosek::fusion::p_Expr::_initialize  (std::shared_ptr< monty::ndarray< long long,1 > > _6912,    std::shared_ptr< monty::ndarray< long long,1 > > _6913,    std::shared_ptr< monty::ndarray< double,1 > > _6914,    std::shared_ptr< monty::ndarray< double,1 > > _6915,    std::shared_ptr< monty::ndarray< int,1 > > _6916,    std::shared_ptr< monty::ndarray< long long,1 > > _6917,    int _6918){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<long long> _ptr__6912(_6912 ? _6912->raw() : nullptr, _6912 ? _6912->size(0) : 0);
    _checked_ptr_1<long long> _ptr__6913(_6913 ? _6913->raw() : nullptr, _6913 ? _6913->size(0) : 0);
    _checked_ptr_1<double> _ptr__6914(_6914 ? _6914->raw() : nullptr, _6914 ? _6914->size(0) : 0);
    _checked_ptr_1<double> _ptr__6915(_6915 ? _6915->raw() : nullptr, _6915 ? _6915->size(0) : 0);
    _checked_ptr_1<int> _ptr__6916(_6916 ? _6916->raw() : nullptr, _6916 ? _6916->size(0) : 0);
    _checked_ptr_1<long long> _ptr__6917(_6917 ? _6917->raw() : nullptr, _6917 ? _6917->size(0) : 0);
    mosek::fusion::p_BaseExpression::_initialize(_6916);
    mosek::fusion::p_Expr::_get_impl(::mosek::fusion::Expr::t(_pubthis))->shape = _6916;
    mosek::fusion::p_Expr::_get_impl(::mosek::fusion::Expr::t(_pubthis))->ptrb = _6912;
    mosek::fusion::p_Expr::_get_impl(::mosek::fusion::Expr::t(_pubthis))->subj = _6913;
    mosek::fusion::p_Expr::_get_impl(::mosek::fusion::Expr::t(_pubthis))->cof_v = _6914;
    mosek::fusion::p_Expr::_get_impl(::mosek::fusion::Expr::t(_pubthis))->bfix = _6915;
    mosek::fusion::p_Expr::_get_impl(::mosek::fusion::Expr::t(_pubthis))->inst = _6917;
    if ((NULL == mosek::fusion::p_Expr::_get_impl(::mosek::fusion::Expr::t(_pubthis))->shape.get()))
    {
      {
        throw ::mosek::fusion::UnexpectedError(std::string ("Internal: NULL shape"));
      }
    }
    {}
  }
}mosek::fusion::Expr::t mosek::fusion::p_Expr::_new_Expr  (monty::rc_ptr< ::mosek::fusion::Expression > _6919){ return new mosek::fusion::Expr(_6919); }mosek::fusion::Expr::Expr  (monty::rc_ptr< ::mosek::fusion::Expression > _6919) :    Expr(new mosek::fusion::p_Expr(this)){ mosek::fusion::p_Expr::_get_impl(this)->_initialize(_6919); }void mosek::fusion::p_Expr::_initialize  (monty::rc_ptr< ::mosek::fusion::Expression > _6919){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_BaseExpression::_initialize(_6919->getShape());
    monty::rc_ptr< ::mosek::fusion::Expression > _11882 = _6919;
    if (false) {}
    else if (nullptr != dynamic_cast<::mosek::fusion::Expr*>(_11882.get()))
    {
      ::mosek::fusion::Expr::t _6920 (dynamic_cast<::mosek::fusion::Expr*>(_11882.get()));
      {
        shape = mosek::fusion::p_Expr::_get_impl(_6920)->shape;
        ptrb = mosek::fusion::p_Expr::_get_impl(_6920)->ptrb;
        subj = mosek::fusion::p_Expr::_get_impl(_6920)->subj;
        cof_v = mosek::fusion::p_Expr::_get_impl(_6920)->cof_v;
        bfix = mosek::fusion::p_Expr::_get_impl(_6920)->bfix;
        inst = mosek::fusion::p_Expr::_get_impl(_6920)->inst;
      }
    }
    else
    {
      mosek::fusion::Expression::t _6921 = _11882;
      {
        monty::rc_ptr< ::mosek::fusion::WorkStack > _6922 = ::mosek::fusion::p_WorkStack::_new_WorkStack();
        monty::rc_ptr< ::mosek::fusion::WorkStack > _6923 = ::mosek::fusion::p_WorkStack::_new_WorkStack();
        monty::rc_ptr< ::mosek::fusion::WorkStack > _6924 = ::mosek::fusion::p_WorkStack::_new_WorkStack();
        _6921->eval(_6924,_6923,_6922);
        int _6925 = _6924->popi32();
        int _6926 = _6924->popi32(_6925);
        int _6927 = _6924->popi32();
        int _6928 = _6924->popi32();
        bool _6929 = (_6924->popi32() != (int)0);
        int _6930 = _6924->popi32(safe_add( _6927,(int)1 ));
        int _11883;
        bool _11884 = _6929;
        if (_11884)
        {
          _11883 = _6924->popi64(_6927);
        }
        else
        {
          _11883 = (int)0;
        }
        int _6931 = _11883;
        int _6932 = _6924->popi64(_6928);
        int _6933 = _6924->popf64(_6927);
        int _6934 = _6924->popf64(_6928);
        std::shared_ptr< monty::ndarray< int,1 > > _6935 = mosek::fusion::p_WorkStack::_get_impl(_6924)->i32;
        _checked_ptr_1<int> _ptr__6935(_6935 ? _6935->raw() : nullptr,_6935 ? _6935->size(0) : 0);
        std::shared_ptr< monty::ndarray< long long,1 > > _6936 = mosek::fusion::p_WorkStack::_get_impl(_6924)->i64;
        _checked_ptr_1<long long> _ptr__6936(_6936 ? _6936->raw() : nullptr,_6936 ? _6936->size(0) : 0);
        std::shared_ptr< monty::ndarray< double,1 > > _6937 = mosek::fusion::p_WorkStack::_get_impl(_6924)->f64;
        _checked_ptr_1<double> _ptr__6937(_6937 ? _6937->raw() : nullptr,_6937 ? _6937->size(0) : 0);
        std::vector<int> _11885;
        for (int _6938 = (int)0, _11886 = _6925; _6938 < _11886 ; ++_6938)
        {
          _11885.push_back(_ptr__6935[safe_add( _6926,_6938 )]);
        }
        auto _11887 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_11885.size()),_11885.begin(),_11885.end()));
        shape = _11887;
        std::vector<long long> _11888;
        for (int _6939 = (int)0, _11889 = safe_add( _6927,(int)1 ); _6939 < _11889 ; ++_6939)
        {
          _11888.push_back(_ptr__6935[safe_add( _6930,_6939 )]);
        }
        auto _11890 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_11888.size()),_11888.begin(),_11888.end()));
        ptrb = _11890;
        std::vector<long long> _11891;
        for (int _6940 = (int)0, _11892 = _6928; _6940 < _11892 ; ++_6940)
        {
          _11891.push_back(_ptr__6936[safe_add( _6932,_6940 )]);
        }
        auto _11893 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_11891.size()),_11891.begin(),_11891.end()));
        subj = _11893;
        std::vector<double> _11894;
        for (int _6941 = (int)0, _11895 = _6928; _6941 < _11895 ; ++_6941)
        {
          _11894.push_back(_ptr__6937[safe_add( _6934,_6941 )]);
        }
        auto _11896 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_11894.size()),_11894.begin(),_11894.end()));
        cof_v = _11896;
        std::vector<double> _11897;
        for (int _6942 = (int)0, _11898 = _6928; _6942 < _11898 ; ++_6942)
        {
          _11897.push_back(_ptr__6937[safe_add( _6933,_6942 )]);
        }
        auto _11899 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_11897.size()),_11897.begin(),_11897.end()));
        bfix = _11899;
        std::shared_ptr< monty::ndarray< long long,1 > > _11900;
        bool _11901 = _6929;
        if (_11901)
        {
          std::vector<long long> _11902;
          for (int _6943 = (int)0, _11903 = _6928; _6943 < _11903 ; ++_6943)
          {
            _11902.push_back(_ptr__6936[safe_add( _6931,_6943 )]);
          }
          auto _11904 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_11902.size()),_11902.begin(),_11902.end()));
          _11900 = _11904;
        }
        else
        {
          _11900 = nullptr;
        }
        inst = _11900;
      }
    }
    if ((NULL == shape.get()))
    {
      {
        throw ::mosek::fusion::UnexpectedError(std::string ("Internal: NULL shape"));
      }
    }
    {}
  }
}long long mosek::fusion::p_Expr::prod(std::shared_ptr< monty::ndarray< int,1 > > _6944){
  _checked_ptr_1<int> _ptr__6944(_6944 ? _6944->raw() : nullptr, _6944 ? _6944->size(0) : 0);
  int _6945 = (int)1;
  int _11905 = (int)0;
  int _11906 = (int)((_6944)->size(0));
  for (int _6946 = _11905; _6946 < _11906; ++_6946)
  {
    {
      _6945 *= _ptr__6944[_6946];
    }
  }
  return _6945;
}
std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > mosek::fusion::p_Expr::varstack(std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >,1 > > _6947){
  std::vector<monty::rc_ptr< ::mosek::fusion::Variable >> _11907;
  for (int _6948 = (int)0, _11908 = (int)((_6947)->size(0)); _6948 < _11908 ; ++_6948)
  {
    for (int _6949 = (int)0, _11909 = (int)((((*_6947)(_6948)))->size(0)); _6949 < _11909 ; ++_6949)
    {
      _11907.push_back(((*((*_6947)(_6948)))(_6949)));
    }
  }
  auto _11910 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >(monty::shape(_11907.size()),_11907.begin(),_11907.end()));
  return _11910;
}
std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > mosek::fusion::p_Expr::varstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _6950,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _6951){
  if ((NULL == _6950.get()))
  {
    {
      return _6951;
    }
  }
  else if((NULL == _6951.get()))
  {
    {
      return _6950;
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _6952 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 >(monty::shape(safe_add( (int)((_6950)->size(0)),(int)((_6951)->size(0)) ))));
      int _11911 = (int)0;
      int _11912 = (int)((_6950)->size(0));
      for (int _6953 = _11911; _6953 < _11912; ++_6953)
      {
        {
          ((*_6952)(_6953)) = ((*_6950)(_6953));
        }
      }
      int _11913 = (int)0;
      int _11914 = (int)((_6951)->size(0));
      for (int _6954 = _11913; _6954 < _11914; ++_6954)
      {
        {
          ((*_6952)(safe_add( _6954,(int)((_6950)->size(0)) ))) = ((*_6951)(_6954));
        }
      }
      return _6952;
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::condense  ( monty::rc_ptr< ::mosek::fusion::Expression > _6955) { return mosek::fusion::p_Expr::condense(_6955); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::condense(monty::rc_ptr< ::mosek::fusion::Expression > _6955){
  return (::mosek::fusion::p_ExprCondense::_new_ExprCondense(_6955)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::flatten  ( monty::rc_ptr< ::mosek::fusion::Expression > _6956) { return mosek::fusion::p_Expr::flatten(_6956); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::flatten(monty::rc_ptr< ::mosek::fusion::Expression > _6956){
  if ((NULL == _6956.get()))
  {
    {
      throw monty::NullPointerException(std::string ("Arguments for flatten may not be null"));
    }
  }
  {}
  long long _6957 = _6956->getSize();
  if ((!(_6957 <= (int)0x7fffffff)))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Maximum dimension size exceeded"));
    }
  }
  {}
  return ::mosek::fusion::p_Expr::reshape(_6956,(int)_6957);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::reshape  ( monty::rc_ptr< ::mosek::fusion::Expression > _6958,    int _6959,    int _6960) { return mosek::fusion::p_Expr::reshape(_6958,_6959,_6960); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::reshape(monty::rc_ptr< ::mosek::fusion::Expression > _6958,int _6959,int _6960){
  if ((NULL == _6958.get()))
  {
    {
      throw monty::NullPointerException(std::string ("Arguments for reshape may not be null"));
    }
  }
  {}
  return ::mosek::fusion::p_Expr::reshape(_6958,::mosek::fusion::p_Set::make(_6959,_6960));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::reshape  ( monty::rc_ptr< ::mosek::fusion::Expression > _6961,    int _6962) { return mosek::fusion::p_Expr::reshape(_6961,_6962); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::reshape(monty::rc_ptr< ::mosek::fusion::Expression > _6961,int _6962){
  if ((NULL == _6961.get()))
  {
    {
      throw monty::NullPointerException(std::string ("Arguments for reshape may not be null"));
    }
  }
  {}
  return ::mosek::fusion::p_Expr::reshape(_6961,::mosek::fusion::p_Set::make(_6962));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::reshape  ( monty::rc_ptr< ::mosek::fusion::Expression > _6963,    std::shared_ptr< monty::ndarray< int,1 > > _6964) { return mosek::fusion::p_Expr::reshape(_6963,_6964); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::reshape(monty::rc_ptr< ::mosek::fusion::Expression > _6963,std::shared_ptr< monty::ndarray< int,1 > > _6964){
  _checked_ptr_1<int> _ptr__6964(_6964 ? _6964->raw() : nullptr, _6964 ? _6964->size(0) : 0);
  return (::mosek::fusion::p_ExprReshape::_new_ExprReshape(_6964,_6963)).as<::mosek::fusion::Expression>();
}
long long mosek::fusion::Expr :: size() { return mosek::fusion::p_Expr::_get_impl(this)->size(); }long long mosek::fusion::p_Expr::size(){
  return ((long long)((ptrb)->size(0)) - (int)1);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::zeros  ( std::shared_ptr< monty::ndarray< int,1 > > _6965) { return mosek::fusion::p_Expr::zeros(_6965); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::zeros(std::shared_ptr< monty::ndarray< int,1 > > _6965){
  _checked_ptr_1<int> _ptr__6965(_6965 ? _6965->raw() : nullptr, _6965 ? _6965->size(0) : 0);
  return ::mosek::fusion::p_Expr::constTerm(_6965,(double)((int)0));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::zeros  ( int _6966) { return mosek::fusion::p_Expr::zeros(_6966); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::zeros(int _6966){
  return ::mosek::fusion::p_Expr::constTerm(_6966,(double)((int)0));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::ones  ( ) { return mosek::fusion::p_Expr::ones(); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::ones(){
  return ::mosek::fusion::p_Expr::constTerm((double)((int)1));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::ones  ( std::shared_ptr< monty::ndarray< int,1 > > _6967,    std::shared_ptr< monty::ndarray< int,2 > > _6968) { return mosek::fusion::p_Expr::ones(_6967,_6968); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::ones(std::shared_ptr< monty::ndarray< int,1 > > _6967,std::shared_ptr< monty::ndarray< int,2 > > _6968){
  _checked_ptr_1<int> _ptr__6967(_6967 ? _6967->raw() : nullptr, _6967 ? _6967->size(0) : 0);
  return ::mosek::fusion::p_Expr::constTerm(_6967,_6968,(double)((int)1));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::ones  ( std::shared_ptr< monty::ndarray< int,1 > > _6969) { return mosek::fusion::p_Expr::ones(_6969); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::ones(std::shared_ptr< monty::ndarray< int,1 > > _6969){
  _checked_ptr_1<int> _ptr__6969(_6969 ? _6969->raw() : nullptr, _6969 ? _6969->size(0) : 0);
  return ::mosek::fusion::p_Expr::constTerm(_6969,(double)((int)1));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::ones  ( int _6970) { return mosek::fusion::p_Expr::ones(_6970); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::ones(int _6970){
  return ::mosek::fusion::p_Expr::constTerm(_6970,(double)((int)1));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::constTerm  ( monty::rc_ptr< ::mosek::fusion::NDSparseArray > _6971) { return mosek::fusion::p_Expr::constTerm(_6971); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::constTerm(monty::rc_ptr< ::mosek::fusion::NDSparseArray > _6971){
  return (::mosek::fusion::p_ExprConst::_new_ExprConst(mosek::fusion::p_NDSparseArray::_get_impl(_6971)->dims,mosek::fusion::p_NDSparseArray::_get_impl(_6971)->inst,mosek::fusion::p_NDSparseArray::_get_impl(_6971)->cof)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::constTerm  ( monty::rc_ptr< ::mosek::fusion::Matrix > _6972) { return mosek::fusion::p_Expr::constTerm(_6972); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::constTerm(monty::rc_ptr< ::mosek::fusion::Matrix > _6972){
  int _6973 = _6972->numRows();
  int _6974 = _6972->numColumns();
  std::shared_ptr< monty::ndarray< int,1 > > _6975 = ::mosek::fusion::p_Set::make(_6973,_6974);
  _checked_ptr_1<int> _ptr__6975(_6975 ? _6975->raw() : nullptr,_6975 ? _6975->size(0) : 0);
  if (_6972->isSparse())
  {
    {
      std::shared_ptr< monty::ndarray< double,1 > > _6976 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_6972->numNonzeros())));
      _checked_ptr_1<double> _ptr__6976(_6976 ? _6976->raw() : nullptr,_6976 ? _6976->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _6977 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6972->numNonzeros())));
      _checked_ptr_1<int> _ptr__6977(_6977 ? _6977->raw() : nullptr,_6977 ? _6977->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _6978 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_6972->numNonzeros())));
      _checked_ptr_1<int> _ptr__6978(_6978 ? _6978->raw() : nullptr,_6978 ? _6978->size(0) : 0);
      _6972->getDataAsTriplets(_6978,_6977,_6976);
      std::vector<long long> _11915;
      for (int _6980 = (int)0, _11916 = (int)((_6977)->size(0)); _6980 < _11916 ; ++_6980)
      {
        _11915.push_back(safe_add( safe_mul( _ptr__6978[_6980],_6974 ),_ptr__6977[_6980] ));
      }
      auto _11917 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_11915.size()),_11915.begin(),_11915.end()));
      std::shared_ptr< monty::ndarray< long long,1 > > _6979 = _11917;
      _checked_ptr_1<long long> _ptr__6979(_6979 ? _6979->raw() : nullptr,_6979 ? _6979->size(0) : 0);
      return (::mosek::fusion::p_ExprConst::_new_ExprConst(_6975,_6979,_6976)).as<::mosek::fusion::Expression>();
    }
  }
  else
  {
    {
      return (::mosek::fusion::p_ExprConst::_new_ExprConst(_6975,nullptr,_6972->getDataAsArray())).as<::mosek::fusion::Expression>();
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::constTerm  ( double _6981) { return mosek::fusion::p_Expr::constTerm(_6981); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::constTerm(double _6981){
  return (::mosek::fusion::p_ExprConst::_new_ExprConst(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))),nullptr,_6981)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::constTerm  ( std::shared_ptr< monty::ndarray< int,1 > > _6982,    std::shared_ptr< monty::ndarray< int,2 > > _6983,    double _6984) { return mosek::fusion::p_Expr::constTerm(_6982,_6983,_6984); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::constTerm(std::shared_ptr< monty::ndarray< int,1 > > _6982,std::shared_ptr< monty::ndarray< int,2 > > _6983,double _6984){
  _checked_ptr_1<int> _ptr__6982(_6982 ? _6982->raw() : nullptr, _6982 ? _6982->size(0) : 0);
  int _6985 = (int)((_6983)->size(0));
  int _6986 = (int)((_6982)->size(0));
  std::shared_ptr< monty::ndarray< long long,1 > > _6987 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_6985)));
  _checked_ptr_1<long long> _ptr__6987(_6987 ? _6987->raw() : nullptr,_6987 ? _6987->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _6988 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_6986)));
  _checked_ptr_1<long long> _ptr__6988(_6988 ? _6988->raw() : nullptr,_6988 ? _6988->size(0) : 0);
  _ptr__6988[(_6986 - (int)1)] = (int)1;
  int _11918 = (int)1;
  int _11919 = _6986;
  for (int _6989 = _11918; _6989 < _11919; ++_6989)
  {
    {
      _ptr__6988[((_6986 - _6989) - (int)1)] = safe_mul( _ptr__6988[(_6986 - _6989)],_ptr__6982[(_6986 - _6989)] );
    }
  }
  int _11920 = (int)0;
  int _11921 = _6985;
  for (int _6990 = _11920; _6990 < _11921; ++_6990)
  {
    {
      int _11922 = (int)0;
      int _11923 = _6986;
      for (int _6991 = _11922; _6991 < _11923; ++_6991)
      {
        {
          _ptr__6987[_6990] += safe_mul( _ptr__6988[_6991],((*_6983)(_6990,_6991)) );
        }
      }
    }
  }
  return (::mosek::fusion::p_ExprConst::_new_ExprConst(_6982,_6987,_6984)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::constTerm  ( std::shared_ptr< monty::ndarray< int,1 > > _6992,    std::shared_ptr< monty::ndarray< int,2 > > _6993,    std::shared_ptr< monty::ndarray< double,1 > > _6994) { return mosek::fusion::p_Expr::constTerm(_6992,_6993,_6994); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::constTerm(std::shared_ptr< monty::ndarray< int,1 > > _6992,std::shared_ptr< monty::ndarray< int,2 > > _6993,std::shared_ptr< monty::ndarray< double,1 > > _6994){
  _checked_ptr_1<int> _ptr__6992(_6992 ? _6992->raw() : nullptr, _6992 ? _6992->size(0) : 0);
  _checked_ptr_1<double> _ptr__6994(_6994 ? _6994->raw() : nullptr, _6994 ? _6994->size(0) : 0);
  int _6995 = (int)((_6993)->size(0));
  int _6996 = (int)((_6992)->size(0));
  std::shared_ptr< monty::ndarray< long long,1 > > _6997 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_6995)));
  _checked_ptr_1<long long> _ptr__6997(_6997 ? _6997->raw() : nullptr,_6997 ? _6997->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _6998 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_6996)));
  _checked_ptr_1<long long> _ptr__6998(_6998 ? _6998->raw() : nullptr,_6998 ? _6998->size(0) : 0);
  _ptr__6998[(_6996 - (int)1)] = (int)1;
  int _11924 = (int)1;
  int _11925 = _6996;
  for (int _6999 = _11924; _6999 < _11925; ++_6999)
  {
    {
      _ptr__6998[((_6996 - _6999) - (int)1)] = safe_mul( _ptr__6998[(_6996 - _6999)],_ptr__6992[(_6996 - _6999)] );
    }
  }
  int _11926 = (int)0;
  int _11927 = _6995;
  for (int _7000 = _11926; _7000 < _11927; ++_7000)
  {
    {
      int _11928 = (int)0;
      int _11929 = _6996;
      for (int _7001 = _11928; _7001 < _11929; ++_7001)
      {
        {
          _ptr__6997[_7000] += safe_mul( _ptr__6998[_7001],((*_6993)(_7000,_7001)) );
        }
      }
    }
  }
  return (::mosek::fusion::p_ExprConst::_new_ExprConst(_6992,_6997,_6994)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::constTerm  ( std::shared_ptr< monty::ndarray< int,1 > > _7002,    double _7003) { return mosek::fusion::p_Expr::constTerm(_7002,_7003); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::constTerm(std::shared_ptr< monty::ndarray< int,1 > > _7002,double _7003){
  _checked_ptr_1<int> _ptr__7002(_7002 ? _7002->raw() : nullptr, _7002 ? _7002->size(0) : 0);
  return (::mosek::fusion::p_ExprConst::_new_ExprConst(_7002,nullptr,_7003)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::constTerm  ( int _7004,    double _7005) { return mosek::fusion::p_Expr::constTerm(_7004,_7005); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::constTerm(int _7004,double _7005){
  std::vector<double> _11930;
  for (int _7006 = (int)0, _11931 = _7004; _7006 < _11931 ; ++_7006)
  {
    _11930.push_back(_7005);
  }
  auto _11932 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_11930.size()),_11930.begin(),_11930.end()));
  return (::mosek::fusion::p_ExprConst::_new_ExprConst(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_7004)}),nullptr,_11932)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::constTerm  ( std::shared_ptr< monty::ndarray< double,2 > > _7007) { return mosek::fusion::p_Expr::constTerm(_7007); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::constTerm(std::shared_ptr< monty::ndarray< double,2 > > _7007){
  std::vector<double> _11933;
  for (int _7008 = (int)0, _11934 = (int)((_7007)->size(0)); _7008 < _11934 ; ++_7008)
  {
    for (int _7009 = (int)0, _11935 = (int)((_7007)->size(1)); _7009 < _11935 ; ++_7009)
    {
      _11933.push_back(((*_7007)(_7008,_7009)));
    }
  }
  auto _11936 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_11933.size()),_11933.begin(),_11933.end()));
  return (::mosek::fusion::p_ExprConst::_new_ExprConst(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)((_7007)->size(0))),(int)((int)((_7007)->size(1)))}),nullptr,_11936)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::constTerm  ( std::shared_ptr< monty::ndarray< double,1 > > _7010) { return mosek::fusion::p_Expr::constTerm(_7010); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::constTerm(std::shared_ptr< monty::ndarray< double,1 > > _7010){
  _checked_ptr_1<double> _ptr__7010(_7010 ? _7010->raw() : nullptr, _7010 ? _7010->size(0) : 0);
  return (::mosek::fusion::p_ExprConst::_new_ExprConst(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)((_7010)->size(0)))}),nullptr,_7010)).as<::mosek::fusion::Expression>();
}
long long mosek::fusion::Expr :: numNonzeros() { return mosek::fusion::p_Expr::_get_impl(this)->numNonzeros(); }long long mosek::fusion::p_Expr::numNonzeros(){
  return (long long)((cof_v)->size(0));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sum  ( monty::rc_ptr< ::mosek::fusion::Expression > _7011,    int _7012) { return mosek::fusion::p_Expr::sum(_7011,_7012); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sum(monty::rc_ptr< ::mosek::fusion::Expression > _7011,int _7012){
  return (::mosek::fusion::p_ExprSumReduce::_new_ExprSumReduce(_7012,_7011)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sum  ( monty::rc_ptr< ::mosek::fusion::Expression > _7013) { return mosek::fusion::p_Expr::sum(_7013); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sum(monty::rc_ptr< ::mosek::fusion::Expression > _7013){
  return (::mosek::fusion::p_ExprSumReduce::_new_ExprSumReduce((int)0,::mosek::fusion::p_Expr::flatten(_7013))).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::neg  ( monty::rc_ptr< ::mosek::fusion::Expression > _7014) { return mosek::fusion::p_Expr::neg(_7014); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::neg(monty::rc_ptr< ::mosek::fusion::Expression > _7014){
  return (::mosek::fusion::p_ExprMulScalarConst::_new_ExprMulScalarConst((double)((-(int)1)),_7014)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulDiag(bool _7015,monty::rc_ptr< ::mosek::fusion::Matrix > _7016,monty::rc_ptr< ::mosek::fusion::Expression > _7017){
  long long _7018 = _7016->numNonzeros();
  int _7019 = _7016->numRows();
  int _7020 = _7016->numColumns();
  std::shared_ptr< monty::ndarray< double,1 > > _7021 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7018)));
  _checked_ptr_1<double> _ptr__7021(_7021 ? _7021->raw() : nullptr,_7021 ? _7021->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _7022 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7018)));
  _checked_ptr_1<int> _ptr__7022(_7022 ? _7022->raw() : nullptr,_7022 ? _7022->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _7023 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7018)));
  _checked_ptr_1<int> _ptr__7023(_7023 ? _7023->raw() : nullptr,_7023 ? _7023->size(0) : 0);
  _7016->getDataAsTriplets(_7023,_7022,_7021);
  if (_7015)
  {
    {
      return (::mosek::fusion::p_ExprMulDiagLeft::_new_ExprMulDiagLeft(_7019,_7020,_7023,_7022,_7021,_7017)).as<::mosek::fusion::Expression>();
    }
  }
  else
  {
    {
      return (::mosek::fusion::p_ExprMulDiagRight::_new_ExprMulDiagRight(_7019,_7020,_7023,_7022,_7021,_7017)).as<::mosek::fusion::Expression>();
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulDiag  ( monty::rc_ptr< ::mosek::fusion::Variable > _7024,    monty::rc_ptr< ::mosek::fusion::Parameter > _7025) { return mosek::fusion::p_Expr::mulDiag(_7024,_7025); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulDiag(monty::rc_ptr< ::mosek::fusion::Variable > _7024,monty::rc_ptr< ::mosek::fusion::Parameter > _7025){
  return (::mosek::fusion::p_ExprMulParamDiagRight::_new_ExprMulParamDiagRight(_7024->__mosek_2fusion_2Variable__asExpr(),_7025)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulDiag  ( monty::rc_ptr< ::mosek::fusion::Parameter > _7026,    monty::rc_ptr< ::mosek::fusion::Variable > _7027) { return mosek::fusion::p_Expr::mulDiag(_7026,_7027); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulDiag(monty::rc_ptr< ::mosek::fusion::Parameter > _7026,monty::rc_ptr< ::mosek::fusion::Variable > _7027){
  return (::mosek::fusion::p_ExprMulParamDiagLeft::_new_ExprMulParamDiagLeft(_7026,_7027->__mosek_2fusion_2Variable__asExpr())).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulDiag  ( monty::rc_ptr< ::mosek::fusion::Expression > _7028,    monty::rc_ptr< ::mosek::fusion::Parameter > _7029) { return mosek::fusion::p_Expr::mulDiag(_7028,_7029); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulDiag(monty::rc_ptr< ::mosek::fusion::Expression > _7028,monty::rc_ptr< ::mosek::fusion::Parameter > _7029){
  return (::mosek::fusion::p_ExprMulParamDiagRight::_new_ExprMulParamDiagRight(_7028,_7029)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulDiag  ( monty::rc_ptr< ::mosek::fusion::Parameter > _7030,    monty::rc_ptr< ::mosek::fusion::Expression > _7031) { return mosek::fusion::p_Expr::mulDiag(_7030,_7031); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulDiag(monty::rc_ptr< ::mosek::fusion::Parameter > _7030,monty::rc_ptr< ::mosek::fusion::Expression > _7031){
  return (::mosek::fusion::p_ExprMulParamDiagLeft::_new_ExprMulParamDiagLeft(_7030,_7031)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulDiag  ( monty::rc_ptr< ::mosek::fusion::Variable > _7032,    monty::rc_ptr< ::mosek::fusion::Matrix > _7033) { return mosek::fusion::p_Expr::mulDiag(_7032,_7033); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulDiag(monty::rc_ptr< ::mosek::fusion::Variable > _7032,monty::rc_ptr< ::mosek::fusion::Matrix > _7033){
  return ::mosek::fusion::p_Expr::mulDiag(false,_7033,_7032->__mosek_2fusion_2Variable__asExpr());
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulDiag  ( monty::rc_ptr< ::mosek::fusion::Matrix > _7034,    monty::rc_ptr< ::mosek::fusion::Variable > _7035) { return mosek::fusion::p_Expr::mulDiag(_7034,_7035); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulDiag(monty::rc_ptr< ::mosek::fusion::Matrix > _7034,monty::rc_ptr< ::mosek::fusion::Variable > _7035){
  return ::mosek::fusion::p_Expr::mulDiag(true,_7034,_7035->__mosek_2fusion_2Variable__asExpr());
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulDiag  ( monty::rc_ptr< ::mosek::fusion::Expression > _7036,    monty::rc_ptr< ::mosek::fusion::Matrix > _7037) { return mosek::fusion::p_Expr::mulDiag(_7036,_7037); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulDiag(monty::rc_ptr< ::mosek::fusion::Expression > _7036,monty::rc_ptr< ::mosek::fusion::Matrix > _7037){
  return ::mosek::fusion::p_Expr::mulDiag(false,_7037,_7036);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulDiag  ( monty::rc_ptr< ::mosek::fusion::Matrix > _7038,    monty::rc_ptr< ::mosek::fusion::Expression > _7039) { return mosek::fusion::p_Expr::mulDiag(_7038,_7039); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulDiag(monty::rc_ptr< ::mosek::fusion::Matrix > _7038,monty::rc_ptr< ::mosek::fusion::Expression > _7039){
  return ::mosek::fusion::p_Expr::mulDiag(true,_7038,_7039);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulDiag  ( monty::rc_ptr< ::mosek::fusion::Variable > _7040,    std::shared_ptr< monty::ndarray< double,2 > > _7041) { return mosek::fusion::p_Expr::mulDiag(_7040,_7041); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulDiag(monty::rc_ptr< ::mosek::fusion::Variable > _7040,std::shared_ptr< monty::ndarray< double,2 > > _7041){
  std::vector<int> _11937;
  for (int _7042 = (int)0, _11938 = (int)((_7041)->size(0)); _7042 < _11938 ; ++_7042)
  {
    for (int _7043 = (int)0, _11939 = (int)((_7041)->size(1)); _7043 < _11939 ; ++_7043)
    {
      _11937.push_back(_7042);
    }
  }
  auto _11940 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_11937.size()),_11937.begin(),_11937.end()));
  std::vector<int> _11941;
  for (int _7044 = (int)0, _11942 = (int)((_7041)->size(0)); _7044 < _11942 ; ++_7044)
  {
    for (int _7045 = (int)0, _11943 = (int)((_7041)->size(1)); _7045 < _11943 ; ++_7045)
    {
      _11941.push_back(_7045);
    }
  }
  auto _11944 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_11941.size()),_11941.begin(),_11941.end()));
  std::vector<double> _11945;
  for (int _7046 = (int)0, _11946 = (int)((_7041)->size(0)); _7046 < _11946 ; ++_7046)
  {
    for (int _7047 = (int)0, _11947 = (int)((_7041)->size(1)); _7047 < _11947 ; ++_7047)
    {
      _11945.push_back(((*_7041)(_7046,_7047)));
    }
  }
  auto _11948 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_11945.size()),_11945.begin(),_11945.end()));
  return (::mosek::fusion::p_ExprMulDiagRight::_new_ExprMulDiagRight((int)((_7041)->size(0)),(int)((_7041)->size(1)),_11940,_11944,_11948,_7040->__mosek_2fusion_2Variable__asExpr())).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulDiag  ( monty::rc_ptr< ::mosek::fusion::Expression > _7048,    std::shared_ptr< monty::ndarray< double,2 > > _7049) { return mosek::fusion::p_Expr::mulDiag(_7048,_7049); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulDiag(monty::rc_ptr< ::mosek::fusion::Expression > _7048,std::shared_ptr< monty::ndarray< double,2 > > _7049){
  std::vector<int> _11949;
  for (int _7050 = (int)0, _11950 = (int)((_7049)->size(0)); _7050 < _11950 ; ++_7050)
  {
    for (int _7051 = (int)0, _11951 = (int)((_7049)->size(1)); _7051 < _11951 ; ++_7051)
    {
      _11949.push_back(_7050);
    }
  }
  auto _11952 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_11949.size()),_11949.begin(),_11949.end()));
  std::vector<int> _11953;
  for (int _7052 = (int)0, _11954 = (int)((_7049)->size(0)); _7052 < _11954 ; ++_7052)
  {
    for (int _7053 = (int)0, _11955 = (int)((_7049)->size(1)); _7053 < _11955 ; ++_7053)
    {
      _11953.push_back(_7053);
    }
  }
  auto _11956 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_11953.size()),_11953.begin(),_11953.end()));
  std::vector<double> _11957;
  for (int _7054 = (int)0, _11958 = (int)((_7049)->size(0)); _7054 < _11958 ; ++_7054)
  {
    for (int _7055 = (int)0, _11959 = (int)((_7049)->size(1)); _7055 < _11959 ; ++_7055)
    {
      _11957.push_back(((*_7049)(_7054,_7055)));
    }
  }
  auto _11960 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_11957.size()),_11957.begin(),_11957.end()));
  return (::mosek::fusion::p_ExprMulDiagRight::_new_ExprMulDiagRight((int)((_7049)->size(0)),(int)((_7049)->size(1)),_11952,_11956,_11960,_7048)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulDiag  ( std::shared_ptr< monty::ndarray< double,2 > > _7056,    monty::rc_ptr< ::mosek::fusion::Variable > _7057) { return mosek::fusion::p_Expr::mulDiag(_7056,_7057); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulDiag(std::shared_ptr< monty::ndarray< double,2 > > _7056,monty::rc_ptr< ::mosek::fusion::Variable > _7057){
  std::vector<int> _11961;
  for (int _7058 = (int)0, _11962 = (int)((_7056)->size(0)); _7058 < _11962 ; ++_7058)
  {
    for (int _7059 = (int)0, _11963 = (int)((_7056)->size(1)); _7059 < _11963 ; ++_7059)
    {
      _11961.push_back(_7058);
    }
  }
  auto _11964 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_11961.size()),_11961.begin(),_11961.end()));
  std::vector<int> _11965;
  for (int _7060 = (int)0, _11966 = (int)((_7056)->size(0)); _7060 < _11966 ; ++_7060)
  {
    for (int _7061 = (int)0, _11967 = (int)((_7056)->size(1)); _7061 < _11967 ; ++_7061)
    {
      _11965.push_back(_7061);
    }
  }
  auto _11968 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_11965.size()),_11965.begin(),_11965.end()));
  std::vector<double> _11969;
  for (int _7062 = (int)0, _11970 = (int)((_7056)->size(0)); _7062 < _11970 ; ++_7062)
  {
    for (int _7063 = (int)0, _11971 = (int)((_7056)->size(1)); _7063 < _11971 ; ++_7063)
    {
      _11969.push_back(((*_7056)(_7062,_7063)));
    }
  }
  auto _11972 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_11969.size()),_11969.begin(),_11969.end()));
  return (::mosek::fusion::p_ExprMulDiagLeft::_new_ExprMulDiagLeft((int)((_7056)->size(0)),(int)((_7056)->size(1)),_11964,_11968,_11972,_7057->__mosek_2fusion_2Variable__asExpr())).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulDiag  ( std::shared_ptr< monty::ndarray< double,2 > > _7064,    monty::rc_ptr< ::mosek::fusion::Expression > _7065) { return mosek::fusion::p_Expr::mulDiag(_7064,_7065); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulDiag(std::shared_ptr< monty::ndarray< double,2 > > _7064,monty::rc_ptr< ::mosek::fusion::Expression > _7065){
  std::vector<int> _11973;
  for (int _7066 = (int)0, _11974 = (int)((_7064)->size(0)); _7066 < _11974 ; ++_7066)
  {
    for (int _7067 = (int)0, _11975 = (int)((_7064)->size(1)); _7067 < _11975 ; ++_7067)
    {
      _11973.push_back(_7066);
    }
  }
  auto _11976 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_11973.size()),_11973.begin(),_11973.end()));
  std::vector<int> _11977;
  for (int _7068 = (int)0, _11978 = (int)((_7064)->size(0)); _7068 < _11978 ; ++_7068)
  {
    for (int _7069 = (int)0, _11979 = (int)((_7064)->size(1)); _7069 < _11979 ; ++_7069)
    {
      _11977.push_back(_7069);
    }
  }
  auto _11980 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_11977.size()),_11977.begin(),_11977.end()));
  std::vector<double> _11981;
  for (int _7070 = (int)0, _11982 = (int)((_7064)->size(0)); _7070 < _11982 ; ++_7070)
  {
    for (int _7071 = (int)0, _11983 = (int)((_7064)->size(1)); _7071 < _11983 ; ++_7071)
    {
      _11981.push_back(((*_7064)(_7070,_7071)));
    }
  }
  auto _11984 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_11981.size()),_11981.begin(),_11981.end()));
  return (::mosek::fusion::p_ExprMulDiagLeft::_new_ExprMulDiagLeft((int)((_7064)->size(0)),(int)((_7064)->size(1)),_11976,_11980,_11984,_7065)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm_(monty::rc_ptr< ::mosek::fusion::Matrix > _7072,monty::rc_ptr< ::mosek::fusion::Expression > _7073){
  std::shared_ptr< monty::ndarray< int,1 > > _7074 = _7073->getShape();
  _checked_ptr_1<int> _ptr__7074(_7074 ? _7074->raw() : nullptr,_7074 ? _7074->size(0) : 0);
  monty::rc_ptr< ::mosek::fusion::Expression > _7075 = _7073;
  if (((int)((_7074)->size(0)) == (int)1))
  {
    {
      _7074 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_ptr__7074[(int)0]),(int)((int)1)});
      _ptr__7074.update(_7074 ? _7074->raw() : nullptr, _7074 ? _7074->size(0) : 0);
      _7075 = (::mosek::fusion::p_ExprReshape::_new_ExprReshape(_7074,_7073)).as<::mosek::fusion::Expression>();
    }
  }
  {}
  if ((((int)((_7074)->size(0)) != (int)2) || ((_7072->numRows() != _ptr__7074[(int)0]) || (_7072->numColumns() != _ptr__7074[(int)1]))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Dimensions of operands do not match"));
    }
  }
  {}
  int _7076 = _7072->numColumns();
  long long _7077 = _7072->numNonzeros();
  std::shared_ptr< monty::ndarray< int,1 > > _7078 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7077)));
  _checked_ptr_1<int> _ptr__7078(_7078 ? _7078->raw() : nullptr,_7078 ? _7078->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _7079 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7077)));
  _checked_ptr_1<int> _ptr__7079(_7079 ? _7079->raw() : nullptr,_7079 ? _7079->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _7080 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7077)));
  _checked_ptr_1<double> _ptr__7080(_7080 ? _7080->raw() : nullptr,_7080 ? _7080->size(0) : 0);
  _7072->getDataAsTriplets(_7078,_7079,_7080);
  std::vector<long long> _11985;
  for (long long _7081 = (int)0, _11986 = _7077; _7081 < _11986 ; ++_7081)
  {
    _11985.push_back(safe_add( safe_mul( _ptr__7078[_7081],_7076 ),_ptr__7079[_7081] ));
  }
  auto _11987 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_11985.size()),_11985.begin(),_11985.end()));
  return (::mosek::fusion::p_ExprMulElement::_new_ExprMulElement(_7080,_11987,_7075,(int)1)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm_(std::shared_ptr< monty::ndarray< double,1 > > _7082,monty::rc_ptr< ::mosek::fusion::Expression > _7083){
  _checked_ptr_1<double> _ptr__7082(_7082 ? _7082->raw() : nullptr, _7082 ? _7082->size(0) : 0);
  if (((NULL == _7082.get()) || (NULL == _7083.get())))
  {
    {
      throw monty::NullPointerException(std::string ("Arguments for mulElm may not be null"));
    }
  }
  {}
  if (((_7083->getND() == (int)0) && ((int)((_7082)->size(0)) == (int)1)))
  {
    {
      return (::mosek::fusion::p_ExprMulScalarConst::_new_ExprMulScalarConst(_ptr__7082[(int)0],_7083)).as<::mosek::fusion::Expression>();
    }
  }
  else if(((_7083->getND() != (int)1) || (_7083->getDim((int)0) != (int)((_7082)->size(0)))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Dimensions of operands do not match"));
    }
  }
  else
  {
    {
      std::vector<long long> _11988;
      for (int _7084 = (int)0, _11989 = (int)((_7082)->size(0)); _7084 < _11989 ; ++_7084)
      {
        _11988.push_back(_7084);
      }
      auto _11990 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_11988.size()),_11988.begin(),_11988.end()));
      return (::mosek::fusion::p_ExprMulElement::_new_ExprMulElement(_7082,_11990,_7083)).as<::mosek::fusion::Expression>();
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm_(monty::rc_ptr< ::mosek::fusion::NDSparseArray > _7085,monty::rc_ptr< ::mosek::fusion::Expression > _7086){
  if (((NULL == _7085.get()) || (NULL == _7086.get())))
  {
    {
      throw monty::NullPointerException(std::string ("Arguments for mulElm may not be null"));
    }
  }
  {}
  std::shared_ptr< monty::ndarray< int,1 > > _7087 = _7086->getShape();
  _checked_ptr_1<int> _ptr__7087(_7087 ? _7087->raw() : nullptr,_7087 ? _7087->size(0) : 0);
  if (((int)((_7087)->size(0)) != (int)((mosek::fusion::p_NDSparseArray::_get_impl(_7085)->dims)->size(0))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Dimension mismatch"));
    }
  }
  {}
  int _11991 = (int)0;
  int _11992 = (int)((mosek::fusion::p_NDSparseArray::_get_impl(_7085)->dims)->size(0));
  for (int _7088 = _11991; _7088 < _11992; ++_7088)
  {
    {
      if ((((*mosek::fusion::p_NDSparseArray::_get_impl(_7085)->dims)(_7088)) != _ptr__7087[_7088]))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Dimensions of operands do not match"));
        }
      }
      {}
    }
  }
  return (::mosek::fusion::p_ExprMulElement::_new_ExprMulElement(mosek::fusion::p_NDSparseArray::_get_impl(_7085)->cof,mosek::fusion::p_NDSparseArray::_get_impl(_7085)->inst,_7086)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul  ( monty::rc_ptr< ::mosek::fusion::Expression > _7089,    double _7090) { return mosek::fusion::p_Expr::mul(_7089,_7090); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(monty::rc_ptr< ::mosek::fusion::Expression > _7089,double _7090){
  return (::mosek::fusion::p_ExprMulScalarConst::_new_ExprMulScalarConst(_7090,_7089)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul  ( double _7091,    monty::rc_ptr< ::mosek::fusion::Expression > _7092) { return mosek::fusion::p_Expr::mul(_7091,_7092); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(double _7091,monty::rc_ptr< ::mosek::fusion::Expression > _7092){
  return (::mosek::fusion::p_ExprMulScalarConst::_new_ExprMulScalarConst(_7091,_7092)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul  ( monty::rc_ptr< ::mosek::fusion::Expression > _7093,    std::shared_ptr< monty::ndarray< double,1 > > _7094) { return mosek::fusion::p_Expr::mul(_7093,_7094); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(monty::rc_ptr< ::mosek::fusion::Expression > _7093,std::shared_ptr< monty::ndarray< double,1 > > _7094){
  _checked_ptr_1<double> _ptr__7094(_7094 ? _7094->raw() : nullptr, _7094 ? _7094->size(0) : 0);
  return ::mosek::fusion::p_Expr::mul(false,_7094,_7093);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul  ( std::shared_ptr< monty::ndarray< double,1 > > _7095,    monty::rc_ptr< ::mosek::fusion::Expression > _7096) { return mosek::fusion::p_Expr::mul(_7095,_7096); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(std::shared_ptr< monty::ndarray< double,1 > > _7095,monty::rc_ptr< ::mosek::fusion::Expression > _7096){
  _checked_ptr_1<double> _ptr__7095(_7095 ? _7095->raw() : nullptr, _7095 ? _7095->size(0) : 0);
  return ::mosek::fusion::p_Expr::mul(true,_7095,_7096);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul  ( monty::rc_ptr< ::mosek::fusion::Expression > _7097,    std::shared_ptr< monty::ndarray< double,2 > > _7098) { return mosek::fusion::p_Expr::mul(_7097,_7098); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(monty::rc_ptr< ::mosek::fusion::Expression > _7097,std::shared_ptr< monty::ndarray< double,2 > > _7098){
  return ::mosek::fusion::p_Expr::mul(false,_7098,_7097);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul  ( std::shared_ptr< monty::ndarray< double,2 > > _7099,    monty::rc_ptr< ::mosek::fusion::Expression > _7100) { return mosek::fusion::p_Expr::mul(_7099,_7100); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(std::shared_ptr< monty::ndarray< double,2 > > _7099,monty::rc_ptr< ::mosek::fusion::Expression > _7100){
  return ::mosek::fusion::p_Expr::mul(true,_7099,_7100);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul  ( monty::rc_ptr< ::mosek::fusion::Expression > _7101,    monty::rc_ptr< ::mosek::fusion::Matrix > _7102) { return mosek::fusion::p_Expr::mul(_7101,_7102); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(monty::rc_ptr< ::mosek::fusion::Expression > _7101,monty::rc_ptr< ::mosek::fusion::Matrix > _7102){
  return ::mosek::fusion::p_Expr::mul(false,_7102,_7101);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul  ( monty::rc_ptr< ::mosek::fusion::Matrix > _7103,    monty::rc_ptr< ::mosek::fusion::Expression > _7104) { return mosek::fusion::p_Expr::mul(_7103,_7104); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(monty::rc_ptr< ::mosek::fusion::Matrix > _7103,monty::rc_ptr< ::mosek::fusion::Expression > _7104){
  return ::mosek::fusion::p_Expr::mul(true,_7103,_7104);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(bool _7105,std::shared_ptr< monty::ndarray< double,1 > > _7106,monty::rc_ptr< ::mosek::fusion::Expression > _7107){
  _checked_ptr_1<double> _ptr__7106(_7106 ? _7106->raw() : nullptr, _7106 ? _7106->size(0) : 0);
  int _7108 = (int)((_7106)->size(0));
  int _7109 = _7108;
  std::shared_ptr< monty::ndarray< double,1 > > _7110 = ::mosek::fusion::Utils::Tools::arraycopy(_7106);
  _checked_ptr_1<double> _ptr__7110(_7110 ? _7110->raw() : nullptr,_7110 ? _7110->size(0) : 0);
  int _7111 = _7107->getND();
  if ((_7111 == (int)0))
  {
    {
      std::vector<int> _11993;
      for (int _7112 = (int)0, _11994 = _7108; _7112 < _11994 ; ++_7112)
      {
        _11993.push_back(_7112);
      }
      auto _11995 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_11993.size()),_11993.begin(),_11993.end()));
      std::vector<int> _11996;
      for (int _7113 = (int)0, _11997 = _7108; _7113 < _11997 ; ++_7113)
      {
        _11996.push_back((int)0);
      }
      auto _11998 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_11996.size()),_11996.begin(),_11996.end()));
      return (::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_7108)}),(::mosek::fusion::p_ExprScalarMul::_new_ExprScalarMul(_7108,(int)1,_11995,_11998,_7110,_7107,(int)1)).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>();
    }
  }
  else if((_7111 != (int)2))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions"));
    }
  }
  else if((_7105 && (_7107->getDim((int)0) == (int)((_7106)->size(0)))))
  {
    {
      std::vector<int> _11999;
      for (int _7114 = (int)0, _12000 = _7108; _7114 < _12000 ; ++_7114)
      {
        _11999.push_back((int)0);
      }
      auto _12001 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_11999.size()),_11999.begin(),_11999.end()));
      std::vector<int> _12002;
      for (int _7115 = (int)0, _12003 = _7108; _7115 < _12003 ; ++_7115)
      {
        _12002.push_back(_7115);
      }
      auto _12004 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_12002.size()),_12002.begin(),_12002.end()));
      return (::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_7107->getDim((int)1))}),(::mosek::fusion::p_ExprMulLeft::_new_ExprMulLeft((int)1,_7108,_12001,_12004,_7110,_7107)).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>();
    }
  }
  else if((_7105 && (_7107->getDim((int)0) == (int)1)))
  {
    {
      std::vector<int> _12005;
      for (int _7116 = (int)0, _12006 = _7108; _7116 < _12006 ; ++_7116)
      {
        _12005.push_back(_7116);
      }
      auto _12007 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_12005.size()),_12005.begin(),_12005.end()));
      std::vector<int> _12008;
      for (int _7117 = (int)0, _12009 = _7108; _7117 < _12009 ; ++_7117)
      {
        _12008.push_back((int)0);
      }
      auto _12010 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_12008.size()),_12008.begin(),_12008.end()));
      return (::mosek::fusion::p_ExprMulLeft::_new_ExprMulLeft(_7108,(int)1,_12007,_12010,_7110,_7107,(int)1)).as<::mosek::fusion::Expression>();
    }
  }
  else if(((!_7105) && (_7107->getDim((int)1) == _7108)))
  {
    {
      std::vector<int> _12011;
      for (int _7118 = (int)0, _12012 = _7108; _7118 < _12012 ; ++_7118)
      {
        _12011.push_back(_7118);
      }
      auto _12013 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_12011.size()),_12011.begin(),_12011.end()));
      std::vector<int> _12014;
      for (int _7119 = (int)0, _12015 = _7108; _7119 < _12015 ; ++_7119)
      {
        _12014.push_back((int)0);
      }
      auto _12016 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_12014.size()),_12014.begin(),_12014.end()));
      return (::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_7107->getDim((int)0))}),(::mosek::fusion::p_ExprMulRight::_new_ExprMulRight(_7108,(int)1,_12013,_12016,_7110,_7107)).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>();
    }
  }
  else if(((!_7105) && (_7107->getDim((int)1) == (int)1)))
  {
    {
      std::vector<int> _12017;
      for (int _7120 = (int)0, _12018 = _7108; _7120 < _12018 ; ++_7120)
      {
        _12017.push_back((int)0);
      }
      auto _12019 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_12017.size()),_12017.begin(),_12017.end()));
      std::vector<int> _12020;
      for (int _7121 = (int)0, _12021 = _7108; _7121 < _12021 ; ++_7121)
      {
        _12020.push_back(_7121);
      }
      auto _12022 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_12020.size()),_12020.begin(),_12020.end()));
      return (::mosek::fusion::p_ExprMulRight::_new_ExprMulRight((int)1,_7108,_12019,_12022,_7110,_7107,(int)1)).as<::mosek::fusion::Expression>();
    }
  }
  else
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand shapes"));
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(bool _7122,std::shared_ptr< monty::ndarray< double,2 > > _7123,monty::rc_ptr< ::mosek::fusion::Expression > _7124){
  int _7125 = (int)((_7123)->size(0));
  int _7126 = (int)((_7123)->size(1));
  int _7127 = safe_mul( _7125,_7126 );
  std::vector<int> _12023;
  for (int _7129 = (int)0, _12024 = _7125; _7129 < _12024 ; ++_7129)
  {
    for (int _7130 = (int)0, _12025 = _7126; _7130 < _12025 ; ++_7130)
    {
      _12023.push_back(_7129);
    }
  }
  auto _12026 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_12023.size()),_12023.begin(),_12023.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _7128 = _12026;
  _checked_ptr_1<int> _ptr__7128(_7128 ? _7128->raw() : nullptr,_7128 ? _7128->size(0) : 0);
  std::vector<int> _12027;
  for (int _7132 = (int)0, _12028 = _7125; _7132 < _12028 ; ++_7132)
  {
    for (int _7133 = (int)0, _12029 = _7126; _7133 < _12029 ; ++_7133)
    {
      _12027.push_back(_7133);
    }
  }
  auto _12030 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_12027.size()),_12027.begin(),_12027.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _7131 = _12030;
  _checked_ptr_1<int> _ptr__7131(_7131 ? _7131->raw() : nullptr,_7131 ? _7131->size(0) : 0);
  std::vector<double> _12031;
  for (int _7135 = (int)0, _12032 = _7125; _7135 < _12032 ; ++_7135)
  {
    for (int _7136 = (int)0, _12033 = _7126; _7136 < _12033 ; ++_7136)
    {
      _12031.push_back(((*_7123)(_7135,_7136)));
    }
  }
  auto _12034 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_12031.size()),_12031.begin(),_12031.end()));
  std::shared_ptr< monty::ndarray< double,1 > > _7134 = _12034;
  _checked_ptr_1<double> _ptr__7134(_7134 ? _7134->raw() : nullptr,_7134 ? _7134->size(0) : 0);
  long long _7137 = _7124->getSize();
  std::shared_ptr< monty::ndarray< int,1 > > _7138 = _7124->getShape();
  _checked_ptr_1<int> _ptr__7138(_7138 ? _7138->raw() : nullptr,_7138 ? _7138->size(0) : 0);
  if (((int)((_7138)->size(0)) == (int)0))
  {
    {
      return (::mosek::fusion::p_ExprScalarMul::_new_ExprScalarMul(_7125,_7126,_7128,_7131,_7134,_7124,(int)1)).as<::mosek::fusion::Expression>();
    }
  }
  else if(_7122)
  {
    {
      if (((int)((_7138)->size(0)) == (int)1))
      {
        {
          return (::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)((_7123)->size(0)))}),(::mosek::fusion::p_ExprMulLeft::_new_ExprMulLeft(_7125,_7126,_7128,_7131,_7134,(::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_ptr__7138[(int)0]),(int)((int)1)}),_7124)).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>();
        }
      }
      else if(((int)((_7138)->size(0)) == (int)2))
      {
        {
          return (::mosek::fusion::p_ExprMulLeft::_new_ExprMulLeft(_7125,_7126,_7128,_7131,_7134,_7124)).as<::mosek::fusion::Expression>();
        }
      }
      else
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand shapes"));
        }
      }
    }
  }
  else
  {
    {
      if (((int)((_7138)->size(0)) == (int)1))
      {
        {
          return (::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)((_7123)->size(1)))}),(::mosek::fusion::p_ExprMulRight::_new_ExprMulRight(_7125,_7126,_7128,_7131,_7134,(::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)1),(int)(_ptr__7138[(int)0])}),_7124)).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>();
        }
      }
      else if(((int)((_7138)->size(0)) == (int)2))
      {
        {
          return (::mosek::fusion::p_ExprMulRight::_new_ExprMulRight(_7125,_7126,_7128,_7131,_7134,_7124)).as<::mosek::fusion::Expression>();
        }
      }
      else
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand shapes"));
        }
      }
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(bool _7139,monty::rc_ptr< ::mosek::fusion::Matrix > _7140,monty::rc_ptr< ::mosek::fusion::Expression > _7141){
  long long _7142 = _7140->numNonzeros();
  std::shared_ptr< monty::ndarray< int,1 > > _7143 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7142)));
  _checked_ptr_1<int> _ptr__7143(_7143 ? _7143->raw() : nullptr,_7143 ? _7143->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _7144 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7142)));
  _checked_ptr_1<int> _ptr__7144(_7144 ? _7144->raw() : nullptr,_7144 ? _7144->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _7145 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7142)));
  _checked_ptr_1<double> _ptr__7145(_7145 ? _7145->raw() : nullptr,_7145 ? _7145->size(0) : 0);
  int _7146 = _7140->numRows();
  int _7147 = _7140->numColumns();
  _7140->getDataAsTriplets(_7143,_7144,_7145);
  int _7148 = _7141->getND();
  if ((_7148 == (int)0))
  {
    {
      return (::mosek::fusion::p_ExprScalarMul::_new_ExprScalarMul(_7146,_7147,_7143,_7144,_7145,_7141)).as<::mosek::fusion::Expression>();
    }
  }
  else if((_7148 == (int)1))
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _7149 = _7141->getShape();
      _checked_ptr_1<int> _ptr__7149(_7149 ? _7149->raw() : nullptr,_7149 ? _7149->size(0) : 0);
      if (_7139)
      {
        {
          return (::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_7146)}),(::mosek::fusion::p_ExprMulLeft::_new_ExprMulLeft(_7146,_7147,_7143,_7144,_7145,(::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_ptr__7149[(int)0]),(int)((int)1)}),_7141)).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>();
        }
      }
      else
      {
        {
          return (::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_7147)}),(::mosek::fusion::p_ExprMulRight::_new_ExprMulRight(_7146,_7147,_7143,_7144,_7145,(::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)1),(int)(_ptr__7149[(int)0])}),_7141)).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>();
        }
      }
    }
  }
  else if((_7148 == (int)2))
  {
    {
      if (_7139)
      {
        {
          return (::mosek::fusion::p_ExprMulLeft::_new_ExprMulLeft(_7146,_7147,_7143,_7144,_7145,_7141)).as<::mosek::fusion::Expression>();
        }
      }
      else
      {
        {
          return (::mosek::fusion::p_ExprMulRight::_new_ExprMulRight(_7146,_7147,_7143,_7144,_7145,_7141)).as<::mosek::fusion::Expression>();
        }
      }
    }
  }
  else
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching dimensions for multiplication"));
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul  ( monty::rc_ptr< ::mosek::fusion::Variable > _7150,    monty::rc_ptr< ::mosek::fusion::Matrix > _7151) { return mosek::fusion::p_Expr::mul(_7150,_7151); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(monty::rc_ptr< ::mosek::fusion::Variable > _7150,monty::rc_ptr< ::mosek::fusion::Matrix > _7151){
  int _7152 = _7151->numRows();
  int _7153 = _7151->numColumns();
  std::shared_ptr< monty::ndarray< double,1 > > _7154 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7151->numNonzeros())));
  _checked_ptr_1<double> _ptr__7154(_7154 ? _7154->raw() : nullptr,_7154 ? _7154->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _7155 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7151->numNonzeros())));
  _checked_ptr_1<int> _ptr__7155(_7155 ? _7155->raw() : nullptr,_7155 ? _7155->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _7156 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7151->numNonzeros())));
  _checked_ptr_1<int> _ptr__7156(_7156 ? _7156->raw() : nullptr,_7156 ? _7156->size(0) : 0);
  _7151->getDataAsTriplets(_7156,_7155,_7154);
  return ::mosek::fusion::p_Expr::mul(false,_7152,_7153,_7156,_7155,_7154,_7150);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul  ( monty::rc_ptr< ::mosek::fusion::Matrix > _7157,    monty::rc_ptr< ::mosek::fusion::Variable > _7158) { return mosek::fusion::p_Expr::mul(_7157,_7158); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(monty::rc_ptr< ::mosek::fusion::Matrix > _7157,monty::rc_ptr< ::mosek::fusion::Variable > _7158){
  int _7159 = _7157->numRows();
  int _7160 = _7157->numColumns();
  std::shared_ptr< monty::ndarray< double,1 > > _7161 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7157->numNonzeros())));
  _checked_ptr_1<double> _ptr__7161(_7161 ? _7161->raw() : nullptr,_7161 ? _7161->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _7162 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7157->numNonzeros())));
  _checked_ptr_1<int> _ptr__7162(_7162 ? _7162->raw() : nullptr,_7162 ? _7162->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _7163 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7157->numNonzeros())));
  _checked_ptr_1<int> _ptr__7163(_7163 ? _7163->raw() : nullptr,_7163 ? _7163->size(0) : 0);
  _7157->getDataAsTriplets(_7163,_7162,_7161);
  return ::mosek::fusion::p_Expr::mul(true,_7159,_7160,_7163,_7162,_7161,_7158);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(bool _7164,int _7165,int _7166,std::shared_ptr< monty::ndarray< int,1 > > _7167,std::shared_ptr< monty::ndarray< int,1 > > _7168,std::shared_ptr< monty::ndarray< double,1 > > _7169,monty::rc_ptr< ::mosek::fusion::Variable > _7170){
  _checked_ptr_1<int> _ptr__7167(_7167 ? _7167->raw() : nullptr, _7167 ? _7167->size(0) : 0);
  _checked_ptr_1<int> _ptr__7168(_7168 ? _7168->raw() : nullptr, _7168 ? _7168->size(0) : 0);
  _checked_ptr_1<double> _ptr__7169(_7169 ? _7169->raw() : nullptr, _7169 ? _7169->size(0) : 0);
  if ((_7170->getND() == (int)0))
  {
    {
      return (::mosek::fusion::p_ExprMulScalarVar::_new_ExprMulScalarVar(_7165,_7166,_7167,_7168,_7169,_7170)).as<::mosek::fusion::Expression>();
    }
  }
  else if((_7170->getND() == (int)1))
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _7171 = _7170->getShape();
      _checked_ptr_1<int> _ptr__7171(_7171 ? _7171->raw() : nullptr,_7171 ? _7171->size(0) : 0);
      int _12035;
      bool _12036 = _7164;
      if (_12036)
      {
        _12035 = _7165;
      }
      else
      {
        _12035 = _7166;
      }
      std::shared_ptr< monty::ndarray< int,1 > > _12037;
      bool _12038 = _7164;
      if (_12038)
      {
        _12037 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_ptr__7171[(int)0]),(int)((int)1)});
      }
      else
      {
        _12037 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)1),(int)(_ptr__7171[(int)0])});
      }
      return (::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_12035)}),(::mosek::fusion::p_ExprMulVar::_new_ExprMulVar(_7164,_7165,_7166,_7167,_7168,_7169,::mosek::fusion::p_Var::reshape(_7170,_12037))).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>();
    }
  }
  else
  {
    {
      return (::mosek::fusion::p_ExprMulVar::_new_ExprMulVar(_7164,_7165,_7166,_7167,_7168,_7169,_7170)).as<::mosek::fusion::Expression>();
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul  ( monty::rc_ptr< ::mosek::fusion::Expression > _7172,    monty::rc_ptr< ::mosek::fusion::Parameter > _7173) { return mosek::fusion::p_Expr::mul(_7172,_7173); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(monty::rc_ptr< ::mosek::fusion::Expression > _7172,monty::rc_ptr< ::mosek::fusion::Parameter > _7173){
  if (((_7173->getND() == (int)2) && (_7172->getND() == (int)2)))
  {
    {
      return (::mosek::fusion::p_ExprMulParamRight::_new_ExprMulParamRight(_7172,_7173)).as<::mosek::fusion::Expression>();
    }
  }
  else if(((_7173->getND() == (int)1) && (_7172->getND() == (int)2)))
  {
    {
      return (::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_7172->getDim((int)0))}),(::mosek::fusion::p_ExprMulParamRight::_new_ExprMulParamRight(_7172,_7173->__mosek_2fusion_2Parameter__reshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_7173->getDim((int)0)),(int)((int)1)})))).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>();
    }
  }
  else if(((_7173->getND() == (int)2) && (_7172->getND() == (int)1)))
  {
    {
      return (::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_7173->getDim((int)1))}),(::mosek::fusion::p_ExprMulParamRight::_new_ExprMulParamRight((::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)1),(int)(_7172->getDim((int)0))}),_7172)).as<::mosek::fusion::Expression>(),_7173)).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>();
    }
  }
  else if((_7173->getND() == (int)0))
  {
    {
      return (::mosek::fusion::p_ExprMulParamScalar::_new_ExprMulParamScalar(_7173,_7172)).as<::mosek::fusion::Expression>();
    }
  }
  else if((_7172->getND() == (int)0))
  {
    {
      return (::mosek::fusion::p_ExprMulParamScalarExpr::_new_ExprMulParamScalarExpr(_7173,_7172)).as<::mosek::fusion::Expression>();
    }
  }
  else
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions for multiplication"));
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mul  ( monty::rc_ptr< ::mosek::fusion::Parameter > _7174,    monty::rc_ptr< ::mosek::fusion::Expression > _7175) { return mosek::fusion::p_Expr::mul(_7174,_7175); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mul(monty::rc_ptr< ::mosek::fusion::Parameter > _7174,monty::rc_ptr< ::mosek::fusion::Expression > _7175){
  if (((_7174->getND() == (int)2) && (_7175->getND() == (int)2)))
  {
    {
      return (::mosek::fusion::p_ExprMulParamLeft::_new_ExprMulParamLeft(_7174,_7175)).as<::mosek::fusion::Expression>();
    }
  }
  else if(((_7174->getND() == (int)1) && (_7175->getND() == (int)2)))
  {
    {
      return (::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_7175->getDim((int)1))}),(::mosek::fusion::p_ExprMulParamLeft::_new_ExprMulParamLeft(_7174->__mosek_2fusion_2Parameter__reshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)1),(int)(_7174->getDim((int)0))})),_7175)).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>();
    }
  }
  else if(((_7174->getND() == (int)2) && (_7175->getND() == (int)1)))
  {
    {
      return (::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_7174->getDim((int)0))}),(::mosek::fusion::p_ExprMulParamLeft::_new_ExprMulParamLeft(_7174,(::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_7175->getDim((int)0)),(int)((int)1)}),_7175)).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>())).as<::mosek::fusion::Expression>();
    }
  }
  else if((_7174->getND() == (int)0))
  {
    {
      return (::mosek::fusion::p_ExprMulParamScalar::_new_ExprMulParamScalar(_7174,_7175)).as<::mosek::fusion::Expression>();
    }
  }
  else if((_7175->getND() == (int)0))
  {
    {
      return (::mosek::fusion::p_ExprMulParamScalarExpr::_new_ExprMulParamScalarExpr(_7174,_7175)).as<::mosek::fusion::Expression>();
    }
  }
  else
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid operand dimensions for multiplication"));
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::dot  ( monty::rc_ptr< ::mosek::fusion::Expression > _7176,    monty::rc_ptr< ::mosek::fusion::Matrix > _7177) { return mosek::fusion::p_Expr::dot(_7176,_7177); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot(monty::rc_ptr< ::mosek::fusion::Expression > _7176,monty::rc_ptr< ::mosek::fusion::Matrix > _7177){
  long long _7178 = _7177->numNonzeros();
  if ((!_7177->isSparse()))
  {
    {
      std::vector<long long> _12039;
      for (long long _7179 = (int)0, _12040 = _7178; _7179 < _12040 ; ++_7179)
      {
        _12039.push_back(_7179);
      }
      auto _12041 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_12039.size()),_12039.begin(),_12039.end()));
      return (::mosek::fusion::p_ExprInner::_new_ExprInner(_7176,_12041,_7177->getDataAsArray())).as<::mosek::fusion::Expression>();
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _7180 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7178)));
      _checked_ptr_1<int> _ptr__7180(_7180 ? _7180->raw() : nullptr,_7180 ? _7180->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _7181 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7178)));
      _checked_ptr_1<int> _ptr__7181(_7181 ? _7181->raw() : nullptr,_7181 ? _7181->size(0) : 0);
      std::shared_ptr< monty::ndarray< double,1 > > _7182 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7178)));
      _checked_ptr_1<double> _ptr__7182(_7182 ? _7182->raw() : nullptr,_7182 ? _7182->size(0) : 0);
      int _7183 = _7177->numColumns();
      _7177->getDataAsTriplets(_7180,_7181,_7182);
      std::vector<long long> _12042;
      for (int _7184 = (int)0, _12043 = (int)((_7180)->size(0)); _7184 < _12043 ; ++_7184)
      {
        _12042.push_back(safe_add( safe_mul( _ptr__7180[_7184],_7183 ),_ptr__7181[_7184] ));
      }
      auto _12044 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_12042.size()),_12042.begin(),_12042.end()));
      return (::mosek::fusion::p_ExprInner::_new_ExprInner(_7176,_12044,_7182)).as<::mosek::fusion::Expression>();
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::dot  ( monty::rc_ptr< ::mosek::fusion::Expression > _7185,    std::shared_ptr< monty::ndarray< double,2 > > _7186) { return mosek::fusion::p_Expr::dot(_7185,_7186); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot(monty::rc_ptr< ::mosek::fusion::Expression > _7185,std::shared_ptr< monty::ndarray< double,2 > > _7186){
  std::vector<long long> _12045;
  for (int _7187 = (int)0, _12046 = safe_mul( (int)((_7186)->size(0)),(int)((_7186)->size(1)) ); _7187 < _12046 ; ++_7187)
  {
    _12045.push_back(_7187);
  }
  auto _12047 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_12045.size()),_12045.begin(),_12045.end()));
  std::vector<double> _12048;
  for (int _7188 = (int)0, _12049 = (int)((_7186)->size(0)); _7188 < _12049 ; ++_7188)
  {
    for (int _7189 = (int)0, _12050 = (int)((_7186)->size(1)); _7189 < _12050 ; ++_7189)
    {
      _12048.push_back(((*_7186)(_7188,_7189)));
    }
  }
  auto _12051 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_12048.size()),_12048.begin(),_12048.end()));
  return (::mosek::fusion::p_ExprInner::_new_ExprInner(_7185,_12047,_12051)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::dot  ( monty::rc_ptr< ::mosek::fusion::Expression > _7190,    monty::rc_ptr< ::mosek::fusion::NDSparseArray > _7191) { return mosek::fusion::p_Expr::dot(_7190,_7191); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot(monty::rc_ptr< ::mosek::fusion::Expression > _7190,monty::rc_ptr< ::mosek::fusion::NDSparseArray > _7191){
  return (::mosek::fusion::p_ExprInner::_new_ExprInner(_7190,mosek::fusion::p_NDSparseArray::_get_impl(_7191)->inst,mosek::fusion::p_NDSparseArray::_get_impl(_7191)->cof)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::dot  ( monty::rc_ptr< ::mosek::fusion::Expression > _7192,    std::shared_ptr< monty::ndarray< double,1 > > _7193) { return mosek::fusion::p_Expr::dot(_7192,_7193); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot(monty::rc_ptr< ::mosek::fusion::Expression > _7192,std::shared_ptr< monty::ndarray< double,1 > > _7193){
  _checked_ptr_1<double> _ptr__7193(_7193 ? _7193->raw() : nullptr, _7193 ? _7193->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _7194 = _7192->getShape();
  _checked_ptr_1<int> _ptr__7194(_7194 ? _7194->raw() : nullptr,_7194 ? _7194->size(0) : 0);
  if (((_7192->getSize() == (int)((_7193)->size(0))) && ((int)((_7194)->size(0)) > (int)1)))
  {
    {
      int _7195 = (int)0;
      int _12052 = (int)0;
      int _12053 = (int)((_7194)->size(0));
      for (int _7196 = _12052; _7196 < _12053; ++_7196)
      {
        {
          if ((_ptr__7194[_7196] > (int)1))
          {
            {
              ++ _7195;
            }
          }
          {}
        }
      }
      if ((_7195 > (int)1))
      {
        {
          throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand shapes"));
        }
      }
      else
      {
        {
          std::shared_ptr< monty::ndarray< int,1 > > _7197 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)_7192->getSize())});
          _checked_ptr_1<int> _ptr__7197(_7197 ? _7197->raw() : nullptr,_7197 ? _7197->size(0) : 0);
          return (::mosek::fusion::p_ExprInner::_new_ExprInner((::mosek::fusion::p_ExprReshape::_new_ExprReshape(_7197,_7192)).as<::mosek::fusion::Expression>(),_7193)).as<::mosek::fusion::Expression>();
        }
      }
    }
  }
  else
  {
    {
      return (::mosek::fusion::p_ExprInner::_new_ExprInner(_7192,_7193)).as<::mosek::fusion::Expression>();
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::dot  ( monty::rc_ptr< ::mosek::fusion::Matrix > _7198,    monty::rc_ptr< ::mosek::fusion::Expression > _7199) { return mosek::fusion::p_Expr::dot(_7198,_7199); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot(monty::rc_ptr< ::mosek::fusion::Matrix > _7198,monty::rc_ptr< ::mosek::fusion::Expression > _7199){
  return ::mosek::fusion::p_Expr::dot(_7199,_7198);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::dot  ( monty::rc_ptr< ::mosek::fusion::NDSparseArray > _7200,    monty::rc_ptr< ::mosek::fusion::Expression > _7201) { return mosek::fusion::p_Expr::dot(_7200,_7201); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot(monty::rc_ptr< ::mosek::fusion::NDSparseArray > _7200,monty::rc_ptr< ::mosek::fusion::Expression > _7201){
  return ::mosek::fusion::p_Expr::dot(_7201,_7200);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::dot  ( std::shared_ptr< monty::ndarray< double,2 > > _7202,    monty::rc_ptr< ::mosek::fusion::Expression > _7203) { return mosek::fusion::p_Expr::dot(_7202,_7203); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot(std::shared_ptr< monty::ndarray< double,2 > > _7202,monty::rc_ptr< ::mosek::fusion::Expression > _7203){
  return ::mosek::fusion::p_Expr::dot(_7203,_7202);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::dot  ( std::shared_ptr< monty::ndarray< double,1 > > _7204,    monty::rc_ptr< ::mosek::fusion::Expression > _7205) { return mosek::fusion::p_Expr::dot(_7204,_7205); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot(std::shared_ptr< monty::ndarray< double,1 > > _7204,monty::rc_ptr< ::mosek::fusion::Expression > _7205){
  _checked_ptr_1<double> _ptr__7204(_7204 ? _7204->raw() : nullptr, _7204 ? _7204->size(0) : 0);
  return ::mosek::fusion::p_Expr::dot(_7205,_7204);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::dot  ( monty::rc_ptr< ::mosek::fusion::Expression > _7206,    monty::rc_ptr< ::mosek::fusion::Parameter > _7207) { return mosek::fusion::p_Expr::dot(_7206,_7207); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot(monty::rc_ptr< ::mosek::fusion::Expression > _7206,monty::rc_ptr< ::mosek::fusion::Parameter > _7207){
  return (::mosek::fusion::p_ExprDotParam::_new_ExprDotParam(_7207,_7206)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::dot  ( monty::rc_ptr< ::mosek::fusion::Parameter > _7208,    monty::rc_ptr< ::mosek::fusion::Expression > _7209) { return mosek::fusion::p_Expr::dot(_7208,_7209); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::dot(monty::rc_ptr< ::mosek::fusion::Parameter > _7208,monty::rc_ptr< ::mosek::fusion::Expression > _7209){
  return (::mosek::fusion::p_ExprDotParam::_new_ExprDotParam(_7208,_7209)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::outer  ( monty::rc_ptr< ::mosek::fusion::Matrix > _7210,    monty::rc_ptr< ::mosek::fusion::Variable > _7211) { return mosek::fusion::p_Expr::outer(_7210,_7211); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::outer(monty::rc_ptr< ::mosek::fusion::Matrix > _7210,monty::rc_ptr< ::mosek::fusion::Variable > _7211){
  std::shared_ptr< monty::ndarray< int,1 > > _7212 = _7211->getShape();
  _checked_ptr_1<int> _ptr__7212(_7212 ? _7212->raw() : nullptr,_7212 ? _7212->size(0) : 0);
  if ((!(((int)((_7212)->size(0)) == (int)1) || (((int)((_7212)->size(0)) == (int)2) && (_ptr__7212[(int)1] == (int)1)))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Variable argument must be one-dimensional"));
    }
  }
  {}
  if ((mosek::fusion::p_Matrix::_get_impl(_7210)->dimj != (int)1))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Constant matrix must be a column-vector"));
    }
  }
  {}
  monty::rc_ptr< ::mosek::fusion::Matrix > _12054 = _7210;
  if (false) {}
  else if (nullptr != dynamic_cast<::mosek::fusion::DenseMatrix*>(_12054.get()))
  {
    ::mosek::fusion::DenseMatrix::t _7213 (dynamic_cast<::mosek::fusion::DenseMatrix*>(_12054.get()));
    {
      return ::mosek::fusion::p_Expr::outer_(_7211,_ptr__7212[(int)0],mosek::fusion::p_DenseMatrix::_get_impl(_7213)->data,nullptr,(int)((mosek::fusion::p_DenseMatrix::_get_impl(_7213)->data)->size(0)),true);
    }
  }
  else
  {
    mosek::fusion::Matrix::t _7214 = _12054;
    {
      std::shared_ptr< monty::ndarray< double,1 > > _7215 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7214->numNonzeros())));
      _checked_ptr_1<double> _ptr__7215(_7215 ? _7215->raw() : nullptr,_7215 ? _7215->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _7216 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7214->numNonzeros())));
      _checked_ptr_1<int> _ptr__7216(_7216 ? _7216->raw() : nullptr,_7216 ? _7216->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _7217 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7214->numNonzeros())));
      _checked_ptr_1<int> _ptr__7217(_7217 ? _7217->raw() : nullptr,_7217 ? _7217->size(0) : 0);
      _7214->getDataAsTriplets(_7217,_7216,_7215);
      return ::mosek::fusion::p_Expr::outer_(_7211,_ptr__7212[(int)0],_7215,_7217,mosek::fusion::p_Matrix::_get_impl(_7214)->dimi,true);
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::outer  ( monty::rc_ptr< ::mosek::fusion::Variable > _7218,    monty::rc_ptr< ::mosek::fusion::Matrix > _7219) { return mosek::fusion::p_Expr::outer(_7218,_7219); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::outer(monty::rc_ptr< ::mosek::fusion::Variable > _7218,monty::rc_ptr< ::mosek::fusion::Matrix > _7219){
  std::shared_ptr< monty::ndarray< int,1 > > _7220 = _7218->getShape();
  _checked_ptr_1<int> _ptr__7220(_7220 ? _7220->raw() : nullptr,_7220 ? _7220->size(0) : 0);
  if ((!((_7218->getND() == (int)1) || ((_7218->getND() == (int)2) && (_ptr__7220[(int)1] == (int)1)))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Variable argument must be one-dimensional"));
    }
  }
  {}
  if ((mosek::fusion::p_Matrix::_get_impl(_7219)->dimj != (int)1))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Constant matrix must be a column-vector"));
    }
  }
  {}
  monty::rc_ptr< ::mosek::fusion::Matrix > _12055 = _7219;
  if (false) {}
  else if (nullptr != dynamic_cast<::mosek::fusion::DenseMatrix*>(_12055.get()))
  {
    ::mosek::fusion::DenseMatrix::t _7221 (dynamic_cast<::mosek::fusion::DenseMatrix*>(_12055.get()));
    {
      return ::mosek::fusion::p_Expr::outer_(_7218,_ptr__7220[(int)0],mosek::fusion::p_DenseMatrix::_get_impl(_7221)->data,nullptr,(int)((mosek::fusion::p_DenseMatrix::_get_impl(_7221)->data)->size(0)),false);
    }
  }
  else
  {
    mosek::fusion::Matrix::t _7222 = _12055;
    {
      std::shared_ptr< monty::ndarray< double,1 > > _7223 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7222->numNonzeros())));
      _checked_ptr_1<double> _ptr__7223(_7223 ? _7223->raw() : nullptr,_7223 ? _7223->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _7224 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7222->numNonzeros())));
      _checked_ptr_1<int> _ptr__7224(_7224 ? _7224->raw() : nullptr,_7224 ? _7224->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _7225 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7219->numNonzeros())));
      _checked_ptr_1<int> _ptr__7225(_7225 ? _7225->raw() : nullptr,_7225 ? _7225->size(0) : 0);
      _7222->getDataAsTriplets(_7225,_7224,_7223);
      return ::mosek::fusion::p_Expr::outer_(_7218,((*_7218->getShape())((int)0)),_7223,_7225,mosek::fusion::p_Matrix::_get_impl(_7222)->dimi,false);
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::outer  ( std::shared_ptr< monty::ndarray< double,1 > > _7226,    monty::rc_ptr< ::mosek::fusion::Variable > _7227) { return mosek::fusion::p_Expr::outer(_7226,_7227); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::outer(std::shared_ptr< monty::ndarray< double,1 > > _7226,monty::rc_ptr< ::mosek::fusion::Variable > _7227){
  _checked_ptr_1<double> _ptr__7226(_7226 ? _7226->raw() : nullptr, _7226 ? _7226->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _7228 = _7227->getShape();
  _checked_ptr_1<int> _ptr__7228(_7228 ? _7228->raw() : nullptr,_7228 ? _7228->size(0) : 0);
  if ((!((_7227->getND() == (int)1) || ((_7227->getND() == (int)2) && (_ptr__7228[(int)1] == (int)1)))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Variable argument must be one-dimensional"));
    }
  }
  {}
  return ::mosek::fusion::p_Expr::outer_(_7227,_ptr__7228[(int)0],_7226,nullptr,(int)((_7226)->size(0)),true);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::outer  ( monty::rc_ptr< ::mosek::fusion::Variable > _7229,    std::shared_ptr< monty::ndarray< double,1 > > _7230) { return mosek::fusion::p_Expr::outer(_7229,_7230); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::outer(monty::rc_ptr< ::mosek::fusion::Variable > _7229,std::shared_ptr< monty::ndarray< double,1 > > _7230){
  _checked_ptr_1<double> _ptr__7230(_7230 ? _7230->raw() : nullptr, _7230 ? _7230->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _7231 = _7229->getShape();
  _checked_ptr_1<int> _ptr__7231(_7231 ? _7231->raw() : nullptr,_7231 ? _7231->size(0) : 0);
  if ((!((_7229->getND() == (int)1) || ((_7229->getND() == (int)2) && (_ptr__7231[(int)1] == (int)1)))))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Variable argument must be one-dimensional"));
    }
  }
  {}
  return ::mosek::fusion::p_Expr::outer_(_7229,_ptr__7231[(int)0],_7230,nullptr,(int)((_7230)->size(0)),false);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::outer_(int _7232,std::shared_ptr< monty::ndarray< long long,1 > > _7233,std::shared_ptr< monty::ndarray< long long,1 > > _7234,std::shared_ptr< monty::ndarray< double,1 > > _7235,std::shared_ptr< monty::ndarray< double,1 > > _7236,std::shared_ptr< monty::ndarray< long long,1 > > _7237,std::shared_ptr< monty::ndarray< double,1 > > _7238,std::shared_ptr< monty::ndarray< int,1 > > _7239,int _7240,bool _7241){
  _checked_ptr_1<long long> _ptr__7233(_7233 ? _7233->raw() : nullptr, _7233 ? _7233->size(0) : 0);
  _checked_ptr_1<long long> _ptr__7234(_7234 ? _7234->raw() : nullptr, _7234 ? _7234->size(0) : 0);
  _checked_ptr_1<double> _ptr__7235(_7235 ? _7235->raw() : nullptr, _7235 ? _7235->size(0) : 0);
  _checked_ptr_1<double> _ptr__7236(_7236 ? _7236->raw() : nullptr, _7236 ? _7236->size(0) : 0);
  _checked_ptr_1<long long> _ptr__7237(_7237 ? _7237->raw() : nullptr, _7237 ? _7237->size(0) : 0);
  _checked_ptr_1<double> _ptr__7238(_7238 ? _7238->raw() : nullptr, _7238 ? _7238->size(0) : 0);
  _checked_ptr_1<int> _ptr__7239(_7239 ? _7239->raw() : nullptr, _7239 ? _7239->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _12056;
  bool _12057 = (!_7241);
  if (_12057)
  {
    _12056 = ::mosek::fusion::p_Set::make(_7232,_7240);
  }
  else
  {
    _12056 = ::mosek::fusion::p_Set::make(_7240,_7232);
  }
  std::shared_ptr< monty::ndarray< int,1 > > _7242 = _12056;
  _checked_ptr_1<int> _ptr__7242(_7242 ? _7242->raw() : nullptr,_7242 ? _7242->size(0) : 0);
  int _7243 = safe_mul( (int)((_7238)->size(0)),(int)((_7237)->size(0)) );
  int _7244 = safe_mul( (int)((_7238)->size(0)),(int)((_7234)->size(0)) );
  std::shared_ptr< monty::ndarray< long long,1 > > _7245 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7243)));
  _checked_ptr_1<long long> _ptr__7245(_7245 ? _7245->raw() : nullptr,_7245 ? _7245->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _12058;
  bool _12059 = (NULL != _7236.get());
  if (_12059)
  {
    _12058 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7243)));
  }
  else
  {
    _12058 = nullptr;
  }
  std::shared_ptr< monty::ndarray< double,1 > > _7246 = _12058;
  _checked_ptr_1<double> _ptr__7246(_7246 ? _7246->raw() : nullptr,_7246 ? _7246->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _7247 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7244)));
  _checked_ptr_1<double> _ptr__7247(_7247 ? _7247->raw() : nullptr,_7247 ? _7247->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _7248 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7244)));
  _checked_ptr_1<long long> _ptr__7248(_7248 ? _7248->raw() : nullptr,_7248 ? _7248->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _7249 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_add( _7243,(int)1 ))));
  _checked_ptr_1<long long> _ptr__7249(_7249 ? _7249->raw() : nullptr,_7249 ? _7249->size(0) : 0);
  int _7250 = (int)_ptr__7249[((int)((_7249)->size(0)) - (int)1)];
  if ((!_7241))
  {
    {
      long long _7251 = (long long)0;
      long long _7252 = (long long)0;
      int _12060 = (int)0;
      int _12061 = (int)((_7237)->size(0));
      for (int _7253 = _12060; _7253 < _12061; ++_7253)
      {
        {
          long long _7254 = (_ptr__7233[safe_add( _7253,(int)1 )] - _ptr__7233[_7253]);
          int _12062 = (int)0;
          int _12063 = (int)((_7238)->size(0));
          for (int _7255 = _12062; _7255 < _12063; ++_7255)
          {
            {
              _ptr__7237[_7251] = safe_add( safe_mul( _ptr__7237[_7253],_7240 ),_ptr__7239[_7255] );
              _ptr__7249[safe_add( _7251,(int)1 )] = safe_add( _ptr__7249[_7251],_7254 );
              ++ _7251;
              long long _12064 = _ptr__7233[_7253];
              long long _12065 = _ptr__7233[safe_add( _7253,(int)1 )];
              for (long long _7256 = _12064; _7256 < _12065; ++_7256)
              {
                {
                  _ptr__7248[_7252] = _ptr__7234[_7256];
                  _ptr__7247[_7252] = (_ptr__7235[_7256] * _ptr__7238[_7255]);
                  ++ _7252;
                }
              }
            }
          }
        }
      }
      if ((NULL != _7246.get()))
      {
        {
          int _7257 = (int)0;
          int _12066 = (int)0;
          int _12067 = (int)((_7237)->size(0));
          for (int _7258 = _12066; _7258 < _12067; ++_7258)
          {
            {
              int _12068 = (int)0;
              int _12069 = (int)((_7238)->size(0));
              for (int _7259 = _12068; _7259 < _12069; ++_7259)
              {
                {
                  _ptr__7246[_7257] = (_ptr__7238[_7259] * _ptr__7236[_7258]);
                  ++ _7257;
                }
              }
            }
          }
        }
      }
      {}
    }
  }
  else
  {
    {
      long long _7260 = (long long)0;
      long long _7261 = (long long)0;
      int _12070 = (int)0;
      int _12071 = (int)((_7238)->size(0));
      for (int _7262 = _12070; _7262 < _12071; ++_7262)
      {
        {
          double _7263 = _ptr__7238[_7262];
          ::mosek::fusion::Utils::Tools::arraycopy(_7234,(long long)((int)0),_7248,_7261,(long long)(_7250));
          int _12072 = (int)0;
          int _12073 = _7250;
          for (int _7264 = _12072; _7264 < _12073; ++_7264)
          {
            {
              _ptr__7247[safe_add( _7261,_7264 )] = (_ptr__7235[_7264] * _ptr__7238[_7262]);
            }
          }
          int _12074 = (int)0;
          int _12075 = (int)((_7237)->size(0));
          for (int _7265 = _12074; _7265 < _12075; ++_7265)
          {
            {
              long long _7266 = (_ptr__7233[safe_add( _7265,(int)1 )] - _ptr__7233[_7265]);
              _ptr__7237[_7260] = safe_add( safe_mul( _ptr__7237[_7265],_7240 ),_ptr__7239[_7262] );
              _ptr__7249[safe_add( _7260,(int)1 )] = safe_add( _ptr__7249[_7260],_7266 );
              ++ _7260;
            }
          }
          _7261 += _7250;
        }
      }
      if ((NULL != _7246.get()))
      {
        {
          int _7267 = (int)0;
          int _12076 = (int)0;
          int _12077 = (int)((_7238)->size(0));
          for (int _7268 = _12076; _7268 < _12077; ++_7268)
          {
            {
              double _7269 = _ptr__7238[_7268];
              int _12078 = (int)0;
              int _12079 = (int)((_7237)->size(0));
              for (int _7270 = _12078; _7270 < _12079; ++_7270)
              {
                {
                  _ptr__7246[_7267] = (_ptr__7236[_7270] * _7269);
                  ++ _7267;
                }
              }
            }
          }
        }
      }
      {}
    }
  }
  return (::mosek::fusion::p_Expr::_new_Expr(_7249,_7248,_7247,_7246,_7242,_7245)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::outer_(monty::rc_ptr< ::mosek::fusion::Variable > _7271,int _7272,std::shared_ptr< monty::ndarray< double,1 > > _7273,std::shared_ptr< monty::ndarray< int,1 > > _7274,int _7275,bool _7276){
  _checked_ptr_1<double> _ptr__7273(_7273 ? _7273->raw() : nullptr, _7273 ? _7273->size(0) : 0);
  _checked_ptr_1<int> _ptr__7274(_7274 ? _7274->raw() : nullptr, _7274 ? _7274->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _12080;
  bool _12081 = (!_7276);
  if (_12081)
  {
    _12080 = ::mosek::fusion::p_Set::make(_7272,_7275);
  }
  else
  {
    _12080 = ::mosek::fusion::p_Set::make(_7275,_7272);
  }
  std::shared_ptr< monty::ndarray< int,1 > > _7277 = _12080;
  _checked_ptr_1<int> _ptr__7277(_7277 ? _7277->raw() : nullptr,_7277 ? _7277->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _12082;
  bool _12083 = (_7275 == (int)((_7273)->size(0)));
  if (_12083)
  {
    _12082 = nullptr;
  }
  else
  {
    _12082 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_mul( (int)((_7273)->size(0)),_7272 ))));
  }
  std::shared_ptr< monty::ndarray< long long,1 > > _7278 = _12082;
  _checked_ptr_1<long long> _ptr__7278(_7278 ? _7278->raw() : nullptr,_7278 ? _7278->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _7279 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(safe_mul( (int)((_7273)->size(0)),_7272 ))));
  _checked_ptr_1<double> _ptr__7279(_7279 ? _7279->raw() : nullptr,_7279 ? _7279->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _7280 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(safe_mul( (int)((_7273)->size(0)),_7272 ))));
  _checked_ptr_1<double> _ptr__7280(_7280 ? _7280->raw() : nullptr,_7280 ? _7280->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _7281 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_mul( (int)((_7273)->size(0)),_7272 ))));
  _checked_ptr_1<long long> _ptr__7281(_7281 ? _7281->raw() : nullptr,_7281 ? _7281->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _7282 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_add( safe_mul( (int)((_7273)->size(0)),_7272 ),(int)1 ))));
  _checked_ptr_1<long long> _ptr__7282(_7282 ? _7282->raw() : nullptr,_7282 ? _7282->size(0) : 0);
  if ((_7275 == (int)((_7273)->size(0))))
  {
    {
      long long _7283 = (long long)0;
      if ((!_7276))
      {
        {
          int _12084 = (int)0;
          int _12085 = _7272;
          for (int _7284 = _12084; _7284 < _12085; ++_7284)
          {
            {
              int _12086 = (int)0;
              int _12087 = _7275;
              for (int _7285 = _12086; _7285 < _12087; ++_7285)
              {
                {
                  _ptr__7282[safe_add( _7283,(int)1 )] = safe_add( _7283,(int)1 );
                  _ptr__7281[_7283] = (long long)_7284;
                  _ptr__7280[_7283] = _ptr__7273[_7285];
                  ++ _7283;
                }
              }
            }
          }
        }
      }
      else
      {
        {
          int _12088 = (int)0;
          int _12089 = _7275;
          for (int _7286 = _12088; _7286 < _12089; ++_7286)
          {
            {
              int _12090 = (int)0;
              int _12091 = _7272;
              for (int _7287 = _12090; _7287 < _12091; ++_7287)
              {
                {
                  _ptr__7282[safe_add( _7283,(int)1 )] = safe_add( _7283,(int)1 );
                  _ptr__7281[_7283] = (long long)_7287;
                  _ptr__7280[_7283] = _ptr__7273[_7286];
                  ++ _7283;
                }
              }
            }
          }
        }
      }
    }
  }
  else
  {
    {
      long long _7288 = (long long)0;
      if ((!_7276))
      {
        {
          int _12092 = (int)0;
          int _12093 = _7272;
          for (int _7289 = _12092; _7289 < _12093; ++_7289)
          {
            {
              int _12094 = (int)0;
              int _12095 = (int)((_7273)->size(0));
              for (int _7290 = _12094; _7290 < _12095; ++_7290)
              {
                {
                  _ptr__7282[safe_add( _7288,(int)1 )] = safe_add( _7288,(int)1 );
                  _ptr__7281[_7288] = (long long)_7289;
                  _ptr__7280[_7288] = _ptr__7273[_7290];
                  _ptr__7278[_7288] = safe_add( safe_mul( _7289,_7275 ),_ptr__7274[_7290] );
                  ++ _7288;
                }
              }
            }
          }
        }
      }
      else
      {
        {
          int _12096 = (int)0;
          int _12097 = (int)((_7273)->size(0));
          for (int _7291 = _12096; _7291 < _12097; ++_7291)
          {
            {
              int _12098 = (int)0;
              int _12099 = _7272;
              for (int _7292 = _12098; _7292 < _12099; ++_7292)
              {
                {
                  _ptr__7282[safe_add( _7288,(int)1 )] = safe_add( _7288,(int)1 );
                  _ptr__7281[_7288] = (long long)_7292;
                  _ptr__7280[_7288] = _ptr__7273[_7291];
                  _ptr__7278[_7288] = safe_add( safe_mul( _ptr__7274[_7291],_7272 ),_7292 );
                  ++ _7288;
                }
              }
            }
          }
        }
      }
    }
  }
  return (::mosek::fusion::p_Expr::_new_Expr(_7282,_7281,_7280,_7279,_7277,_7278)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >,1 > > _7293) { return mosek::fusion::p_Expr::stack(_7293); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack(std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >,1 > > _7293){
  if ((NULL == _7293.get()))
  {
    {
      throw monty::NullPointerException(std::string ("Argument exprs may not be null"));
    }
  }
  {}
  int _12100 = (int)0;
  int _12101 = (int)((_7293)->size(0));
  for (int _7294 = _12100; _7294 < _12101; ++_7294)
  {
    {
      std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _7295 = ((*_7293)(_7294));
      if ((NULL == _7295.get()))
      {
        {
          throw monty::NullPointerException(std::string ("Arguments for stack may not be null"));
        }
      }
      {}
      int _12102 = (int)0;
      int _12103 = (int)((_7295)->size(0));
      for (int _7296 = _12102; _7296 < _12103; ++_7296)
      {
        {
          if ((NULL == ((*_7295)(_7296)).get()))
          {
            {
              throw monty::NullPointerException(std::string ("Arguments for stack may not be null"));
            }
          }
          {}
        }
      }
    }
  }
  std::vector<monty::rc_ptr< ::mosek::fusion::Expression >> _12104;
  for (int _7298 = (int)0, _12105 = (int)((_7293)->size(0)); _7298 < _12105 ; ++_7298)
  {
    _12104.push_back(::mosek::fusion::p_Expr::stack_(((*_7293)(_7298)),(int)1));
  }
  auto _12106 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >(monty::shape(_12104.size()),_12104.begin(),_12104.end()));
  std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _7297 = _12106;
  return ::mosek::fusion::p_Expr::stack_(_7297,(int)0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( double _7299,    double _7300,    double _7301) { return mosek::fusion::p_Expr::vstack(_7299,_7300,_7301); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack(double _7299,double _7300,double _7301){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7299).get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7300).get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7301).get())}),(int)0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( double _7302,    double _7303,    monty::rc_ptr< ::mosek::fusion::Expression > _7304) { return mosek::fusion::p_Expr::vstack(_7302,_7303,_7304); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack(double _7302,double _7303,monty::rc_ptr< ::mosek::fusion::Expression > _7304){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7302).get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7303).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7304.get())}),(int)0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( double _7305,    monty::rc_ptr< ::mosek::fusion::Expression > _7306,    double _7307) { return mosek::fusion::p_Expr::vstack(_7305,_7306,_7307); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack(double _7305,monty::rc_ptr< ::mosek::fusion::Expression > _7306,double _7307){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7305).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7306.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7307).get())}),(int)0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( double _7308,    monty::rc_ptr< ::mosek::fusion::Expression > _7309,    monty::rc_ptr< ::mosek::fusion::Expression > _7310) { return mosek::fusion::p_Expr::vstack(_7308,_7309,_7310); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack(double _7308,monty::rc_ptr< ::mosek::fusion::Expression > _7309,monty::rc_ptr< ::mosek::fusion::Expression > _7310){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7308).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7309.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7310.get())}),(int)0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _7311,    double _7312,    double _7313) { return mosek::fusion::p_Expr::vstack(_7311,_7312,_7313); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack(monty::rc_ptr< ::mosek::fusion::Expression > _7311,double _7312,double _7313){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_7311.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7312).get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7313).get())}),(int)0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _7314,    double _7315,    monty::rc_ptr< ::mosek::fusion::Expression > _7316) { return mosek::fusion::p_Expr::vstack(_7314,_7315,_7316); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack(monty::rc_ptr< ::mosek::fusion::Expression > _7314,double _7315,monty::rc_ptr< ::mosek::fusion::Expression > _7316){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_7314.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7315).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7316.get())}),(int)0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _7317,    monty::rc_ptr< ::mosek::fusion::Expression > _7318,    double _7319) { return mosek::fusion::p_Expr::vstack(_7317,_7318,_7319); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack(monty::rc_ptr< ::mosek::fusion::Expression > _7317,monty::rc_ptr< ::mosek::fusion::Expression > _7318,double _7319){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_7317.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7318.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7319).get())}),(int)0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _7320,    monty::rc_ptr< ::mosek::fusion::Expression > _7321,    monty::rc_ptr< ::mosek::fusion::Expression > _7322) { return mosek::fusion::p_Expr::vstack(_7320,_7321,_7322); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack(monty::rc_ptr< ::mosek::fusion::Expression > _7320,monty::rc_ptr< ::mosek::fusion::Expression > _7321,monty::rc_ptr< ::mosek::fusion::Expression > _7322){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_7320.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7321.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7322.get())}),(int)0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( double _7323,    monty::rc_ptr< ::mosek::fusion::Expression > _7324) { return mosek::fusion::p_Expr::vstack(_7323,_7324); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack(double _7323,monty::rc_ptr< ::mosek::fusion::Expression > _7324){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7323).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7324.get())}),(int)0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _7325,    double _7326) { return mosek::fusion::p_Expr::vstack(_7325,_7326); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack(monty::rc_ptr< ::mosek::fusion::Expression > _7325,double _7326){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_7325.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7326).get())}),(int)0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _7327,    monty::rc_ptr< ::mosek::fusion::Expression > _7328) { return mosek::fusion::p_Expr::vstack(_7327,_7328); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack(monty::rc_ptr< ::mosek::fusion::Expression > _7327,monty::rc_ptr< ::mosek::fusion::Expression > _7328){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_7327.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7328.get())}),(int)0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::vstack  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _7329) { return mosek::fusion::p_Expr::vstack(_7329); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::vstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _7329){
  if ((NULL == _7329.get()))
  {
    {
      throw monty::NullPointerException(std::string ("Argument exprs may not be null"));
    }
  }
  {}
  int _12107 = (int)0;
  int _12108 = (int)((_7329)->size(0));
  for (int _7330 = _12107; _7330 < _12108; ++_7330)
  {
    {
      if ((NULL == ((*_7329)(_7330)).get()))
      {
        {
          throw monty::NullPointerException(std::string ("Arguments for vstack may not be null"));
        }
      }
      {}
    }
  }
  return ::mosek::fusion::p_Expr::stack_(_7329,(int)0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _7331,    monty::rc_ptr< ::mosek::fusion::Expression > _7332,    monty::rc_ptr< ::mosek::fusion::Expression > _7333) { return mosek::fusion::p_Expr::hstack(_7331,_7332,_7333); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack(monty::rc_ptr< ::mosek::fusion::Expression > _7331,monty::rc_ptr< ::mosek::fusion::Expression > _7332,monty::rc_ptr< ::mosek::fusion::Expression > _7333){
  if (((NULL == _7331.get()) || ((NULL == _7332.get()) || (NULL == _7333.get()))))
  {
    {
      throw monty::NullPointerException(std::string ("Arguments e1, e2 and e3 may not be null"));
    }
  }
  {}
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_7331.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7332.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7333.get())}),(int)1);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _7334,    monty::rc_ptr< ::mosek::fusion::Expression > _7335,    double _7336) { return mosek::fusion::p_Expr::hstack(_7334,_7335,_7336); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack(monty::rc_ptr< ::mosek::fusion::Expression > _7334,monty::rc_ptr< ::mosek::fusion::Expression > _7335,double _7336){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_7334.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7335.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7336).get())}),(int)1);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _7337,    double _7338,    monty::rc_ptr< ::mosek::fusion::Expression > _7339) { return mosek::fusion::p_Expr::hstack(_7337,_7338,_7339); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack(monty::rc_ptr< ::mosek::fusion::Expression > _7337,double _7338,monty::rc_ptr< ::mosek::fusion::Expression > _7339){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_7337.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7338).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7339.get())}),(int)1);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _7340,    double _7341,    double _7342) { return mosek::fusion::p_Expr::hstack(_7340,_7341,_7342); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack(monty::rc_ptr< ::mosek::fusion::Expression > _7340,double _7341,double _7342){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_7340.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7341).get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7342).get())}),(int)1);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( double _7343,    monty::rc_ptr< ::mosek::fusion::Expression > _7344,    monty::rc_ptr< ::mosek::fusion::Expression > _7345) { return mosek::fusion::p_Expr::hstack(_7343,_7344,_7345); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack(double _7343,monty::rc_ptr< ::mosek::fusion::Expression > _7344,monty::rc_ptr< ::mosek::fusion::Expression > _7345){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7343).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7344.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7345.get())}),(int)1);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( double _7346,    monty::rc_ptr< ::mosek::fusion::Expression > _7347,    double _7348) { return mosek::fusion::p_Expr::hstack(_7346,_7347,_7348); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack(double _7346,monty::rc_ptr< ::mosek::fusion::Expression > _7347,double _7348){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7346).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7347.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7348).get())}),(int)1);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( double _7349,    double _7350,    monty::rc_ptr< ::mosek::fusion::Expression > _7351) { return mosek::fusion::p_Expr::hstack(_7349,_7350,_7351); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack(double _7349,double _7350,monty::rc_ptr< ::mosek::fusion::Expression > _7351){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7349).get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7350).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7351.get())}),(int)1);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( double _7352,    monty::rc_ptr< ::mosek::fusion::Expression > _7353) { return mosek::fusion::p_Expr::hstack(_7352,_7353); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack(double _7352,monty::rc_ptr< ::mosek::fusion::Expression > _7353){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7352).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7353.get())}),(int)1);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _7354,    double _7355) { return mosek::fusion::p_Expr::hstack(_7354,_7355); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack(monty::rc_ptr< ::mosek::fusion::Expression > _7354,double _7355){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_7354.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7355).get())}),(int)1);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( monty::rc_ptr< ::mosek::fusion::Expression > _7356,    monty::rc_ptr< ::mosek::fusion::Expression > _7357) { return mosek::fusion::p_Expr::hstack(_7356,_7357); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack(monty::rc_ptr< ::mosek::fusion::Expression > _7356,monty::rc_ptr< ::mosek::fusion::Expression > _7357){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_7356.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7357.get())}),(int)1);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::hstack  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _7358) { return mosek::fusion::p_Expr::hstack(_7358); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::hstack(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _7358){
  if ((NULL == _7358.get()))
  {
    {
      throw monty::NullPointerException(std::string ("Argument exprs may not be null"));
    }
  }
  {}
  int _12109 = (int)0;
  int _12110 = (int)((_7358)->size(0));
  for (int _7359 = _12109; _7359 < _12110; ++_7359)
  {
    {
      if ((NULL == ((*_7358)(_7359)).get()))
      {
        {
          throw monty::NullPointerException(std::string ("Arguments for hstack may not be null"));
        }
      }
      {}
    }
  }
  return ::mosek::fusion::p_Expr::stack_(_7358,(int)1);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _7360,    monty::rc_ptr< ::mosek::fusion::Expression > _7361,    monty::rc_ptr< ::mosek::fusion::Expression > _7362,    monty::rc_ptr< ::mosek::fusion::Expression > _7363) { return mosek::fusion::p_Expr::stack(_7360,_7361,_7362,_7363); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack(int _7360,monty::rc_ptr< ::mosek::fusion::Expression > _7361,monty::rc_ptr< ::mosek::fusion::Expression > _7362,monty::rc_ptr< ::mosek::fusion::Expression > _7363){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_7361.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7362.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7363.get())}),_7360);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _7364,    monty::rc_ptr< ::mosek::fusion::Expression > _7365,    monty::rc_ptr< ::mosek::fusion::Expression > _7366,    double _7367) { return mosek::fusion::p_Expr::stack(_7364,_7365,_7366,_7367); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack(int _7364,monty::rc_ptr< ::mosek::fusion::Expression > _7365,monty::rc_ptr< ::mosek::fusion::Expression > _7366,double _7367){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_7365.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7366.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7367).get())}),_7364);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _7368,    monty::rc_ptr< ::mosek::fusion::Expression > _7369,    double _7370,    monty::rc_ptr< ::mosek::fusion::Expression > _7371) { return mosek::fusion::p_Expr::stack(_7368,_7369,_7370,_7371); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack(int _7368,monty::rc_ptr< ::mosek::fusion::Expression > _7369,double _7370,monty::rc_ptr< ::mosek::fusion::Expression > _7371){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_7369.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7370).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7371.get())}),_7368);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _7372,    monty::rc_ptr< ::mosek::fusion::Expression > _7373,    double _7374,    double _7375) { return mosek::fusion::p_Expr::stack(_7372,_7373,_7374,_7375); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack(int _7372,monty::rc_ptr< ::mosek::fusion::Expression > _7373,double _7374,double _7375){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_7373.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7374).get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7375).get())}),_7372);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _7376,    double _7377,    monty::rc_ptr< ::mosek::fusion::Expression > _7378,    monty::rc_ptr< ::mosek::fusion::Expression > _7379) { return mosek::fusion::p_Expr::stack(_7376,_7377,_7378,_7379); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack(int _7376,double _7377,monty::rc_ptr< ::mosek::fusion::Expression > _7378,monty::rc_ptr< ::mosek::fusion::Expression > _7379){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7377).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7378.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7379.get())}),_7376);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _7380,    double _7381,    monty::rc_ptr< ::mosek::fusion::Expression > _7382,    double _7383) { return mosek::fusion::p_Expr::stack(_7380,_7381,_7382,_7383); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack(int _7380,double _7381,monty::rc_ptr< ::mosek::fusion::Expression > _7382,double _7383){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7381).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7382.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7383).get())}),_7380);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _7384,    double _7385,    double _7386,    monty::rc_ptr< ::mosek::fusion::Expression > _7387) { return mosek::fusion::p_Expr::stack(_7384,_7385,_7386,_7387); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack(int _7384,double _7385,double _7386,monty::rc_ptr< ::mosek::fusion::Expression > _7387){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7385).get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7386).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7387.get())}),_7384);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _7388,    double _7389,    monty::rc_ptr< ::mosek::fusion::Expression > _7390) { return mosek::fusion::p_Expr::stack(_7388,_7389,_7390); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack(int _7388,double _7389,monty::rc_ptr< ::mosek::fusion::Expression > _7390){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7389).get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7390.get())}),_7388);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _7391,    monty::rc_ptr< ::mosek::fusion::Expression > _7392,    double _7393) { return mosek::fusion::p_Expr::stack(_7391,_7392,_7393); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack(int _7391,monty::rc_ptr< ::mosek::fusion::Expression > _7392,double _7393){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_7392.get()),::monty::rc_ptr<::mosek::fusion::Expression>(::mosek::fusion::p_Expr::constTerm(_7393).get())}),_7391);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _7394,    monty::rc_ptr< ::mosek::fusion::Expression > _7395,    monty::rc_ptr< ::mosek::fusion::Expression > _7396) { return mosek::fusion::p_Expr::stack(_7394,_7395,_7396); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack(int _7394,monty::rc_ptr< ::mosek::fusion::Expression > _7395,monty::rc_ptr< ::mosek::fusion::Expression > _7396){
  return ::mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >{::monty::rc_ptr<::mosek::fusion::Expression>(_7395.get()),::monty::rc_ptr<::mosek::fusion::Expression>(_7396.get())}),_7394);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::stack  ( int _7397,    std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _7398) { return mosek::fusion::p_Expr::stack(_7397,_7398); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack(int _7397,std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _7398){
  return ::mosek::fusion::p_Expr::stack_(_7398,_7397);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::stack_(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _7399,int _7400){
  if (((int)((_7399)->size(0)) == (int)1))
  {
    {
      return ((*_7399)((int)0));
    }
  }
  else
  {
    {
      return (::mosek::fusion::p_ExprStack::_new_ExprStack(::mosek::fusion::p_Expr::promote(_7399,_7400),_7400)).as<::mosek::fusion::Expression>();
    }
  }
}
std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > mosek::fusion::p_Expr::promote(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _7401,int _7402){
  int _7403 = (int)((_7401)->size(0));
  std::vector<int> _12111;
  for (int _7405 = (int)0, _12112 = _7403; _7405 < _12112 ; ++_7405)
  {
    _12111.push_back(((*_7401)(_7405))->getND());
  }
  auto _12113 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_12111.size()),_12111.begin(),_12111.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _7404 = _12113;
  _checked_ptr_1<int> _ptr__7404(_7404 ? _7404->raw() : nullptr,_7404 ? _7404->size(0) : 0);
  int _7406 = _ptr__7404[(int)0];
  int _7407 = _ptr__7404[(int)0];
  int _12114 = (int)1;
  int _12115 = _7403;
  for (int _7408 = _12114; _7408 < _12115; ++_7408)
  {
    {
      if ((_ptr__7404[_7408] < _7407))
      {
        {
          _7407 = _ptr__7404[_7408];
        }
      }
      {}
      if ((_ptr__7404[_7408] > _7406))
      {
        {
          _7406 = _ptr__7404[_7408];
        }
      }
      {}
    }
  }
  if ((_7406 < _7402))
  {
    {
      _7406 = _7402;
    }
  }
  {}
  if ((_7407 < _7406))
  {
    {
      std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _7409 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 >(monty::shape(_7403)));
      std::shared_ptr< monty::ndarray< int,1 > > _7410 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7406)));
      _checked_ptr_1<int> _ptr__7410(_7410 ? _7410->raw() : nullptr,_7410 ? _7410->size(0) : 0);
      int _12116 = (int)0;
      int _12117 = _7403;
      for (int _7411 = _12116; _7411 < _12117; ++_7411)
      {
        {
          if ((((*_7401)(_7411))->getND() == _7406))
          {
            {
              ((*_7409)(_7411)) = ((*_7401)(_7411));
            }
          }
          else
          {
            {
              std::shared_ptr< monty::ndarray< int,1 > > _7412 = ((*_7401)(_7411))->getShape();
              _checked_ptr_1<int> _ptr__7412(_7412 ? _7412->raw() : nullptr,_7412 ? _7412->size(0) : 0);
              int _12118 = (int)0;
              int _12119 = (int)((_7412)->size(0));
              for (int _7413 = _12118; _7413 < _12119; ++_7413)
              {
                {
                  _ptr__7410[_7413] = _ptr__7412[_7413];
                }
              }
              int _12120 = (int)((_7412)->size(0));
              int _12121 = _7406;
              for (int _7414 = _12120; _7414 < _12121; ++_7414)
              {
                {
                  _ptr__7410[_7414] = (int)1;
                }
              }
              ((*_7409)(_7411)) = (::mosek::fusion::p_ExprReshape::_new_ExprReshape(_7410,((*_7401)(_7411)))).as<::mosek::fusion::Expression>();
            }
          }
        }
      }
      return _7409;
    }
  }
  else
  {
    {
      return _7401;
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::repeat  ( monty::rc_ptr< ::mosek::fusion::Variable > _7415,    int _7416,    int _7417) { return mosek::fusion::p_Expr::repeat(_7415,_7416,_7417); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::repeat(monty::rc_ptr< ::mosek::fusion::Variable > _7415,int _7416,int _7417){
  return ::mosek::fusion::p_Expr::repeat(_7415->__mosek_2fusion_2Variable__asExpr(),_7416,_7417);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::repeat  ( monty::rc_ptr< ::mosek::fusion::Expression > _7418,    int _7419,    int _7420) { return mosek::fusion::p_Expr::repeat(_7418,_7419,_7420); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::repeat(monty::rc_ptr< ::mosek::fusion::Expression > _7418,int _7419,int _7420){
  if ((_7419 <= (int)0))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Cannot repeat Expression 0 or less times"));
    }
  }
  {}
  if (((_7420 < (int)0) || (_7420 > _7418->getND())))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Invalid stacking dimension"));
    }
  }
  else
  {
    {
      if ((_7420 == _7418->getND()))
      {
        {
          std::shared_ptr< monty::ndarray< int,1 > > _7421 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(safe_add( _7420,(int)1 ))));
          _checked_ptr_1<int> _ptr__7421(_7421 ? _7421->raw() : nullptr,_7421 ? _7421->size(0) : 0);
          int _12122 = (int)0;
          int _12123 = _7420;
          for (int _7422 = _12122; _7422 < _12123; ++_7422)
          {
            {
              _ptr__7421[_7422] = _7418->getDim(_7422);
            }
          }
          _ptr__7421[_7420] = (int)1;
          return (::mosek::fusion::p_ExprRepeat::_new_ExprRepeat(::mosek::fusion::p_Expr::reshape(_7418,_7421),_7420,_7419)).as<::mosek::fusion::Expression>();
        }
      }
      else
      {
        {
          return (::mosek::fusion::p_ExprRepeat::_new_ExprRepeat(_7418,_7420,_7419)).as<::mosek::fusion::Expression>();
        }
      }
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _7423) { return mosek::fusion::p_Expr::add(_7423); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Expression >,1 > > _7423){
  std::vector<double> _12124;
  for (int _7424 = (int)0, _12125 = (int)((_7423)->size(0)); _7424 < _12125 ; ++_7424)
  {
    _12124.push_back(1.0);
  }
  auto _12126 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_12124.size()),_12124.begin(),_12124.end()));
  return (::mosek::fusion::p_ExprWSum::_new_ExprWSum(_7423,_12126)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _7425) { return mosek::fusion::p_Expr::add(_7425); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _7425){
  if ((NULL == _7425.get()))
  {
    {
      throw monty::NullPointerException(std::string ("Argument vs may not be null"));
    }
  }
  {}
  if (((int)((_7425)->size(0)) == (int)0))
  {
    {
      return (::mosek::fusion::p_Expr::_new_Expr(std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >{(long long)((int)0)}),std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)0))),nullptr,::mosek::fusion::p_Set::make((int)0),std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)0))),(int)1)).as<::mosek::fusion::Expression>();
    }
  }
  {}
  if ((((int)((_7425)->size(0)) > (int)0) && (NULL == ((*_7425)((int)0)).get())))
  {
    {
      throw monty::NullPointerException(std::string ("Argument vs may contain null"));
    }
  }
  {}
  int _7426 = ((*_7425)((int)0))->getND();
  int _12127 = (int)1;
  int _12128 = (int)((_7425)->size(0));
  for (int _7427 = _12127; _7427 < _12128; ++_7427)
  {
    {
      if ((_7426 < ((*_7425)(_7427))->getND()))
      {
        {
          _7426 = ((*_7425)(_7427))->getND();
        }
      }
      {}
    }
  }
  std::shared_ptr< monty::ndarray< int,2 > > _7428 = std::shared_ptr< monty::ndarray< int,2 > >(new monty::ndarray< int,2 >(monty::shape((int)((_7425)->size(0)),_7426)));
  int _12129 = (int)0;
  int _12130 = (int)((_7425)->size(0));
  for (int _7429 = _12129; _7429 < _12130; ++_7429)
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _7430 = ((*_7425)(_7429))->getShape();
      _checked_ptr_1<int> _ptr__7430(_7430 ? _7430->raw() : nullptr,_7430 ? _7430->size(0) : 0);
      int _12131 = (int)0;
      int _12132 = (int)((_7430)->size(0));
      for (int _7431 = _12131; _7431 < _12132; ++_7431)
      {
        {
          ((*_7428)(_7429,_7431)) = _ptr__7430[_7431];
        }
      }
      int _12133 = (int)((_7430)->size(0));
      int _12134 = _7426;
      for (int _7432 = _12133; _7432 < _12134; ++_7432)
      {
        {
          ((*_7428)(_7429,_7432)) = (int)1;
        }
      }
    }
  }
  int _12135 = (int)1;
  int _12136 = (int)((_7425)->size(0));
  for (int _7433 = _12135; _7433 < _12136; ++_7433)
  {
    {
      int _12137 = (int)0;
      int _12138 = _7426;
      for (int _7434 = _12137; _7434 < _12138; ++_7434)
      {
        {
          if ((((*_7428)((int)0,_7434)) != ((*_7428)(_7433,_7434))))
          {
            {
              throw ::mosek::fusion::DimensionError(std::string ("Mismatching operand dimensions"));
            }
          }
          {}
        }
      }
    }
  }
  std::vector<int> _12139;
  for (int _7436 = (int)0, _12140 = _7426; _7436 < _12140 ; ++_7436)
  {
    _12139.push_back(((*_7428)((int)0,_7436)));
  }
  auto _12141 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_12139.size()),_12139.begin(),_12139.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _7435 = _12141;
  _checked_ptr_1<int> _ptr__7435(_7435 ? _7435->raw() : nullptr,_7435 ? _7435->size(0) : 0);
  int _7437 = (int)1;
  int _12142 = (int)0;
  int _12143 = _7426;
  for (int _7438 = _12142; _7438 < _12143; ++_7438)
  {
    {
      _7437 *= _ptr__7435[_7438];
    }
  }
  int _7439 = (int)0;
  int _7440 = (int)0;
  int _12144 = (int)0;
  int _12145 = (int)((_7425)->size(0));
  for (int _7441 = _12144; _7441 < _12145; ++_7441)
  {
    {
      int _7442 = ((*_7425)(_7441))->numInst();
      _7439 += _7442;
      int _12146;
      bool _12147 = (_7440 > _7442);
      if (_12147)
      {
        _12146 = _7440;
      }
      else
      {
        _12146 = _7442;
      }
      _7440 = _12146;
    }
  }
  std::shared_ptr< monty::ndarray< long long,1 > > _7443 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_add( _7437,(int)1 ))));
  _checked_ptr_1<long long> _ptr__7443(_7443 ? _7443->raw() : nullptr,_7443 ? _7443->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _7444 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7439)));
  _checked_ptr_1<long long> _ptr__7444(_7444 ? _7444->raw() : nullptr,_7444 ? _7444->size(0) : 0);
  std::vector<double> _12148;
  for (int _7446 = (int)0, _12149 = _7439; _7446 < _12149 ; ++_7446)
  {
    _12148.push_back(1.0);
  }
  auto _12150 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_12148.size()),_12148.begin(),_12148.end()));
  std::shared_ptr< monty::ndarray< double,1 > > _7445 = _12150;
  _checked_ptr_1<double> _ptr__7445(_7445 ? _7445->raw() : nullptr,_7445 ? _7445->size(0) : 0);
  {
    std::shared_ptr< monty::ndarray< long long,1 > > _7447 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7440)));
    _checked_ptr_1<long long> _ptr__7447(_7447 ? _7447->raw() : nullptr,_7447 ? _7447->size(0) : 0);
    std::shared_ptr< monty::ndarray< long long,1 > > _7448 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7440)));
    _checked_ptr_1<long long> _ptr__7448(_7448 ? _7448->raw() : nullptr,_7448 ? _7448->size(0) : 0);
    int _12151 = (int)0;
    int _12152 = (int)((_7425)->size(0));
    for (int _7449 = _12151; _7449 < _12152; ++_7449)
    {
      {
        int _7450 = ((*_7425)(_7449))->inst((int)0,_7447,(int)0,_7448);
        int _12153 = (int)0;
        int _12154 = _7450;
        for (int _7451 = _12153; _7451 < _12154; ++_7451)
        {
          {
            _ptr__7443[safe_add( _ptr__7447[_7451],(int)1 )] += (int)1;
          }
        }
      }
    }
    int _12155 = (int)0;
    int _12156 = _7437;
    for (int _7452 = _12155; _7452 < _12156; ++_7452)
    {
      {
        _ptr__7443[safe_add( _7452,(int)1 )] += _ptr__7443[_7452];
      }
    }
    int _12157 = (int)0;
    int _12158 = (int)((_7425)->size(0));
    for (int _7453 = _12157; _7453 < _12158; ++_7453)
    {
      {
        int _7454 = ((*_7425)(_7453))->inst((int)0,_7447,(int)0,_7448);
        int _12159 = (int)0;
        int _12160 = _7454;
        for (int _7455 = _12159; _7455 < _12160; ++_7455)
        {
          {
            _ptr__7444[_ptr__7443[_ptr__7447[_7455]]] = _ptr__7448[_7455];
            ++ _ptr__7443[_ptr__7447[_7455]];
          }
        }
      }
    }
    int _12161 = (int)0;
    int _12162 = _7437;
    for (int _7456 = _12161; _7456 < _12162; ++_7456)
    {
      {
        _ptr__7443[(_7437 - _7456)] = _ptr__7443[((_7437 - _7456) - (int)1)];
      }
    }
    _ptr__7443[(int)0] = (int)0;
  }
  std::vector<double> _12163;
  for (int _7457 = (int)0, _12164 = _7437; _7457 < _12164 ; ++_7457)
  {
    _12163.push_back(0.0);
  }
  auto _12165 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_12163.size()),_12163.begin(),_12163.end()));
  return (::mosek::fusion::p_Expr::_new_Expr(_7443,_7444,_7445,_12165,_7435,nullptr,(int)1)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add_(monty::rc_ptr< ::mosek::fusion::Expression > _7458,double _7459,monty::rc_ptr< ::mosek::fusion::Expression > _7460,double _7461){
  int _7462 = _7458->getND();
  int _7463 = _7460->getND();
  if ((_7462 == _7463))
  {
    {
      return (::mosek::fusion::p_ExprAdd::_new_ExprAdd(_7458,_7460,_7459,_7461)).as<::mosek::fusion::Expression>();
    }
  }
  else
  {
    {
      int _12166;
      bool _12167 = (_7462 > _7463);
      if (_12167)
      {
        _12166 = _7462;
      }
      else
      {
        _12166 = _7463;
      }
      int _7464 = _12166;
      std::shared_ptr< monty::ndarray< int,1 > > _7465 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7464)));
      _checked_ptr_1<int> _ptr__7465(_7465 ? _7465->raw() : nullptr,_7465 ? _7465->size(0) : 0);
      if ((_7462 < _7463))
      {
        {
          std::shared_ptr< monty::ndarray< int,1 > > _7466 = _7458->getShape();
          _checked_ptr_1<int> _ptr__7466(_7466 ? _7466->raw() : nullptr,_7466 ? _7466->size(0) : 0);
          int _12168 = (int)0;
          int _12169 = _7462;
          for (int _7467 = _12168; _7467 < _12169; ++_7467)
          {
            {
              _ptr__7465[_7467] = _ptr__7466[_7467];
            }
          }
          int _12170 = _7462;
          int _12171 = _7464;
          for (int _7468 = _12170; _7468 < _12171; ++_7468)
          {
            {
              _ptr__7465[_7468] = (int)1;
            }
          }
          return (::mosek::fusion::p_ExprAdd::_new_ExprAdd((::mosek::fusion::p_ExprReshape::_new_ExprReshape(_7465,_7458)).as<::mosek::fusion::Expression>(),_7460,_7459,_7461)).as<::mosek::fusion::Expression>();
        }
      }
      else
      {
        {
          std::shared_ptr< monty::ndarray< int,1 > > _7469 = _7460->getShape();
          _checked_ptr_1<int> _ptr__7469(_7469 ? _7469->raw() : nullptr,_7469 ? _7469->size(0) : 0);
          int _12172 = (int)0;
          int _12173 = _7463;
          for (int _7470 = _12172; _7470 < _12173; ++_7470)
          {
            {
              _ptr__7465[_7470] = _ptr__7469[_7470];
            }
          }
          int _12174 = _7463;
          int _12175 = _7464;
          for (int _7471 = _12174; _7471 < _12175; ++_7471)
          {
            {
              _ptr__7465[_7471] = (int)1;
            }
          }
          return (::mosek::fusion::p_ExprAdd::_new_ExprAdd(_7458,(::mosek::fusion::p_ExprReshape::_new_ExprReshape(_7465,_7460)).as<::mosek::fusion::Expression>(),_7459,_7461)).as<::mosek::fusion::Expression>();
        }
      }
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::transpose  ( monty::rc_ptr< ::mosek::fusion::Expression > _7472) { return mosek::fusion::p_Expr::transpose(_7472); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::transpose(monty::rc_ptr< ::mosek::fusion::Expression > _7472){
  if ((_7472->getND() == (int)0))
  {
    {
      return _7472;
    }
  }
  else if((_7472->getND() == (int)1))
  {
    {
      return (::mosek::fusion::p_ExprReshape::_new_ExprReshape(std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)((int)1),(int)(_7472->getDim((int)0))}),_7472)).as<::mosek::fusion::Expression>();
    }
  }
  else if((_7472->getND() == (int)2))
  {
    {
      return (::mosek::fusion::p_ExprTranspose::_new_ExprTranspose(_7472)).as<::mosek::fusion::Expression>();
    }
  }
  else
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Incorrect number of dimensions for transpose"));
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulElm  ( monty::rc_ptr< ::mosek::fusion::Matrix > _7473,    monty::rc_ptr< ::mosek::fusion::Expression > _7474) { return mosek::fusion::p_Expr::mulElm(_7473,_7474); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm(monty::rc_ptr< ::mosek::fusion::Matrix > _7473,monty::rc_ptr< ::mosek::fusion::Expression > _7474){
  return ::mosek::fusion::p_Expr::mulElm_(_7473,_7474);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulElm  ( monty::rc_ptr< ::mosek::fusion::NDSparseArray > _7475,    monty::rc_ptr< ::mosek::fusion::Expression > _7476) { return mosek::fusion::p_Expr::mulElm(_7475,_7476); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm(monty::rc_ptr< ::mosek::fusion::NDSparseArray > _7475,monty::rc_ptr< ::mosek::fusion::Expression > _7476){
  return ::mosek::fusion::p_Expr::mulElm_(_7475,_7476);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulElm  ( std::shared_ptr< monty::ndarray< double,2 > > _7477,    monty::rc_ptr< ::mosek::fusion::Expression > _7478) { return mosek::fusion::p_Expr::mulElm(_7477,_7478); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm(std::shared_ptr< monty::ndarray< double,2 > > _7477,monty::rc_ptr< ::mosek::fusion::Expression > _7478){
  return ::mosek::fusion::p_Expr::mulElm_(::mosek::fusion::p_Matrix::dense(_7477),_7478);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulElm  ( std::shared_ptr< monty::ndarray< double,1 > > _7479,    monty::rc_ptr< ::mosek::fusion::Expression > _7480) { return mosek::fusion::p_Expr::mulElm(_7479,_7480); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm(std::shared_ptr< monty::ndarray< double,1 > > _7479,monty::rc_ptr< ::mosek::fusion::Expression > _7480){
  _checked_ptr_1<double> _ptr__7479(_7479 ? _7479->raw() : nullptr, _7479 ? _7479->size(0) : 0);
  return ::mosek::fusion::p_Expr::mulElm_(_7479,_7480);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulElm  ( monty::rc_ptr< ::mosek::fusion::Expression > _7481,    monty::rc_ptr< ::mosek::fusion::Matrix > _7482) { return mosek::fusion::p_Expr::mulElm(_7481,_7482); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm(monty::rc_ptr< ::mosek::fusion::Expression > _7481,monty::rc_ptr< ::mosek::fusion::Matrix > _7482){
  return ::mosek::fusion::p_Expr::mulElm_(_7482,_7481);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulElm  ( monty::rc_ptr< ::mosek::fusion::Expression > _7483,    std::shared_ptr< monty::ndarray< double,2 > > _7484) { return mosek::fusion::p_Expr::mulElm(_7483,_7484); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm(monty::rc_ptr< ::mosek::fusion::Expression > _7483,std::shared_ptr< monty::ndarray< double,2 > > _7484){
  return ::mosek::fusion::p_Expr::mulElm_(::mosek::fusion::p_Matrix::dense(_7484),_7483);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulElm  ( monty::rc_ptr< ::mosek::fusion::Expression > _7485,    std::shared_ptr< monty::ndarray< double,1 > > _7486) { return mosek::fusion::p_Expr::mulElm(_7485,_7486); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm(monty::rc_ptr< ::mosek::fusion::Expression > _7485,std::shared_ptr< monty::ndarray< double,1 > > _7486){
  _checked_ptr_1<double> _ptr__7486(_7486 ? _7486->raw() : nullptr, _7486 ? _7486->size(0) : 0);
  return ::mosek::fusion::p_Expr::mulElm_(_7486,_7485);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulElm  ( monty::rc_ptr< ::mosek::fusion::Expression > _7487,    monty::rc_ptr< ::mosek::fusion::NDSparseArray > _7488) { return mosek::fusion::p_Expr::mulElm(_7487,_7488); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm(monty::rc_ptr< ::mosek::fusion::Expression > _7487,monty::rc_ptr< ::mosek::fusion::NDSparseArray > _7488){
  return ::mosek::fusion::p_Expr::mulElm_(_7488,_7487);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulElm  ( monty::rc_ptr< ::mosek::fusion::Parameter > _7489,    monty::rc_ptr< ::mosek::fusion::Expression > _7490) { return mosek::fusion::p_Expr::mulElm(_7489,_7490); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm(monty::rc_ptr< ::mosek::fusion::Parameter > _7489,monty::rc_ptr< ::mosek::fusion::Expression > _7490){
  return (::mosek::fusion::p_ExprMulParamElem::_new_ExprMulParamElem(_7489,_7490)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::mulElm  ( monty::rc_ptr< ::mosek::fusion::Expression > _7491,    monty::rc_ptr< ::mosek::fusion::Parameter > _7492) { return mosek::fusion::p_Expr::mulElm(_7491,_7492); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::mulElm(monty::rc_ptr< ::mosek::fusion::Expression > _7491,monty::rc_ptr< ::mosek::fusion::Parameter > _7492){
  return (::mosek::fusion::p_ExprMulParamElem::_new_ExprMulParamElem(_7492,_7491)).as<::mosek::fusion::Expression>();
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub  ( monty::rc_ptr< ::mosek::fusion::NDSparseArray > _7493,    monty::rc_ptr< ::mosek::fusion::Expression > _7494) { return mosek::fusion::p_Expr::sub(_7493,_7494); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub(monty::rc_ptr< ::mosek::fusion::NDSparseArray > _7493,monty::rc_ptr< ::mosek::fusion::Expression > _7494){
  return ::mosek::fusion::p_Expr::add_(::mosek::fusion::p_Expr::constTerm(_7493),1.0,_7494,(-1.0));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub  ( monty::rc_ptr< ::mosek::fusion::Expression > _7495,    monty::rc_ptr< ::mosek::fusion::NDSparseArray > _7496) { return mosek::fusion::p_Expr::sub(_7495,_7496); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub(monty::rc_ptr< ::mosek::fusion::Expression > _7495,monty::rc_ptr< ::mosek::fusion::NDSparseArray > _7496){
  return ::mosek::fusion::p_Expr::add_(_7495,1.0,::mosek::fusion::p_Expr::constTerm(_7496),(-1.0));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub  ( monty::rc_ptr< ::mosek::fusion::Matrix > _7497,    monty::rc_ptr< ::mosek::fusion::Expression > _7498) { return mosek::fusion::p_Expr::sub(_7497,_7498); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub(monty::rc_ptr< ::mosek::fusion::Matrix > _7497,monty::rc_ptr< ::mosek::fusion::Expression > _7498){
  return ::mosek::fusion::p_Expr::add_(::mosek::fusion::p_Expr::constTerm(_7497),1.0,_7498,(-1.0));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub  ( monty::rc_ptr< ::mosek::fusion::Expression > _7499,    monty::rc_ptr< ::mosek::fusion::Matrix > _7500) { return mosek::fusion::p_Expr::sub(_7499,_7500); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub(monty::rc_ptr< ::mosek::fusion::Expression > _7499,monty::rc_ptr< ::mosek::fusion::Matrix > _7500){
  return ::mosek::fusion::p_Expr::add_(_7499,1.0,::mosek::fusion::p_Expr::constTerm(_7500),(-1.0));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub  ( double _7501,    monty::rc_ptr< ::mosek::fusion::Expression > _7502) { return mosek::fusion::p_Expr::sub(_7501,_7502); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub(double _7501,monty::rc_ptr< ::mosek::fusion::Expression > _7502){
  return ::mosek::fusion::p_Expr::add_(::mosek::fusion::p_Expr::constTerm(_7502->getShape(),_7501),1.0,_7502,(-1.0));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub  ( monty::rc_ptr< ::mosek::fusion::Expression > _7503,    double _7504) { return mosek::fusion::p_Expr::sub(_7503,_7504); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub(monty::rc_ptr< ::mosek::fusion::Expression > _7503,double _7504){
  return ::mosek::fusion::p_Expr::add_(_7503,1.0,::mosek::fusion::p_Expr::constTerm(_7503->getShape(),_7504),(-1.0));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub  ( std::shared_ptr< monty::ndarray< double,2 > > _7505,    monty::rc_ptr< ::mosek::fusion::Expression > _7506) { return mosek::fusion::p_Expr::sub(_7505,_7506); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub(std::shared_ptr< monty::ndarray< double,2 > > _7505,monty::rc_ptr< ::mosek::fusion::Expression > _7506){
  return ::mosek::fusion::p_Expr::add_(::mosek::fusion::p_Expr::constTerm(_7505),1.0,_7506,(-1.0));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub  ( std::shared_ptr< monty::ndarray< double,1 > > _7507,    monty::rc_ptr< ::mosek::fusion::Expression > _7508) { return mosek::fusion::p_Expr::sub(_7507,_7508); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub(std::shared_ptr< monty::ndarray< double,1 > > _7507,monty::rc_ptr< ::mosek::fusion::Expression > _7508){
  _checked_ptr_1<double> _ptr__7507(_7507 ? _7507->raw() : nullptr, _7507 ? _7507->size(0) : 0);
  return ::mosek::fusion::p_Expr::add_(::mosek::fusion::p_Expr::constTerm(_7507),1.0,_7508,(-1.0));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub  ( monty::rc_ptr< ::mosek::fusion::Expression > _7509,    std::shared_ptr< monty::ndarray< double,2 > > _7510) { return mosek::fusion::p_Expr::sub(_7509,_7510); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub(monty::rc_ptr< ::mosek::fusion::Expression > _7509,std::shared_ptr< monty::ndarray< double,2 > > _7510){
  return ::mosek::fusion::p_Expr::add_(_7509,1.0,::mosek::fusion::p_Expr::constTerm(_7510),(-1.0));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub  ( monty::rc_ptr< ::mosek::fusion::Expression > _7511,    std::shared_ptr< monty::ndarray< double,1 > > _7512) { return mosek::fusion::p_Expr::sub(_7511,_7512); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub(monty::rc_ptr< ::mosek::fusion::Expression > _7511,std::shared_ptr< monty::ndarray< double,1 > > _7512){
  _checked_ptr_1<double> _ptr__7512(_7512 ? _7512->raw() : nullptr, _7512 ? _7512->size(0) : 0);
  return ::mosek::fusion::p_Expr::add_(_7511,1.0,::mosek::fusion::p_Expr::constTerm(_7512),(-1.0));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::sub  ( monty::rc_ptr< ::mosek::fusion::Expression > _7513,    monty::rc_ptr< ::mosek::fusion::Expression > _7514) { return mosek::fusion::p_Expr::sub(_7513,_7514); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::sub(monty::rc_ptr< ::mosek::fusion::Expression > _7513,monty::rc_ptr< ::mosek::fusion::Expression > _7514){
  return ::mosek::fusion::p_Expr::add_(_7513,1.0,_7514,(-1.0));
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( monty::rc_ptr< ::mosek::fusion::NDSparseArray > _7515,    monty::rc_ptr< ::mosek::fusion::Expression > _7516) { return mosek::fusion::p_Expr::add(_7515,_7516); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add(monty::rc_ptr< ::mosek::fusion::NDSparseArray > _7515,monty::rc_ptr< ::mosek::fusion::Expression > _7516){
  return ::mosek::fusion::p_Expr::add_(_7516,1.0,::mosek::fusion::p_Expr::constTerm(_7515),1.0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( monty::rc_ptr< ::mosek::fusion::Expression > _7517,    monty::rc_ptr< ::mosek::fusion::NDSparseArray > _7518) { return mosek::fusion::p_Expr::add(_7517,_7518); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add(monty::rc_ptr< ::mosek::fusion::Expression > _7517,monty::rc_ptr< ::mosek::fusion::NDSparseArray > _7518){
  return ::mosek::fusion::p_Expr::add_(_7517,1.0,::mosek::fusion::p_Expr::constTerm(_7518),1.0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( monty::rc_ptr< ::mosek::fusion::Matrix > _7519,    monty::rc_ptr< ::mosek::fusion::Expression > _7520) { return mosek::fusion::p_Expr::add(_7519,_7520); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add(monty::rc_ptr< ::mosek::fusion::Matrix > _7519,monty::rc_ptr< ::mosek::fusion::Expression > _7520){
  return ::mosek::fusion::p_Expr::add_(_7520,1.0,::mosek::fusion::p_Expr::constTerm(_7519),1.0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( monty::rc_ptr< ::mosek::fusion::Expression > _7521,    monty::rc_ptr< ::mosek::fusion::Matrix > _7522) { return mosek::fusion::p_Expr::add(_7521,_7522); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add(monty::rc_ptr< ::mosek::fusion::Expression > _7521,monty::rc_ptr< ::mosek::fusion::Matrix > _7522){
  return ::mosek::fusion::p_Expr::add_(_7521,1.0,::mosek::fusion::p_Expr::constTerm(_7522),1.0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( double _7523,    monty::rc_ptr< ::mosek::fusion::Expression > _7524) { return mosek::fusion::p_Expr::add(_7523,_7524); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add(double _7523,monty::rc_ptr< ::mosek::fusion::Expression > _7524){
  return ::mosek::fusion::p_Expr::add_(_7524,1.0,::mosek::fusion::p_Expr::constTerm(_7524->getShape(),_7523),1.0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( monty::rc_ptr< ::mosek::fusion::Expression > _7525,    double _7526) { return mosek::fusion::p_Expr::add(_7525,_7526); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add(monty::rc_ptr< ::mosek::fusion::Expression > _7525,double _7526){
  return ::mosek::fusion::p_Expr::add_(_7525,1.0,::mosek::fusion::p_Expr::constTerm(_7525->getShape(),_7526),1.0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( std::shared_ptr< monty::ndarray< double,2 > > _7527,    monty::rc_ptr< ::mosek::fusion::Expression > _7528) { return mosek::fusion::p_Expr::add(_7527,_7528); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add(std::shared_ptr< monty::ndarray< double,2 > > _7527,monty::rc_ptr< ::mosek::fusion::Expression > _7528){
  return ::mosek::fusion::p_Expr::add_(_7528,1.0,::mosek::fusion::p_Expr::constTerm(_7527),1.0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( std::shared_ptr< monty::ndarray< double,1 > > _7529,    monty::rc_ptr< ::mosek::fusion::Expression > _7530) { return mosek::fusion::p_Expr::add(_7529,_7530); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add(std::shared_ptr< monty::ndarray< double,1 > > _7529,monty::rc_ptr< ::mosek::fusion::Expression > _7530){
  _checked_ptr_1<double> _ptr__7529(_7529 ? _7529->raw() : nullptr, _7529 ? _7529->size(0) : 0);
  return ::mosek::fusion::p_Expr::add_(_7530,1.0,::mosek::fusion::p_Expr::constTerm(_7529),1.0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( monty::rc_ptr< ::mosek::fusion::Expression > _7531,    std::shared_ptr< monty::ndarray< double,2 > > _7532) { return mosek::fusion::p_Expr::add(_7531,_7532); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add(monty::rc_ptr< ::mosek::fusion::Expression > _7531,std::shared_ptr< monty::ndarray< double,2 > > _7532){
  return ::mosek::fusion::p_Expr::add_(_7531,1.0,::mosek::fusion::p_Expr::constTerm(_7532),1.0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( monty::rc_ptr< ::mosek::fusion::Expression > _7533,    std::shared_ptr< monty::ndarray< double,1 > > _7534) { return mosek::fusion::p_Expr::add(_7533,_7534); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add(monty::rc_ptr< ::mosek::fusion::Expression > _7533,std::shared_ptr< monty::ndarray< double,1 > > _7534){
  _checked_ptr_1<double> _ptr__7534(_7534 ? _7534->raw() : nullptr, _7534 ? _7534->size(0) : 0);
  return ::mosek::fusion::p_Expr::add_(_7533,1.0,::mosek::fusion::p_Expr::constTerm(_7534),1.0);
}
monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::Expr::add  ( monty::rc_ptr< ::mosek::fusion::Expression > _7535,    monty::rc_ptr< ::mosek::fusion::Expression > _7536) { return mosek::fusion::p_Expr::add(_7535,_7536); }monty::rc_ptr< ::mosek::fusion::Expression > mosek::fusion::p_Expr::add(monty::rc_ptr< ::mosek::fusion::Expression > _7535,monty::rc_ptr< ::mosek::fusion::Expression > _7536){
  return ::mosek::fusion::p_Expr::add_(_7535,1.0,_7536,1.0);
}
int mosek::fusion::Expr :: getND() { return mosek::fusion::p_Expr::_get_impl(this)->getND(); }int mosek::fusion::p_Expr::getND(){
  return (int)((shape)->size(0));
}
std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::Expr :: getShape() { return mosek::fusion::p_Expr::_get_impl(this)->getShape(); }std::shared_ptr< monty::ndarray< int,1 > > mosek::fusion::p_Expr::getShape(){
  return ::mosek::fusion::Utils::Tools::arraycopy(shape);
}
void mosek::fusion::Expr :: eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _7537,monty::rc_ptr< ::mosek::fusion::WorkStack > _7538,monty::rc_ptr< ::mosek::fusion::WorkStack > _7539) { mosek::fusion::p_Expr::_get_impl(this)->eval(_7537,_7538,_7539); }void mosek::fusion::p_Expr::eval(monty::rc_ptr< ::mosek::fusion::WorkStack > _7537,monty::rc_ptr< ::mosek::fusion::WorkStack > _7538,monty::rc_ptr< ::mosek::fusion::WorkStack > _7539){
  int _7540 = ((int)((ptrb)->size(0)) - (int)1);
  int _7541 = safe_add( (int)((*ptrb)(_7540)),_7540 );
  int _7542 = (int)((shape)->size(0));
  _7537->alloc_expr(_7542,_7540,_7541,(NULL != inst.get()));
  int _7543 = mosek::fusion::p_WorkStack::_get_impl(_7537)->ptr_base;
  int _7544 = mosek::fusion::p_WorkStack::_get_impl(_7537)->nidxs_base;
  int _7545 = mosek::fusion::p_WorkStack::_get_impl(_7537)->sp_base;
  int _7546 = mosek::fusion::p_WorkStack::_get_impl(_7537)->cof_base;
  int _7547 = mosek::fusion::p_WorkStack::_get_impl(_7537)->shape_base;
  std::shared_ptr< monty::ndarray< int,1 > > _7548 = mosek::fusion::p_WorkStack::_get_impl(_7537)->i32;
  _checked_ptr_1<int> _ptr__7548(_7548 ? _7548->raw() : nullptr,_7548 ? _7548->size(0) : 0);
  std::shared_ptr< monty::ndarray< long long,1 > > _7549 = mosek::fusion::p_WorkStack::_get_impl(_7537)->i64;
  _checked_ptr_1<long long> _ptr__7549(_7549 ? _7549->raw() : nullptr,_7549 ? _7549->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _7550 = mosek::fusion::p_WorkStack::_get_impl(_7537)->f64;
  _checked_ptr_1<double> _ptr__7550(_7550 ? _7550->raw() : nullptr,_7550 ? _7550->size(0) : 0);
  {
    int _12176 = (int)0;
    int _12177 = _7542;
    for (int _7551 = _12176; _7551 < _12177; ++_7551)
    {
      {
        _ptr__7548[safe_add( _7547,_7551 )] = ((*shape)(_7551));
      }
    }
    _ptr__7548[_7543] = (int)0;
    int _7552 = (int)0;
    int _12178 = (int)0;
    int _12179 = _7540;
    for (int _7553 = _12178; _7553 < _12179; ++_7553)
    {
      {
        long long _12180 = ((*ptrb)(_7553));
        long long _12181 = ((*ptrb)(safe_add( _7553,(int)1 )));
        for (long long _7554 = _12180; _7554 < _12181; ++_7554)
        {
          {
            _ptr__7549[safe_add( _7544,_7552 )] = ((*subj)(_7554));
            _ptr__7550[safe_add( _7546,_7552 )] = ((*cof_v)(_7554));
            ++ _7552;
          }
        }
        _ptr__7549[safe_add( _7544,_7552 )] = (int)0;
        _ptr__7550[safe_add( _7546,_7552 )] = ((*bfix)(_7553));
        ++ _7552;
        _ptr__7548[safe_add( safe_add( _7543,_7553 ),(int)1 )] = _7552;
      }
    }
  }
}
void mosek::fusion::p_Expr::validateData(std::shared_ptr< monty::ndarray< long long,1 > > _7555,std::shared_ptr< monty::ndarray< long long,1 > > _7556,std::shared_ptr< monty::ndarray< double,1 > > _7557,std::shared_ptr< monty::ndarray< double,1 > > _7558,std::shared_ptr< monty::ndarray< int,1 > > _7559,std::shared_ptr< monty::ndarray< long long,1 > > _7560){
  _checked_ptr_1<long long> _ptr__7555(_7555 ? _7555->raw() : nullptr, _7555 ? _7555->size(0) : 0);
  _checked_ptr_1<long long> _ptr__7556(_7556 ? _7556->raw() : nullptr, _7556 ? _7556->size(0) : 0);
  _checked_ptr_1<double> _ptr__7557(_7557 ? _7557->raw() : nullptr, _7557 ? _7557->size(0) : 0);
  _checked_ptr_1<double> _ptr__7558(_7558 ? _7558->raw() : nullptr, _7558 ? _7558->size(0) : 0);
  _checked_ptr_1<int> _ptr__7559(_7559 ? _7559->raw() : nullptr, _7559 ? _7559->size(0) : 0);
  _checked_ptr_1<long long> _ptr__7560(_7560 ? _7560->raw() : nullptr, _7560 ? _7560->size(0) : 0);
  if ((NULL == _7559.get()))
  {
    {
      throw ::mosek::fusion::ExpressionError(std::string ("Array 'shape' in expression is null"));
    }
  }
  {}
  int _7561 = ((int)((_7555)->size(0)) - (int)1);
  long long _7562 = _ptr__7555[((int)((_7555)->size(0)) - (int)1)];
  int _7563 = (int)((_7559)->size(0));
  long long _7564 = (long long)1;
  int _12182 = (int)0;
  int _12183 = _7563;
  for (int _7565 = _12182; _7565 < _12183; ++_7565)
  {
    {
      _7564 *= _ptr__7559[_7565];
    }
  }
  if (((int)((_7555)->size(0)) < (int)1))
  {
    {
      throw ::mosek::fusion::ExpressionError(std::string ("Array 'ptrb' in expression has wrong size"));
    }
  }
  {}
  if ((_7562 != (int)((_7556)->size(0))))
  {
    {
      throw ::mosek::fusion::ExpressionError(std::string ("Array 'subj' in expression has wrong size"));
    }
  }
  {}
  if ((_7562 != (int)((_7557)->size(0))))
  {
    {
      throw ::mosek::fusion::ExpressionError(std::string ("Array 'cof' in expression has wrong size"));
    }
  }
  {}
  if (((NULL == _7558.get()) || (_7561 != (int)((_7558)->size(0)))))
  {
    {
      throw ::mosek::fusion::ExpressionError(std::string ("Array 'bfix' in expression has wrong length"));
    }
  }
  {}
  if (((NULL != _7560.get()) && ((int)((_7560)->size(0)) < _7564)))
  {
    {
      if (((int)((_7560)->size(0)) != ((int)((_7555)->size(0)) - (int)1)))
      {
        {
          throw ::mosek::fusion::ExpressionError(std::string ("Array 'inst' in expression has wrong length"));
        }
      }
      {}
      if (((int)((_7560)->size(0)) > (int)0))
      {
        {
          if (((_ptr__7560[(int)0] < (int)0) || (_ptr__7560[(int)0] >= _7564)))
          {
            {
              throw ::mosek::fusion::ExpressionError(std::string ("Array 'inst' contains an invalid index"));
            }
          }
          {}
          bool _7566 = true;
          long long _7567 = _7564;
          int _12184 = (int)1;
          int _12185 = (int)((_7560)->size(0));
          for (int _7568 = _12184; _7568 < _12185; ++_7568)
          {
            {
              _7566 = (_7566 && ((_ptr__7560[_7568] >= (int)0) && ((_ptr__7560[_7568] < _7567) && (_ptr__7560[_7568] > _ptr__7560[(_7568 - (int)1)]))));
            }
          }
          if ((!_7566))
          {
            {
              throw ::mosek::fusion::ExpressionError(std::string ("Invalid array 'inst'"));
            }
          }
          {}
        }
      }
      {}
    }
  }
  else
  {
    {
      if ((_7564 != ((long long)((_7555)->size(0)) - (int)1)))
      {
        {
          throw ::mosek::fusion::ExpressionError(std::string ("Array 'ptrb' in expression has wrong length"));
        }
      }
      {}
    }
  }
  bool _7569 = false;
  bool _7570 = false;
  if ((_ptr__7555[(int)0] != (long long)0))
  {
    {
      throw ::mosek::fusion::ExpressionError(std::string ("Invalid 'ptrb' argument in expression"));
    }
  }
  {}
  bool _7571 = true;
  int _12186 = (int)0;
  int _12187 = _7561;
  for (int _7572 = _12186; _7572 < _12187; ++_7572)
  {
    {
      _7571 = (_7571 && (_ptr__7555[_7572] <= _ptr__7555[safe_add( _7572,(int)1 )]));
    }
  }
  if ((!_7571))
  {
    {
      throw ::mosek::fusion::ExpressionError(std::string ("Invalid 'ptrb' argument in expression"));
    }
  }
  {}
}
monty::rc_ptr< ::mosek::fusion::Model > mosek::fusion::p_Expr::extractModel(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Variable >,1 > > _7573){
  monty::rc_ptr< ::mosek::fusion::Model > _12188;
  bool _12189 = ((NULL == _7573.get()) || ((int)((_7573)->size(0)) == (int)0));
  if (_12189)
  {
    _12188 = nullptr;
  }
  else
  {
    _12188 = ((*_7573)((int)0))->__mosek_2fusion_2Variable__getModel();
  }
  return _12188;
}
void mosek::fusion::p_Expr::destroy(){inst.reset();cof_v.reset();subj.reset();ptrb.reset();bfix.reset();shape.reset();}void mosek::fusion::Expr::destroy() { mosek::fusion::p_Expr::_get_impl(this)->destroy(); }monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Expression::pick(std::shared_ptr< monty::ndarray< int,2 > > _7574) { return __mosek_2fusion_2Expression__pick(_7574); }
monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Expression::pick(std::shared_ptr< monty::ndarray< int,1 > > _7575) { return __mosek_2fusion_2Expression__pick(_7575); }
monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Expression::index(std::shared_ptr< monty::ndarray< int,1 > > _7576) { return __mosek_2fusion_2Expression__index(_7576); }
monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Expression::index(int _7577) { return __mosek_2fusion_2Expression__index(_7577); }
monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Expression::slice(std::shared_ptr< monty::ndarray< int,1 > > _7578,std::shared_ptr< monty::ndarray< int,1 > > _7579) { return __mosek_2fusion_2Expression__slice(_7578,_7579); }
monty::rc_ptr< mosek::fusion::Expression > mosek::fusion::Expression::slice(int _7580,int _7581) { return __mosek_2fusion_2Expression__slice(_7580,_7581); }
mosek::fusion::SymmetricMatrix::SymmetricMatrix(mosek::fusion::p_SymmetricMatrix *_impl) : _impl(_impl) { /*std::cout << "SymmetricMatrix() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::SymmetricMatrix::~SymmetricMatrix() { delete _impl; _impl = nullptr; }mosek::fusion::p_SymmetricMatrix::p_SymmetricMatrix  (::mosek::fusion::SymmetricMatrix * _pubthis) :     _pubthis(_pubthis){}mosek::fusion::SymmetricMatrix::t mosek::fusion::p_SymmetricMatrix::_new_SymmetricMatrix  (int _7586,    int _7587,    std::shared_ptr< monty::ndarray< int,1 > > _7588,    std::shared_ptr< monty::ndarray< int,1 > > _7589,    std::shared_ptr< monty::ndarray< double,1 > > _7590,    std::shared_ptr< monty::ndarray< int,1 > > _7591,    std::shared_ptr< monty::ndarray< int,1 > > _7592,    std::shared_ptr< monty::ndarray< double,1 > > _7593,    double _7594){ return new mosek::fusion::SymmetricMatrix(_7586,_7587,_7588,_7589,_7590,_7591,_7592,_7593,_7594); }mosek::fusion::SymmetricMatrix::SymmetricMatrix  (int _7586,    int _7587,    std::shared_ptr< monty::ndarray< int,1 > > _7588,    std::shared_ptr< monty::ndarray< int,1 > > _7589,    std::shared_ptr< monty::ndarray< double,1 > > _7590,    std::shared_ptr< monty::ndarray< int,1 > > _7591,    std::shared_ptr< monty::ndarray< int,1 > > _7592,    std::shared_ptr< monty::ndarray< double,1 > > _7593,    double _7594) :    SymmetricMatrix(new mosek::fusion::p_SymmetricMatrix(this)){ mosek::fusion::p_SymmetricMatrix::_get_impl(this)->_initialize(_7586,_7587,_7588,_7589,_7590,_7591,_7592,_7593,_7594); }void mosek::fusion::p_SymmetricMatrix::_initialize  (int _7586,    int _7587,    std::shared_ptr< monty::ndarray< int,1 > > _7588,    std::shared_ptr< monty::ndarray< int,1 > > _7589,    std::shared_ptr< monty::ndarray< double,1 > > _7590,    std::shared_ptr< monty::ndarray< int,1 > > _7591,    std::shared_ptr< monty::ndarray< int,1 > > _7592,    std::shared_ptr< monty::ndarray< double,1 > > _7593,    double _7594){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__7588(_7588 ? _7588->raw() : nullptr, _7588 ? _7588->size(0) : 0);
    _checked_ptr_1<int> _ptr__7589(_7589 ? _7589->raw() : nullptr, _7589 ? _7589->size(0) : 0);
    _checked_ptr_1<double> _ptr__7590(_7590 ? _7590->raw() : nullptr, _7590 ? _7590->size(0) : 0);
    _checked_ptr_1<int> _ptr__7591(_7591 ? _7591->raw() : nullptr, _7591 ? _7591->size(0) : 0);
    _checked_ptr_1<int> _ptr__7592(_7592 ? _7592->raw() : nullptr, _7592 ? _7592->size(0) : 0);
    _checked_ptr_1<double> _ptr__7593(_7593 ? _7593->raw() : nullptr, _7593 ? _7593->size(0) : 0);
    mosek::fusion::p_SymmetricMatrix::_get_impl(::mosek::fusion::SymmetricMatrix::t(_pubthis))->d0 = _7586;
    mosek::fusion::p_SymmetricMatrix::_get_impl(::mosek::fusion::SymmetricMatrix::t(_pubthis))->d1 = _7587;
    mosek::fusion::p_SymmetricMatrix::_get_impl(::mosek::fusion::SymmetricMatrix::t(_pubthis))->usubi = _7588;
    mosek::fusion::p_SymmetricMatrix::_get_impl(::mosek::fusion::SymmetricMatrix::t(_pubthis))->usubj = _7589;
    mosek::fusion::p_SymmetricMatrix::_get_impl(::mosek::fusion::SymmetricMatrix::t(_pubthis))->uval = _7590;
    mosek::fusion::p_SymmetricMatrix::_get_impl(::mosek::fusion::SymmetricMatrix::t(_pubthis))->vsubi = _7591;
    mosek::fusion::p_SymmetricMatrix::_get_impl(::mosek::fusion::SymmetricMatrix::t(_pubthis))->vsubj = _7592;
    mosek::fusion::p_SymmetricMatrix::_get_impl(::mosek::fusion::SymmetricMatrix::t(_pubthis))->vval = _7593;
    mosek::fusion::p_SymmetricMatrix::_get_impl(::mosek::fusion::SymmetricMatrix::t(_pubthis))->scale = _7594;
    nnz = (-(int)1);
  }
}monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::SymmetricMatrix::rankOne  ( int _7595,    std::shared_ptr< monty::ndarray< int,1 > > _7596,    std::shared_ptr< monty::ndarray< double,1 > > _7597) { return mosek::fusion::p_SymmetricMatrix::rankOne(_7595,_7596,_7597); }monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::p_SymmetricMatrix::rankOne(int _7595,std::shared_ptr< monty::ndarray< int,1 > > _7596,std::shared_ptr< monty::ndarray< double,1 > > _7597){
  _checked_ptr_1<int> _ptr__7596(_7596 ? _7596->raw() : nullptr, _7596 ? _7596->size(0) : 0);
  _checked_ptr_1<double> _ptr__7597(_7597 ? _7597->raw() : nullptr, _7597 ? _7597->size(0) : 0);
  if (((int)((_7596)->size(0)) != (int)((_7597)->size(0))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Mismatching array lengths"));
    }
  }
  {}
  int _12190 = (int)0;
  int _12191 = (int)((_7596)->size(0));
  for (int _7598 = _12190; _7598 < _12191; ++_7598)
  {
    {
      if (((_ptr__7596[_7598] < (int)0) || (_ptr__7596[_7598] >= _7595)))
      {
        {
          throw ::mosek::fusion::LengthError(std::string ("Invalid index in argument 'sub'"));
        }
      }
      {}
    }
  }
  std::vector<int> _12192;
  for (int _7600 = (int)0, _12193 = (int)((_7596)->size(0)); _7600 < _12193 ; ++_7600)
  {
    _12192.push_back(_ptr__7596[_7600]);
  }
  auto _12194 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_12192.size()),_12192.begin(),_12192.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _7599 = _12194;
  _checked_ptr_1<int> _ptr__7599(_7599 ? _7599->raw() : nullptr,_7599 ? _7599->size(0) : 0);
  std::vector<int> _12195;
  for (int _7602 = (int)0, _12196 = (int)((_7596)->size(0)); _7602 < _12196 ; ++_7602)
  {
    _12195.push_back((int)1);
  }
  auto _12197 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_12195.size()),_12195.begin(),_12195.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _7601 = _12197;
  _checked_ptr_1<int> _ptr__7601(_7601 ? _7601->raw() : nullptr,_7601 ? _7601->size(0) : 0);
  std::vector<double> _12198;
  for (int _7604 = (int)0, _12199 = (int)((_7597)->size(0)); _7604 < _12199 ; ++_7604)
  {
    _12198.push_back(_ptr__7597[_7604]);
  }
  auto _12200 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_12198.size()),_12198.begin(),_12198.end()));
  std::shared_ptr< monty::ndarray< double,1 > > _7603 = _12200;
  _checked_ptr_1<double> _ptr__7603(_7603 ? _7603->raw() : nullptr,_7603 ? _7603->size(0) : 0);
  return ::mosek::fusion::p_SymmetricMatrix::_new_SymmetricMatrix(_7595,(int)1,_7599,_7601,_7603,_7599,_7601,_7603,1.0);
}
monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::SymmetricMatrix::rankOne  ( std::shared_ptr< monty::ndarray< double,1 > > _7605) { return mosek::fusion::p_SymmetricMatrix::rankOne(_7605); }monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::p_SymmetricMatrix::rankOne(std::shared_ptr< monty::ndarray< double,1 > > _7605){
  _checked_ptr_1<double> _ptr__7605(_7605 ? _7605->raw() : nullptr, _7605 ? _7605->size(0) : 0);
  int _7606 = (int)((_7605)->size(0));
  std::vector<int> _12201;
  for (int _7608 = (int)0, _12202 = _7606; _7608 < _12202 ; ++_7608)
  {
    _12201.push_back(_7608);
  }
  auto _12203 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_12201.size()),_12201.begin(),_12201.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _7607 = _12203;
  _checked_ptr_1<int> _ptr__7607(_7607 ? _7607->raw() : nullptr,_7607 ? _7607->size(0) : 0);
  std::vector<int> _12204;
  for (int _7610 = (int)0, _12205 = _7606; _7610 < _12205 ; ++_7610)
  {
    _12204.push_back((int)1);
  }
  auto _12206 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_12204.size()),_12204.begin(),_12204.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _7609 = _12206;
  _checked_ptr_1<int> _ptr__7609(_7609 ? _7609->raw() : nullptr,_7609 ? _7609->size(0) : 0);
  std::vector<double> _12207;
  for (int _7612 = (int)0, _12208 = _7606; _7612 < _12208 ; ++_7612)
  {
    _12207.push_back(_ptr__7605[_7612]);
  }
  auto _12209 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_12207.size()),_12207.begin(),_12207.end()));
  std::shared_ptr< monty::ndarray< double,1 > > _7611 = _12209;
  _checked_ptr_1<double> _ptr__7611(_7611 ? _7611->raw() : nullptr,_7611 ? _7611->size(0) : 0);
  return ::mosek::fusion::p_SymmetricMatrix::_new_SymmetricMatrix(_7606,(int)1,_7607,_7609,_7611,_7607,_7609,_7611,1.0);
}
monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::SymmetricMatrix::antiDiag  ( std::shared_ptr< monty::ndarray< double,1 > > _7613) { return mosek::fusion::p_SymmetricMatrix::antiDiag(_7613); }monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::p_SymmetricMatrix::antiDiag(std::shared_ptr< monty::ndarray< double,1 > > _7613){
  _checked_ptr_1<double> _ptr__7613(_7613 ? _7613->raw() : nullptr, _7613 ? _7613->size(0) : 0);
  int _7614 = (int)((_7613)->size(0));
  std::vector<int> _12210;
  for (int _7616 = (int)0, _12211 = _7614; _7616 < _12211 ; ++_7616)
  {
    _12210.push_back(_7616);
  }
  auto _12212 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_12210.size()),_12210.begin(),_12210.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _7615 = _12212;
  _checked_ptr_1<int> _ptr__7615(_7615 ? _7615->raw() : nullptr,_7615 ? _7615->size(0) : 0);
  std::vector<int> _12213;
  for (int _7617 = (int)0, _12214 = _7614; _7617 < _12214 ; ++_7617)
  {
    _12213.push_back((_7614 - _7617));
  }
  auto _12215 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_12213.size()),_12213.begin(),_12213.end()));
  std::vector<double> _12216;
  for (int _7618 = (int)0, _12217 = _7614; _7618 < _12217 ; ++_7618)
  {
    _12216.push_back(_ptr__7613[_7618]);
  }
  auto _12218 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_12216.size()),_12216.begin(),_12216.end()));
  std::vector<double> _12219;
  for (int _7619 = (int)0, _12220 = _7614; _7619 < _12220 ; ++_7619)
  {
    _12219.push_back(1.0);
  }
  auto _12221 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_12219.size()),_12219.begin(),_12219.end()));
  return ::mosek::fusion::p_SymmetricMatrix::_new_SymmetricMatrix(_7614,_7614,_7615,_12215,_12218,_7615,_7615,_12221,1.0);
}
monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::SymmetricMatrix::diag  ( std::shared_ptr< monty::ndarray< double,1 > > _7620) { return mosek::fusion::p_SymmetricMatrix::diag(_7620); }monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::p_SymmetricMatrix::diag(std::shared_ptr< monty::ndarray< double,1 > > _7620){
  _checked_ptr_1<double> _ptr__7620(_7620 ? _7620->raw() : nullptr, _7620 ? _7620->size(0) : 0);
  int _7621 = (int)((_7620)->size(0));
  std::vector<int> _12222;
  for (int _7623 = (int)0, _12223 = _7621; _7623 < _12223 ; ++_7623)
  {
    _12222.push_back(_7623);
  }
  auto _12224 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_12222.size()),_12222.begin(),_12222.end()));
  std::shared_ptr< monty::ndarray< int,1 > > _7622 = _12224;
  _checked_ptr_1<int> _ptr__7622(_7622 ? _7622->raw() : nullptr,_7622 ? _7622->size(0) : 0);
  std::vector<double> _12225;
  for (int _7624 = (int)0, _12226 = _7621; _7624 < _12226 ; ++_7624)
  {
    _12225.push_back(_ptr__7620[_7624]);
  }
  auto _12227 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_12225.size()),_12225.begin(),_12225.end()));
  std::vector<double> _12228;
  for (int _7625 = (int)0, _12229 = _7621; _7625 < _12229 ; ++_7625)
  {
    _12228.push_back(1.0);
  }
  auto _12230 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_12228.size()),_12228.begin(),_12228.end()));
  return ::mosek::fusion::p_SymmetricMatrix::_new_SymmetricMatrix(_7621,_7621,_7622,_7622,_12227,_7622,_7622,_12230,1.0);
}
monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::SymmetricMatrix :: __mosek_2fusion_2SymmetricMatrix__add(monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _7626) { return mosek::fusion::p_SymmetricMatrix::_get_impl(this)->__mosek_2fusion_2SymmetricMatrix__add(_7626); }monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::SymmetricMatrix::add(monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _7626) { return __mosek_2fusion_2SymmetricMatrix__add(_7626); }
monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::p_SymmetricMatrix::__mosek_2fusion_2SymmetricMatrix__add(monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _7626){
  int _7627 = _pubthis->getdim();
  if ((_7626->getdim() != _7627))
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Mismatching dimensions"));
    }
  }
  {}
  int _7628 = (int)((usubi)->size(0));
  int _7629 = (int)((mosek::fusion::p_SymmetricMatrix::_get_impl(_7626)->usubi)->size(0));
  int _7630 = safe_add( _7628,_7629 );
  int _7631 = (int)((vsubi)->size(0));
  int _7632 = (int)((mosek::fusion::p_SymmetricMatrix::_get_impl(_7626)->vsubi)->size(0));
  int _7633 = safe_add( _7631,_7632 );
  std::shared_ptr< monty::ndarray< double,1 > > _7634 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7633)));
  _checked_ptr_1<double> _ptr__7634(_7634 ? _7634->raw() : nullptr,_7634 ? _7634->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _7635 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7633)));
  _checked_ptr_1<int> _ptr__7635(_7635 ? _7635->raw() : nullptr,_7635 ? _7635->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _7636 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7633)));
  _checked_ptr_1<int> _ptr__7636(_7636 ? _7636->raw() : nullptr,_7636 ? _7636->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _7637 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7630)));
  _checked_ptr_1<double> _ptr__7637(_7637 ? _7637->raw() : nullptr,_7637 ? _7637->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _7638 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7630)));
  _checked_ptr_1<int> _ptr__7638(_7638 ? _7638->raw() : nullptr,_7638 ? _7638->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _7639 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7630)));
  _checked_ptr_1<int> _ptr__7639(_7639 ? _7639->raw() : nullptr,_7639 ? _7639->size(0) : 0);
  ::mosek::fusion::Utils::Tools::arraycopy(usubi,(int)0,_7639,(int)0,_7628);
  ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SymmetricMatrix::_get_impl(_7626)->usubi,(int)0,_7639,_7628,_7629);
  ::mosek::fusion::Utils::Tools::arraycopy(usubj,(int)0,_7638,(int)0,_7628);
  int _12231 = (int)0;
  int _12232 = _7629;
  for (int _7640 = _12231; _7640 < _12232; ++_7640)
  {
    {
      _ptr__7638[safe_add( _7640,_7628 )] = safe_add( ((*mosek::fusion::p_SymmetricMatrix::_get_impl(_7626)->usubj)(_7640)),d1 );
    }
  }
  if (((scale > 1.0) || (scale < 1.0)))
  {
    {
      ::mosek::fusion::Utils::Tools::arraycopy(uval,(int)0,_7637,(int)0,_7628);
    }
  }
  else
  {
    {
      int _12233 = (int)0;
      int _12234 = _7628;
      for (int _7641 = _12233; _7641 < _12234; ++_7641)
      {
        {
          _ptr__7637[_7641] = (scale * ((*uval)(_7641)));
        }
      }
    }
  }
  if (((mosek::fusion::p_SymmetricMatrix::_get_impl(_7626)->scale > 1.0) || (mosek::fusion::p_SymmetricMatrix::_get_impl(_7626)->scale < 1.0)))
  {
    {
      ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SymmetricMatrix::_get_impl(_7626)->uval,(int)0,_7637,_7628,_7629);
    }
  }
  else
  {
    {
      int _12235 = (int)0;
      int _12236 = _7629;
      for (int _7642 = _12235; _7642 < _12236; ++_7642)
      {
        {
          _ptr__7637[safe_add( _7642,_7628 )] = (mosek::fusion::p_SymmetricMatrix::_get_impl(_7626)->scale * ((*mosek::fusion::p_SymmetricMatrix::_get_impl(_7626)->uval)(_7642)));
        }
      }
    }
  }
  ::mosek::fusion::Utils::Tools::arraycopy(usubi,(int)0,_7639,(int)0,_7628);
  int _12237 = (int)0;
  int _12238 = _7632;
  for (int _7643 = _12237; _7643 < _12238; ++_7643)
  {
    {
      _ptr__7636[safe_add( _7643,_7631 )] = safe_add( ((*mosek::fusion::p_SymmetricMatrix::_get_impl(_7626)->vsubi)(_7643)),mosek::fusion::p_SymmetricMatrix::_get_impl(_7626)->d1 );
    }
  }
  ::mosek::fusion::Utils::Tools::arraycopy(vsubj,(int)0,_7635,(int)0,_7631);
  ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SymmetricMatrix::_get_impl(_7626)->vsubj,_7631,_7635,_7631,_7632);
  if (((scale > 1.0) || (scale < 1.0)))
  {
    {
      ::mosek::fusion::Utils::Tools::arraycopy(vval,(int)0,_7634,(int)0,_7631);
    }
  }
  else
  {
    {
      int _12239 = (int)0;
      int _12240 = _7631;
      for (int _7644 = _12239; _7644 < _12240; ++_7644)
      {
        {
          _ptr__7634[_7644] = (scale * ((*vval)(_7644)));
        }
      }
    }
  }
  if (((mosek::fusion::p_SymmetricMatrix::_get_impl(_7626)->scale > 1.0) || (mosek::fusion::p_SymmetricMatrix::_get_impl(_7626)->scale < 1.0)))
  {
    {
      ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_SymmetricMatrix::_get_impl(_7626)->vval,(int)0,_7634,_7631,_7632);
    }
  }
  else
  {
    {
      int _12241 = (int)0;
      int _12242 = _7632;
      for (int _7645 = _12241; _7645 < _12242; ++_7645)
      {
        {
          _ptr__7634[safe_add( _7645,_7631 )] = (mosek::fusion::p_SymmetricMatrix::_get_impl(_7626)->scale * ((*mosek::fusion::p_SymmetricMatrix::_get_impl(_7626)->vval)(_7645)));
        }
      }
    }
  }
  return ::mosek::fusion::p_SymmetricMatrix::_new_SymmetricMatrix(d0,safe_add( d1,mosek::fusion::p_SymmetricMatrix::_get_impl(_7626)->d1 ),_7639,_7638,_7637,_7636,_7635,_7634,1.0);
}
monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::SymmetricMatrix :: __mosek_2fusion_2SymmetricMatrix__sub(monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _7646) { return mosek::fusion::p_SymmetricMatrix::_get_impl(this)->__mosek_2fusion_2SymmetricMatrix__sub(_7646); }monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::SymmetricMatrix::sub(monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _7646) { return __mosek_2fusion_2SymmetricMatrix__sub(_7646); }
monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::p_SymmetricMatrix::__mosek_2fusion_2SymmetricMatrix__sub(monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > _7646){
  return _pubthis->__mosek_2fusion_2SymmetricMatrix__add(_7646->__mosek_2fusion_2SymmetricMatrix__mul((-1.0)));
}
monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::SymmetricMatrix :: __mosek_2fusion_2SymmetricMatrix__mul(double _7647) { return mosek::fusion::p_SymmetricMatrix::_get_impl(this)->__mosek_2fusion_2SymmetricMatrix__mul(_7647); }monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::SymmetricMatrix::mul(double _7647) { return __mosek_2fusion_2SymmetricMatrix__mul(_7647); }
monty::rc_ptr< ::mosek::fusion::SymmetricMatrix > mosek::fusion::p_SymmetricMatrix::__mosek_2fusion_2SymmetricMatrix__mul(double _7647){
  return ::mosek::fusion::p_SymmetricMatrix::_new_SymmetricMatrix(d0,d1,usubi,usubj,uval,vsubi,vsubj,vval,(scale * _7647));
}
int mosek::fusion::SymmetricMatrix :: getdim() { return mosek::fusion::p_SymmetricMatrix::_get_impl(this)->getdim(); }int mosek::fusion::p_SymmetricMatrix::getdim(){
  return d0;
}
void mosek::fusion::p_SymmetricMatrix::destroy(){vval.reset();vsubj.reset();vsubi.reset();uval.reset();usubj.reset();usubi.reset();}void mosek::fusion::SymmetricMatrix::destroy() { mosek::fusion::p_SymmetricMatrix::_get_impl(this)->destroy(); }mosek::fusion::NDSparseArray::NDSparseArray(mosek::fusion::p_NDSparseArray *_impl) : _impl(_impl) { /*std::cout << "NDSparseArray() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::NDSparseArray::~NDSparseArray() { delete _impl; _impl = nullptr; }mosek::fusion::p_NDSparseArray::p_NDSparseArray  (::mosek::fusion::NDSparseArray * _pubthis) :     _pubthis(_pubthis){}mosek::fusion::NDSparseArray::t mosek::fusion::p_NDSparseArray::_new_NDSparseArray  (std::shared_ptr< monty::ndarray< int,1 > > _7648,    std::shared_ptr< monty::ndarray< int,2 > > _7649,    std::shared_ptr< monty::ndarray< double,1 > > _7650){ return new mosek::fusion::NDSparseArray(_7648,_7649,_7650); }mosek::fusion::NDSparseArray::NDSparseArray  (std::shared_ptr< monty::ndarray< int,1 > > _7648,    std::shared_ptr< monty::ndarray< int,2 > > _7649,    std::shared_ptr< monty::ndarray< double,1 > > _7650) :    NDSparseArray(new mosek::fusion::p_NDSparseArray(this)){ mosek::fusion::p_NDSparseArray::_get_impl(this)->_initialize(_7648,_7649,_7650); }void mosek::fusion::p_NDSparseArray::_initialize  (std::shared_ptr< monty::ndarray< int,1 > > _7648,    std::shared_ptr< monty::ndarray< int,2 > > _7649,    std::shared_ptr< monty::ndarray< double,1 > > _7650){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__7648(_7648 ? _7648->raw() : nullptr, _7648 ? _7648->size(0) : 0);
    _checked_ptr_1<double> _ptr__7650(_7650 ? _7650->raw() : nullptr, _7650 ? _7650->size(0) : 0);
    std::shared_ptr< monty::ndarray< long long,1 > > _7651 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape((int)((_7649)->size(0)))));
    _checked_ptr_1<long long> _ptr__7651(_7651 ? _7651->raw() : nullptr,_7651 ? _7651->size(0) : 0);
    size = (long long)1;
    int _12243 = (int)0;
    int _12244 = (int)((_7648)->size(0));
    for (int _7652 = _12243; _7652 < _12244; ++_7652)
    {
      {
        size = safe_mul( size,_ptr__7648[_7652] );
      }
    }
    int _7653 = (int)((_7648)->size(0));
    if (((int)((_7649)->size(0)) != (int)((_7650)->size(0))))
    {
      {
        throw ::mosek::fusion::LengthError(std::string ("Mismatching data array length"));
      }
    }
    {}
    if (((int)((_7649)->size(1)) != _7653))
    {
      {
        throw ::mosek::fusion::IndexError(std::string ("An index key in sub has wrong length"));
      }
    }
    {}
    bool _7654 = false;
    int _12245 = (int)0;
    int _12246 = (int)((_7649)->size(0));
    for (int _7655 = _12245; _7655 < _12246; ++_7655)
    {
      {
        int _12247 = (int)0;
        int _12248 = (int)((_7649)->size(1));
        for (int _7656 = _12247; _7656 < _12248; ++_7656)
        {
          {
            if (((((*_7649)(_7655,_7656)) < (int)0) || (((*_7649)(_7655,_7656)) >= _ptr__7648[_7656])))
            {
              {
                _7654 = true;
              }
            }
            {}
          }
        }
      }
    }
    if (_7654)
    {
      {
        throw ::mosek::fusion::IndexError(std::string ("An index in sub is out of bounds"));
      }
    }
    {}
    int _12249 = (int)0;
    int _12250 = (int)((_7649)->size(0));
    for (int _7657 = _12249; _7657 < _12250; ++_7657)
    {
      {
        long long _7658 = (long long)0;
        int _12251 = (int)0;
        int _12252 = (int)((_7649)->size(1));
        for (int _7659 = _12251; _7659 < _12252; ++_7659)
        {
          {
            _7658 = safe_add( safe_mul( _7658,_ptr__7648[_7659] ),((*_7649)(_7657,_7659)) );
          }
        }
        _ptr__7651[_7657] = _7658;
      }
    }
    dims = ::mosek::fusion::Utils::Tools::arraycopy(_7648);
    bool _7660 = true;
    int _12253 = (int)1;
    int _12254 = (int)((_7651)->size(0));
    for (int _7661 = _12253; _7661 < _12254; ++_7661)
    {
      {
        _7660 = (_7660 && (_ptr__7651[_7661] >= _ptr__7651[(_7661 - (int)1)]));
      }
    }
    if (_7660)
    {
      {
        int _7662 = (int)1;
        int _12255 = (int)1;
        int _12256 = (int)((_7651)->size(0));
        for (int _7663 = _12255; _7663 < _12256; ++_7663)
        {
          {
            if ((_ptr__7651[(_7663 - (int)1)] < _ptr__7651[_7663]))
            {
              {
                ++ _7662;
              }
            }
            {}
          }
        }
        if ((_7662 == (int)((_7651)->size(0))))
        {
          {
            inst = ::mosek::fusion::Utils::Tools::arraycopy(_7651);
            cof = ::mosek::fusion::Utils::Tools::arraycopy(_7650);
          }
        }
        else
        {
          {
            inst = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7662)));
            ((*inst)((int)0)) = _ptr__7651[(int)0];
            cof = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7662)));
            ((*cof)((int)0)) = _ptr__7650[(int)0];
            int _7664 = (int)0;
            int _12257 = (int)1;
            int _12258 = (int)((_7651)->size(0));
            for (int _7665 = _12257; _7665 < _12258; ++_7665)
            {
              {
                if ((_ptr__7651[_7665] > _ptr__7651[(_7665 - (int)1)]))
                {
                  {
                    ++ _7664;
                    ((*inst)(_7664)) = _ptr__7651[_7665];
                    ((*cof)(_7664)) = _ptr__7650[_7665];
                  }
                }
                else
                {
                  {
                    ((*cof)(_7664)) = (((*cof)(_7664)) + _ptr__7650[_7665]);
                  }
                }
              }
            }
          }
        }
      }
    }
    else
    {
      {
        std::shared_ptr< monty::ndarray< long long,1 > > _7666 = ::mosek::fusion::Utils::Tools::range((long long)((_7651)->size(0)));
        _checked_ptr_1<long long> _ptr__7666(_7666 ? _7666->raw() : nullptr,_7666 ? _7666->size(0) : 0);
        ::mosek::fusion::p_CommonTools::argQsort(_7666,_7651,std::shared_ptr< monty::ndarray< long long,1 > >(nullptr),(long long)0,(long long)((_7651)->size(0)));
        int _7667 = (int)1;
        int _12259 = (int)1;
        int _12260 = (int)((_7651)->size(0));
        for (int _7668 = _12259; _7668 < _12260; ++_7668)
        {
          {
            if ((_ptr__7651[_ptr__7666[(_7668 - (int)1)]] < _ptr__7651[_ptr__7666[_7668]]))
            {
              {
                ++ _7667;
              }
            }
            {}
          }
        }
        inst = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7667)));
        ((*inst)((int)0)) = _ptr__7651[_ptr__7666[(int)0]];
        cof = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7667)));
        ((*cof)((int)0)) = _ptr__7650[_ptr__7666[(int)0]];
        int _7669 = (int)0;
        int _12261 = (int)1;
        int _12262 = (int)((_7651)->size(0));
        for (int _7670 = _12261; _7670 < _12262; ++_7670)
        {
          {
            if ((_ptr__7651[_ptr__7666[_7670]] > _ptr__7651[_ptr__7666[(_7670 - (int)1)]]))
            {
              {
                ++ _7669;
                ((*inst)(_7669)) = _ptr__7651[_ptr__7666[_7670]];
                ((*cof)(_7669)) = _ptr__7650[_ptr__7666[_7670]];
              }
            }
            else
            {
              {
                ((*cof)(_7669)) = (((*cof)(_7669)) + _ptr__7650[_ptr__7666[_7670]]);
              }
            }
          }
        }
      }
    }
  }
}mosek::fusion::NDSparseArray::t mosek::fusion::p_NDSparseArray::_new_NDSparseArray  (std::shared_ptr< monty::ndarray< int,1 > > _7671,    std::shared_ptr< monty::ndarray< long long,1 > > _7672,    std::shared_ptr< monty::ndarray< double,1 > > _7673){ return new mosek::fusion::NDSparseArray(_7671,_7672,_7673); }mosek::fusion::NDSparseArray::NDSparseArray  (std::shared_ptr< monty::ndarray< int,1 > > _7671,    std::shared_ptr< monty::ndarray< long long,1 > > _7672,    std::shared_ptr< monty::ndarray< double,1 > > _7673) :    NDSparseArray(new mosek::fusion::p_NDSparseArray(this)){ mosek::fusion::p_NDSparseArray::_get_impl(this)->_initialize(_7671,_7672,_7673); }void mosek::fusion::p_NDSparseArray::_initialize  (std::shared_ptr< monty::ndarray< int,1 > > _7671,    std::shared_ptr< monty::ndarray< long long,1 > > _7672,    std::shared_ptr< monty::ndarray< double,1 > > _7673){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__7671(_7671 ? _7671->raw() : nullptr, _7671 ? _7671->size(0) : 0);
    _checked_ptr_1<long long> _ptr__7672(_7672 ? _7672->raw() : nullptr, _7672 ? _7672->size(0) : 0);
    _checked_ptr_1<double> _ptr__7673(_7673 ? _7673->raw() : nullptr, _7673 ? _7673->size(0) : 0);
    size = (long long)1;
    int _12263 = (int)0;
    int _12264 = (int)((_7671)->size(0));
    for (int _7674 = _12263; _7674 < _12264; ++_7674)
    {
      {
        size = safe_mul( size,_ptr__7671[_7674] );
      }
    }
    int _7675 = (int)((_7672)->size(0));
    if ((_7675 != (int)((_7673)->size(0))))
    {
      {
        throw ::mosek::fusion::LengthError(std::string ("Mismatching data array length"));
      }
    }
    {}
    {
      bool _7676 = false;
      int _12265 = (int)0;
      int _12266 = _7675;
      for (int _7677 = _12265; _7677 < _12266; ++_7677)
      {
        {
          _7676 = (_7676 || ((_ptr__7672[_7677] < (int)0) || (_ptr__7672[_7677] >= size)));
        }
      }
      if (_7676)
      {
        {
          throw ::mosek::fusion::IndexError(std::string ("An index in inst is out of bounds"));
        }
      }
      {}
    }
    dims = ::mosek::fusion::Utils::Tools::arraycopy(_7671);
    bool _7678 = true;
    int _12267 = (int)1;
    int _12268 = (int)((_7672)->size(0));
    for (int _7679 = _12267; _7679 < _12268; ++_7679)
    {
      {
        _7678 = (_7678 && (_ptr__7672[_7679] >= _ptr__7672[(_7679 - (int)1)]));
      }
    }
    if (_7678)
    {
      {
        int _7680 = (int)1;
        int _12269 = (int)1;
        int _12270 = (int)((_7672)->size(0));
        for (int _7681 = _12269; _7681 < _12270; ++_7681)
        {
          {
            if ((_ptr__7672[(_7681 - (int)1)] < _ptr__7672[_7681]))
            {
              {
                ++ _7680;
              }
            }
            {}
          }
        }
        if ((_7680 == (int)((_7672)->size(0))))
        {
          {
            inst = ::mosek::fusion::Utils::Tools::arraycopy(_7672);
            cof = ::mosek::fusion::Utils::Tools::arraycopy(_7673);
          }
        }
        else
        {
          {
            inst = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7680)));
            ((*inst)((int)0)) = _ptr__7672[(int)0];
            cof = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7680)));
            ((*cof)((int)0)) = _ptr__7673[(int)0];
            int _7682 = (int)0;
            int _12271 = (int)1;
            int _12272 = (int)((_7672)->size(0));
            for (int _7683 = _12271; _7683 < _12272; ++_7683)
            {
              {
                if ((_ptr__7672[_7683] > _ptr__7672[(_7683 - (int)1)]))
                {
                  {
                    ++ _7682;
                    ((*inst)(_7682)) = _ptr__7672[_7683];
                    ((*cof)(_7682)) = _ptr__7673[_7683];
                  }
                }
                else
                {
                  {
                    ((*cof)(_7682)) = (((*cof)(_7682)) + _ptr__7673[_7683]);
                  }
                }
              }
            }
          }
        }
      }
    }
    else
    {
      {
        std::shared_ptr< monty::ndarray< long long,1 > > _7684 = ::mosek::fusion::Utils::Tools::range((long long)((_7672)->size(0)));
        _checked_ptr_1<long long> _ptr__7684(_7684 ? _7684->raw() : nullptr,_7684 ? _7684->size(0) : 0);
        ::mosek::fusion::p_CommonTools::argQsort(_7684,_7672,std::shared_ptr< monty::ndarray< long long,1 > >(nullptr),(long long)0,(long long)((_7672)->size(0)));
        int _7685 = (int)1;
        int _12273 = (int)1;
        int _12274 = (int)((_7672)->size(0));
        for (int _7686 = _12273; _7686 < _12274; ++_7686)
        {
          {
            if ((_ptr__7672[_ptr__7684[(_7686 - (int)1)]] < _ptr__7672[_ptr__7684[_7686]]))
            {
              {
                ++ _7685;
              }
            }
            {}
          }
        }
        inst = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_7685)));
        ((*inst)((int)0)) = _ptr__7672[_ptr__7684[(int)0]];
        cof = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7685)));
        ((*cof)((int)0)) = _ptr__7673[_ptr__7684[(int)0]];
        int _7687 = (int)0;
        int _12275 = (int)1;
        int _12276 = (int)((_7672)->size(0));
        for (int _7688 = _12275; _7688 < _12276; ++_7688)
        {
          {
            if ((_ptr__7672[_ptr__7684[_7688]] > ((*inst)(_ptr__7684[(_7688 - (int)1)]))))
            {
              {
                ++ _7687;
                ((*inst)(_7687)) = _ptr__7672[_ptr__7684[_7688]];
                ((*cof)(_7687)) = _ptr__7673[_ptr__7684[_7688]];
              }
            }
            else
            {
              {
                ((*cof)(_7687)) = (((*cof)(_7687)) + _ptr__7673[_ptr__7684[_7688]]);
              }
            }
          }
        }
      }
    }
  }
}mosek::fusion::NDSparseArray::t mosek::fusion::p_NDSparseArray::_new_NDSparseArray  (monty::rc_ptr< ::mosek::fusion::Matrix > _7689){ return new mosek::fusion::NDSparseArray(_7689); }mosek::fusion::NDSparseArray::NDSparseArray  (monty::rc_ptr< ::mosek::fusion::Matrix > _7689) :    NDSparseArray(new mosek::fusion::p_NDSparseArray(this)){ mosek::fusion::p_NDSparseArray::_get_impl(this)->_initialize(_7689); }void mosek::fusion::p_NDSparseArray::_initialize  (monty::rc_ptr< ::mosek::fusion::Matrix > _7689){monty::rc_reserve __reserve_this(_pubthis);   {
    long long _7690 = _7689->numNonzeros();
    int _7691 = _7689->numColumns();
    int _7692 = _7689->numRows();
    std::shared_ptr< monty::ndarray< double,1 > > _7693 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7690)));
    _checked_ptr_1<double> _ptr__7693(_7693 ? _7693->raw() : nullptr,_7693 ? _7693->size(0) : 0);
    std::shared_ptr< monty::ndarray< int,1 > > _7694 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7690)));
    _checked_ptr_1<int> _ptr__7694(_7694 ? _7694->raw() : nullptr,_7694 ? _7694->size(0) : 0);
    std::shared_ptr< monty::ndarray< int,1 > > _7695 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7690)));
    _checked_ptr_1<int> _ptr__7695(_7695 ? _7695->raw() : nullptr,_7695 ? _7695->size(0) : 0);
    _7689->getDataAsTriplets(_7695,_7694,_7693);
    size = safe_mul( (long long)_7689->numRows(),(long long)_7689->numColumns() );
    dims = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >{(int)(_7692),(int)(_7691)});
    std::vector<long long> _12277;
    for (long long _7696 = (long long)0, _12278 = _7690; _7696 < _12278 ; ++_7696)
    {
      _12277.push_back(safe_add( safe_mul( (long long)_ptr__7695[_7696],_7691 ),(long long)_ptr__7694[_7696] ));
    }
    auto _12279 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(_12277.size()),_12277.begin(),_12277.end()));
    inst = _12279;
    cof = _7693;
  }
}monty::rc_ptr< ::mosek::fusion::NDSparseArray > mosek::fusion::NDSparseArray::make  ( monty::rc_ptr< ::mosek::fusion::Matrix > _7697) { return mosek::fusion::p_NDSparseArray::make(_7697); }monty::rc_ptr< ::mosek::fusion::NDSparseArray > mosek::fusion::p_NDSparseArray::make(monty::rc_ptr< ::mosek::fusion::Matrix > _7697){
  return ::mosek::fusion::p_NDSparseArray::_new_NDSparseArray(_7697);
}
monty::rc_ptr< ::mosek::fusion::NDSparseArray > mosek::fusion::NDSparseArray::make  ( std::shared_ptr< monty::ndarray< int,1 > > _7698,    std::shared_ptr< monty::ndarray< long long,1 > > _7699,    std::shared_ptr< monty::ndarray< double,1 > > _7700) { return mosek::fusion::p_NDSparseArray::make(_7698,_7699,_7700); }monty::rc_ptr< ::mosek::fusion::NDSparseArray > mosek::fusion::p_NDSparseArray::make(std::shared_ptr< monty::ndarray< int,1 > > _7698,std::shared_ptr< monty::ndarray< long long,1 > > _7699,std::shared_ptr< monty::ndarray< double,1 > > _7700){
  _checked_ptr_1<int> _ptr__7698(_7698 ? _7698->raw() : nullptr, _7698 ? _7698->size(0) : 0);
  _checked_ptr_1<long long> _ptr__7699(_7699 ? _7699->raw() : nullptr, _7699 ? _7699->size(0) : 0);
  _checked_ptr_1<double> _ptr__7700(_7700 ? _7700->raw() : nullptr, _7700 ? _7700->size(0) : 0);
  return ::mosek::fusion::p_NDSparseArray::_new_NDSparseArray(_7698,_7699,_7700);
}
monty::rc_ptr< ::mosek::fusion::NDSparseArray > mosek::fusion::NDSparseArray::make  ( std::shared_ptr< monty::ndarray< int,1 > > _7701,    std::shared_ptr< monty::ndarray< int,2 > > _7702,    std::shared_ptr< monty::ndarray< double,1 > > _7703) { return mosek::fusion::p_NDSparseArray::make(_7701,_7702,_7703); }monty::rc_ptr< ::mosek::fusion::NDSparseArray > mosek::fusion::p_NDSparseArray::make(std::shared_ptr< monty::ndarray< int,1 > > _7701,std::shared_ptr< monty::ndarray< int,2 > > _7702,std::shared_ptr< monty::ndarray< double,1 > > _7703){
  _checked_ptr_1<int> _ptr__7701(_7701 ? _7701->raw() : nullptr, _7701 ? _7701->size(0) : 0);
  _checked_ptr_1<double> _ptr__7703(_7703 ? _7703->raw() : nullptr, _7703 ? _7703->size(0) : 0);
  return ::mosek::fusion::p_NDSparseArray::_new_NDSparseArray(_7701,_7702,_7703);
}
void mosek::fusion::p_NDSparseArray::destroy(){cof.reset();inst.reset();dims.reset();}void mosek::fusion::NDSparseArray::destroy() { mosek::fusion::p_NDSparseArray::_get_impl(this)->destroy(); }mosek::fusion::DenseMatrix::DenseMatrix(mosek::fusion::p_DenseMatrix *_impl) : mosek::fusion::Matrix(_impl) { /*std::cout << "DenseMatrix()" << this << std::endl; */ }mosek::fusion::DenseMatrix::~DenseMatrix() {  /* std::cout << "~DenseMatrix()" << this << std::endl << std::flush; */ }mosek::fusion::p_DenseMatrix::p_DenseMatrix  (::mosek::fusion::DenseMatrix * _pubthis) :     mosek::fusion::p_Matrix(_pubthis),    _pubthis(_pubthis){}mosek::fusion::DenseMatrix::t mosek::fusion::p_DenseMatrix::_new_DenseMatrix  (int _7704,    int _7705,    std::shared_ptr< monty::ndarray< double,1 > > _7706){ return new mosek::fusion::DenseMatrix(_7704,_7705,_7706); }mosek::fusion::DenseMatrix::DenseMatrix  (int _7704,    int _7705,    std::shared_ptr< monty::ndarray< double,1 > > _7706) :    DenseMatrix(new mosek::fusion::p_DenseMatrix(this)){ mosek::fusion::p_DenseMatrix::_get_impl(this)->_initialize(_7704,_7705,_7706); }void mosek::fusion::p_DenseMatrix::_initialize  (int _7704,    int _7705,    std::shared_ptr< monty::ndarray< double,1 > > _7706){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<double> _ptr__7706(_7706 ? _7706->raw() : nullptr, _7706 ? _7706->size(0) : 0);
    mosek::fusion::p_Matrix::_initialize(_7704,_7705);
    nnz = (long long)safe_mul( _7704,_7705 );
    data = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(safe_mul( _7704,_7705 ))));
    ::mosek::fusion::Utils::Tools::arraycopy(_7706,(int)0,data,(int)0,safe_mul( _7704,_7705 ));
  }
}mosek::fusion::DenseMatrix::t mosek::fusion::p_DenseMatrix::_new_DenseMatrix  (monty::rc_ptr< ::mosek::fusion::Matrix > _7707){ return new mosek::fusion::DenseMatrix(_7707); }mosek::fusion::DenseMatrix::DenseMatrix  (monty::rc_ptr< ::mosek::fusion::Matrix > _7707) :    DenseMatrix(new mosek::fusion::p_DenseMatrix(this)){ mosek::fusion::p_DenseMatrix::_get_impl(this)->_initialize(_7707); }void mosek::fusion::p_DenseMatrix::_initialize  (monty::rc_ptr< ::mosek::fusion::Matrix > _7707){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_Matrix::_initialize(mosek::fusion::p_Matrix::_get_impl(_7707)->dimi,mosek::fusion::p_Matrix::_get_impl(_7707)->dimj);
    monty::rc_ptr< ::mosek::fusion::Matrix > _12280 = _7707;
    if (false) {}
    else if (nullptr != dynamic_cast<::mosek::fusion::DenseMatrix*>(_12280.get()))
    {
      ::mosek::fusion::DenseMatrix::t _7708 (dynamic_cast<::mosek::fusion::DenseMatrix*>(_12280.get()));
      {
        data = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_DenseMatrix::_get_impl(_7708)->data);
      }
    }
    else if (nullptr != dynamic_cast<::mosek::fusion::SparseMatrix*>(_12280.get()))
    {
      ::mosek::fusion::SparseMatrix::t _7709 (dynamic_cast<::mosek::fusion::SparseMatrix*>(_12280.get()));
      {
        data = ::mosek::fusion::Utils::Tools::zeros(safe_mul( mosek::fusion::p_Matrix::_get_impl(_7709)->dimi,mosek::fusion::p_Matrix::_get_impl(_7709)->dimj ));
        long long _12281 = (long long)0;
        long long _12282 = mosek::fusion::p_SparseMatrix::_get_impl(_7709)->nnz;
        for (long long _7711 = _12281; _7711 < _12282; ++_7711)
        {
          {
            ((*data)(safe_add( safe_mul( ((*mosek::fusion::p_SparseMatrix::_get_impl(_7709)->subi)(_7711)),dimj ),((*mosek::fusion::p_SparseMatrix::_get_impl(_7709)->subj)(_7711)) ))) = ((*mosek::fusion::p_SparseMatrix::_get_impl(_7709)->val)(_7711));
          }
        }
      }
    }
    else
    {
      mosek::fusion::Matrix::t _7710 = _12280;
      {
        throw ::mosek::fusion::MatrixError(std::string ("Unknown matrix type."));
      }
    }
    nnz = (long long)safe_mul( dimi,dimj );
  }
}mosek::fusion::DenseMatrix::t mosek::fusion::p_DenseMatrix::_new_DenseMatrix  (std::shared_ptr< monty::ndarray< double,2 > > _7712){ return new mosek::fusion::DenseMatrix(_7712); }mosek::fusion::DenseMatrix::DenseMatrix  (std::shared_ptr< monty::ndarray< double,2 > > _7712) :    DenseMatrix(new mosek::fusion::p_DenseMatrix(this)){ mosek::fusion::p_DenseMatrix::_get_impl(this)->_initialize(_7712); }void mosek::fusion::p_DenseMatrix::_initialize  (std::shared_ptr< monty::ndarray< double,2 > > _7712){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_Matrix::_initialize((int)((_7712)->size(0)),(int)((_7712)->size(1)));
    std::vector<double> _12283;
    for (int _7713 = (int)0, _12284 = dimi; _7713 < _12284 ; ++_7713)
    {
      for (int _7714 = (int)0, _12285 = dimj; _7714 < _12285 ; ++_7714)
      {
        _12283.push_back(((*_7712)(_7713,_7714)));
      }
    }
    auto _12286 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_12283.size()),_12283.begin(),_12283.end()));
    data = _12286;
    nnz = (long long)safe_mul( dimi,dimj );
  }
}mosek::fusion::DenseMatrix::t mosek::fusion::p_DenseMatrix::_new_DenseMatrix  (int _7715,    int _7716,    double _7717){ return new mosek::fusion::DenseMatrix(_7715,_7716,_7717); }mosek::fusion::DenseMatrix::DenseMatrix  (int _7715,    int _7716,    double _7717) :    DenseMatrix(new mosek::fusion::p_DenseMatrix(this)){ mosek::fusion::p_DenseMatrix::_get_impl(this)->_initialize(_7715,_7716,_7717); }void mosek::fusion::p_DenseMatrix::_initialize  (int _7715,    int _7716,    double _7717){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_Matrix::_initialize(_7715,_7716);
    std::vector<double> _12287;
    for (int _7718 = (int)0, _12288 = _7715; _7718 < _12288 ; ++_7718)
    {
      for (int _7719 = (int)0, _12289 = _7716; _7719 < _12289 ; ++_7719)
      {
        _12287.push_back(_7717);
      }
    }
    auto _12290 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_12287.size()),_12287.begin(),_12287.end()));
    data = _12290;
    nnz = (long long)safe_mul( _7715,_7716 );
  }
}std::string mosek::fusion::DenseMatrix :: toString() { return mosek::fusion::p_DenseMatrix::_get_impl(this)->toString(); }std::string mosek::fusion::p_DenseMatrix::toString(){
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _7720 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  _7720->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("DenseMatrix("));
  _7720->__mosek_2fusion_2Utils_2StringBuffer__a(dimi);
  _7720->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","));
  _7720->__mosek_2fusion_2Utils_2StringBuffer__a(dimj);
  _7720->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (": "));
  int _7721 = (int)0;
  {
    int _7722 = (int)0;
    for(;(_7722 < dimi);++ _7722)
    {
      {
        if ((_7722 > (int)0))
        {
          {
            _7720->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","));
          }
        }
        {}
        _7720->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("[ "));
        _7720->__mosek_2fusion_2Utils_2StringBuffer__a(((*data)(_7721)));
        ++ _7721;
        {
          int _7723 = (int)1;
          for(;(_7723 < dimj);++ _7723)
          {
            {
              _7720->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","));
              _7720->__mosek_2fusion_2Utils_2StringBuffer__a(((*data)(_7721)));
              ++ _7721;
            }
          }
        }
        _7720->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (" ]"));
      }
    }
  }
  _7720->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"));
  return _7720->toString();
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::DenseMatrix :: __mosek_2fusion_2DenseMatrix__transpose() { return mosek::fusion::p_DenseMatrix::_get_impl(this)->__mosek_2fusion_2DenseMatrix__transpose(); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::DenseMatrix::transpose() { return __mosek_2fusion_2DenseMatrix__transpose(); }
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::DenseMatrix::__mosek_2fusion_2Matrix__transpose() { return __mosek_2fusion_2DenseMatrix__transpose(); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_DenseMatrix::__mosek_2fusion_2DenseMatrix__transpose(){
  std::shared_ptr< monty::ndarray< double,1 > > _7724 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(safe_mul( dimi,dimj ))));
  _checked_ptr_1<double> _ptr__7724(_7724 ? _7724->raw() : nullptr,_7724 ? _7724->size(0) : 0);
  int _7725 = (int)0;
  int _7726 = dimi;
  int _12291 = (int)0;
  int _12292 = dimi;
  for (int _7727 = _12291; _7727 < _12292; ++_7727)
  {
    {
      int _7728 = _7727;
      int _12293 = (int)0;
      int _12294 = dimj;
      for (int _7729 = _12293; _7729 < _12294; ++_7729)
      {
        {
          _ptr__7724[_7728] = ((*data)(_7725));
          _7728 = safe_add( _7728,_7726 );
          ++ _7725;
        }
      }
    }
  }
  return (::mosek::fusion::p_DenseMatrix::_new_DenseMatrix(dimj,dimi,_7724)).as<::mosek::fusion::Matrix>();
}
bool mosek::fusion::DenseMatrix :: isSparse() { return mosek::fusion::p_DenseMatrix::_get_impl(this)->isSparse(); }bool mosek::fusion::p_DenseMatrix::isSparse(){
  return false;
}
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::DenseMatrix :: getDataAsArray() { return mosek::fusion::p_DenseMatrix::_get_impl(this)->getDataAsArray(); }std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_DenseMatrix::getDataAsArray(){
  return ::mosek::fusion::Utils::Tools::arraycopy(data);
}
void mosek::fusion::DenseMatrix :: getDataAsTriplets(std::shared_ptr< monty::ndarray< int,1 > > _7730,std::shared_ptr< monty::ndarray< int,1 > > _7731,std::shared_ptr< monty::ndarray< double,1 > > _7732) { mosek::fusion::p_DenseMatrix::_get_impl(this)->getDataAsTriplets(_7730,_7731,_7732); }void mosek::fusion::p_DenseMatrix::getDataAsTriplets(std::shared_ptr< monty::ndarray< int,1 > > _7730,std::shared_ptr< monty::ndarray< int,1 > > _7731,std::shared_ptr< monty::ndarray< double,1 > > _7732){
  _checked_ptr_1<int> _ptr__7730(_7730 ? _7730->raw() : nullptr, _7730 ? _7730->size(0) : 0);
  _checked_ptr_1<int> _ptr__7731(_7731 ? _7731->raw() : nullptr, _7731 ? _7731->size(0) : 0);
  _checked_ptr_1<double> _ptr__7732(_7732 ? _7732->raw() : nullptr, _7732 ? _7732->size(0) : 0);
  if ((((int)((_7730)->size(0)) < nnz) || (((int)((_7731)->size(0)) < nnz) || ((int)((_7732)->size(0)) < nnz))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Output arrays are not long enough."));
    }
  }
  {}
  ::mosek::fusion::Utils::Tools::arraycopy(data,(int)0,_7732,(int)0,(int)((data)->size(0)));
  int _7733 = (int)0;
  int _12295 = (int)0;
  int _12296 = dimi;
  for (int _7734 = _12295; _7734 < _12296; ++_7734)
  {
    {
      int _12297 = (int)0;
      int _12298 = dimj;
      for (int _7735 = _12297; _7735 < _12298; ++_7735)
      {
        {
          _ptr__7730[_7733] = _7734;
          _ptr__7731[_7733] = _7735;
          ++ _7733;
        }
      }
    }
  }
}
double mosek::fusion::DenseMatrix :: get(int _7736,int _7737) { return mosek::fusion::p_DenseMatrix::_get_impl(this)->get(_7736,_7737); }double mosek::fusion::p_DenseMatrix::get(int _7736,int _7737){
  return ((*data)(safe_add( safe_mul( _7736,dimj ),_7737 )));
}
long long mosek::fusion::DenseMatrix :: numNonzeros() { return mosek::fusion::p_DenseMatrix::_get_impl(this)->numNonzeros(); }long long mosek::fusion::p_DenseMatrix::numNonzeros(){
  return (long long)safe_mul( dimi,dimj );
}
void mosek::fusion::p_DenseMatrix::destroy(){data.reset();}void mosek::fusion::DenseMatrix::destroy() { mosek::fusion::p_DenseMatrix::_get_impl(this)->destroy(); }mosek::fusion::SparseMatrix::SparseMatrix(mosek::fusion::p_SparseMatrix *_impl) : mosek::fusion::Matrix(_impl) { /*std::cout << "SparseMatrix()" << this << std::endl; */ }mosek::fusion::SparseMatrix::~SparseMatrix() {  /* std::cout << "~SparseMatrix()" << this << std::endl << std::flush; */ }mosek::fusion::p_SparseMatrix::p_SparseMatrix  (::mosek::fusion::SparseMatrix * _pubthis) :     mosek::fusion::p_Matrix(_pubthis),    _pubthis(_pubthis){}mosek::fusion::SparseMatrix::t mosek::fusion::p_SparseMatrix::_new_SparseMatrix  (int _7738,    int _7739,    std::shared_ptr< monty::ndarray< int,1 > > _7740,    std::shared_ptr< monty::ndarray< int,1 > > _7741,    std::shared_ptr< monty::ndarray< double,1 > > _7742,    long long _7743){ return new mosek::fusion::SparseMatrix(_7738,_7739,_7740,_7741,_7742,_7743); }mosek::fusion::SparseMatrix::SparseMatrix  (int _7738,    int _7739,    std::shared_ptr< monty::ndarray< int,1 > > _7740,    std::shared_ptr< monty::ndarray< int,1 > > _7741,    std::shared_ptr< monty::ndarray< double,1 > > _7742,    long long _7743) :    SparseMatrix(new mosek::fusion::p_SparseMatrix(this)){ mosek::fusion::p_SparseMatrix::_get_impl(this)->_initialize(_7738,_7739,_7740,_7741,_7742,_7743); }void mosek::fusion::p_SparseMatrix::_initialize  (int _7738,    int _7739,    std::shared_ptr< monty::ndarray< int,1 > > _7740,    std::shared_ptr< monty::ndarray< int,1 > > _7741,    std::shared_ptr< monty::ndarray< double,1 > > _7742,    long long _7743){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__7740(_7740 ? _7740->raw() : nullptr, _7740 ? _7740->size(0) : 0);
    _checked_ptr_1<int> _ptr__7741(_7741 ? _7741->raw() : nullptr, _7741 ? _7741->size(0) : 0);
    _checked_ptr_1<double> _ptr__7742(_7742 ? _7742->raw() : nullptr, _7742 ? _7742->size(0) : 0);
    mosek::fusion::p_Matrix::_initialize(_7738,_7739);
    if ((_7743 > (int)0))
    {
      {
        if ((((int)((_7740)->size(0)) < _7743) || (((int)((_7741)->size(0)) < _7743) || ((int)((_7742)->size(0)) < _7743))))
        {
          {
            throw ::mosek::fusion::SparseFormatError(std::string ("Mismatching arrays in sparse data."));
          }
        }
        {}
        bool _7744 = false;
        long long _12299 = (long long)0;
        long long _12300 = _7743;
        for (long long _7745 = _12299; _7745 < _12300; ++_7745)
        {
          {
            if (((_ptr__7740[_7745] < (int)0) || ((_ptr__7740[_7745] >= dimi) || ((_ptr__7741[_7745] < (int)0) || (_ptr__7741[_7745] >= dimj)))))
            {
              {
                _7744 = true;
              }
            }
            {}
          }
        }
        if (_7744)
        {
          {
            throw ::mosek::fusion::SparseFormatError(std::string ("Subscript out of bounds."));
          }
        }
        {}
        std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > > _7746 = std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > >(new monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 >(monty::shape((int)1)));
        std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > > _7747 = std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 > >(new monty::ndarray< std::shared_ptr< monty::ndarray< int,1 > >,1 >(monty::shape((int)1)));
        std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > > _7748 = std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 > >(new monty::ndarray< std::shared_ptr< monty::ndarray< double,1 > >,1 >(monty::shape((int)1)));
        ::mosek::fusion::p_CommonTools::tripletSort(_7740,_7741,_7742,_7746,_7747,_7748,_7743,dimi,dimj);
        subi = ((*_7746)((int)0));
        subj = ((*_7747)((int)0));
        val = ((*_7748)((int)0));
        nnz = (long long)((val)->size(0));
      }
    }
    else
    {
      {
        subi = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0)));
        subj = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0)));
        val = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)0)));
        nnz = (long long)0;
      }
    }
  }
}mosek::fusion::SparseMatrix::t mosek::fusion::p_SparseMatrix::_new_SparseMatrix  (int _7749,    int _7750,    std::shared_ptr< monty::ndarray< int,1 > > _7751,    std::shared_ptr< monty::ndarray< int,1 > > _7752,    std::shared_ptr< monty::ndarray< double,1 > > _7753){ return new mosek::fusion::SparseMatrix(_7749,_7750,_7751,_7752,_7753); }mosek::fusion::SparseMatrix::SparseMatrix  (int _7749,    int _7750,    std::shared_ptr< monty::ndarray< int,1 > > _7751,    std::shared_ptr< monty::ndarray< int,1 > > _7752,    std::shared_ptr< monty::ndarray< double,1 > > _7753) :    SparseMatrix(new mosek::fusion::p_SparseMatrix(this)){ mosek::fusion::p_SparseMatrix::_get_impl(this)->_initialize(_7749,_7750,_7751,_7752,_7753); }void mosek::fusion::p_SparseMatrix::_initialize  (int _7749,    int _7750,    std::shared_ptr< monty::ndarray< int,1 > > _7751,    std::shared_ptr< monty::ndarray< int,1 > > _7752,    std::shared_ptr< monty::ndarray< double,1 > > _7753){monty::rc_reserve __reserve_this(_pubthis);   {
    _checked_ptr_1<int> _ptr__7751(_7751 ? _7751->raw() : nullptr, _7751 ? _7751->size(0) : 0);
    _checked_ptr_1<int> _ptr__7752(_7752 ? _7752->raw() : nullptr, _7752 ? _7752->size(0) : 0);
    _checked_ptr_1<double> _ptr__7753(_7753 ? _7753->raw() : nullptr, _7753 ? _7753->size(0) : 0);
    mosek::fusion::p_Matrix::_initialize(_7749,_7750);
    int _7754 = (int)0;
    int _12301 = (int)0;
    int _12302 = (int)((_7753)->size(0));
    for (int _7755 = _12301; _7755 < _12302; ++_7755)
    {
      {
        if (((_ptr__7753[_7755] > (int)0) || (_ptr__7753[_7755] < (int)0)))
        {
          {
            ++ _7754;
          }
        }
        {}
      }
    }
    if (((_7754 > (int)0) && (_7754 < (int)((_7751)->size(0)))))
    {
      {
        subi = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7754)));
        subj = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7754)));
        val = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7754)));
        nnz = _7754;
        int _7756 = (int)0;
        int _12303 = (int)0;
        int _12304 = (int)((_7753)->size(0));
        for (int _7757 = _12303; _7757 < _12304; ++_7757)
        {
          {
            if (((_ptr__7753[_7757] < (int)0) || (_ptr__7753[_7757] > (int)0)))
            {
              {
                ((*val)(_7756)) = _ptr__7753[_7757];
                ((*subj)(_7756)) = _ptr__7752[_7757];
                ((*subi)(_7756)) = _ptr__7751[_7757];
                ++ _7756;
              }
            }
            {}
          }
        }
      }
    }
    else
    {
      {
        subi = _7751;
        subj = _7752;
        val = _7753;
        if ((NULL == _7751.get()))
        {
          {
            nnz = (long long)0;
          }
        }
        else
        {
          {
            nnz = (long long)((subi)->size(0));
          }
        }
      }
    }
  }
}std::shared_ptr< monty::ndarray< long long,1 > > mosek::fusion::p_SparseMatrix::formPtrb(){
  std::shared_ptr< monty::ndarray< long long,1 > > _7758 = std::shared_ptr< monty::ndarray< long long,1 > >(new monty::ndarray< long long,1 >(monty::shape(safe_add( dimi,(int)1 ))));
  _checked_ptr_1<long long> _ptr__7758(_7758 ? _7758->raw() : nullptr,_7758 ? _7758->size(0) : 0);
  long long _7759 = (long long)0;
  int _12305 = (int)0;
  int _12306 = dimi;
  for (int _7760 = _12305; _7760 < _12306; ++_7760)
  {
    {
      _ptr__7758[_7760] = _7759;
      {
        for(;((_7759 < nnz) && (((*subi)(_7759)) == _7760));++ _7759)
        {
          {
          }
        }
      }
    }
  }
  _ptr__7758[dimi] = _7759;
  return _7758;
}
std::string mosek::fusion::SparseMatrix :: toString() { return mosek::fusion::p_SparseMatrix::_get_impl(this)->toString(); }std::string mosek::fusion::p_SparseMatrix::toString(){
  monty::rc_ptr< ::mosek::fusion::Utils::StringBuffer > _7761 = ::mosek::fusion::Utils::p_StringBuffer::_new_StringBuffer();
  _7761->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("SparseMatrix("))->__mosek_2fusion_2Utils_2StringBuffer__a(dimi)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(dimj)->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (", ["));
  if (((NULL != subi.get()) && ((int)((subi)->size(0)) > (int)0)))
  {
    {
      _7761->__mosek_2fusion_2Utils_2StringBuffer__a(std::string ("("))->__mosek_2fusion_2Utils_2StringBuffer__a(((*subi)((int)0)))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(((*subj)((int)0)))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(((*val)((int)0)))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"));
      int _12307 = (int)1;
      int _12308 = (int)((subi)->size(0));
      for (int _7762 = _12307; _7762 < _12308; ++_7762)
      {
        {
          _7761->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (",("))->__mosek_2fusion_2Utils_2StringBuffer__a(((*subi)(_7762)))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(((*subj)(_7762)))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (","))->__mosek_2fusion_2Utils_2StringBuffer__a(((*val)(_7762)))->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (")"));
        }
      }
    }
  }
  {}
  _7761->__mosek_2fusion_2Utils_2StringBuffer__a(std::string (" ])"));
  return _7761->toString();
}
long long mosek::fusion::SparseMatrix :: numNonzeros() { return mosek::fusion::p_SparseMatrix::_get_impl(this)->numNonzeros(); }long long mosek::fusion::p_SparseMatrix::numNonzeros(){
  return nnz;
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::SparseMatrix :: __mosek_2fusion_2SparseMatrix__transpose() { return mosek::fusion::p_SparseMatrix::_get_impl(this)->__mosek_2fusion_2SparseMatrix__transpose(); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::SparseMatrix::transpose() { return __mosek_2fusion_2SparseMatrix__transpose(); }
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::SparseMatrix::__mosek_2fusion_2Matrix__transpose() { return __mosek_2fusion_2SparseMatrix__transpose(); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_SparseMatrix::__mosek_2fusion_2SparseMatrix__transpose(){
  return ::mosek::fusion::p_Matrix::sparse(dimj,dimi,subj,subi,val);
}
bool mosek::fusion::SparseMatrix :: isSparse() { return mosek::fusion::p_SparseMatrix::_get_impl(this)->isSparse(); }bool mosek::fusion::p_SparseMatrix::isSparse(){
  return true;
}
std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::SparseMatrix :: getDataAsArray() { return mosek::fusion::p_SparseMatrix::_get_impl(this)->getDataAsArray(); }std::shared_ptr< monty::ndarray< double,1 > > mosek::fusion::p_SparseMatrix::getDataAsArray(){
  std::shared_ptr< monty::ndarray< double,1 > > _7763 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(safe_mul( dimi,dimj ))));
  _checked_ptr_1<double> _ptr__7763(_7763 ? _7763->raw() : nullptr,_7763 ? _7763->size(0) : 0);
  int _12309 = (int)0;
  int _12310 = (int)((subi)->size(0));
  for (int _7764 = _12309; _7764 < _12310; ++_7764)
  {
    {
      _ptr__7763[safe_add( safe_mul( ((*subi)(_7764)),dimj ),((*subj)(_7764)) )] = ((*val)(_7764));
    }
  }
  return _7763;
}
void mosek::fusion::SparseMatrix :: getDataAsTriplets(std::shared_ptr< monty::ndarray< int,1 > > _7765,std::shared_ptr< monty::ndarray< int,1 > > _7766,std::shared_ptr< monty::ndarray< double,1 > > _7767) { mosek::fusion::p_SparseMatrix::_get_impl(this)->getDataAsTriplets(_7765,_7766,_7767); }void mosek::fusion::p_SparseMatrix::getDataAsTriplets(std::shared_ptr< monty::ndarray< int,1 > > _7765,std::shared_ptr< monty::ndarray< int,1 > > _7766,std::shared_ptr< monty::ndarray< double,1 > > _7767){
  _checked_ptr_1<int> _ptr__7765(_7765 ? _7765->raw() : nullptr, _7765 ? _7765->size(0) : 0);
  _checked_ptr_1<int> _ptr__7766(_7766 ? _7766->raw() : nullptr, _7766 ? _7766->size(0) : 0);
  _checked_ptr_1<double> _ptr__7767(_7767 ? _7767->raw() : nullptr, _7767 ? _7767->size(0) : 0);
  if ((((long long)((_7765)->size(0)) < nnz) || (((long long)((_7766)->size(0)) < nnz) || ((long long)((_7767)->size(0)) < nnz))))
  {
    {
      throw ::mosek::fusion::LengthError(std::string ("Output arrays are not long enough."));
    }
  }
  {}
  if (((NULL != subi.get()) && ((int)((subi)->size(0)) > (int)0)))
  {
    {
      ::mosek::fusion::Utils::Tools::arraycopy(subi,(long long)0,_7765,(long long)0,nnz);
      ::mosek::fusion::Utils::Tools::arraycopy(subj,(long long)0,_7766,(long long)0,nnz);
      ::mosek::fusion::Utils::Tools::arraycopy(val,(long long)0,_7767,(long long)0,nnz);
    }
  }
  {}
}
double mosek::fusion::SparseMatrix :: get(int _7768,int _7769) { return mosek::fusion::p_SparseMatrix::_get_impl(this)->get(_7768,_7769); }double mosek::fusion::p_SparseMatrix::get(int _7768,int _7769){
  if (((_7768 < (int)0) || ((_7768 >= dimi) || ((_7769 < (int)0) || (_7769 >= dimj)))))
  {
    {
      throw ::mosek::fusion::IndexError(std::string ("Index out if bounds"));
    }
  }
  {}
  int _7770 = (int)((subi)->size(0));
  int _7771 = (int)0;
  while ( ((_7770 - _7771) > (int)1) )
  {
    {
      int _7772 = (safe_add( _7771,_7770 ) / (int)2);
      if (((((*subi)(_7772)) < _7768) || ((((*subi)(_7772)) == _7768) && (((*subj)(_7772)) < _7769))))
      {
        {
          _7771 = _7772;
        }
      }
      else if(((((*subi)(_7772)) > _7768) || ((((*subi)(_7772)) == _7768) && (((*subj)(_7772)) > _7769))))
      {
        {
          _7770 = _7772;
        }
      }
      else
      {
        {
          return ((*val)(_7772));
        }
      }
    }
  }
  if (((((*subi)(_7771)) == _7768) && (((*subj)(_7771)) == _7769)))
  {
    {
      return ((*val)(_7771));
    }
  }
  else
  {
    {
      return 0.0;
    }
  }
}
void mosek::fusion::p_SparseMatrix::destroy(){val.reset();subj.reset();subi.reset();}void mosek::fusion::SparseMatrix::destroy() { mosek::fusion::p_SparseMatrix::_get_impl(this)->destroy(); }mosek::fusion::Matrix::Matrix(mosek::fusion::p_Matrix *_impl) : _impl(_impl) { /*std::cout << "Matrix() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::Matrix::~Matrix() { delete _impl; _impl = nullptr; }mosek::fusion::p_Matrix::p_Matrix  (::mosek::fusion::Matrix * _pubthis) :     _pubthis(_pubthis){}void mosek::fusion::p_Matrix::_initialize  (int _7773,    int _7774){monty::rc_reserve __reserve_this(_pubthis);   {
    if (((_7773 < (int)0) || (_7774 < (int)0)))
    {
      {
        throw ::mosek::fusion::DimensionError(std::string ("Invalid dimensions"));
      }
    }
    {}
    dimi = _7773;
    dimj = _7774;
  }
}std::string mosek::fusion::Matrix :: toString() { return mosek::fusion::p_Matrix::_get_impl(this)->toString(); }std::string mosek::fusion::p_Matrix::toString(){
  return std::string ("");
}
void mosek::fusion::p_Matrix::switchDims(){
  int _7775 = dimi;
  dimi = dimj;
  dimj = _7775;
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::diag  ( int _7776,    monty::rc_ptr< ::mosek::fusion::Matrix > _7777) { return mosek::fusion::p_Matrix::diag(_7776,_7777); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::diag(int _7776,monty::rc_ptr< ::mosek::fusion::Matrix > _7777){
  std::vector<monty::rc_ptr< ::mosek::fusion::Matrix >> _12311;
  for (int _7778 = (int)0, _12312 = _7776; _7778 < _12312 ; ++_7778)
  {
    _12311.push_back(_7777);
  }
  auto _12313 = std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Matrix >,1 > >(new monty::ndarray< monty::rc_ptr< ::mosek::fusion::Matrix >,1 >(monty::shape(_12311.size()),_12311.begin(),_12311.end()));
  return ::mosek::fusion::p_Matrix::diag(_12313);
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::diag  ( std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Matrix >,1 > > _7779) { return mosek::fusion::p_Matrix::diag(_7779); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::diag(std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Matrix >,1 > > _7779){
  std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Matrix >,1 > > _7780 = _7779;
  long long _7781 = (long long)0;
  int _7782 = (int)0;
  int _7783 = (int)0;
  int _12314 = (int)0;
  int _12315 = (int)((_7779)->size(0));
  for (int _7784 = _12314; _7784 < _12315; ++_7784)
  {
    {
      _7783 = safe_add( _7783,mosek::fusion::p_Matrix::_get_impl(((*_7779)(_7784)))->dimi );
      _7782 = safe_add( _7782,mosek::fusion::p_Matrix::_get_impl(((*_7779)(_7784)))->dimj );
      _7781 = safe_add( _7781,((*_7779)(_7784))->numNonzeros() );
    }
  }
  std::shared_ptr< monty::ndarray< int,1 > > _7785 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7781)));
  _checked_ptr_1<int> _ptr__7785(_7785 ? _7785->raw() : nullptr,_7785 ? _7785->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _7786 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7781)));
  _checked_ptr_1<int> _ptr__7786(_7786 ? _7786->raw() : nullptr,_7786 ? _7786->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _7787 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7781)));
  _checked_ptr_1<double> _ptr__7787(_7787 ? _7787->raw() : nullptr,_7787 ? _7787->size(0) : 0);
  {
    int _7788 = (int)0;
    int _7789 = (int)0;
    long long _7790 = (long long)0;
    int _12316 = (int)0;
    int _12317 = (int)((_7779)->size(0));
    for (int _7791 = _12316; _7791 < _12317; ++_7791)
    {
      {
        long long _7792 = ((*_7779)(_7791))->numNonzeros();
        std::shared_ptr< monty::ndarray< double,1 > > _7793 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7792)));
        _checked_ptr_1<double> _ptr__7793(_7793 ? _7793->raw() : nullptr,_7793 ? _7793->size(0) : 0);
        std::shared_ptr< monty::ndarray< int,1 > > _7794 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7792)));
        _checked_ptr_1<int> _ptr__7794(_7794 ? _7794->raw() : nullptr,_7794 ? _7794->size(0) : 0);
        std::shared_ptr< monty::ndarray< int,1 > > _7795 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7792)));
        _checked_ptr_1<int> _ptr__7795(_7795 ? _7795->raw() : nullptr,_7795 ? _7795->size(0) : 0);
        ((*_7779)(_7791))->getDataAsTriplets(_7795,_7794,_7793);
        ::mosek::fusion::Utils::Tools::arraycopy(_7793,(long long)0,_7787,_7790,_7792);
        long long _12318 = (long long)0;
        long long _12319 = _7792;
        for (long long _7796 = _12318; _7796 < _12319; ++_7796)
        {
          {
            _ptr__7785[safe_add( _7790,_7796 )] = safe_add( _ptr__7795[_7796],_7789 );
            _ptr__7786[safe_add( _7790,_7796 )] = safe_add( _ptr__7795[_7796],_7788 );
          }
        }
        _7790 = safe_add( _7790,_7792 );
        _7789 = safe_add( _7789,mosek::fusion::p_Matrix::_get_impl(((*_7779)(_7791)))->dimi );
        _7788 = safe_add( _7788,mosek::fusion::p_Matrix::_get_impl(((*_7779)(_7791)))->dimj );
      }
    }
  }
  return (::mosek::fusion::p_SparseMatrix::_new_SparseMatrix(_7783,_7782,_7785,_7786,_7787)).as<::mosek::fusion::Matrix>();
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::antidiag  ( int _7797,    double _7798,    int _7799) { return mosek::fusion::p_Matrix::antidiag(_7797,_7798,_7799); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::antidiag(int _7797,double _7798,int _7799){
  if (((_7799 < _7797) && (_7799 >= (int)0)))
  {
    {
      return ::mosek::fusion::p_Matrix::antidiag(::mosek::fusion::Utils::Tools::makevector(_7798,(_7797 - _7799)),_7799);
    }
  }
  else if(((_7799 > (-_7797)) && (_7799 < (int)0)))
  {
    {
      return ::mosek::fusion::p_Matrix::antidiag(::mosek::fusion::Utils::Tools::makevector(_7798,safe_add( _7797,_7799 )),_7799);
    }
  }
  else
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Diagonal index out of bounds"));
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::antidiag  ( int _7800,    double _7801) { return mosek::fusion::p_Matrix::antidiag(_7800,_7801); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::antidiag(int _7800,double _7801){
  return ::mosek::fusion::p_Matrix::antidiag(::mosek::fusion::Utils::Tools::makevector(_7801,_7800),(int)0);
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::diag  ( int _7802,    double _7803,    int _7804) { return mosek::fusion::p_Matrix::diag(_7802,_7803,_7804); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::diag(int _7802,double _7803,int _7804){
  if (((_7804 < _7802) && (_7804 >= (int)0)))
  {
    {
      return ::mosek::fusion::p_Matrix::diag(::mosek::fusion::Utils::Tools::makevector(_7803,(_7802 - _7804)),_7804);
    }
  }
  else if(((_7804 > (-_7802)) && (_7804 < (int)0)))
  {
    {
      return ::mosek::fusion::p_Matrix::diag(::mosek::fusion::Utils::Tools::makevector(_7803,safe_add( _7802,_7804 )),_7804);
    }
  }
  else
  {
    {
      throw ::mosek::fusion::DimensionError(std::string ("Diagonal index out of bounds"));
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::diag  ( int _7805,    double _7806) { return mosek::fusion::p_Matrix::diag(_7805,_7806); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::diag(int _7805,double _7806){
  return ::mosek::fusion::p_Matrix::diag(::mosek::fusion::Utils::Tools::makevector(_7806,_7805),(int)0);
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::antidiag  ( std::shared_ptr< monty::ndarray< double,1 > > _7807,    int _7808) { return mosek::fusion::p_Matrix::antidiag(_7807,_7808); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::antidiag(std::shared_ptr< monty::ndarray< double,1 > > _7807,int _7808){
  _checked_ptr_1<double> _ptr__7807(_7807 ? _7807->raw() : nullptr, _7807 ? _7807->size(0) : 0);
  int _12320;
  bool _12321 = (_7808 > (int)0);
  if (_12321)
  {
    _12320 = _7808;
  }
  else
  {
    _12320 = (-_7808);
  }
  int _7809 = _12320;
  int _7810 = safe_add( (int)((_7807)->size(0)),_7809 );
  int _7811 = (int)((_7807)->size(0));
  if ((_7808 >= (int)0))
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _7812 = ::mosek::fusion::Utils::Tools::range(_7808,safe_add( _7811,_7808 ));
      _checked_ptr_1<int> _ptr__7812(_7812 ? _7812->raw() : nullptr,_7812 ? _7812->size(0) : 0);
      std::vector<int> _12322;
      for (int _7814 = (int)1, _12323 = safe_add( _7811,(int)1 ); _7814 < _12323 ; ++_7814)
      {
        _12322.push_back((safe_add( _7811,_7808 ) - _7814));
      }
      auto _12324 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_12322.size()),_12322.begin(),_12322.end()));
      std::shared_ptr< monty::ndarray< int,1 > > _7813 = _12324;
      _checked_ptr_1<int> _ptr__7813(_7813 ? _7813->raw() : nullptr,_7813 ? _7813->size(0) : 0);
      return (::mosek::fusion::p_SparseMatrix::_new_SparseMatrix(_7810,_7810,_7812,_7813,_7807)).as<::mosek::fusion::Matrix>();
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _7815 = ::mosek::fusion::Utils::Tools::range((int)0,_7811);
      _checked_ptr_1<int> _ptr__7815(_7815 ? _7815->raw() : nullptr,_7815 ? _7815->size(0) : 0);
      std::vector<int> _12325;
      for (int _7817 = (int)1, _12326 = safe_add( _7811,(int)1 ); _7817 < _12326 ; ++_7817)
      {
        _12325.push_back((_7811 - _7817));
      }
      auto _12327 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_12325.size()),_12325.begin(),_12325.end()));
      std::shared_ptr< monty::ndarray< int,1 > > _7816 = _12327;
      _checked_ptr_1<int> _ptr__7816(_7816 ? _7816->raw() : nullptr,_7816 ? _7816->size(0) : 0);
      return (::mosek::fusion::p_SparseMatrix::_new_SparseMatrix(_7810,_7810,_7815,_7816,_7807)).as<::mosek::fusion::Matrix>();
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::antidiag  ( std::shared_ptr< monty::ndarray< double,1 > > _7818) { return mosek::fusion::p_Matrix::antidiag(_7818); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::antidiag(std::shared_ptr< monty::ndarray< double,1 > > _7818){
  _checked_ptr_1<double> _ptr__7818(_7818 ? _7818->raw() : nullptr, _7818 ? _7818->size(0) : 0);
  return ::mosek::fusion::p_Matrix::antidiag(_7818,(int)0);
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::diag  ( std::shared_ptr< monty::ndarray< double,1 > > _7819,    int _7820) { return mosek::fusion::p_Matrix::diag(_7819,_7820); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::diag(std::shared_ptr< monty::ndarray< double,1 > > _7819,int _7820){
  _checked_ptr_1<double> _ptr__7819(_7819 ? _7819->raw() : nullptr, _7819 ? _7819->size(0) : 0);
  int _12328;
  bool _12329 = (_7820 > (int)0);
  if (_12329)
  {
    _12328 = _7820;
  }
  else
  {
    _12328 = (-_7820);
  }
  int _7821 = _12328;
  int _7822 = safe_add( (int)((_7819)->size(0)),_7821 );
  int _7823 = (int)((_7819)->size(0));
  if ((_7820 >= (int)0))
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _7824 = ::mosek::fusion::Utils::Tools::range((int)0,_7823);
      _checked_ptr_1<int> _ptr__7824(_7824 ? _7824->raw() : nullptr,_7824 ? _7824->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _7825 = ::mosek::fusion::Utils::Tools::range(_7821,safe_add( _7823,_7821 ));
      _checked_ptr_1<int> _ptr__7825(_7825 ? _7825->raw() : nullptr,_7825 ? _7825->size(0) : 0);
      return (::mosek::fusion::p_SparseMatrix::_new_SparseMatrix(_7822,_7822,_7824,_7825,_7819)).as<::mosek::fusion::Matrix>();
    }
  }
  else
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _7826 = ::mosek::fusion::Utils::Tools::range(_7821,safe_add( _7823,_7821 ));
      _checked_ptr_1<int> _ptr__7826(_7826 ? _7826->raw() : nullptr,_7826 ? _7826->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _7827 = ::mosek::fusion::Utils::Tools::range((int)0,_7823);
      _checked_ptr_1<int> _ptr__7827(_7827 ? _7827->raw() : nullptr,_7827 ? _7827->size(0) : 0);
      return (::mosek::fusion::p_SparseMatrix::_new_SparseMatrix(_7822,_7822,_7826,_7827,_7819)).as<::mosek::fusion::Matrix>();
    }
  }
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::diag  ( std::shared_ptr< monty::ndarray< double,1 > > _7828) { return mosek::fusion::p_Matrix::diag(_7828); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::diag(std::shared_ptr< monty::ndarray< double,1 > > _7828){
  _checked_ptr_1<double> _ptr__7828(_7828 ? _7828->raw() : nullptr, _7828 ? _7828->size(0) : 0);
  return ::mosek::fusion::p_Matrix::diag(_7828,(int)0);
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::ones  ( int _7829,    int _7830) { return mosek::fusion::p_Matrix::ones(_7829,_7830); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::ones(int _7829,int _7830){
  return ::mosek::fusion::p_Matrix::dense(_7829,_7830,1.0);
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::eye  ( int _7831) { return mosek::fusion::p_Matrix::eye(_7831); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::eye(int _7831){
  std::vector<double> _12330;
  for (int _7832 = (int)0, _12331 = _7831; _7832 < _12331 ; ++_7832)
  {
    _12330.push_back(1.0);
  }
  auto _12332 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_12330.size()),_12330.begin(),_12330.end()));
  return ::mosek::fusion::p_Matrix::diag(_12332);
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::dense  ( monty::rc_ptr< ::mosek::fusion::Matrix > _7833) { return mosek::fusion::p_Matrix::dense(_7833); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::dense(monty::rc_ptr< ::mosek::fusion::Matrix > _7833){
  return (::mosek::fusion::p_DenseMatrix::_new_DenseMatrix(_7833)).as<::mosek::fusion::Matrix>();
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::dense  ( int _7834,    int _7835,    double _7836) { return mosek::fusion::p_Matrix::dense(_7834,_7835,_7836); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::dense(int _7834,int _7835,double _7836){
  return (::mosek::fusion::p_DenseMatrix::_new_DenseMatrix(_7834,_7835,_7836)).as<::mosek::fusion::Matrix>();
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::dense  ( int _7837,    int _7838,    std::shared_ptr< monty::ndarray< double,1 > > _7839) { return mosek::fusion::p_Matrix::dense(_7837,_7838,_7839); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::dense(int _7837,int _7838,std::shared_ptr< monty::ndarray< double,1 > > _7839){
  _checked_ptr_1<double> _ptr__7839(_7839 ? _7839->raw() : nullptr, _7839 ? _7839->size(0) : 0);
  return (::mosek::fusion::p_DenseMatrix::_new_DenseMatrix(_7837,_7838,_7839)).as<::mosek::fusion::Matrix>();
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::dense  ( std::shared_ptr< monty::ndarray< double,2 > > _7840) { return mosek::fusion::p_Matrix::dense(_7840); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::dense(std::shared_ptr< monty::ndarray< double,2 > > _7840){
  return (::mosek::fusion::p_DenseMatrix::_new_DenseMatrix(_7840)).as<::mosek::fusion::Matrix>();
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::sparse  ( monty::rc_ptr< ::mosek::fusion::Matrix > _7841) { return mosek::fusion::p_Matrix::sparse(_7841); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::sparse(monty::rc_ptr< ::mosek::fusion::Matrix > _7841){
  std::shared_ptr< monty::ndarray< int,1 > > _7842 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7841->numNonzeros())));
  _checked_ptr_1<int> _ptr__7842(_7842 ? _7842->raw() : nullptr,_7842 ? _7842->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _7843 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7841->numNonzeros())));
  _checked_ptr_1<int> _ptr__7843(_7843 ? _7843->raw() : nullptr,_7843 ? _7843->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _7844 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7841->numNonzeros())));
  _checked_ptr_1<double> _ptr__7844(_7844 ? _7844->raw() : nullptr,_7844 ? _7844->size(0) : 0);
  _7841->getDataAsTriplets(_7842,_7843,_7844);
  return (::mosek::fusion::p_SparseMatrix::_new_SparseMatrix(_7841->numRows(),_7841->numColumns(),_7842,_7843,_7844)).as<::mosek::fusion::Matrix>();
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::sparse  ( std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Matrix >,1 > >,1 > > _7845) { return mosek::fusion::p_Matrix::sparse(_7845); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::sparse(std::shared_ptr< monty::ndarray< std::shared_ptr< monty::ndarray< monty::rc_ptr< ::mosek::fusion::Matrix >,1 > >,1 > > _7845){
  int _7846 = (int)((_7845)->size(0));
  int _7847 = (int)((((*_7845)((int)0)))->size(0));
  std::shared_ptr< monty::ndarray< int,1 > > _7848 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7846)));
  _checked_ptr_1<int> _ptr__7848(_7848 ? _7848->raw() : nullptr,_7848 ? _7848->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _7849 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7847)));
  _checked_ptr_1<int> _ptr__7849(_7849 ? _7849->raw() : nullptr,_7849 ? _7849->size(0) : 0);
  long long _7850 = (long long)0;
  int _7851 = (int)0;
  {
    int _7852 = (int)0;
    for(;(_7852 < _7846);++ _7852)
    {
      {
        {
          int _7853 = (int)0;
          for(;(_7853 < _7847);++ _7853)
          {
            {
              monty::rc_ptr< ::mosek::fusion::Matrix > _7854 = ((*((*_7845)(_7852)))(_7853));
              if ((NULL != _7854.get()))
              {
                {
                  if ((_ptr__7849[_7853] == (int)0))
                  {
                    {
                      _ptr__7849[_7853] = mosek::fusion::p_Matrix::_get_impl(_7854)->dimj;
                    }
                  }
                  else if((_ptr__7849[_7853] != mosek::fusion::p_Matrix::_get_impl(_7854)->dimj))
                  {
                    {
                      throw ::mosek::fusion::SparseFormatError(std::string ("Sparse matrix construction blocks are not aligned"));
                    }
                  }
                  {}
                  if ((_ptr__7848[_7852] == (int)0))
                  {
                    {
                      _ptr__7848[_7852] = mosek::fusion::p_Matrix::_get_impl(_7854)->dimi;
                    }
                  }
                  else if((_ptr__7848[_7852] != mosek::fusion::p_Matrix::_get_impl(_7854)->dimi))
                  {
                    {
                      throw ::mosek::fusion::SparseFormatError(std::string ("Sparse matrix construction blocks are not aligned"));
                    }
                  }
                  {}
                  _7850 = safe_add( _7850,_7854->numNonzeros() );
                }
              }
              {}
              ++ _7851;
            }
          }
        }
      }
    }
  }
  std::shared_ptr< monty::ndarray< double,1 > > _7855 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7850)));
  _checked_ptr_1<double> _ptr__7855(_7855 ? _7855->raw() : nullptr,_7855 ? _7855->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _7856 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7850)));
  _checked_ptr_1<int> _ptr__7856(_7856 ? _7856->raw() : nullptr,_7856 ? _7856->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _7857 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7850)));
  _checked_ptr_1<int> _ptr__7857(_7857 ? _7857->raw() : nullptr,_7857 ? _7857->size(0) : 0);
  int _7858 = (int)0;
  int _7859 = (int)0;
  {
    int _7860 = (int)0;
    for(;(_7860 < _7846);++ _7860)
    {
      {
        std::shared_ptr< monty::ndarray< int,1 > > _7861 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7847)));
        _checked_ptr_1<int> _ptr__7861(_7861 ? _7861->raw() : nullptr,_7861 ? _7861->size(0) : 0);
        {
          int _7862 = (int)0;
          for(;(_7862 < _ptr__7848[_7860]);++ _7862)
          {
            {
              int _7863 = (int)0;
              {
                int _7864 = (int)0;
                for(;(_7864 < _7847);++ _7864)
                {
                  {
                    monty::rc_ptr< ::mosek::fusion::Matrix > _7865 = ((*((*_7845)(_7860)))(_7864));
                    if ((NULL != _7865.get()))
                    {
                      {
                        monty::rc_ptr< ::mosek::fusion::Matrix > _12333 = _7865;
                        if (false) {}
                        else if (nullptr != dynamic_cast<::mosek::fusion::DenseMatrix*>(_12333.get()))
                        {
                          ::mosek::fusion::DenseMatrix::t _7866 (dynamic_cast<::mosek::fusion::DenseMatrix*>(_12333.get()));
                          {
                            int _7869 = _ptr__7861[_7864];
                            {
                              int _7870 = (int)0;
                              for(;(_7870 < mosek::fusion::p_Matrix::_get_impl(_7866)->dimj);++ _7870)
                              {
                                {
                                  _ptr__7855[_7858] = ((*mosek::fusion::p_DenseMatrix::_get_impl(_7866)->data)(_7869));
                                  _ptr__7856[_7858] = safe_add( _7859,_7862 );
                                  _ptr__7857[_7858] = safe_add( _7863,_7870 );
                                  ++ _7869;
                                  ++ _7858;
                                }
                              }
                            }
                            _ptr__7861[_7864] = _7869;
                          }
                        }
                        else if (nullptr != dynamic_cast<::mosek::fusion::SparseMatrix*>(_12333.get()))
                        {
                          ::mosek::fusion::SparseMatrix::t _7867 (dynamic_cast<::mosek::fusion::SparseMatrix*>(_12333.get()));
                          {
                            int _7871;
                            {
                              _7871 = _ptr__7861[_7864];
                              for(;((_7871 < mosek::fusion::p_SparseMatrix::_get_impl(_7867)->nnz) && (((*mosek::fusion::p_SparseMatrix::_get_impl(_7867)->subi)(_7871)) == _7862));++ _7871)
                              {
                                {
                                  _ptr__7855[_7858] = ((*mosek::fusion::p_SparseMatrix::_get_impl(_7867)->val)(_7871));
                                  _ptr__7857[_7858] = safe_add( ((*mosek::fusion::p_SparseMatrix::_get_impl(_7867)->subj)(_7871)),_7863 );
                                  _ptr__7856[_7858] = safe_add( _7859,_7862 );
                                  ++ _7858;
                                }
                              }
                            }
                            _ptr__7861[_7864] = _7871;
                          }
                        }
                        else
                        {
                          mosek::fusion::Matrix::t _7868 = _12333;
                          {
                            throw ::mosek::fusion::MatrixError(std::string ("Unknown matrix type."));
                          }
                        }
                      }
                    }
                    {}
                    _7863 = safe_add( _7863,_ptr__7849[_7864] );
                  }
                }
              }
            }
          }
        }
        _7859 = safe_add( _7859,_ptr__7848[_7860] );
      }
    }
  }
  int _7872 = (int)0;
  int _7873 = (int)0;
  {
    int _7874 = (int)0;
    for(;(_7874 < _7846);++ _7874)
    {
      {
        _7872 = safe_add( _7872,_ptr__7848[_7874] );
      }
    }
  }
  {
    int _7875 = (int)0;
    for(;(_7875 < _7847);++ _7875)
    {
      {
        _7873 = safe_add( _7873,_ptr__7849[_7875] );
      }
    }
  }
  return (::mosek::fusion::p_SparseMatrix::_new_SparseMatrix(_7872,_7873,_7856,_7857,_7855)).as<::mosek::fusion::Matrix>();
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::sparse  ( std::shared_ptr< monty::ndarray< double,2 > > _7876) { return mosek::fusion::p_Matrix::sparse(_7876); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::sparse(std::shared_ptr< monty::ndarray< double,2 > > _7876){
  int _7877 = (int)((_7876)->size(0));
  int _7878 = (int)((_7876)->size(1));
  long long _7879 = (long long)safe_mul( _7877,_7878 );
  int _7880 = (int)0;
  std::shared_ptr< monty::ndarray< int,1 > > _7881 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7879)));
  _checked_ptr_1<int> _ptr__7881(_7881 ? _7881->raw() : nullptr,_7881 ? _7881->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _7882 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7879)));
  _checked_ptr_1<int> _ptr__7882(_7882 ? _7882->raw() : nullptr,_7882 ? _7882->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _7883 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape(_7879)));
  _checked_ptr_1<double> _ptr__7883(_7883 ? _7883->raw() : nullptr,_7883 ? _7883->size(0) : 0);
  {
    int _7884 = (int)0;
    for(;(_7884 < _7877);++ _7884)
    {
      {
        {
          int _7885 = (int)0;
          for(;(_7885 < _7878);++ _7885)
          {
            {
              _ptr__7881[_7880] = _7884;
              _ptr__7882[_7880] = _7885;
              _ptr__7883[_7880] = ((*_7876)(_7884,_7885));
              ++ _7880;
            }
          }
        }
      }
    }
  }
  return (::mosek::fusion::p_SparseMatrix::_new_SparseMatrix(_7877,_7878,_7881,_7882,_7883)).as<::mosek::fusion::Matrix>();
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::sparse  ( int _7886,    int _7887) { return mosek::fusion::p_Matrix::sparse(_7886,_7887); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::sparse(int _7886,int _7887){
  return (::mosek::fusion::p_SparseMatrix::_new_SparseMatrix(_7886,_7887,std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0))),std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)0))),(long long)0)).as<::mosek::fusion::Matrix>();
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::sparse  ( int _7888,    int _7889,    std::shared_ptr< monty::ndarray< int,1 > > _7890,    std::shared_ptr< monty::ndarray< int,1 > > _7891,    double _7892) { return mosek::fusion::p_Matrix::sparse(_7888,_7889,_7890,_7891,_7892); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::sparse(int _7888,int _7889,std::shared_ptr< monty::ndarray< int,1 > > _7890,std::shared_ptr< monty::ndarray< int,1 > > _7891,double _7892){
  _checked_ptr_1<int> _ptr__7890(_7890 ? _7890->raw() : nullptr, _7890 ? _7890->size(0) : 0);
  _checked_ptr_1<int> _ptr__7891(_7891 ? _7891->raw() : nullptr, _7891 ? _7891->size(0) : 0);
  int _7893 = (int)0;
  if ((NULL != _7890.get()))
  {
    {
      _7893 = (int)((_7890)->size(0));
    }
  }
  else if((NULL != _7891.get()))
  {
    {
      _7893 = (int)((_7891)->size(0));
    }
  }
  {}
  return ::mosek::fusion::p_Matrix::sparse(_7888,_7889,_7890,_7891,::mosek::fusion::Utils::Tools::makevector(_7892,_7893));
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::sparse  ( std::shared_ptr< monty::ndarray< int,1 > > _7894,    std::shared_ptr< monty::ndarray< int,1 > > _7895,    double _7896) { return mosek::fusion::p_Matrix::sparse(_7894,_7895,_7896); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::sparse(std::shared_ptr< monty::ndarray< int,1 > > _7894,std::shared_ptr< monty::ndarray< int,1 > > _7895,double _7896){
  _checked_ptr_1<int> _ptr__7894(_7894 ? _7894->raw() : nullptr, _7894 ? _7894->size(0) : 0);
  _checked_ptr_1<int> _ptr__7895(_7895 ? _7895->raw() : nullptr, _7895 ? _7895->size(0) : 0);
  int _7897 = (int)0;
  int _7898 = (int)0;
  int _7899 = (int)((_7894)->size(0));
  if ((_7899 > (int)((_7895)->size(0))))
  {
    {
      _7899 = (int)((_7895)->size(0));
    }
  }
  {}
  int _12334 = (int)0;
  int _12335 = _7899;
  for (int _7900 = _12334; _7900 < _12335; ++_7900)
  {
    {
      if ((_7898 < _ptr__7894[_7900]))
      {
        {
          _7898 = _ptr__7894[_7900];
        }
      }
      {}
      if ((_7897 < _ptr__7895[_7900]))
      {
        {
          _7897 = _ptr__7895[_7900];
        }
      }
      {}
    }
  }
  return ::mosek::fusion::p_Matrix::sparse(safe_add( _7898,(int)1 ),safe_add( _7897,(int)1 ),_7894,_7895,_7896);
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::sparse  ( std::shared_ptr< monty::ndarray< int,1 > > _7901,    std::shared_ptr< monty::ndarray< int,1 > > _7902,    std::shared_ptr< monty::ndarray< double,1 > > _7903) { return mosek::fusion::p_Matrix::sparse(_7901,_7902,_7903); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::sparse(std::shared_ptr< monty::ndarray< int,1 > > _7901,std::shared_ptr< monty::ndarray< int,1 > > _7902,std::shared_ptr< monty::ndarray< double,1 > > _7903){
  _checked_ptr_1<int> _ptr__7901(_7901 ? _7901->raw() : nullptr, _7901 ? _7901->size(0) : 0);
  _checked_ptr_1<int> _ptr__7902(_7902 ? _7902->raw() : nullptr, _7902 ? _7902->size(0) : 0);
  _checked_ptr_1<double> _ptr__7903(_7903 ? _7903->raw() : nullptr, _7903 ? _7903->size(0) : 0);
  int _7904 = (int)0;
  int _7905 = (int)0;
  int _7906 = (int)((_7901)->size(0));
  if ((_7906 > (int)((_7902)->size(0))))
  {
    {
      _7906 = (int)((_7902)->size(0));
    }
  }
  {}
  if ((_7906 > (int)((_7903)->size(0))))
  {
    {
      _7906 = (int)((_7903)->size(0));
    }
  }
  {}
  int _12336 = (int)0;
  int _12337 = _7906;
  for (int _7907 = _12336; _7907 < _12337; ++_7907)
  {
    {
      if ((_7905 < _ptr__7901[_7907]))
      {
        {
          _7905 = _ptr__7901[_7907];
        }
      }
      {}
      if ((_7904 < _ptr__7902[_7907]))
      {
        {
          _7904 = _ptr__7902[_7907];
        }
      }
      {}
    }
  }
  return ::mosek::fusion::p_Matrix::sparse(safe_add( _7905,(int)1 ),safe_add( _7904,(int)1 ),_7901,_7902,_7903);
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix::sparse  ( int _7908,    int _7909,    std::shared_ptr< monty::ndarray< int,1 > > _7910,    std::shared_ptr< monty::ndarray< int,1 > > _7911,    std::shared_ptr< monty::ndarray< double,1 > > _7912) { return mosek::fusion::p_Matrix::sparse(_7908,_7909,_7910,_7911,_7912); }monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::p_Matrix::sparse(int _7908,int _7909,std::shared_ptr< monty::ndarray< int,1 > > _7910,std::shared_ptr< monty::ndarray< int,1 > > _7911,std::shared_ptr< monty::ndarray< double,1 > > _7912){
  _checked_ptr_1<int> _ptr__7910(_7910 ? _7910->raw() : nullptr, _7910 ? _7910->size(0) : 0);
  _checked_ptr_1<int> _ptr__7911(_7911 ? _7911->raw() : nullptr, _7911 ? _7911->size(0) : 0);
  _checked_ptr_1<double> _ptr__7912(_7912 ? _7912->raw() : nullptr, _7912 ? _7912->size(0) : 0);
  std::shared_ptr< monty::ndarray< double,1 > > _12338;
  bool _12339 = (NULL != _7912.get());
  if (_12339)
  {
    _12338 = _7912;
  }
  else
  {
    _12338 = std::shared_ptr< monty::ndarray< double,1 > >(new monty::ndarray< double,1 >(monty::shape((int)0)));
  }
  std::shared_ptr< monty::ndarray< double,1 > > _7913 = _12338;
  _checked_ptr_1<double> _ptr__7913(_7913 ? _7913->raw() : nullptr,_7913 ? _7913->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _12340;
  bool _12341 = (NULL != _7911.get());
  if (_12341)
  {
    _12340 = _7911;
  }
  else
  {
    _12340 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0)));
  }
  std::shared_ptr< monty::ndarray< int,1 > > _7914 = _12340;
  _checked_ptr_1<int> _ptr__7914(_7914 ? _7914->raw() : nullptr,_7914 ? _7914->size(0) : 0);
  std::shared_ptr< monty::ndarray< int,1 > > _12342;
  bool _12343 = (NULL != _7910.get());
  if (_12343)
  {
    _12342 = _7910;
  }
  else
  {
    _12342 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)0)));
  }
  std::shared_ptr< monty::ndarray< int,1 > > _7915 = _12342;
  _checked_ptr_1<int> _ptr__7915(_7915 ? _7915->raw() : nullptr,_7915 ? _7915->size(0) : 0);
  long long _7916 = (long long)((_7915)->size(0));
  if ((((long long)((_7914)->size(0)) != _7916) || ((long long)((_7913)->size(0)) != _7916)))
  {
    {
      throw ::mosek::fusion::SparseFormatError(std::string ("Arrays defining sparse data have different lengths"));
    }
  }
  {}
  return (::mosek::fusion::p_SparseMatrix::_new_SparseMatrix(_7908,_7909,_7915,_7914,_7913,_7916)).as<::mosek::fusion::Matrix>();
}
monty::rc_ptr< ::mosek::fusion::Matrix > mosek::fusion::Matrix :: transpose() { return __mosek_2fusion_2Matrix__transpose(); }
int mosek::fusion::Matrix :: numColumns() { return mosek::fusion::p_Matrix::_get_impl(this)->numColumns(); }int mosek::fusion::p_Matrix::numColumns(){
  return dimj;
}
int mosek::fusion::Matrix :: numRows() { return mosek::fusion::p_Matrix::_get_impl(this)->numRows(); }int mosek::fusion::p_Matrix::numRows(){
  return dimi;
}
void mosek::fusion::p_Matrix::destroy(){}void mosek::fusion::Matrix::destroy() { mosek::fusion::p_Matrix::_get_impl(this)->destroy(); }mosek::fusion::UnimplementedError::UnimplementedError  ( const std::string &  _7922) : RuntimeException(_7922)  {
  }
mosek::fusion::FatalError::FatalError  ( const std::string &  _7923) : RuntimeException(_7923)  {
  }
mosek::fusion::UnexpectedError::UnexpectedError  ( ::mosek::fusion::FusionException _7924) : RuntimeException(_7924.toString())  {
  }
mosek::fusion::UnexpectedError::UnexpectedError  ( const std::string &  _7925) : RuntimeException(_7925)  {
  }
mosek::fusion::SparseFormatError::SparseFormatError  ( const std::string &  _7926) : mosek::fusion::FusionRuntimeException(_7926)  {
  }
mosek::fusion::SolutionError::SolutionError  ( ) : mosek::fusion::FusionException(std::string ("Solution is invalid or undefined"))  {
  }
mosek::fusion::SolutionError::SolutionError  ( const std::string &  _7927) : mosek::fusion::FusionException(_7927)  {
  }
mosek::fusion::SliceError::SliceError  ( ) : mosek::fusion::FusionRuntimeException(std::string ("Invalid slice range"))  {
  }
mosek::fusion::SliceError::SliceError  ( const std::string &  _7928) : mosek::fusion::FusionRuntimeException(_7928)  {
  }
mosek::fusion::UpdateError::UpdateError  ( ) : mosek::fusion::FusionRuntimeException(std::string ("Cannot update parameterized item"))  {
  }
mosek::fusion::UpdateError::UpdateError  ( const std::string &  _7929) : mosek::fusion::FusionRuntimeException(_7929)  {
  }
mosek::fusion::SetDefinitionError::SetDefinitionError  ( const std::string &  _7930) : mosek::fusion::FusionRuntimeException(_7930)  {
  }
mosek::fusion::OptimizeError::OptimizeError  ( const std::string &  _7931) : mosek::fusion::FusionRuntimeException(_7931)  {
  }
mosek::fusion::NameError::NameError  ( const std::string &  _7932) : mosek::fusion::FusionRuntimeException(_7932)  {
  }
mosek::fusion::DeletionError::DeletionError  ( const std::string &  _7933) : mosek::fusion::FusionRuntimeException(_7933)  {
  }
mosek::fusion::ModelError::ModelError  ( const std::string &  _7934) : mosek::fusion::FusionRuntimeException(_7934)  {
  }
mosek::fusion::MatrixError::MatrixError  ( const std::string &  _7935) : mosek::fusion::FusionRuntimeException(_7935)  {
  }
mosek::fusion::DimensionError::DimensionError  ( const std::string &  _7936) : mosek::fusion::FusionRuntimeException(_7936)  {
  }
mosek::fusion::LengthError::LengthError  ( const std::string &  _7937) : mosek::fusion::FusionRuntimeException(_7937)  {
  }
mosek::fusion::RangeError::RangeError  ( const std::string &  _7938) : mosek::fusion::FusionRuntimeException(_7938)  {
  }
mosek::fusion::IndexError::IndexError  ( const std::string &  _7939) : mosek::fusion::FusionRuntimeException(_7939)  {
  }
mosek::fusion::DomainError::DomainError  ( const std::string &  _7940) : mosek::fusion::FusionRuntimeException(_7940)  {
  }
mosek::fusion::ValueConversionError::ValueConversionError  ( const std::string &  _7941) : mosek::fusion::FusionRuntimeException(_7941)  {
  }
mosek::fusion::ParameterError::ParameterError  ( const std::string &  _7942) : mosek::fusion::FusionRuntimeException(_7942)  {
  }
mosek::fusion::ExpressionError::ExpressionError  ( const std::string &  _7943) : mosek::fusion::FusionRuntimeException(_7943)  {
  }
mosek::fusion::IOError::IOError  ( const std::string &  _7944) : mosek::fusion::FusionRuntimeException(_7944)  {
  }
mosek::fusion::FusionRuntimeException::FusionRuntimeException  ( const std::string &  _7945) : RuntimeException(_7945)  {
    msg = _7945;
  }
std::string mosek::fusion::FusionRuntimeException::toString(){
  return msg;
}
mosek::fusion::FusionException::FusionException  ( const std::string &  _7946) : Exception(_7946)  {
    msg = _7946;
  }
std::string mosek::fusion::FusionException::toString(){
  return msg;
}
mosek::fusion::LinkedBlocks::LinkedBlocks(mosek::fusion::p_LinkedBlocks *_impl) : _impl(_impl) { /*std::cout << "LinkedBlocks() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::LinkedBlocks::~LinkedBlocks() { delete _impl; _impl = nullptr; }mosek::fusion::p_LinkedBlocks::p_LinkedBlocks  (::mosek::fusion::LinkedBlocks * _pubthis) :     _pubthis(_pubthis){}mosek::fusion::LinkedBlocks::t mosek::fusion::p_LinkedBlocks::_new_LinkedBlocks  (){ return new mosek::fusion::LinkedBlocks(); }mosek::fusion::LinkedBlocks::LinkedBlocks  () :    LinkedBlocks(new mosek::fusion::p_LinkedBlocks(this)){ mosek::fusion::p_LinkedBlocks::_get_impl(this)->_initialize(); }void mosek::fusion::p_LinkedBlocks::_initialize  (){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_LinkedBlocks::_initialize((int)0);
  }
}mosek::fusion::LinkedBlocks::t mosek::fusion::p_LinkedBlocks::_new_LinkedBlocks  (int _7947){ return new mosek::fusion::LinkedBlocks(_7947); }mosek::fusion::LinkedBlocks::LinkedBlocks  (int _7947) :    LinkedBlocks(new mosek::fusion::p_LinkedBlocks(this)){ mosek::fusion::p_LinkedBlocks::_get_impl(this)->_initialize(_7947); }void mosek::fusion::p_LinkedBlocks::_initialize  (int _7947){monty::rc_reserve __reserve_this(_pubthis);   {
    ints = ::mosek::fusion::p_LinkedInts::_new_LinkedInts(_7947);
    blocks = ::mosek::fusion::p_LinkedInts::_new_LinkedInts((int)128);
    bsize = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)128)));
    bfirst = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape((int)128)));
  }
}mosek::fusion::LinkedBlocks::t mosek::fusion::p_LinkedBlocks::_new_LinkedBlocks  (monty::rc_ptr< ::mosek::fusion::LinkedBlocks > _7948){ return new mosek::fusion::LinkedBlocks(_7948); }mosek::fusion::LinkedBlocks::LinkedBlocks  (monty::rc_ptr< ::mosek::fusion::LinkedBlocks > _7948) :    LinkedBlocks(new mosek::fusion::p_LinkedBlocks(this)){ mosek::fusion::p_LinkedBlocks::_get_impl(this)->_initialize(_7948); }void mosek::fusion::p_LinkedBlocks::_initialize  (monty::rc_ptr< ::mosek::fusion::LinkedBlocks > _7948){monty::rc_reserve __reserve_this(_pubthis);   {
    ints = ::mosek::fusion::p_LinkedInts::_new_LinkedInts(mosek::fusion::p_LinkedBlocks::_get_impl(_7948)->ints);
    blocks = ::mosek::fusion::p_LinkedInts::_new_LinkedInts(mosek::fusion::p_LinkedBlocks::_get_impl(_7948)->blocks);
    bsize = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_LinkedBlocks::_get_impl(_7948)->bsize);
    bfirst = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_LinkedBlocks::_get_impl(_7948)->bfirst);
  }
}void mosek::fusion::LinkedBlocks :: free(int _7949) { mosek::fusion::p_LinkedBlocks::_get_impl(this)->free(_7949); }void mosek::fusion::p_LinkedBlocks::free(int _7949){
  int _7950 = ((*bfirst)(_7949));
  ints->free(_7949,((*bsize)(_7949)));
  ((*bsize)(_7949)) = (-(int)1);
  ((*bfirst)(_7949)) = (-(int)1);
  blocks->free(_7950,(int)1);
}
int mosek::fusion::LinkedBlocks :: alloc(int _7951) { return mosek::fusion::p_LinkedBlocks::_get_impl(this)->alloc(_7951); }int mosek::fusion::p_LinkedBlocks::alloc(int _7951){
  int _12344;
  bool _12345 = (_7951 > (int)0);
  if (_12345)
  {
    _12344 = ints->alloc(_7951);
  }
  else
  {
    _12344 = (-(int)1);
  }
  int _7952 = _12344;
  int _7953 = blocks->alloc();
  if ((blocks->capacity() > (int)((bsize)->size(0))))
  {
    {
      std::shared_ptr< monty::ndarray< int,1 > > _7954 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(blocks->capacity())));
      _checked_ptr_1<int> _ptr__7954(_7954 ? _7954->raw() : nullptr,_7954 ? _7954->size(0) : 0);
      std::shared_ptr< monty::ndarray< int,1 > > _7955 = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(blocks->capacity())));
      _checked_ptr_1<int> _ptr__7955(_7955 ? _7955->raw() : nullptr,_7955 ? _7955->size(0) : 0);
      ::mosek::fusion::Utils::Tools::arraycopy(bsize,(int)0,_7954,(int)0,(int)((bsize)->size(0)));
      ::mosek::fusion::Utils::Tools::arraycopy(bfirst,(int)0,_7955,(int)0,(int)((bfirst)->size(0)));
      bsize = _7954;
      bfirst = _7955;
    }
  }
  {}
  ((*bfirst)(_7953)) = _7952;
  ((*bsize)(_7953)) = _7951;
  return _7953;
}
int mosek::fusion::LinkedBlocks :: maxidx(int _7956) { return mosek::fusion::p_LinkedBlocks::_get_impl(this)->maxidx(_7956); }int mosek::fusion::p_LinkedBlocks::maxidx(int _7956){
  return ints->maxidx(((*bfirst)(_7956)),((*bsize)(_7956)));
}
void mosek::fusion::LinkedBlocks :: get(int _7957,std::shared_ptr< monty::ndarray< int,1 > > _7958,int _7959) { mosek::fusion::p_LinkedBlocks::_get_impl(this)->get(_7957,_7958,_7959); }void mosek::fusion::p_LinkedBlocks::get(int _7957,std::shared_ptr< monty::ndarray< int,1 > > _7958,int _7959){
  _checked_ptr_1<int> _ptr__7958(_7958 ? _7958->raw() : nullptr, _7958 ? _7958->size(0) : 0);
  ints->get(((*bfirst)(_7957)),((*bsize)(_7957)),_7958,_7959);
}
int mosek::fusion::LinkedBlocks :: numblocks() { return mosek::fusion::p_LinkedBlocks::_get_impl(this)->numblocks(); }int mosek::fusion::p_LinkedBlocks::numblocks(){
  return (int)((bsize)->size(0));
}
int mosek::fusion::LinkedBlocks :: blocksize(int _7960) { return mosek::fusion::p_LinkedBlocks::_get_impl(this)->blocksize(_7960); }int mosek::fusion::p_LinkedBlocks::blocksize(int _7960){
  return ((*bsize)(_7960));
}
int mosek::fusion::LinkedBlocks :: capacity() { return mosek::fusion::p_LinkedBlocks::_get_impl(this)->capacity(); }int mosek::fusion::p_LinkedBlocks::capacity(){
  return ints->capacity();
}
bool mosek::fusion::LinkedBlocks :: validate() { return mosek::fusion::p_LinkedBlocks::_get_impl(this)->validate(); }bool mosek::fusion::p_LinkedBlocks::validate(){
  return (ints->validate() && blocks->validate());
}
void mosek::fusion::p_LinkedBlocks::destroy(){bfirst.reset();bsize.reset();blocks.reset();ints.reset();}void mosek::fusion::LinkedBlocks::destroy() { mosek::fusion::p_LinkedBlocks::_get_impl(this)->destroy(); }mosek::fusion::LinkedInts::LinkedInts(mosek::fusion::p_LinkedInts *_impl) : _impl(_impl) { /*std::cout << "LinkedInts() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::LinkedInts::~LinkedInts() { delete _impl; _impl = nullptr; }mosek::fusion::p_LinkedInts::p_LinkedInts  (::mosek::fusion::LinkedInts * _pubthis) :     _pubthis(_pubthis){}mosek::fusion::LinkedInts::t mosek::fusion::p_LinkedInts::_new_LinkedInts  (int _7961){ return new mosek::fusion::LinkedInts(_7961); }mosek::fusion::LinkedInts::LinkedInts  (int _7961) :    LinkedInts(new mosek::fusion::p_LinkedInts(this)){ mosek::fusion::p_LinkedInts::_get_impl(this)->_initialize(_7961); }void mosek::fusion::p_LinkedInts::_initialize  (int _7961){monty::rc_reserve __reserve_this(_pubthis);   {
    int _12346;
    bool _12347 = (_7961 > (int)0);
    if (_12347)
    {
      _12346 = _7961;
    }
    else
    {
      _12346 = (int)128;
    }
    int _7962 = _12346;
    next = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7962)));
    prev = std::shared_ptr< monty::ndarray< int,1 > >(new monty::ndarray< int,1 >(monty::shape(_7962)));
    first_used = (-(int)1);
    first_free = (int)0;
    last_free = (_7962 - (int)1);
    int _12348 = (int)1;
    int _12349 = _7962;
    for (int _7963 = _12348; _7963 < _12349; ++_7963)
    {
      {
        ((*prev)(_7963)) = (_7963 - (int)1);
        ((*next)((_7963 - (int)1))) = _7963;
      }
    }
    ((*prev)((int)0)) = (-(int)1);
    ((*next)((_7962 - (int)1))) = (-(int)1);
    nfree = _7962;
  }
}mosek::fusion::LinkedInts::t mosek::fusion::p_LinkedInts::_new_LinkedInts  (){ return new mosek::fusion::LinkedInts(); }mosek::fusion::LinkedInts::LinkedInts  () :    LinkedInts(new mosek::fusion::p_LinkedInts(this)){ mosek::fusion::p_LinkedInts::_get_impl(this)->_initialize(); }void mosek::fusion::p_LinkedInts::_initialize  (){monty::rc_reserve __reserve_this(_pubthis);   {
    mosek::fusion::p_LinkedInts::_initialize((int)128);
  }
}mosek::fusion::LinkedInts::t mosek::fusion::p_LinkedInts::_new_LinkedInts  (monty::rc_ptr< ::mosek::fusion::LinkedInts > _7964){ return new mosek::fusion::LinkedInts(_7964); }mosek::fusion::LinkedInts::LinkedInts  (monty::rc_ptr< ::mosek::fusion::LinkedInts > _7964) :    LinkedInts(new mosek::fusion::p_LinkedInts(this)){ mosek::fusion::p_LinkedInts::_get_impl(this)->_initialize(_7964); }void mosek::fusion::p_LinkedInts::_initialize  (monty::rc_ptr< ::mosek::fusion::LinkedInts > _7964){monty::rc_reserve __reserve_this(_pubthis);   {
    next = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_LinkedInts::_get_impl(_7964)->next);
    prev = ::mosek::fusion::Utils::Tools::arraycopy(mosek::fusion::p_LinkedInts::_get_impl(_7964)->prev);
    first_used = mosek::fusion::p_LinkedInts::_get_impl(_7964)->first_used;
    first_free = mosek::fusion::p_LinkedInts::_get_impl(_7964)->first_free;
    last_free = mosek::fusion::p_LinkedInts::_get_impl(_7964)->last_free;
    nfree = mosek::fusion::p_LinkedInts::_get_impl(_7964)->nfree;
  }
}void mosek::fusion::LinkedInts :: free(int _7965,int _7966) { mosek::fusion::p_LinkedInts::_get_impl(this)->free(_7965,_7966); }void mosek::fusion::p_LinkedInts::free(int _7965,int _7966){
  int _7967 = _7965;
  int _7968 = _7967;
  int _12350 = (int)0;
  int _12351 = (_7966 - (int)1);
  for (int _7969 = _12350; _7969 < _12351; ++_7969)
  {
    {
      _7968 = ((*next)(_7968));
    }
  }
  int _7970 = ((*prev)(_7967));
  int _7971 = ((*next)(_7968));
  if ((_7970 >= (int)0))
  {
    {
      ((*next)(_7970)) = _7971;
    }
  }
  {}
  if ((_7971 >= (int)0))
  {
    {
      ((*prev)(_7971)) = _7970;
    }
  }
  {}
  ((*prev)(_7967)) = (-(int)1);
  ((*next)(_7968)) = first_free;
  if ((first_free >= (int)0))
  {
    {
      ((*prev)(first_free)) = _7968;
    }
  }
  {}
  first_free = _7967;
  nfree += _7966;
}
int mosek::fusion::LinkedInts :: alloc() { return mosek::fusion::p_LinkedInts::_get_impl(this)->alloc(); }int mosek::fusion::p_LinkedInts::alloc(){
  return allocblock((int)1);
}
int mosek::fusion::LinkedInts :: alloc(int _7972) { return mosek::fusion::p_LinkedInts::_get_impl(this)->alloc(_7972); }int mosek::fusion::p_LinkedInts::alloc(int _7972){
  return allocblock(_7972);
}
void mosek::fusion::LinkedInts :: alloc(int _7973,std::shared_ptr< monty::ndarray< int,1 > > _7974,int _7975) { mosek::fusion::p_LinkedInts::_get_impl(this)->alloc(_7973,_7974,_7975); }void mosek::fusion::p_LinkedInts::alloc(int _7973,std::shared_ptr< monty::ndarray< int,1 > > _7974,int _7975){
  _checked_ptr_1<int> _ptr__7974(_7974 ? _7974->raw() : nullptr, _7974 ? _7974->size(0) : 0);
  int _7976 = allocblock(_7973);
  int _12352 = (int)0;
  int _12353 = _7973;
  for (int _7977 = _12352; _7977 < _12353; ++_7977)
  {
    {
      _ptr__7974[safe_add( _7977,_7975 )] = _7976;
      _7976 = ((*next)(_7976));
    }
  }
}
void mosek::fusion::LinkedInts :: get(int _7978,int _7979,std::shared_ptr< monty::ndarray< int,1 > > _7980,int _7981) { mosek::fusion::p_LinkedInts::_get_impl(this)->get(_7978,_7979,_7980,_7981); }void mosek::fusion::p_LinkedInts::get(int _7978,int _7979,std::shared_ptr< monty::ndarray< int,1 > > _7980,int _7981){
  _checked_ptr_1<int> _ptr__7980(_7980 ? _7980->raw() : nullptr, _7980 ? _7980->size(0) : 0);
  int _7982 = _7978;
  int _12354 = (int)0;
  int _12355 = _7979;
  for (int _7983 = _12354; _7983 < _12355; ++_7983)
  {
    {
      _ptr__7980[safe_add( _7983,_7981 )] = _7982;
      _7982 = ((*next)(_7982));
    }
  }
}
int mosek::fusion::LinkedInts :: maxidx(int _7984,int _7985) { return mosek::fusion::p_LinkedInts::_get_impl(this)->maxidx(_7984,_7985); }int mosek::fusion::p_LinkedInts::maxidx(int _7984,int _7985){
  int _7986 = _7984;
  int _7987 = _7984;
  int _12356 = (int)1;
  int _12357 = _7985;
  for (int _7988 = _12356; _7988 < _12357; ++_7988)
  {
    {
      _7987 = ((*next)(_7987));
      if ((_7986 < _7987))
      {
        {
          _7986 = _7987;
        }
      }
      {}
    }
  }
  return _7986;
}
int mosek::fusion::p_LinkedInts::allocblock(int _7989){
  int _7990 = (int)((next)->size(0));
  if ((nfree < _7989))
  {
    {
      int _7991 = (_7989 - nfree);
      if ((_7991 < _7990))
      {
        {
          _7991 = _7990;
        }
      }
      {}
      recap(safe_add( _7991,_7990 ));
    }
  }
  {}
  int _7992 = first_free;
  int _7993 = _7992;
  int _12358 = (int)0;
  int _12359 = (_7989 - (int)1);
  for (int _7994 = _12358; _7994 < _12359; ++_7994)
  {
    {
      _7993 = ((*next)(_7993));
    }
  }
  first_free = ((*next)(_7993));
  if ((first_free < (int)0))
  {
    {
      last_free = (-(int)1);
    }
  }
  else
  {
    {
      ((*prev)(first_free)) = (-(int)1);
    }
  }
  ((*next)(_7993)) = first_used;
  if ((first_used >= (int)0))
  {
    {
      ((*prev)(first_used)) = _7993;
    }
  }
  {}
  first_used = _7992;
  nfree -= _7989;
  return _7992;
}
void mosek::fusion::p_LinkedInts::recap(int _7995){
  int _7996 = (int)((next)->size(0));
  if ((_7995 > _7996))
  {
    {
      next = ::mosek::fusion::p_CommonTools::resize(next,_7995);
      prev = ::mosek::fusion::p_CommonTools::resize(prev,_7995);
      int _12360 = _7996;
      int _12361 = (_7995 - (int)1);
      for (int _7997 = _12360; _7997 < _12361; ++_7997)
      {
        {
          ((*next)(_7997)) = safe_add( _7997,(int)1 );
          ((*prev)(safe_add( _7997,(int)1 ))) = _7997;
        }
      }
      ((*next)((_7995 - (int)1))) = (-(int)1);
      ((*prev)(_7996)) = last_free;
      if ((last_free < (int)0))
      {
        {
          first_free = _7996;
        }
      }
      else
      {
        {
          ((*next)(last_free)) = _7996;
        }
      }
      last_free = (_7995 - (int)1);
      nfree += (_7995 - _7996);
    }
  }
  {}
}
int mosek::fusion::LinkedInts :: capacity() { return mosek::fusion::p_LinkedInts::_get_impl(this)->capacity(); }int mosek::fusion::p_LinkedInts::capacity(){
  return (int)((next)->size(0));
}
bool mosek::fusion::LinkedInts :: validate() { return mosek::fusion::p_LinkedInts::_get_impl(this)->validate(); }bool mosek::fusion::p_LinkedInts::validate(){
  std::shared_ptr< monty::ndarray< bool,1 > > _7998 = std::shared_ptr< monty::ndarray< bool,1 > >(new monty::ndarray< bool,1 >(monty::shape((int)((next)->size(0)))));
  int _7999 = first_used;
  while ( (_7999 >= (int)0) )
  {
    {
      ((*_7998)(_7999)) = true;
      _7999 = ((*next)(_7999));
      if (((_7999 >= (int)0) && ((*_7998)(_7999))))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("used list/next is inconsistent"));
        }
      }
      {}
    }
  }
  _7999 = first_free;
  int _8000 = (int)0;
  while ( (_7999 >= (int)0) )
  {
    {
      ++ _8000;
      ((*_7998)(_7999)) = true;
      _7999 = ((*next)(_7999));
      if (((_7999 >= (int)0) && ((*_7998)(_7999))))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("free list/next is inconsistent"));
        }
      }
      {}
    }
  }
  if ((_8000 != nfree))
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("free next list did not contain nfree elements"));
    }
  }
  {}
  int _12362 = (int)0;
  int _12363 = (int)((_7998)->size(0));
  for (int _8001 = _12362; _8001 < _12363; ++_8001)
  {
    {
      if ((!((*_7998)(_7999))))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("elements missing from used+free list"));
        }
      }
      {}
    }
  }
  int _12364 = (int)0;
  int _12365 = (int)((_7998)->size(0));
  for (int _8002 = _12364; _8002 < _12365; ++_8002)
  {
    {
      ((*_7998)(_8002)) = false;
    }
  }
  _7999 = last_free;
  int _8003 = (int)0;
  while ( (_7999 >= (int)0) )
  {
    {
      ++ _8003;
      ((*_7998)(_7999)) = true;
      _7999 = ((*prev)(_7999));
      if (((_7999 >= (int)0) && ((*_7998)(_7999))))
      {
        {
          throw ::mosek::fusion::UnexpectedError(std::string ("prev list is inconsistent"));
        }
      }
      {}
    }
  }
  if ((_8003 != nfree))
  {
    {
      throw ::mosek::fusion::UnexpectedError(std::string ("free prev list did not contain nfree elements"));
    }
  }
  {}
  return true;
}
void mosek::fusion::p_LinkedInts::destroy(){prev.reset();next.reset();}void mosek::fusion::LinkedInts::destroy() { mosek::fusion::p_LinkedInts::_get_impl(this)->destroy(); }mosek::fusion::Parameters::Parameters(mosek::fusion::p_Parameters *_impl) : _impl(_impl) { /*std::cout << "Parameters() " << this << std::endl;*/ _impl->_pubthis = this; }mosek::fusion::Parameters::~Parameters() { delete _impl; _impl = nullptr; }mosek::fusion::p_Parameters::p_Parameters  (::mosek::fusion::Parameters * _pubthis) :     _pubthis(_pubthis){}void mosek::fusion::Parameters::setParameter  ( monty::rc_ptr< ::mosek::fusion::Model > _8004,    const std::string & _8005,    double _8006) { mosek::fusion::p_Parameters::setParameter(_8004,_8005,_8006); }void mosek::fusion::p_Parameters::setParameter(monty::rc_ptr< ::mosek::fusion::Model > _8004,const std::string & _8005,double _8006){
  if (false)
  {
    {
    }
  }
  else if((_8005 == std::string ("autoUpdateSolInfo")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (autoUpdateSolInfo)"));
    }
  }
  else if((_8005 == std::string ("removeUnusedSolutions")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (removeUnusedSolutions)"));
    }
  }
  {}
  if ((_8005 == std::string ("numThreads")))
  {
    {
      if (((_8006 - (int)_8006) == 0.0))
      {
        {
          double _8007 = _8006;
          if (((int)0 <= _8007))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8004.get())->task_put_param(std::string ("MSK_IPAR_NUM_THREADS"),_8007);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (numThreads)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (numThreads)"));
        }
      }
    }
  }
  else if((_8005 == std::string ("intpntMultiThread")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMultiThread)"));
    }
  }
  {}
  if ((_8005 == std::string ("mtSpincount")))
  {
    {
      if (((_8006 - (int)_8006) == 0.0))
      {
        {
          double _8008 = _8006;
          if ((((int)0 <= _8008) && (_8008 <= (int)1000000000)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8004.get())->task_put_param(std::string ("MSK_IPAR_MT_SPINCOUNT"),_8008);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mtSpincount)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mtSpincount)"));
        }
      }
    }
  }
  else if((_8005 == std::string ("optimizer")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (optimizer)"));
    }
  }
  {}
  if ((_8005 == std::string ("biMaxIterations")))
  {
    {
      if (((_8006 - (int)_8006) == 0.0))
      {
        {
          double _8009 = _8006;
          if (((int)0 <= _8009))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8004.get())->task_put_param(std::string ("MSK_IPAR_BI_MAX_ITERATIONS"),_8009);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biMaxIterations)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biMaxIterations)"));
        }
      }
    }
  }
  {}
  if ((_8005 == std::string ("licenseTrhExpiryWrn")))
  {
    {
      if (((_8006 - (int)_8006) == 0.0))
      {
        {
          double _8010 = _8006;
          if (((int)0 <= _8010))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8004.get())->task_put_param(std::string ("MSK_IPAR_LICENSE_TRH_EXPIRY_WRN"),_8010);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseTrhExpiryWrn)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseTrhExpiryWrn)"));
        }
      }
    }
  }
  {}
  if ((_8005 == std::string ("logCutSecondOpt")))
  {
    {
      if (((_8006 - (int)_8006) == 0.0))
      {
        {
          double _8011 = _8006;
          if (((int)0 <= _8011))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8004.get())->task_put_param(std::string ("MSK_IPAR_LOG_CUT_SECOND_OPT"),_8011);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logCutSecondOpt)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logCutSecondOpt)"));
        }
      }
    }
  }
  {}
  if ((_8005 == std::string ("logResponse")))
  {
    {
      if (((_8006 - (int)_8006) == 0.0))
      {
        {
          double _8012 = _8006;
          if (((int)0 <= _8012))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8004.get())->task_put_param(std::string ("MSK_IPAR_LOG_RESPONSE"),_8012);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logResponse)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logResponse)"));
        }
      }
    }
  }
  else if((_8005 == std::string ("logLocalInfo")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logLocalInfo)"));
    }
  }
  {}
  if ((_8005 == std::string ("logBi")))
  {
    {
      if (((_8006 - (int)_8006) == 0.0))
      {
        {
          double _8013 = _8006;
          if (((int)0 <= _8013))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8004.get())->task_put_param(std::string ("MSK_IPAR_LOG_BI"),_8013);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logBi)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logBi)"));
        }
      }
    }
  }
  {}
  if ((_8005 == std::string ("logBiFreq")))
  {
    {
      if (((_8006 - (int)_8006) == 0.0))
      {
        {
          double _8014 = _8006;
          if (((int)0 <= _8014))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8004.get())->task_put_param(std::string ("MSK_IPAR_LOG_BI_FREQ"),_8014);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logBiFreq)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logBiFreq)"));
        }
      }
    }
  }
  else if((_8005 == std::string ("biCleanOptimizer")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biCleanOptimizer)"));
    }
  }
  else if((_8005 == std::string ("intpntStartingPoint")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntStartingPoint)"));
    }
  }
  else if((_8005 == std::string ("intpntDiffStep")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntDiffStep)"));
    }
  }
  else if((_8005 == std::string ("intpntScaling")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntScaling)"));
    }
  }
  else if((_8005 == std::string ("intpntSolveForm")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntSolveForm)"));
    }
  }
  {}
  if ((_8005 == std::string ("logIntpnt")))
  {
    {
      if (((_8006 - (int)_8006) == 0.0))
      {
        {
          double _8015 = _8006;
          if (((int)0 <= _8015))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8004.get())->task_put_param(std::string ("MSK_IPAR_LOG_INTPNT"),_8015);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logIntpnt)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logIntpnt)"));
        }
      }
    }
  }
  {}
  if ((_8005 == std::string ("intpntMaxIterations")))
  {
    {
      if (((_8006 - (int)_8006) == 0.0))
      {
        {
          double _8016 = _8006;
          if (((int)0 <= _8016))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8004.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_MAX_ITERATIONS"),_8016);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMaxIterations)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMaxIterations)"));
        }
      }
    }
  }
  {}
  if ((_8005 == std::string ("intpntOffColTrh")))
  {
    {
      if (((_8006 - (int)_8006) == 0.0))
      {
        {
          double _8017 = _8006;
          if (((int)0 <= _8017))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8004.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_OFF_COL_TRH"),_8017);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOffColTrh)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOffColTrh)"));
        }
      }
    }
  }
  else if((_8005 == std::string ("intpntOrderMethod")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOrderMethod)"));
    }
  }
  {}
  if ((_8005 == std::string ("intpntOrderGpNumSeeds")))
  {
    {
      if (((_8006 - (int)_8006) == 0.0))
      {
        {
          double _8018 = _8006;
          if (((int)0 <= _8018))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8004.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_ORDER_GP_NUM_SEEDS"),_8018);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOrderGpNumSeeds)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOrderGpNumSeeds)"));
        }
      }
    }
  }
  else if((_8005 == std::string ("intpntBasis")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntBasis)"));
    }
  }
  else if((_8005 == std::string ("biIgnoreMaxIter")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biIgnoreMaxIter)"));
    }
  }
  else if((_8005 == std::string ("biIgnoreNumError")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biIgnoreNumError)"));
    }
  }
  {}
  if ((_8005 == std::string ("intpntMaxNumCor")))
  {
    {
      if (((_8006 - (int)_8006) == 0.0))
      {
        {
          double _8019 = _8006;
          if (((-(int)1) <= _8019))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8004.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_MAX_NUM_COR"),_8019);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMaxNumCor)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMaxNumCor)"));
        }
      }
    }
  }
  else if((_8005 == std::string ("presolveUse")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveUse)"));
    }
  }
  {}
  if ((_8005 == std::string ("presolveLevel")))
  {
    {
      if (((_8006 - (int)_8006) == 0.0))
      {
        {
          double _8020 = _8006;
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8004.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_LEVEL"),_8020);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLevel)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLevel)"));
        }
      }
    }
  }
  {}
  if ((_8005 == std::string ("logPresolve")))
  {
    {
      if (((_8006 - (int)_8006) == 0.0))
      {
        {
          double _8021 = _8006;
          if (((int)0 <= _8021))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8004.get())->task_put_param(std::string ("MSK_IPAR_LOG_PRESOLVE"),_8021);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logPresolve)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logPresolve)"));
        }
      }
    }
  }
  else if((_8005 == std::string ("presolveLindepUse")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepUse)"));
    }
  }
  {}
  if ((_8005 == std::string ("presolveMaxNumPass")))
  {
    {
      if (((_8006 - (int)_8006) == 0.0))
      {
        {
          double _8022 = _8006;
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8004.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_MAX_NUM_PASS"),_8022);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveMaxNumPass)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveMaxNumPass)"));
        }
      }
    }
  }
  {}
  if ((_8005 == std::string ("presolveEliminatorMaxNumTries")))
  {
    {
      if (((_8006 - (int)_8006) == 0.0))
      {
        {
          double _8023 = _8006;
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8004.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_ELIMINATOR_MAX_NUM_TRIES"),_8023);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveEliminatorMaxNumTries)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveEliminatorMaxNumTries)"));
        }
      }
    }
  }
  {}
  if ((_8005 == std::string ("presolveEliminatorMaxFill")))
  {
    {
      if (((_8006 - (int)_8006) == 0.0))
      {
        {
          double _8024 = _8006;
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8004.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_ELIMINATOR_MAX_FILL"),_8024);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveEliminatorMaxFill)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveEliminatorMaxFill)"));
        }
      }
    }
  }
  {}
  if ((_8005 == std::string ("simPrimalCrash")))
  {
    {
      if (((_8006 - (int)_8006) == 0.0))
      {
        {
          double _8025 = _8006;
          if (((int)0 <= _8025))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8004.get())->task_put_param(std::string ("MSK_IPAR_SIM_PRIMAL_CRASH"),_8025);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalCrash)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalCrash)"));
        }
      }
    }
  }
  {}
  if ((_8005 == std::string ("logSim")))
  {
    {
      if (((_8006 - (int)_8006) == 0.0))
      {
        {
          double _8026 = _8006;
          if (((int)0 <= _8026))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8004.get())->task_put_param(std::string ("MSK_IPAR_LOG_SIM"),_8026);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSim)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSim)"));
        }
      }
    }
  }
  {}
  if ((_8005 == std::string ("logSimMinor")))
  {
    {
      if (((_8006 - (int)_8006) == 0.0))
      {
        {
          double _8027 = _8006;
          if (((int)0 <= _8027))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8004.get())->task_put_param(std::string ("MSK_IPAR_LOG_SIM_MINOR"),_8027);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSimMinor)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSimMinor)"));
        }
      }
    }
  }
  {}
  if ((_8005 == std::string ("logSimFreq")))
  {
    {
      if (((_8006 - (int)_8006) == 0.0))
      {
        {
          double _8028 = _8006;
          if (((int)0 <= _8028))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8004.get())->task_put_param(std::string ("MSK_IPAR_LOG_SIM_FREQ"),_8028);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSimFreq)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSimFreq)"));
        }
      }
    }
  }
  {}
  if ((_8005 == std::string ("simPrimalRestrictSelection")))
  {
    {
      if (((_8006 - (int)_8006) == 0.0))
      {
        {
          double _8029 = _8006;
          if ((((int)0 <= _8029) && (_8029 <= (int)100)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8004.get())->task_put_param(std::string ("MSK_IPAR_SIM_PRIMAL_RESTRICT_SELECTION"),_8029);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalRestrictSelection)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalRestrictSelection)"));
        }
      }
    }
  }
  else if((_8005 == std::string ("simPrimalSelection")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalSelection)"));
    }
  }
  {}
  if ((_8005 == std::string ("simDualRestrictSelection")))
  {
    {
      if (((_8006 - (int)_8006) == 0.0))
      {
        {
          double _8030 = _8006;
          if ((((int)0 <= _8030) && (_8030 <= (int)100)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8004.get())->task_put_param(std::string ("MSK_IPAR_SIM_DUAL_RESTRICT_SELECTION"),_8030);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualRestrictSelection)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualRestrictSelection)"));
        }
      }
    }
  }
  else if((_8005 == std::string ("simDualSelection")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualSelection)"));
    }
  }
  {}
  if ((_8005 == std::string ("simMaxIterations")))
  {
    {
      if (((_8006 - (int)_8006) == 0.0))
      {
        {
          double _8031 = _8006;
          if (((int)0 <= _8031))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8004.get())->task_put_param(std::string ("MSK_IPAR_SIM_MAX_ITERATIONS"),_8031);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simMaxIterations)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simMaxIterations)"));
        }
      }
    }
  }
  else if((_8005 == std::string ("simHotstartLu")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simHotstartLu)"));
    }
  }
  {}
  if ((_8005 == std::string ("simRefactorFreq")))
  {
    {
      if (((_8006 - (int)_8006) == 0.0))
      {
        {
          double _8032 = _8006;
          if (((int)0 <= _8032))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8004.get())->task_put_param(std::string ("MSK_IPAR_SIM_REFACTOR_FREQ"),_8032);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simRefactorFreq)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simRefactorFreq)"));
        }
      }
    }
  }
  {}
  if ((_8005 == std::string ("simSeed")))
  {
    {
      if (((_8006 - (int)_8006) == 0.0))
      {
        {
          double _8033 = _8006;
          if ((((int)0 <= _8033) && (_8033 <= (int)32749)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8004.get())->task_put_param(std::string ("MSK_IPAR_SIM_SEED"),_8033);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSeed)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSeed)"));
        }
      }
    }
  }
  else if((_8005 == std::string ("mioMode")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMode)"));
    }
  }
  {}
  if ((_8005 == std::string ("logMio")))
  {
    {
      if (((_8006 - (int)_8006) == 0.0))
      {
        {
          double _8034 = _8006;
          if (((int)0 <= _8034))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8004.get())->task_put_param(std::string ("MSK_IPAR_LOG_MIO"),_8034);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logMio)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logMio)"));
        }
      }
    }
  }
  {}
  if ((_8005 == std::string ("logMioFreq")))
  {
    {
      if (((_8006 - (int)_8006) == 0.0))
      {
        {
          double _8035 = _8006;
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8004.get())->task_put_param(std::string ("MSK_IPAR_LOG_MIO_FREQ"),_8035);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logMioFreq)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logMioFreq)"));
        }
      }
    }
  }
  {}
  if ((_8005 == std::string ("mioMaxNumRelaxs")))
  {
    {
      if (((_8006 - (int)_8006) == 0.0))
      {
        {
          double _8036 = _8006;
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8004.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_RELAXS"),_8036);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumRelaxs)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumRelaxs)"));
        }
      }
    }
  }
  {}
  if ((_8005 == std::string ("mioMaxNumBranches")))
  {
    {
      if (((_8006 - (int)_8006) == 0.0))
      {
        {
          double _8037 = _8006;
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8004.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_BRANCHES"),_8037);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumBranches)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumBranches)"));
        }
      }
    }
  }
  {}
  if ((_8005 == std::string ("mioMaxNumRootCutRounds")))
  {
    {
      if (((_8006 - (int)_8006) == 0.0))
      {
        {
          double _8038 = _8006;
          if (((int)0 <= _8038))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8004.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_ROOT_CUT_ROUNDS"),_8038);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumRootCutRounds)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumRootCutRounds)"));
        }
      }
    }
  }
  {}
  if ((_8005 == std::string ("mioMaxNumSolutions")))
  {
    {
      if (((_8006 - (int)_8006) == 0.0))
      {
        {
          double _8039 = _8006;
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8004.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_SOLUTIONS"),_8039);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumSolutions)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumSolutions)"));
        }
      }
    }
  }
  else if((_8005 == std::string ("mioNodeSelection")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioNodeSelection)"));
    }
  }
  {}
  if ((_8005 == std::string ("mioHeuristicLevel")))
  {
    {
      if (((_8006 - (int)_8006) == 0.0))
      {
        {
          double _8040 = _8006;
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8004.get())->task_put_param(std::string ("MSK_IPAR_MIO_HEURISTIC_LEVEL"),_8040);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioHeuristicLevel)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioHeuristicLevel)"));
        }
      }
    }
  }
  {}
  if ((_8005 == std::string ("mioProbingLevel")))
  {
    {
      if (((_8006 - (int)_8006) == 0.0))
      {
        {
          double _8041 = _8006;
          if ((((-(int)1) <= _8041) && (_8041 <= (int)3)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8004.get())->task_put_param(std::string ("MSK_IPAR_MIO_PROBING_LEVEL"),_8041);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioProbingLevel)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioProbingLevel)"));
        }
      }
    }
  }
  {}
  if ((_8005 == std::string ("mioCutSelectionLevel")))
  {
    {
      if (((_8006 - (int)_8006) == 0.0))
      {
        {
          double _8042 = _8006;
          if ((((-(int)1) <= _8042) && (_8042 <= (int)1)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8004.get())->task_put_param(std::string ("MSK_IPAR_MIO_CUT_SELECTION_LEVEL"),_8042);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutSelectionLevel)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutSelectionLevel)"));
        }
      }
    }
  }
  {}
  if ((_8005 == std::string ("mioVbDetectionLevel")))
  {
    {
      if (((_8006 - (int)_8006) == 0.0))
      {
        {
          double _8043 = _8006;
          if ((((-(int)1) <= _8043) && (_8043 <= (int)2)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8004.get())->task_put_param(std::string ("MSK_IPAR_MIO_VB_DETECTION_LEVEL"),_8043);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioVbDetectionLevel)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioVbDetectionLevel)"));
        }
      }
    }
  }
  else if((_8005 == std::string ("mioBranchDir")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioBranchDir)"));
    }
  }
  else if((_8005 == std::string ("mioRootOptimizer")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRootOptimizer)"));
    }
  }
  else if((_8005 == std::string ("mioNodeOptimizer")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioNodeOptimizer)"));
    }
  }
  else if((_8005 == std::string ("mioPerspectiveReformulate")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioPerspectiveReformulate)"));
    }
  }
  else if((_8005 == std::string ("mioPropagateObjectiveConstraint")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioPropagateObjectiveConstraint)"));
    }
  }
  {}
  if ((_8005 == std::string ("mioSeed")))
  {
    {
      if (((_8006 - (int)_8006) == 0.0))
      {
        {
          double _8044 = _8006;
          if (((int)0 <= _8044))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8004.get())->task_put_param(std::string ("MSK_IPAR_MIO_SEED"),_8044);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioSeed)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioSeed)"));
        }
      }
    }
  }
  else if((_8005 == std::string ("mioConicOuterApproximation")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioConicOuterApproximation)"));
    }
  }
  else if((_8005 == std::string ("writeLpQuotedNames")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpQuotedNames)"));
    }
  }
  {}
  if ((_8005 == std::string ("writeLpLineWidth")))
  {
    {
      if (((_8006 - (int)_8006) == 0.0))
      {
        {
          double _8045 = _8006;
          if (((int)40 <= _8045))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8004.get())->task_put_param(std::string ("MSK_IPAR_WRITE_LP_LINE_WIDTH"),_8045);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpLineWidth)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpLineWidth)"));
        }
      }
    }
  }
  {}
  if ((_8005 == std::string ("writeLpTermsPerLine")))
  {
    {
      if (((_8006 - (int)_8006) == 0.0))
      {
        {
          double _8046 = _8006;
          if (((int)0 <= _8046))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8004.get())->task_put_param(std::string ("MSK_IPAR_WRITE_LP_TERMS_PER_LINE"),_8046);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpTermsPerLine)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpTermsPerLine)"));
        }
      }
    }
  }
  else if((_8005 == std::string ("writeLpFullObj")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpFullObj)"));
    }
  }
  {}
  if ((_8005 == std::string ("logInfeasAna")))
  {
    {
      if (((_8006 - (int)_8006) == 0.0))
      {
        {
          double _8047 = _8006;
          if (((int)0 <= _8047))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8004.get())->task_put_param(std::string ("MSK_IPAR_LOG_INFEAS_ANA"),_8047);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logInfeasAna)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logInfeasAna)"));
        }
      }
    }
  }
  else if((_8005 == std::string ("licenseWait")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseWait)"));
    }
  }
  else if((_8005 == std::string ("licenseSuppressExpireWrns")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseSuppressExpireWrns)"));
    }
  }
  {}
  if ((_8005 == std::string ("licensePauseTime")))
  {
    {
      if (((_8006 - (int)_8006) == 0.0))
      {
        {
          double _8048 = _8006;
          if ((((int)0 <= _8048) && (_8048 <= (int)1000000)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8004.get())->task_put_param(std::string ("MSK_IPAR_LICENSE_PAUSE_TIME"),_8048);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licensePauseTime)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licensePauseTime)"));
        }
      }
    }
  }
  else if((_8005 == std::string ("licenseDebug")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseDebug)"));
    }
  }
  {}
  if ((_8005 == std::string ("log")))
  {
    {
      if (((_8006 - (int)_8006) == 0.0))
      {
        {
          double _8049 = _8006;
          if (((int)0 <= _8049))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8004.get())->task_put_param(std::string ("MSK_IPAR_LOG"),_8049);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (log)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (log)"));
        }
      }
    }
  }
  {}
  if ((_8005 == std::string ("logExpand")))
  {
    {
      if (((_8006 - (int)_8006) == 0.0))
      {
        {
          double _8050 = _8006;
          if (((int)0 <= _8050))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8004.get())->task_put_param(std::string ("MSK_IPAR_LOG_EXPAND"),_8050);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logExpand)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logExpand)"));
        }
      }
    }
  }
  {}
  if ((_8005 == std::string ("logFile")))
  {
    {
      if (((_8006 - (int)_8006) == 0.0))
      {
        {
          double _8051 = _8006;
          if (((int)0 <= _8051))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8004.get())->task_put_param(std::string ("MSK_IPAR_LOG_FILE"),_8051);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logFile)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logFile)"));
        }
      }
    }
  }
  {}
  if ((_8005 == std::string ("logOrder")))
  {
    {
      if (((_8006 - (int)_8006) == 0.0))
      {
        {
          double _8052 = _8006;
          if (((int)0 <= _8052))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8004.get())->task_put_param(std::string ("MSK_IPAR_LOG_ORDER"),_8052);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logOrder)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logOrder)"));
        }
      }
    }
  }
  else if((_8005 == std::string ("simScaling")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simScaling)"));
    }
  }
  else if((_8005 == std::string ("simScalingMethod")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simScalingMethod)"));
    }
  }
  {}
  if ((_8005 == std::string ("simPrimalPhaseoneMethod")))
  {
    {
      if (((_8006 - (int)_8006) == 0.0))
      {
        {
          double _8053 = _8006;
          if ((((int)0 <= _8053) && (_8053 <= (int)10)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8004.get())->task_put_param(std::string ("MSK_IPAR_SIM_PRIMAL_PHASEONE_METHOD"),_8053);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalPhaseoneMethod)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalPhaseoneMethod)"));
        }
      }
    }
  }
  {}
  if ((_8005 == std::string ("simDualPhaseoneMethod")))
  {
    {
      if (((_8006 - (int)_8006) == 0.0))
      {
        {
          double _8054 = _8006;
          if ((((int)0 <= _8054) && (_8054 <= (int)10)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8004.get())->task_put_param(std::string ("MSK_IPAR_SIM_DUAL_PHASEONE_METHOD"),_8054);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualPhaseoneMethod)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualPhaseoneMethod)"));
        }
      }
    }
  }
  {}
  if ((_8005 == std::string ("simMaxNumSetbacks")))
  {
    {
      if (((_8006 - (int)_8006) == 0.0))
      {
        {
          double _8055 = _8006;
          if (((int)0 <= _8055))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8004.get())->task_put_param(std::string ("MSK_IPAR_SIM_MAX_NUM_SETBACKS"),_8055);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simMaxNumSetbacks)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simMaxNumSetbacks)"));
        }
      }
    }
  }
  else if((_8005 == std::string ("simHotstart")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simHotstart)"));
    }
  }
  else if((_8005 == std::string ("simBasisFactorUse")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simBasisFactorUse)"));
    }
  }
  else if((_8005 == std::string ("simDegen")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDegen)"));
    }
  }
  else if((_8005 == std::string ("simReformulation")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simReformulation)"));
    }
  }
  else if((_8005 == std::string ("simExploitDupvec")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simExploitDupvec)"));
    }
  }
  else if((_8005 == std::string ("simSaveLu")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSaveLu)"));
    }
  }
  else if((_8005 == std::string ("simNonSingular")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simNonSingular)"));
    }
  }
  {}
  if ((_8005 == std::string ("simDualCrash")))
  {
    {
      if (((_8006 - (int)_8006) == 0.0))
      {
        {
          double _8056 = _8006;
          if (((int)0 <= _8056))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8004.get())->task_put_param(std::string ("MSK_IPAR_SIM_DUAL_CRASH"),_8056);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualCrash)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualCrash)"));
        }
      }
    }
  }
  else if((_8005 == std::string ("infeasPreferPrimal")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (infeasPreferPrimal)"));
    }
  }
  {}
  if ((_8005 == std::string ("mioRootRepeatPresolveLevel")))
  {
    {
      if (((_8006 - (int)_8006) == 0.0))
      {
        {
          double _8057 = _8006;
          if ((((-(int)1) <= _8057) && (_8057 <= (int)1)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8004.get())->task_put_param(std::string ("MSK_IPAR_MIO_ROOT_REPEAT_PRESOLVE_LEVEL"),_8057);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRootRepeatPresolveLevel)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRootRepeatPresolveLevel)"));
        }
      }
    }
  }
  else if((_8005 == std::string ("mioCutCmir")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutCmir)"));
    }
  }
  else if((_8005 == std::string ("mioCutClique")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutClique)"));
    }
  }
  else if((_8005 == std::string ("mioCutImpliedBound")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutImpliedBound)"));
    }
  }
  else if((_8005 == std::string ("mioCutKnapsackCover")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutKnapsackCover)"));
    }
  }
  else if((_8005 == std::string ("mioCutGmi")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutGmi)"));
    }
  }
  {}
  if ((_8005 == std::string ("presolveLindepRelWorkTrh")))
  {
    {
      if (((_8006 - (int)_8006) == 0.0))
      {
        {
          double _8058 = _8006;
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8004.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_LINDEP_REL_WORK_TRH"),_8058);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepRelWorkTrh)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepRelWorkTrh)"));
        }
      }
    }
  }
  {}
  if ((_8005 == std::string ("presolveLindepAbsWorkTrh")))
  {
    {
      if (((_8006 - (int)_8006) == 0.0))
      {
        {
          double _8059 = _8006;
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8004.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_LINDEP_ABS_WORK_TRH"),_8059);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepAbsWorkTrh)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepAbsWorkTrh)"));
        }
      }
    }
  }
  else if((_8005 == std::string ("cacheLicense")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (cacheLicense)"));
    }
  }
  else if((_8005 == std::string ("intpntRegularizationUse")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntRegularizationUse)"));
    }
  }
  else if((_8005 == std::string ("simSolveForm")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSolveForm)"));
    }
  }
  else if((_8005 == std::string ("simSwitchOptimizer")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSwitchOptimizer)"));
    }
  }
  {}
  if ((_8005 == std::string ("mioRinsMaxNodes")))
  {
    {
      if (((_8006 - (int)_8006) == 0.0))
      {
        {
          double _8060 = _8006;
          if (((-(int)1) <= _8060))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8004.get())->task_put_param(std::string ("MSK_IPAR_MIO_RINS_MAX_NODES"),_8060);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRinsMaxNodes)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRinsMaxNodes)"));
        }
      }
    }
  }
  {}
  if ((_8005 == std::string ("mioFeaspumpLevel")))
  {
    {
      if (((_8006 - (int)_8006) == 0.0))
      {
        {
          double _8061 = _8006;
          if ((((-(int)1) <= _8061) && (_8061 <= (int)2)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8004.get())->task_put_param(std::string ("MSK_IPAR_MIO_FEASPUMP_LEVEL"),_8061);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioFeaspumpLevel)"));
            }
          }
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioFeaspumpLevel)"));
        }
      }
    }
  }
  {}
  if ((_8005 == std::string ("optimizerMaxTime")))
  {
    {
      double _8062 = _8006;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_8004.get())->task_put_param(std::string ("MSK_DPAR_OPTIMIZER_MAX_TIME"),_8062);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (optimizerMaxTime)"));
        }
      }
    }
  }
  {}
  if ((_8005 == std::string ("lowerObjCut")))
  {
    {
      double _8063 = _8006;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_8004.get())->task_put_param(std::string ("MSK_DPAR_LOWER_OBJ_CUT"),_8063);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (lowerObjCut)"));
        }
      }
    }
  }
  {}
  if ((_8005 == std::string ("upperObjCut")))
  {
    {
      double _8064 = _8006;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_8004.get())->task_put_param(std::string ("MSK_DPAR_UPPER_OBJ_CUT"),_8064);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (upperObjCut)"));
        }
      }
    }
  }
  {}
  if ((_8005 == std::string ("upperObjCutFiniteTrh")))
  {
    {
      double _8065 = _8006;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_8004.get())->task_put_param(std::string ("MSK_DPAR_UPPER_OBJ_CUT_FINITE_TRH"),_8065);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (upperObjCutFiniteTrh)"));
        }
      }
    }
  }
  {}
  if ((_8005 == std::string ("lowerObjCutFiniteTrh")))
  {
    {
      double _8066 = _8006;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_8004.get())->task_put_param(std::string ("MSK_DPAR_LOWER_OBJ_CUT_FINITE_TRH"),_8066);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (lowerObjCutFiniteTrh)"));
        }
      }
    }
  }
  {}
  if ((_8005 == std::string ("intpntTolRelGap")))
  {
    {
      double _8067 = _8006;
      if ((1.000000e-14 <= _8067))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8004.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_REL_GAP"),_8067);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolRelGap)"));
        }
      }
    }
  }
  {}
  if ((_8005 == std::string ("intpntTolStepSize")))
  {
    {
      double _8068 = _8006;
      if (((0.000000e+00 <= _8068) && (_8068 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8004.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_STEP_SIZE"),_8068);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolStepSize)"));
        }
      }
    }
  }
  {}
  if ((_8005 == std::string ("simLuTolRelPiv")))
  {
    {
      double _8069 = _8006;
      if (((1.000000e-06 <= _8069) && (_8069 <= 9.999990e-01)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8004.get())->task_put_param(std::string ("MSK_DPAR_SIM_LU_TOL_REL_PIV"),_8069);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simLuTolRelPiv)"));
        }
      }
    }
  }
  {}
  if ((_8005 == std::string ("intpntTolRelStep")))
  {
    {
      double _8070 = _8006;
      if (((1.000000e-04 <= _8070) && (_8070 <= 9.999990e-01)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8004.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_REL_STEP"),_8070);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolRelStep)"));
        }
      }
    }
  }
  {}
  if ((_8005 == std::string ("intpntTolPath")))
  {
    {
      double _8071 = _8006;
      if (((0.000000e+00 <= _8071) && (_8071 <= 9.999000e-01)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8004.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_PATH"),_8071);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPath)"));
        }
      }
    }
  }
  {}
  if ((_8005 == std::string ("intpntTolPfeas")))
  {
    {
      double _8072 = _8006;
      if (((0.000000e+00 <= _8072) && (_8072 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8004.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_PFEAS"),_8072);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPfeas)"));
        }
      }
    }
  }
  {}
  if ((_8005 == std::string ("intpntTolDfeas")))
  {
    {
      double _8073 = _8006;
      if (((0.000000e+00 <= _8073) && (_8073 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8004.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_DFEAS"),_8073);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolDfeas)"));
        }
      }
    }
  }
  {}
  if ((_8005 == std::string ("intpntTolMuRed")))
  {
    {
      double _8074 = _8006;
      if (((0.000000e+00 <= _8074) && (_8074 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8004.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_MU_RED"),_8074);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolMuRed)"));
        }
      }
    }
  }
  {}
  if ((_8005 == std::string ("intpntTolInfeas")))
  {
    {
      double _8075 = _8006;
      if (((0.000000e+00 <= _8075) && (_8075 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8004.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_INFEAS"),_8075);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolInfeas)"));
        }
      }
    }
  }
  {}
  if ((_8005 == std::string ("intpntCoTolRelGap")))
  {
    {
      double _8076 = _8006;
      if (((0.000000e+00 <= _8076) && (_8076 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8004.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_REL_GAP"),_8076);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolRelGap)"));
        }
      }
    }
  }
  {}
  if ((_8005 == std::string ("intpntCoTolPfeas")))
  {
    {
      double _8077 = _8006;
      if (((0.000000e+00 <= _8077) && (_8077 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8004.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_PFEAS"),_8077);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolPfeas)"));
        }
      }
    }
  }
  {}
  if ((_8005 == std::string ("intpntCoTolDfeas")))
  {
    {
      double _8078 = _8006;
      if (((0.000000e+00 <= _8078) && (_8078 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8004.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_DFEAS"),_8078);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolDfeas)"));
        }
      }
    }
  }
  {}
  if ((_8005 == std::string ("intpntCoTolMuRed")))
  {
    {
      double _8079 = _8006;
      if (((0.000000e+00 <= _8079) && (_8079 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8004.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_MU_RED"),_8079);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolMuRed)"));
        }
      }
    }
  }
  {}
  if ((_8005 == std::string ("intpntCoTolNearRel")))
  {
    {
      double _8080 = _8006;
      if ((1.000000e+00 <= _8080))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8004.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_NEAR_REL"),_8080);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolNearRel)"));
        }
      }
    }
  }
  {}
  if ((_8005 == std::string ("intpntCoTolInfeas")))
  {
    {
      double _8081 = _8006;
      if (((0.000000e+00 <= _8081) && (_8081 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8004.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_INFEAS"),_8081);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolInfeas)"));
        }
      }
    }
  }
  {}
  if ((_8005 == std::string ("intpntTolPsafe")))
  {
    {
      double _8082 = _8006;
      if ((1.000000e-04 <= _8082))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8004.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_PSAFE"),_8082);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPsafe)"));
        }
      }
    }
  }
  {}
  if ((_8005 == std::string ("intpntTolDsafe")))
  {
    {
      double _8083 = _8006;
      if ((1.000000e-04 <= _8083))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8004.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_DSAFE"),_8083);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolDsafe)"));
        }
      }
    }
  }
  {}
  if ((_8005 == std::string ("mioMaxTime")))
  {
    {
      double _8084 = _8006;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_8004.get())->task_put_param(std::string ("MSK_DPAR_MIO_MAX_TIME"),_8084);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxTime)"));
        }
      }
    }
  }
  {}
  if ((_8005 == std::string ("mioRelGapConst")))
  {
    {
      double _8085 = _8006;
      if ((1.000000e-15 <= _8085))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8004.get())->task_put_param(std::string ("MSK_DPAR_MIO_REL_GAP_CONST"),_8085);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRelGapConst)"));
        }
      }
    }
  }
  {}
  if ((_8005 == std::string ("mioTolRelGap")))
  {
    {
      double _8086 = _8006;
      if ((0.000000e+00 <= _8086))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8004.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_REL_GAP"),_8086);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolRelGap)"));
        }
      }
    }
  }
  {}
  if ((_8005 == std::string ("mioTolAbsGap")))
  {
    {
      double _8087 = _8006;
      if ((0.000000e+00 <= _8087))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8004.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_ABS_GAP"),_8087);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolAbsGap)"));
        }
      }
    }
  }
  {}
  if ((_8005 == std::string ("mioTolAbsRelaxInt")))
  {
    {
      double _8088 = _8006;
      if ((1.000000e-09 <= _8088))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8004.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_ABS_RELAX_INT"),_8088);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolAbsRelaxInt)"));
        }
      }
    }
  }
  {}
  if ((_8005 == std::string ("basisTolX")))
  {
    {
      double _8089 = _8006;
      if ((1.000000e-09 <= _8089))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8004.get())->task_put_param(std::string ("MSK_DPAR_BASIS_TOL_X"),_8089);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisTolX)"));
        }
      }
    }
  }
  {}
  if ((_8005 == std::string ("basisTolS")))
  {
    {
      double _8090 = _8006;
      if ((1.000000e-09 <= _8090))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8004.get())->task_put_param(std::string ("MSK_DPAR_BASIS_TOL_S"),_8090);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisTolS)"));
        }
      }
    }
  }
  {}
  if ((_8005 == std::string ("basisRelTolS")))
  {
    {
      double _8091 = _8006;
      if ((0.000000e+00 <= _8091))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8004.get())->task_put_param(std::string ("MSK_DPAR_BASIS_REL_TOL_S"),_8091);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisRelTolS)"));
        }
      }
    }
  }
  {}
  if ((_8005 == std::string ("presolveTolX")))
  {
    {
      double _8092 = _8006;
      if ((0.000000e+00 <= _8092))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8004.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_X"),_8092);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolX)"));
        }
      }
    }
  }
  {}
  if ((_8005 == std::string ("presolveTolS")))
  {
    {
      double _8093 = _8006;
      if ((0.000000e+00 <= _8093))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8004.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_S"),_8093);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolS)"));
        }
      }
    }
  }
  {}
  if ((_8005 == std::string ("presolveTolAij")))
  {
    {
      double _8094 = _8006;
      if ((1.000000e-15 <= _8094))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8004.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_AIJ"),_8094);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolAij)"));
        }
      }
    }
  }
  {}
  if ((_8005 == std::string ("presolveTolAbsLindep")))
  {
    {
      double _8095 = _8006;
      if ((0.000000e+00 <= _8095))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8004.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_ABS_LINDEP"),_8095);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolAbsLindep)"));
        }
      }
    }
  }
  {}
  if ((_8005 == std::string ("presolveTolRelLindep")))
  {
    {
      double _8096 = _8006;
      if ((0.000000e+00 <= _8096))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8004.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_REL_LINDEP"),_8096);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolRelLindep)"));
        }
      }
    }
  }
  {}
  if ((_8005 == std::string ("simplexAbsTolPiv")))
  {
    {
      double _8097 = _8006;
      if ((1.000000e-12 <= _8097))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8004.get())->task_put_param(std::string ("MSK_DPAR_SIMPLEX_ABS_TOL_PIV"),_8097);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simplexAbsTolPiv)"));
        }
      }
    }
  }
  {}
  if ((_8005 == std::string ("mioTolFeas")))
  {
    {
      double _8098 = _8006;
      if (((1.000000e-09 <= _8098) && (_8098 <= 1.000000e-03)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8004.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_FEAS"),_8098);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolFeas)"));
        }
      }
    }
  }
  {}
  if ((_8005 == std::string ("mioTolRelDualBoundImprovement")))
  {
    {
      double _8099 = _8006;
      if (((0.000000e+00 <= _8099) && (_8099 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8004.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_REL_DUAL_BOUND_IMPROVEMENT"),_8099);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolRelDualBoundImprovement)"));
        }
      }
    }
  }
  else if((_8005 == std::string ("dataFileName")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (dataFileName)"));
    }
  }
  else if((_8005 == std::string ("basSolFileName")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basSolFileName)"));
    }
  }
  else if((_8005 == std::string ("itrSolFileName")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (itrSolFileName)"));
    }
  }
  else if((_8005 == std::string ("intSolFileName")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intSolFileName)"));
    }
  }
  else if((_8005 == std::string ("writeLpGenVarName")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpGenVarName)"));
    }
  }
  else if((_8005 == std::string ("remoteAccessToken")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (remoteAccessToken)"));
    }
  }
  {}
  throw ::mosek::fusion::ParameterError(std::string ("Unknown parameter"));
}
void mosek::fusion::Parameters::setParameter  ( monty::rc_ptr< ::mosek::fusion::Model > _8100,    const std::string & _8101,    int _8102) { mosek::fusion::p_Parameters::setParameter(_8100,_8101,_8102); }void mosek::fusion::p_Parameters::setParameter(monty::rc_ptr< ::mosek::fusion::Model > _8100,const std::string & _8101,int _8102){
  if (false)
  {
    {
    }
  }
  else if((_8101 == std::string ("autoUpdateSolInfo")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (autoUpdateSolInfo)"));
    }
  }
  else if((_8101 == std::string ("removeUnusedSolutions")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (removeUnusedSolutions)"));
    }
  }
  {}
  if ((_8101 == std::string ("numThreads")))
  {
    {
      int _8103 = _8102;
      if (((int)0 <= _8103))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8100.get())->task_put_param(std::string ("MSK_IPAR_NUM_THREADS"),_8103);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (numThreads)"));
        }
      }
    }
  }
  else if((_8101 == std::string ("intpntMultiThread")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMultiThread)"));
    }
  }
  {}
  if ((_8101 == std::string ("mtSpincount")))
  {
    {
      int _8104 = _8102;
      if ((((int)0 <= _8104) && (_8104 <= (int)1000000000)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8100.get())->task_put_param(std::string ("MSK_IPAR_MT_SPINCOUNT"),_8104);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mtSpincount)"));
        }
      }
    }
  }
  else if((_8101 == std::string ("optimizer")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (optimizer)"));
    }
  }
  {}
  if ((_8101 == std::string ("biMaxIterations")))
  {
    {
      int _8105 = _8102;
      if (((int)0 <= _8105))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8100.get())->task_put_param(std::string ("MSK_IPAR_BI_MAX_ITERATIONS"),_8105);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biMaxIterations)"));
        }
      }
    }
  }
  {}
  if ((_8101 == std::string ("licenseTrhExpiryWrn")))
  {
    {
      int _8106 = _8102;
      if (((int)0 <= _8106))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8100.get())->task_put_param(std::string ("MSK_IPAR_LICENSE_TRH_EXPIRY_WRN"),_8106);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseTrhExpiryWrn)"));
        }
      }
    }
  }
  {}
  if ((_8101 == std::string ("logCutSecondOpt")))
  {
    {
      int _8107 = _8102;
      if (((int)0 <= _8107))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8100.get())->task_put_param(std::string ("MSK_IPAR_LOG_CUT_SECOND_OPT"),_8107);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logCutSecondOpt)"));
        }
      }
    }
  }
  {}
  if ((_8101 == std::string ("logResponse")))
  {
    {
      int _8108 = _8102;
      if (((int)0 <= _8108))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8100.get())->task_put_param(std::string ("MSK_IPAR_LOG_RESPONSE"),_8108);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logResponse)"));
        }
      }
    }
  }
  else if((_8101 == std::string ("logLocalInfo")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logLocalInfo)"));
    }
  }
  {}
  if ((_8101 == std::string ("logBi")))
  {
    {
      int _8109 = _8102;
      if (((int)0 <= _8109))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8100.get())->task_put_param(std::string ("MSK_IPAR_LOG_BI"),_8109);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logBi)"));
        }
      }
    }
  }
  {}
  if ((_8101 == std::string ("logBiFreq")))
  {
    {
      int _8110 = _8102;
      if (((int)0 <= _8110))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8100.get())->task_put_param(std::string ("MSK_IPAR_LOG_BI_FREQ"),_8110);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logBiFreq)"));
        }
      }
    }
  }
  else if((_8101 == std::string ("biCleanOptimizer")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biCleanOptimizer)"));
    }
  }
  else if((_8101 == std::string ("intpntStartingPoint")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntStartingPoint)"));
    }
  }
  else if((_8101 == std::string ("intpntDiffStep")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntDiffStep)"));
    }
  }
  else if((_8101 == std::string ("intpntScaling")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntScaling)"));
    }
  }
  else if((_8101 == std::string ("intpntSolveForm")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntSolveForm)"));
    }
  }
  {}
  if ((_8101 == std::string ("logIntpnt")))
  {
    {
      int _8111 = _8102;
      if (((int)0 <= _8111))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8100.get())->task_put_param(std::string ("MSK_IPAR_LOG_INTPNT"),_8111);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logIntpnt)"));
        }
      }
    }
  }
  {}
  if ((_8101 == std::string ("intpntMaxIterations")))
  {
    {
      int _8112 = _8102;
      if (((int)0 <= _8112))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8100.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_MAX_ITERATIONS"),_8112);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMaxIterations)"));
        }
      }
    }
  }
  {}
  if ((_8101 == std::string ("intpntOffColTrh")))
  {
    {
      int _8113 = _8102;
      if (((int)0 <= _8113))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8100.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_OFF_COL_TRH"),_8113);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOffColTrh)"));
        }
      }
    }
  }
  else if((_8101 == std::string ("intpntOrderMethod")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOrderMethod)"));
    }
  }
  {}
  if ((_8101 == std::string ("intpntOrderGpNumSeeds")))
  {
    {
      int _8114 = _8102;
      if (((int)0 <= _8114))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8100.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_ORDER_GP_NUM_SEEDS"),_8114);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOrderGpNumSeeds)"));
        }
      }
    }
  }
  else if((_8101 == std::string ("intpntBasis")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntBasis)"));
    }
  }
  else if((_8101 == std::string ("biIgnoreMaxIter")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biIgnoreMaxIter)"));
    }
  }
  else if((_8101 == std::string ("biIgnoreNumError")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biIgnoreNumError)"));
    }
  }
  {}
  if ((_8101 == std::string ("intpntMaxNumCor")))
  {
    {
      int _8115 = _8102;
      if (((-(int)1) <= _8115))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8100.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_MAX_NUM_COR"),_8115);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMaxNumCor)"));
        }
      }
    }
  }
  else if((_8101 == std::string ("presolveUse")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveUse)"));
    }
  }
  {}
  if ((_8101 == std::string ("presolveLevel")))
  {
    {
      int _8116 = _8102;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_8100.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_LEVEL"),_8116);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLevel)"));
        }
      }
    }
  }
  {}
  if ((_8101 == std::string ("logPresolve")))
  {
    {
      int _8117 = _8102;
      if (((int)0 <= _8117))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8100.get())->task_put_param(std::string ("MSK_IPAR_LOG_PRESOLVE"),_8117);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logPresolve)"));
        }
      }
    }
  }
  else if((_8101 == std::string ("presolveLindepUse")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepUse)"));
    }
  }
  {}
  if ((_8101 == std::string ("presolveMaxNumPass")))
  {
    {
      int _8118 = _8102;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_8100.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_MAX_NUM_PASS"),_8118);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveMaxNumPass)"));
        }
      }
    }
  }
  {}
  if ((_8101 == std::string ("presolveEliminatorMaxNumTries")))
  {
    {
      int _8119 = _8102;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_8100.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_ELIMINATOR_MAX_NUM_TRIES"),_8119);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveEliminatorMaxNumTries)"));
        }
      }
    }
  }
  {}
  if ((_8101 == std::string ("presolveEliminatorMaxFill")))
  {
    {
      int _8120 = _8102;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_8100.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_ELIMINATOR_MAX_FILL"),_8120);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveEliminatorMaxFill)"));
        }
      }
    }
  }
  {}
  if ((_8101 == std::string ("simPrimalCrash")))
  {
    {
      int _8121 = _8102;
      if (((int)0 <= _8121))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8100.get())->task_put_param(std::string ("MSK_IPAR_SIM_PRIMAL_CRASH"),_8121);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalCrash)"));
        }
      }
    }
  }
  {}
  if ((_8101 == std::string ("logSim")))
  {
    {
      int _8122 = _8102;
      if (((int)0 <= _8122))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8100.get())->task_put_param(std::string ("MSK_IPAR_LOG_SIM"),_8122);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSim)"));
        }
      }
    }
  }
  {}
  if ((_8101 == std::string ("logSimMinor")))
  {
    {
      int _8123 = _8102;
      if (((int)0 <= _8123))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8100.get())->task_put_param(std::string ("MSK_IPAR_LOG_SIM_MINOR"),_8123);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSimMinor)"));
        }
      }
    }
  }
  {}
  if ((_8101 == std::string ("logSimFreq")))
  {
    {
      int _8124 = _8102;
      if (((int)0 <= _8124))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8100.get())->task_put_param(std::string ("MSK_IPAR_LOG_SIM_FREQ"),_8124);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSimFreq)"));
        }
      }
    }
  }
  {}
  if ((_8101 == std::string ("simPrimalRestrictSelection")))
  {
    {
      int _8125 = _8102;
      if ((((int)0 <= _8125) && (_8125 <= (int)100)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8100.get())->task_put_param(std::string ("MSK_IPAR_SIM_PRIMAL_RESTRICT_SELECTION"),_8125);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalRestrictSelection)"));
        }
      }
    }
  }
  else if((_8101 == std::string ("simPrimalSelection")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalSelection)"));
    }
  }
  {}
  if ((_8101 == std::string ("simDualRestrictSelection")))
  {
    {
      int _8126 = _8102;
      if ((((int)0 <= _8126) && (_8126 <= (int)100)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8100.get())->task_put_param(std::string ("MSK_IPAR_SIM_DUAL_RESTRICT_SELECTION"),_8126);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualRestrictSelection)"));
        }
      }
    }
  }
  else if((_8101 == std::string ("simDualSelection")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualSelection)"));
    }
  }
  {}
  if ((_8101 == std::string ("simMaxIterations")))
  {
    {
      int _8127 = _8102;
      if (((int)0 <= _8127))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8100.get())->task_put_param(std::string ("MSK_IPAR_SIM_MAX_ITERATIONS"),_8127);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simMaxIterations)"));
        }
      }
    }
  }
  else if((_8101 == std::string ("simHotstartLu")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simHotstartLu)"));
    }
  }
  {}
  if ((_8101 == std::string ("simRefactorFreq")))
  {
    {
      int _8128 = _8102;
      if (((int)0 <= _8128))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8100.get())->task_put_param(std::string ("MSK_IPAR_SIM_REFACTOR_FREQ"),_8128);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simRefactorFreq)"));
        }
      }
    }
  }
  {}
  if ((_8101 == std::string ("simSeed")))
  {
    {
      int _8129 = _8102;
      if ((((int)0 <= _8129) && (_8129 <= (int)32749)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8100.get())->task_put_param(std::string ("MSK_IPAR_SIM_SEED"),_8129);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSeed)"));
        }
      }
    }
  }
  else if((_8101 == std::string ("mioMode")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMode)"));
    }
  }
  {}
  if ((_8101 == std::string ("logMio")))
  {
    {
      int _8130 = _8102;
      if (((int)0 <= _8130))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8100.get())->task_put_param(std::string ("MSK_IPAR_LOG_MIO"),_8130);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logMio)"));
        }
      }
    }
  }
  {}
  if ((_8101 == std::string ("logMioFreq")))
  {
    {
      int _8131 = _8102;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_8100.get())->task_put_param(std::string ("MSK_IPAR_LOG_MIO_FREQ"),_8131);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logMioFreq)"));
        }
      }
    }
  }
  {}
  if ((_8101 == std::string ("mioMaxNumRelaxs")))
  {
    {
      int _8132 = _8102;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_8100.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_RELAXS"),_8132);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumRelaxs)"));
        }
      }
    }
  }
  {}
  if ((_8101 == std::string ("mioMaxNumBranches")))
  {
    {
      int _8133 = _8102;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_8100.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_BRANCHES"),_8133);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumBranches)"));
        }
      }
    }
  }
  {}
  if ((_8101 == std::string ("mioMaxNumRootCutRounds")))
  {
    {
      int _8134 = _8102;
      if (((int)0 <= _8134))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8100.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_ROOT_CUT_ROUNDS"),_8134);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumRootCutRounds)"));
        }
      }
    }
  }
  {}
  if ((_8101 == std::string ("mioMaxNumSolutions")))
  {
    {
      int _8135 = _8102;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_8100.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_SOLUTIONS"),_8135);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumSolutions)"));
        }
      }
    }
  }
  else if((_8101 == std::string ("mioNodeSelection")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioNodeSelection)"));
    }
  }
  {}
  if ((_8101 == std::string ("mioHeuristicLevel")))
  {
    {
      int _8136 = _8102;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_8100.get())->task_put_param(std::string ("MSK_IPAR_MIO_HEURISTIC_LEVEL"),_8136);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioHeuristicLevel)"));
        }
      }
    }
  }
  {}
  if ((_8101 == std::string ("mioProbingLevel")))
  {
    {
      int _8137 = _8102;
      if ((((-(int)1) <= _8137) && (_8137 <= (int)3)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8100.get())->task_put_param(std::string ("MSK_IPAR_MIO_PROBING_LEVEL"),_8137);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioProbingLevel)"));
        }
      }
    }
  }
  {}
  if ((_8101 == std::string ("mioCutSelectionLevel")))
  {
    {
      int _8138 = _8102;
      if ((((-(int)1) <= _8138) && (_8138 <= (int)1)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8100.get())->task_put_param(std::string ("MSK_IPAR_MIO_CUT_SELECTION_LEVEL"),_8138);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutSelectionLevel)"));
        }
      }
    }
  }
  {}
  if ((_8101 == std::string ("mioVbDetectionLevel")))
  {
    {
      int _8139 = _8102;
      if ((((-(int)1) <= _8139) && (_8139 <= (int)2)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8100.get())->task_put_param(std::string ("MSK_IPAR_MIO_VB_DETECTION_LEVEL"),_8139);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioVbDetectionLevel)"));
        }
      }
    }
  }
  else if((_8101 == std::string ("mioBranchDir")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioBranchDir)"));
    }
  }
  else if((_8101 == std::string ("mioRootOptimizer")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRootOptimizer)"));
    }
  }
  else if((_8101 == std::string ("mioNodeOptimizer")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioNodeOptimizer)"));
    }
  }
  else if((_8101 == std::string ("mioPerspectiveReformulate")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioPerspectiveReformulate)"));
    }
  }
  else if((_8101 == std::string ("mioPropagateObjectiveConstraint")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioPropagateObjectiveConstraint)"));
    }
  }
  {}
  if ((_8101 == std::string ("mioSeed")))
  {
    {
      int _8140 = _8102;
      if (((int)0 <= _8140))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8100.get())->task_put_param(std::string ("MSK_IPAR_MIO_SEED"),_8140);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioSeed)"));
        }
      }
    }
  }
  else if((_8101 == std::string ("mioConicOuterApproximation")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioConicOuterApproximation)"));
    }
  }
  else if((_8101 == std::string ("writeLpQuotedNames")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpQuotedNames)"));
    }
  }
  {}
  if ((_8101 == std::string ("writeLpLineWidth")))
  {
    {
      int _8141 = _8102;
      if (((int)40 <= _8141))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8100.get())->task_put_param(std::string ("MSK_IPAR_WRITE_LP_LINE_WIDTH"),_8141);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpLineWidth)"));
        }
      }
    }
  }
  {}
  if ((_8101 == std::string ("writeLpTermsPerLine")))
  {
    {
      int _8142 = _8102;
      if (((int)0 <= _8142))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8100.get())->task_put_param(std::string ("MSK_IPAR_WRITE_LP_TERMS_PER_LINE"),_8142);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpTermsPerLine)"));
        }
      }
    }
  }
  else if((_8101 == std::string ("writeLpFullObj")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpFullObj)"));
    }
  }
  {}
  if ((_8101 == std::string ("logInfeasAna")))
  {
    {
      int _8143 = _8102;
      if (((int)0 <= _8143))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8100.get())->task_put_param(std::string ("MSK_IPAR_LOG_INFEAS_ANA"),_8143);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logInfeasAna)"));
        }
      }
    }
  }
  else if((_8101 == std::string ("licenseWait")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseWait)"));
    }
  }
  else if((_8101 == std::string ("licenseSuppressExpireWrns")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseSuppressExpireWrns)"));
    }
  }
  {}
  if ((_8101 == std::string ("licensePauseTime")))
  {
    {
      int _8144 = _8102;
      if ((((int)0 <= _8144) && (_8144 <= (int)1000000)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8100.get())->task_put_param(std::string ("MSK_IPAR_LICENSE_PAUSE_TIME"),_8144);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licensePauseTime)"));
        }
      }
    }
  }
  else if((_8101 == std::string ("licenseDebug")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseDebug)"));
    }
  }
  {}
  if ((_8101 == std::string ("log")))
  {
    {
      int _8145 = _8102;
      if (((int)0 <= _8145))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8100.get())->task_put_param(std::string ("MSK_IPAR_LOG"),_8145);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (log)"));
        }
      }
    }
  }
  {}
  if ((_8101 == std::string ("logExpand")))
  {
    {
      int _8146 = _8102;
      if (((int)0 <= _8146))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8100.get())->task_put_param(std::string ("MSK_IPAR_LOG_EXPAND"),_8146);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logExpand)"));
        }
      }
    }
  }
  {}
  if ((_8101 == std::string ("logFile")))
  {
    {
      int _8147 = _8102;
      if (((int)0 <= _8147))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8100.get())->task_put_param(std::string ("MSK_IPAR_LOG_FILE"),_8147);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logFile)"));
        }
      }
    }
  }
  {}
  if ((_8101 == std::string ("logOrder")))
  {
    {
      int _8148 = _8102;
      if (((int)0 <= _8148))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8100.get())->task_put_param(std::string ("MSK_IPAR_LOG_ORDER"),_8148);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logOrder)"));
        }
      }
    }
  }
  else if((_8101 == std::string ("simScaling")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simScaling)"));
    }
  }
  else if((_8101 == std::string ("simScalingMethod")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simScalingMethod)"));
    }
  }
  {}
  if ((_8101 == std::string ("simPrimalPhaseoneMethod")))
  {
    {
      int _8149 = _8102;
      if ((((int)0 <= _8149) && (_8149 <= (int)10)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8100.get())->task_put_param(std::string ("MSK_IPAR_SIM_PRIMAL_PHASEONE_METHOD"),_8149);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalPhaseoneMethod)"));
        }
      }
    }
  }
  {}
  if ((_8101 == std::string ("simDualPhaseoneMethod")))
  {
    {
      int _8150 = _8102;
      if ((((int)0 <= _8150) && (_8150 <= (int)10)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8100.get())->task_put_param(std::string ("MSK_IPAR_SIM_DUAL_PHASEONE_METHOD"),_8150);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualPhaseoneMethod)"));
        }
      }
    }
  }
  {}
  if ((_8101 == std::string ("simMaxNumSetbacks")))
  {
    {
      int _8151 = _8102;
      if (((int)0 <= _8151))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8100.get())->task_put_param(std::string ("MSK_IPAR_SIM_MAX_NUM_SETBACKS"),_8151);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simMaxNumSetbacks)"));
        }
      }
    }
  }
  else if((_8101 == std::string ("simHotstart")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simHotstart)"));
    }
  }
  else if((_8101 == std::string ("simBasisFactorUse")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simBasisFactorUse)"));
    }
  }
  else if((_8101 == std::string ("simDegen")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDegen)"));
    }
  }
  else if((_8101 == std::string ("simReformulation")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simReformulation)"));
    }
  }
  else if((_8101 == std::string ("simExploitDupvec")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simExploitDupvec)"));
    }
  }
  else if((_8101 == std::string ("simSaveLu")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSaveLu)"));
    }
  }
  else if((_8101 == std::string ("simNonSingular")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simNonSingular)"));
    }
  }
  {}
  if ((_8101 == std::string ("simDualCrash")))
  {
    {
      int _8152 = _8102;
      if (((int)0 <= _8152))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8100.get())->task_put_param(std::string ("MSK_IPAR_SIM_DUAL_CRASH"),_8152);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualCrash)"));
        }
      }
    }
  }
  else if((_8101 == std::string ("infeasPreferPrimal")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (infeasPreferPrimal)"));
    }
  }
  {}
  if ((_8101 == std::string ("mioRootRepeatPresolveLevel")))
  {
    {
      int _8153 = _8102;
      if ((((-(int)1) <= _8153) && (_8153 <= (int)1)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8100.get())->task_put_param(std::string ("MSK_IPAR_MIO_ROOT_REPEAT_PRESOLVE_LEVEL"),_8153);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRootRepeatPresolveLevel)"));
        }
      }
    }
  }
  else if((_8101 == std::string ("mioCutCmir")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutCmir)"));
    }
  }
  else if((_8101 == std::string ("mioCutClique")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutClique)"));
    }
  }
  else if((_8101 == std::string ("mioCutImpliedBound")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutImpliedBound)"));
    }
  }
  else if((_8101 == std::string ("mioCutKnapsackCover")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutKnapsackCover)"));
    }
  }
  else if((_8101 == std::string ("mioCutGmi")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutGmi)"));
    }
  }
  {}
  if ((_8101 == std::string ("presolveLindepRelWorkTrh")))
  {
    {
      int _8154 = _8102;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_8100.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_LINDEP_REL_WORK_TRH"),_8154);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepRelWorkTrh)"));
        }
      }
    }
  }
  {}
  if ((_8101 == std::string ("presolveLindepAbsWorkTrh")))
  {
    {
      int _8155 = _8102;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_8100.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_LINDEP_ABS_WORK_TRH"),_8155);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepAbsWorkTrh)"));
        }
      }
    }
  }
  else if((_8101 == std::string ("cacheLicense")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (cacheLicense)"));
    }
  }
  else if((_8101 == std::string ("intpntRegularizationUse")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntRegularizationUse)"));
    }
  }
  else if((_8101 == std::string ("simSolveForm")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSolveForm)"));
    }
  }
  else if((_8101 == std::string ("simSwitchOptimizer")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSwitchOptimizer)"));
    }
  }
  {}
  if ((_8101 == std::string ("mioRinsMaxNodes")))
  {
    {
      int _8156 = _8102;
      if (((-(int)1) <= _8156))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8100.get())->task_put_param(std::string ("MSK_IPAR_MIO_RINS_MAX_NODES"),_8156);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRinsMaxNodes)"));
        }
      }
    }
  }
  {}
  if ((_8101 == std::string ("mioFeaspumpLevel")))
  {
    {
      int _8157 = _8102;
      if ((((-(int)1) <= _8157) && (_8157 <= (int)2)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8100.get())->task_put_param(std::string ("MSK_IPAR_MIO_FEASPUMP_LEVEL"),_8157);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioFeaspumpLevel)"));
        }
      }
    }
  }
  {}
  if ((_8101 == std::string ("optimizerMaxTime")))
  {
    {
      double _8158 = (double)_8102;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_8100.get())->task_put_param(std::string ("MSK_DPAR_OPTIMIZER_MAX_TIME"),_8158);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (optimizerMaxTime)"));
        }
      }
    }
  }
  {}
  if ((_8101 == std::string ("lowerObjCut")))
  {
    {
      double _8159 = (double)_8102;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_8100.get())->task_put_param(std::string ("MSK_DPAR_LOWER_OBJ_CUT"),_8159);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (lowerObjCut)"));
        }
      }
    }
  }
  {}
  if ((_8101 == std::string ("upperObjCut")))
  {
    {
      double _8160 = (double)_8102;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_8100.get())->task_put_param(std::string ("MSK_DPAR_UPPER_OBJ_CUT"),_8160);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (upperObjCut)"));
        }
      }
    }
  }
  {}
  if ((_8101 == std::string ("upperObjCutFiniteTrh")))
  {
    {
      double _8161 = (double)_8102;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_8100.get())->task_put_param(std::string ("MSK_DPAR_UPPER_OBJ_CUT_FINITE_TRH"),_8161);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (upperObjCutFiniteTrh)"));
        }
      }
    }
  }
  {}
  if ((_8101 == std::string ("lowerObjCutFiniteTrh")))
  {
    {
      double _8162 = (double)_8102;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_8100.get())->task_put_param(std::string ("MSK_DPAR_LOWER_OBJ_CUT_FINITE_TRH"),_8162);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (lowerObjCutFiniteTrh)"));
        }
      }
    }
  }
  {}
  if ((_8101 == std::string ("intpntTolRelGap")))
  {
    {
      double _8163 = (double)_8102;
      if ((1.000000e-14 <= _8163))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8100.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_REL_GAP"),_8163);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolRelGap)"));
        }
      }
    }
  }
  {}
  if ((_8101 == std::string ("intpntTolStepSize")))
  {
    {
      double _8164 = (double)_8102;
      if (((0.000000e+00 <= _8164) && (_8164 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8100.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_STEP_SIZE"),_8164);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolStepSize)"));
        }
      }
    }
  }
  {}
  if ((_8101 == std::string ("simLuTolRelPiv")))
  {
    {
      double _8165 = (double)_8102;
      if (((1.000000e-06 <= _8165) && (_8165 <= 9.999990e-01)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8100.get())->task_put_param(std::string ("MSK_DPAR_SIM_LU_TOL_REL_PIV"),_8165);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simLuTolRelPiv)"));
        }
      }
    }
  }
  {}
  if ((_8101 == std::string ("intpntTolRelStep")))
  {
    {
      double _8166 = (double)_8102;
      if (((1.000000e-04 <= _8166) && (_8166 <= 9.999990e-01)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8100.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_REL_STEP"),_8166);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolRelStep)"));
        }
      }
    }
  }
  {}
  if ((_8101 == std::string ("intpntTolPath")))
  {
    {
      double _8167 = (double)_8102;
      if (((0.000000e+00 <= _8167) && (_8167 <= 9.999000e-01)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8100.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_PATH"),_8167);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPath)"));
        }
      }
    }
  }
  {}
  if ((_8101 == std::string ("intpntTolPfeas")))
  {
    {
      double _8168 = (double)_8102;
      if (((0.000000e+00 <= _8168) && (_8168 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8100.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_PFEAS"),_8168);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPfeas)"));
        }
      }
    }
  }
  {}
  if ((_8101 == std::string ("intpntTolDfeas")))
  {
    {
      double _8169 = (double)_8102;
      if (((0.000000e+00 <= _8169) && (_8169 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8100.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_DFEAS"),_8169);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolDfeas)"));
        }
      }
    }
  }
  {}
  if ((_8101 == std::string ("intpntTolMuRed")))
  {
    {
      double _8170 = (double)_8102;
      if (((0.000000e+00 <= _8170) && (_8170 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8100.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_MU_RED"),_8170);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolMuRed)"));
        }
      }
    }
  }
  {}
  if ((_8101 == std::string ("intpntTolInfeas")))
  {
    {
      double _8171 = (double)_8102;
      if (((0.000000e+00 <= _8171) && (_8171 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8100.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_INFEAS"),_8171);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolInfeas)"));
        }
      }
    }
  }
  {}
  if ((_8101 == std::string ("intpntCoTolRelGap")))
  {
    {
      double _8172 = (double)_8102;
      if (((0.000000e+00 <= _8172) && (_8172 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8100.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_REL_GAP"),_8172);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolRelGap)"));
        }
      }
    }
  }
  {}
  if ((_8101 == std::string ("intpntCoTolPfeas")))
  {
    {
      double _8173 = (double)_8102;
      if (((0.000000e+00 <= _8173) && (_8173 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8100.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_PFEAS"),_8173);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolPfeas)"));
        }
      }
    }
  }
  {}
  if ((_8101 == std::string ("intpntCoTolDfeas")))
  {
    {
      double _8174 = (double)_8102;
      if (((0.000000e+00 <= _8174) && (_8174 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8100.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_DFEAS"),_8174);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolDfeas)"));
        }
      }
    }
  }
  {}
  if ((_8101 == std::string ("intpntCoTolMuRed")))
  {
    {
      double _8175 = (double)_8102;
      if (((0.000000e+00 <= _8175) && (_8175 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8100.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_MU_RED"),_8175);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolMuRed)"));
        }
      }
    }
  }
  {}
  if ((_8101 == std::string ("intpntCoTolNearRel")))
  {
    {
      double _8176 = (double)_8102;
      if ((1.000000e+00 <= _8176))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8100.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_NEAR_REL"),_8176);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolNearRel)"));
        }
      }
    }
  }
  {}
  if ((_8101 == std::string ("intpntCoTolInfeas")))
  {
    {
      double _8177 = (double)_8102;
      if (((0.000000e+00 <= _8177) && (_8177 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8100.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_INFEAS"),_8177);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolInfeas)"));
        }
      }
    }
  }
  {}
  if ((_8101 == std::string ("intpntTolPsafe")))
  {
    {
      double _8178 = (double)_8102;
      if ((1.000000e-04 <= _8178))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8100.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_PSAFE"),_8178);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPsafe)"));
        }
      }
    }
  }
  {}
  if ((_8101 == std::string ("intpntTolDsafe")))
  {
    {
      double _8179 = (double)_8102;
      if ((1.000000e-04 <= _8179))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8100.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_DSAFE"),_8179);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolDsafe)"));
        }
      }
    }
  }
  {}
  if ((_8101 == std::string ("mioMaxTime")))
  {
    {
      double _8180 = (double)_8102;
      if (true)
      {
        {
          mosek::fusion::p_Model::_get_impl(_8100.get())->task_put_param(std::string ("MSK_DPAR_MIO_MAX_TIME"),_8180);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxTime)"));
        }
      }
    }
  }
  {}
  if ((_8101 == std::string ("mioRelGapConst")))
  {
    {
      double _8181 = (double)_8102;
      if ((1.000000e-15 <= _8181))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8100.get())->task_put_param(std::string ("MSK_DPAR_MIO_REL_GAP_CONST"),_8181);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRelGapConst)"));
        }
      }
    }
  }
  {}
  if ((_8101 == std::string ("mioTolRelGap")))
  {
    {
      double _8182 = (double)_8102;
      if ((0.000000e+00 <= _8182))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8100.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_REL_GAP"),_8182);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolRelGap)"));
        }
      }
    }
  }
  {}
  if ((_8101 == std::string ("mioTolAbsGap")))
  {
    {
      double _8183 = (double)_8102;
      if ((0.000000e+00 <= _8183))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8100.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_ABS_GAP"),_8183);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolAbsGap)"));
        }
      }
    }
  }
  {}
  if ((_8101 == std::string ("mioTolAbsRelaxInt")))
  {
    {
      double _8184 = (double)_8102;
      if ((1.000000e-09 <= _8184))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8100.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_ABS_RELAX_INT"),_8184);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolAbsRelaxInt)"));
        }
      }
    }
  }
  {}
  if ((_8101 == std::string ("basisTolX")))
  {
    {
      double _8185 = (double)_8102;
      if ((1.000000e-09 <= _8185))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8100.get())->task_put_param(std::string ("MSK_DPAR_BASIS_TOL_X"),_8185);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisTolX)"));
        }
      }
    }
  }
  {}
  if ((_8101 == std::string ("basisTolS")))
  {
    {
      double _8186 = (double)_8102;
      if ((1.000000e-09 <= _8186))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8100.get())->task_put_param(std::string ("MSK_DPAR_BASIS_TOL_S"),_8186);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisTolS)"));
        }
      }
    }
  }
  {}
  if ((_8101 == std::string ("basisRelTolS")))
  {
    {
      double _8187 = (double)_8102;
      if ((0.000000e+00 <= _8187))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8100.get())->task_put_param(std::string ("MSK_DPAR_BASIS_REL_TOL_S"),_8187);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisRelTolS)"));
        }
      }
    }
  }
  {}
  if ((_8101 == std::string ("presolveTolX")))
  {
    {
      double _8188 = (double)_8102;
      if ((0.000000e+00 <= _8188))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8100.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_X"),_8188);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolX)"));
        }
      }
    }
  }
  {}
  if ((_8101 == std::string ("presolveTolS")))
  {
    {
      double _8189 = (double)_8102;
      if ((0.000000e+00 <= _8189))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8100.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_S"),_8189);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolS)"));
        }
      }
    }
  }
  {}
  if ((_8101 == std::string ("presolveTolAij")))
  {
    {
      double _8190 = (double)_8102;
      if ((1.000000e-15 <= _8190))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8100.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_AIJ"),_8190);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolAij)"));
        }
      }
    }
  }
  {}
  if ((_8101 == std::string ("presolveTolAbsLindep")))
  {
    {
      double _8191 = (double)_8102;
      if ((0.000000e+00 <= _8191))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8100.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_ABS_LINDEP"),_8191);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolAbsLindep)"));
        }
      }
    }
  }
  {}
  if ((_8101 == std::string ("presolveTolRelLindep")))
  {
    {
      double _8192 = (double)_8102;
      if ((0.000000e+00 <= _8192))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8100.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_REL_LINDEP"),_8192);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolRelLindep)"));
        }
      }
    }
  }
  {}
  if ((_8101 == std::string ("simplexAbsTolPiv")))
  {
    {
      double _8193 = (double)_8102;
      if ((1.000000e-12 <= _8193))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8100.get())->task_put_param(std::string ("MSK_DPAR_SIMPLEX_ABS_TOL_PIV"),_8193);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simplexAbsTolPiv)"));
        }
      }
    }
  }
  {}
  if ((_8101 == std::string ("mioTolFeas")))
  {
    {
      double _8194 = (double)_8102;
      if (((1.000000e-09 <= _8194) && (_8194 <= 1.000000e-03)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8100.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_FEAS"),_8194);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolFeas)"));
        }
      }
    }
  }
  {}
  if ((_8101 == std::string ("mioTolRelDualBoundImprovement")))
  {
    {
      double _8195 = (double)_8102;
      if (((0.000000e+00 <= _8195) && (_8195 <= 1.000000e+00)))
      {
        {
          mosek::fusion::p_Model::_get_impl(_8100.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_REL_DUAL_BOUND_IMPROVEMENT"),_8195);
          return;
        }
      }
      else
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolRelDualBoundImprovement)"));
        }
      }
    }
  }
  else if((_8101 == std::string ("dataFileName")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (dataFileName)"));
    }
  }
  else if((_8101 == std::string ("basSolFileName")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basSolFileName)"));
    }
  }
  else if((_8101 == std::string ("itrSolFileName")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (itrSolFileName)"));
    }
  }
  else if((_8101 == std::string ("intSolFileName")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intSolFileName)"));
    }
  }
  else if((_8101 == std::string ("writeLpGenVarName")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpGenVarName)"));
    }
  }
  else if((_8101 == std::string ("remoteAccessToken")))
  {
    {
      throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (remoteAccessToken)"));
    }
  }
  {}
  throw ::mosek::fusion::ParameterError(std::string ("Unknown parameter"));
}
void mosek::fusion::Parameters::setParameter  ( monty::rc_ptr< ::mosek::fusion::Model > _8196,    const std::string & _8197,    const std::string & _8198) { mosek::fusion::p_Parameters::setParameter(_8196,_8197,_8198); }void mosek::fusion::p_Parameters::setParameter(monty::rc_ptr< ::mosek::fusion::Model > _8196,const std::string & _8197,const std::string & _8198){
  if (false)
  {
    {
    }
  }
  {}
  if ((_8197 == std::string ("autoUpdateSolInfo")))
  {
    {
      int _8199 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8198);
      if ((_8199 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (autoUpdateSolInfo)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8196.get())->task_put_param(std::string ("MSK_IPAR_AUTO_UPDATE_SOL_INFO"),_8199);
      return;
    }
  }
  {}
  if ((_8197 == std::string ("removeUnusedSolutions")))
  {
    {
      int _8200 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8198);
      if ((_8200 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (removeUnusedSolutions)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8196.get())->task_put_param(std::string ("MSK_IPAR_REMOVE_UNUSED_SOLUTIONS"),_8200);
      return;
    }
  }
  {}
  if ((_8197 == std::string ("numThreads")))
  {
    {
      try
      {
        {
          int _8202 = ::mosek::fusion::Utils::Tools::toInt(_8198);
          if (((int)0 <= _8202))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8196.get())->task_put_param(std::string ("MSK_IPAR_NUM_THREADS"),_8202);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (numThreads)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8201)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (numThreads)"));
        }
      }
    }
  }
  {}
  if ((_8197 == std::string ("intpntMultiThread")))
  {
    {
      int _8203 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8198);
      if ((_8203 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMultiThread)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8196.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_MULTI_THREAD"),_8203);
      return;
    }
  }
  {}
  if ((_8197 == std::string ("mtSpincount")))
  {
    {
      try
      {
        {
          int _8205 = ::mosek::fusion::Utils::Tools::toInt(_8198);
          if ((((int)0 <= _8205) && (_8205 <= (int)1000000000)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8196.get())->task_put_param(std::string ("MSK_IPAR_MT_SPINCOUNT"),_8205);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mtSpincount)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8204)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mtSpincount)"));
        }
      }
    }
  }
  {}
  if ((_8197 == std::string ("optimizer")))
  {
    {
      int _8206 = ::mosek::fusion::p_Parameters::string_to_optimizertype_value(_8198);
      if ((_8206 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (optimizer)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8196.get())->task_put_param(std::string ("MSK_IPAR_OPTIMIZER"),_8206);
      return;
    }
  }
  {}
  if ((_8197 == std::string ("biMaxIterations")))
  {
    {
      try
      {
        {
          int _8208 = ::mosek::fusion::Utils::Tools::toInt(_8198);
          if (((int)0 <= _8208))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8196.get())->task_put_param(std::string ("MSK_IPAR_BI_MAX_ITERATIONS"),_8208);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biMaxIterations)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8207)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biMaxIterations)"));
        }
      }
    }
  }
  {}
  if ((_8197 == std::string ("licenseTrhExpiryWrn")))
  {
    {
      try
      {
        {
          int _8210 = ::mosek::fusion::Utils::Tools::toInt(_8198);
          if (((int)0 <= _8210))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8196.get())->task_put_param(std::string ("MSK_IPAR_LICENSE_TRH_EXPIRY_WRN"),_8210);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseTrhExpiryWrn)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8209)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseTrhExpiryWrn)"));
        }
      }
    }
  }
  {}
  if ((_8197 == std::string ("logCutSecondOpt")))
  {
    {
      try
      {
        {
          int _8212 = ::mosek::fusion::Utils::Tools::toInt(_8198);
          if (((int)0 <= _8212))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8196.get())->task_put_param(std::string ("MSK_IPAR_LOG_CUT_SECOND_OPT"),_8212);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logCutSecondOpt)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8211)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logCutSecondOpt)"));
        }
      }
    }
  }
  {}
  if ((_8197 == std::string ("logResponse")))
  {
    {
      try
      {
        {
          int _8214 = ::mosek::fusion::Utils::Tools::toInt(_8198);
          if (((int)0 <= _8214))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8196.get())->task_put_param(std::string ("MSK_IPAR_LOG_RESPONSE"),_8214);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logResponse)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8213)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logResponse)"));
        }
      }
    }
  }
  {}
  if ((_8197 == std::string ("logLocalInfo")))
  {
    {
      int _8215 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8198);
      if ((_8215 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logLocalInfo)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8196.get())->task_put_param(std::string ("MSK_IPAR_LOG_LOCAL_INFO"),_8215);
      return;
    }
  }
  {}
  if ((_8197 == std::string ("logBi")))
  {
    {
      try
      {
        {
          int _8217 = ::mosek::fusion::Utils::Tools::toInt(_8198);
          if (((int)0 <= _8217))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8196.get())->task_put_param(std::string ("MSK_IPAR_LOG_BI"),_8217);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logBi)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8216)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logBi)"));
        }
      }
    }
  }
  {}
  if ((_8197 == std::string ("logBiFreq")))
  {
    {
      try
      {
        {
          int _8219 = ::mosek::fusion::Utils::Tools::toInt(_8198);
          if (((int)0 <= _8219))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8196.get())->task_put_param(std::string ("MSK_IPAR_LOG_BI_FREQ"),_8219);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logBiFreq)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8218)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logBiFreq)"));
        }
      }
    }
  }
  {}
  if ((_8197 == std::string ("biCleanOptimizer")))
  {
    {
      int _8220 = ::mosek::fusion::p_Parameters::string_to_optimizertype_value(_8198);
      if ((_8220 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biCleanOptimizer)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8196.get())->task_put_param(std::string ("MSK_IPAR_BI_CLEAN_OPTIMIZER"),_8220);
      return;
    }
  }
  {}
  if ((_8197 == std::string ("intpntStartingPoint")))
  {
    {
      int _8221 = ::mosek::fusion::p_Parameters::string_to_startpointtype_value(_8198);
      if ((_8221 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntStartingPoint)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8196.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_STARTING_POINT"),_8221);
      return;
    }
  }
  {}
  if ((_8197 == std::string ("intpntDiffStep")))
  {
    {
      int _8222 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8198);
      if ((_8222 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntDiffStep)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8196.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_DIFF_STEP"),_8222);
      return;
    }
  }
  {}
  if ((_8197 == std::string ("intpntScaling")))
  {
    {
      int _8223 = ::mosek::fusion::p_Parameters::string_to_scalingtype_value(_8198);
      if ((_8223 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntScaling)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8196.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_SCALING"),_8223);
      return;
    }
  }
  {}
  if ((_8197 == std::string ("intpntSolveForm")))
  {
    {
      int _8224 = ::mosek::fusion::p_Parameters::string_to_solveform_value(_8198);
      if ((_8224 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntSolveForm)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8196.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_SOLVE_FORM"),_8224);
      return;
    }
  }
  {}
  if ((_8197 == std::string ("logIntpnt")))
  {
    {
      try
      {
        {
          int _8226 = ::mosek::fusion::Utils::Tools::toInt(_8198);
          if (((int)0 <= _8226))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8196.get())->task_put_param(std::string ("MSK_IPAR_LOG_INTPNT"),_8226);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logIntpnt)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8225)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logIntpnt)"));
        }
      }
    }
  }
  {}
  if ((_8197 == std::string ("intpntMaxIterations")))
  {
    {
      try
      {
        {
          int _8228 = ::mosek::fusion::Utils::Tools::toInt(_8198);
          if (((int)0 <= _8228))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8196.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_MAX_ITERATIONS"),_8228);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMaxIterations)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8227)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMaxIterations)"));
        }
      }
    }
  }
  {}
  if ((_8197 == std::string ("intpntOffColTrh")))
  {
    {
      try
      {
        {
          int _8230 = ::mosek::fusion::Utils::Tools::toInt(_8198);
          if (((int)0 <= _8230))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8196.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_OFF_COL_TRH"),_8230);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOffColTrh)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8229)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOffColTrh)"));
        }
      }
    }
  }
  {}
  if ((_8197 == std::string ("intpntOrderMethod")))
  {
    {
      int _8231 = ::mosek::fusion::p_Parameters::string_to_orderingtype_value(_8198);
      if ((_8231 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOrderMethod)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8196.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_ORDER_METHOD"),_8231);
      return;
    }
  }
  {}
  if ((_8197 == std::string ("intpntOrderGpNumSeeds")))
  {
    {
      try
      {
        {
          int _8233 = ::mosek::fusion::Utils::Tools::toInt(_8198);
          if (((int)0 <= _8233))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8196.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_ORDER_GP_NUM_SEEDS"),_8233);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOrderGpNumSeeds)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8232)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntOrderGpNumSeeds)"));
        }
      }
    }
  }
  {}
  if ((_8197 == std::string ("intpntBasis")))
  {
    {
      int _8234 = ::mosek::fusion::p_Parameters::string_to_basindtype_value(_8198);
      if ((_8234 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntBasis)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8196.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_BASIS"),_8234);
      return;
    }
  }
  {}
  if ((_8197 == std::string ("biIgnoreMaxIter")))
  {
    {
      int _8235 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8198);
      if ((_8235 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biIgnoreMaxIter)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8196.get())->task_put_param(std::string ("MSK_IPAR_BI_IGNORE_MAX_ITER"),_8235);
      return;
    }
  }
  {}
  if ((_8197 == std::string ("biIgnoreNumError")))
  {
    {
      int _8236 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8198);
      if ((_8236 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (biIgnoreNumError)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8196.get())->task_put_param(std::string ("MSK_IPAR_BI_IGNORE_NUM_ERROR"),_8236);
      return;
    }
  }
  {}
  if ((_8197 == std::string ("intpntMaxNumCor")))
  {
    {
      try
      {
        {
          int _8238 = ::mosek::fusion::Utils::Tools::toInt(_8198);
          if (((-(int)1) <= _8238))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8196.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_MAX_NUM_COR"),_8238);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMaxNumCor)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8237)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntMaxNumCor)"));
        }
      }
    }
  }
  {}
  if ((_8197 == std::string ("presolveUse")))
  {
    {
      int _8239 = ::mosek::fusion::p_Parameters::string_to_presolvemode_value(_8198);
      if ((_8239 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveUse)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8196.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_USE"),_8239);
      return;
    }
  }
  {}
  if ((_8197 == std::string ("presolveLevel")))
  {
    {
      try
      {
        {
          int _8241 = ::mosek::fusion::Utils::Tools::toInt(_8198);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8196.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_LEVEL"),_8241);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLevel)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8240)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLevel)"));
        }
      }
    }
  }
  {}
  if ((_8197 == std::string ("logPresolve")))
  {
    {
      try
      {
        {
          int _8243 = ::mosek::fusion::Utils::Tools::toInt(_8198);
          if (((int)0 <= _8243))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8196.get())->task_put_param(std::string ("MSK_IPAR_LOG_PRESOLVE"),_8243);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logPresolve)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8242)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logPresolve)"));
        }
      }
    }
  }
  {}
  if ((_8197 == std::string ("presolveLindepUse")))
  {
    {
      int _8244 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8198);
      if ((_8244 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepUse)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8196.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_LINDEP_USE"),_8244);
      return;
    }
  }
  {}
  if ((_8197 == std::string ("presolveMaxNumPass")))
  {
    {
      try
      {
        {
          int _8246 = ::mosek::fusion::Utils::Tools::toInt(_8198);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8196.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_MAX_NUM_PASS"),_8246);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveMaxNumPass)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8245)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveMaxNumPass)"));
        }
      }
    }
  }
  {}
  if ((_8197 == std::string ("presolveEliminatorMaxNumTries")))
  {
    {
      try
      {
        {
          int _8248 = ::mosek::fusion::Utils::Tools::toInt(_8198);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8196.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_ELIMINATOR_MAX_NUM_TRIES"),_8248);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveEliminatorMaxNumTries)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8247)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveEliminatorMaxNumTries)"));
        }
      }
    }
  }
  {}
  if ((_8197 == std::string ("presolveEliminatorMaxFill")))
  {
    {
      try
      {
        {
          int _8250 = ::mosek::fusion::Utils::Tools::toInt(_8198);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8196.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_ELIMINATOR_MAX_FILL"),_8250);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveEliminatorMaxFill)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8249)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveEliminatorMaxFill)"));
        }
      }
    }
  }
  {}
  if ((_8197 == std::string ("simPrimalCrash")))
  {
    {
      try
      {
        {
          int _8252 = ::mosek::fusion::Utils::Tools::toInt(_8198);
          if (((int)0 <= _8252))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8196.get())->task_put_param(std::string ("MSK_IPAR_SIM_PRIMAL_CRASH"),_8252);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalCrash)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8251)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalCrash)"));
        }
      }
    }
  }
  {}
  if ((_8197 == std::string ("logSim")))
  {
    {
      try
      {
        {
          int _8254 = ::mosek::fusion::Utils::Tools::toInt(_8198);
          if (((int)0 <= _8254))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8196.get())->task_put_param(std::string ("MSK_IPAR_LOG_SIM"),_8254);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSim)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8253)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSim)"));
        }
      }
    }
  }
  {}
  if ((_8197 == std::string ("logSimMinor")))
  {
    {
      try
      {
        {
          int _8256 = ::mosek::fusion::Utils::Tools::toInt(_8198);
          if (((int)0 <= _8256))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8196.get())->task_put_param(std::string ("MSK_IPAR_LOG_SIM_MINOR"),_8256);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSimMinor)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8255)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSimMinor)"));
        }
      }
    }
  }
  {}
  if ((_8197 == std::string ("logSimFreq")))
  {
    {
      try
      {
        {
          int _8258 = ::mosek::fusion::Utils::Tools::toInt(_8198);
          if (((int)0 <= _8258))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8196.get())->task_put_param(std::string ("MSK_IPAR_LOG_SIM_FREQ"),_8258);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSimFreq)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8257)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logSimFreq)"));
        }
      }
    }
  }
  {}
  if ((_8197 == std::string ("simPrimalRestrictSelection")))
  {
    {
      try
      {
        {
          int _8260 = ::mosek::fusion::Utils::Tools::toInt(_8198);
          if ((((int)0 <= _8260) && (_8260 <= (int)100)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8196.get())->task_put_param(std::string ("MSK_IPAR_SIM_PRIMAL_RESTRICT_SELECTION"),_8260);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalRestrictSelection)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8259)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalRestrictSelection)"));
        }
      }
    }
  }
  {}
  if ((_8197 == std::string ("simPrimalSelection")))
  {
    {
      int _8261 = ::mosek::fusion::p_Parameters::string_to_simseltype_value(_8198);
      if ((_8261 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalSelection)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8196.get())->task_put_param(std::string ("MSK_IPAR_SIM_PRIMAL_SELECTION"),_8261);
      return;
    }
  }
  {}
  if ((_8197 == std::string ("simDualRestrictSelection")))
  {
    {
      try
      {
        {
          int _8263 = ::mosek::fusion::Utils::Tools::toInt(_8198);
          if ((((int)0 <= _8263) && (_8263 <= (int)100)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8196.get())->task_put_param(std::string ("MSK_IPAR_SIM_DUAL_RESTRICT_SELECTION"),_8263);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualRestrictSelection)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8262)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualRestrictSelection)"));
        }
      }
    }
  }
  {}
  if ((_8197 == std::string ("simDualSelection")))
  {
    {
      int _8264 = ::mosek::fusion::p_Parameters::string_to_simseltype_value(_8198);
      if ((_8264 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualSelection)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8196.get())->task_put_param(std::string ("MSK_IPAR_SIM_DUAL_SELECTION"),_8264);
      return;
    }
  }
  {}
  if ((_8197 == std::string ("simMaxIterations")))
  {
    {
      try
      {
        {
          int _8266 = ::mosek::fusion::Utils::Tools::toInt(_8198);
          if (((int)0 <= _8266))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8196.get())->task_put_param(std::string ("MSK_IPAR_SIM_MAX_ITERATIONS"),_8266);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simMaxIterations)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8265)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simMaxIterations)"));
        }
      }
    }
  }
  {}
  if ((_8197 == std::string ("simHotstartLu")))
  {
    {
      int _8267 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8198);
      if ((_8267 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simHotstartLu)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8196.get())->task_put_param(std::string ("MSK_IPAR_SIM_HOTSTART_LU"),_8267);
      return;
    }
  }
  {}
  if ((_8197 == std::string ("simRefactorFreq")))
  {
    {
      try
      {
        {
          int _8269 = ::mosek::fusion::Utils::Tools::toInt(_8198);
          if (((int)0 <= _8269))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8196.get())->task_put_param(std::string ("MSK_IPAR_SIM_REFACTOR_FREQ"),_8269);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simRefactorFreq)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8268)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simRefactorFreq)"));
        }
      }
    }
  }
  {}
  if ((_8197 == std::string ("simSeed")))
  {
    {
      try
      {
        {
          int _8271 = ::mosek::fusion::Utils::Tools::toInt(_8198);
          if ((((int)0 <= _8271) && (_8271 <= (int)32749)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8196.get())->task_put_param(std::string ("MSK_IPAR_SIM_SEED"),_8271);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSeed)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8270)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSeed)"));
        }
      }
    }
  }
  {}
  if ((_8197 == std::string ("mioMode")))
  {
    {
      int _8272 = ::mosek::fusion::p_Parameters::string_to_miomode_value(_8198);
      if ((_8272 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMode)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8196.get())->task_put_param(std::string ("MSK_IPAR_MIO_MODE"),_8272);
      return;
    }
  }
  {}
  if ((_8197 == std::string ("logMio")))
  {
    {
      try
      {
        {
          int _8274 = ::mosek::fusion::Utils::Tools::toInt(_8198);
          if (((int)0 <= _8274))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8196.get())->task_put_param(std::string ("MSK_IPAR_LOG_MIO"),_8274);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logMio)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8273)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logMio)"));
        }
      }
    }
  }
  {}
  if ((_8197 == std::string ("logMioFreq")))
  {
    {
      try
      {
        {
          int _8276 = ::mosek::fusion::Utils::Tools::toInt(_8198);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8196.get())->task_put_param(std::string ("MSK_IPAR_LOG_MIO_FREQ"),_8276);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logMioFreq)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8275)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logMioFreq)"));
        }
      }
    }
  }
  {}
  if ((_8197 == std::string ("mioMaxNumRelaxs")))
  {
    {
      try
      {
        {
          int _8278 = ::mosek::fusion::Utils::Tools::toInt(_8198);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8196.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_RELAXS"),_8278);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumRelaxs)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8277)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumRelaxs)"));
        }
      }
    }
  }
  {}
  if ((_8197 == std::string ("mioMaxNumBranches")))
  {
    {
      try
      {
        {
          int _8280 = ::mosek::fusion::Utils::Tools::toInt(_8198);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8196.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_BRANCHES"),_8280);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumBranches)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8279)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumBranches)"));
        }
      }
    }
  }
  {}
  if ((_8197 == std::string ("mioMaxNumRootCutRounds")))
  {
    {
      try
      {
        {
          int _8282 = ::mosek::fusion::Utils::Tools::toInt(_8198);
          if (((int)0 <= _8282))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8196.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_ROOT_CUT_ROUNDS"),_8282);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumRootCutRounds)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8281)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumRootCutRounds)"));
        }
      }
    }
  }
  {}
  if ((_8197 == std::string ("mioMaxNumSolutions")))
  {
    {
      try
      {
        {
          int _8284 = ::mosek::fusion::Utils::Tools::toInt(_8198);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8196.get())->task_put_param(std::string ("MSK_IPAR_MIO_MAX_NUM_SOLUTIONS"),_8284);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumSolutions)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8283)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxNumSolutions)"));
        }
      }
    }
  }
  {}
  if ((_8197 == std::string ("mioNodeSelection")))
  {
    {
      int _8285 = ::mosek::fusion::p_Parameters::string_to_mionodeseltype_value(_8198);
      if ((_8285 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioNodeSelection)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8196.get())->task_put_param(std::string ("MSK_IPAR_MIO_NODE_SELECTION"),_8285);
      return;
    }
  }
  {}
  if ((_8197 == std::string ("mioHeuristicLevel")))
  {
    {
      try
      {
        {
          int _8287 = ::mosek::fusion::Utils::Tools::toInt(_8198);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8196.get())->task_put_param(std::string ("MSK_IPAR_MIO_HEURISTIC_LEVEL"),_8287);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioHeuristicLevel)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8286)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioHeuristicLevel)"));
        }
      }
    }
  }
  {}
  if ((_8197 == std::string ("mioProbingLevel")))
  {
    {
      try
      {
        {
          int _8289 = ::mosek::fusion::Utils::Tools::toInt(_8198);
          if ((((-(int)1) <= _8289) && (_8289 <= (int)3)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8196.get())->task_put_param(std::string ("MSK_IPAR_MIO_PROBING_LEVEL"),_8289);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioProbingLevel)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8288)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioProbingLevel)"));
        }
      }
    }
  }
  {}
  if ((_8197 == std::string ("mioCutSelectionLevel")))
  {
    {
      try
      {
        {
          int _8291 = ::mosek::fusion::Utils::Tools::toInt(_8198);
          if ((((-(int)1) <= _8291) && (_8291 <= (int)1)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8196.get())->task_put_param(std::string ("MSK_IPAR_MIO_CUT_SELECTION_LEVEL"),_8291);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutSelectionLevel)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8290)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutSelectionLevel)"));
        }
      }
    }
  }
  {}
  if ((_8197 == std::string ("mioVbDetectionLevel")))
  {
    {
      try
      {
        {
          int _8293 = ::mosek::fusion::Utils::Tools::toInt(_8198);
          if ((((-(int)1) <= _8293) && (_8293 <= (int)2)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8196.get())->task_put_param(std::string ("MSK_IPAR_MIO_VB_DETECTION_LEVEL"),_8293);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioVbDetectionLevel)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8292)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioVbDetectionLevel)"));
        }
      }
    }
  }
  {}
  if ((_8197 == std::string ("mioBranchDir")))
  {
    {
      int _8294 = ::mosek::fusion::p_Parameters::string_to_branchdir_value(_8198);
      if ((_8294 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioBranchDir)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8196.get())->task_put_param(std::string ("MSK_IPAR_MIO_BRANCH_DIR"),_8294);
      return;
    }
  }
  {}
  if ((_8197 == std::string ("mioRootOptimizer")))
  {
    {
      int _8295 = ::mosek::fusion::p_Parameters::string_to_optimizertype_value(_8198);
      if ((_8295 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRootOptimizer)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8196.get())->task_put_param(std::string ("MSK_IPAR_MIO_ROOT_OPTIMIZER"),_8295);
      return;
    }
  }
  {}
  if ((_8197 == std::string ("mioNodeOptimizer")))
  {
    {
      int _8296 = ::mosek::fusion::p_Parameters::string_to_optimizertype_value(_8198);
      if ((_8296 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioNodeOptimizer)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8196.get())->task_put_param(std::string ("MSK_IPAR_MIO_NODE_OPTIMIZER"),_8296);
      return;
    }
  }
  {}
  if ((_8197 == std::string ("mioPerspectiveReformulate")))
  {
    {
      int _8297 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8198);
      if ((_8297 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioPerspectiveReformulate)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8196.get())->task_put_param(std::string ("MSK_IPAR_MIO_PERSPECTIVE_REFORMULATE"),_8297);
      return;
    }
  }
  {}
  if ((_8197 == std::string ("mioPropagateObjectiveConstraint")))
  {
    {
      int _8298 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8198);
      if ((_8298 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioPropagateObjectiveConstraint)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8196.get())->task_put_param(std::string ("MSK_IPAR_MIO_PROPAGATE_OBJECTIVE_CONSTRAINT"),_8298);
      return;
    }
  }
  {}
  if ((_8197 == std::string ("mioSeed")))
  {
    {
      try
      {
        {
          int _8300 = ::mosek::fusion::Utils::Tools::toInt(_8198);
          if (((int)0 <= _8300))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8196.get())->task_put_param(std::string ("MSK_IPAR_MIO_SEED"),_8300);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioSeed)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8299)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioSeed)"));
        }
      }
    }
  }
  {}
  if ((_8197 == std::string ("mioConicOuterApproximation")))
  {
    {
      int _8301 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8198);
      if ((_8301 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioConicOuterApproximation)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8196.get())->task_put_param(std::string ("MSK_IPAR_MIO_CONIC_OUTER_APPROXIMATION"),_8301);
      return;
    }
  }
  {}
  if ((_8197 == std::string ("writeLpQuotedNames")))
  {
    {
      int _8302 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8198);
      if ((_8302 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpQuotedNames)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8196.get())->task_put_param(std::string ("MSK_IPAR_WRITE_LP_QUOTED_NAMES"),_8302);
      return;
    }
  }
  {}
  if ((_8197 == std::string ("writeLpLineWidth")))
  {
    {
      try
      {
        {
          int _8304 = ::mosek::fusion::Utils::Tools::toInt(_8198);
          if (((int)40 <= _8304))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8196.get())->task_put_param(std::string ("MSK_IPAR_WRITE_LP_LINE_WIDTH"),_8304);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpLineWidth)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8303)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpLineWidth)"));
        }
      }
    }
  }
  {}
  if ((_8197 == std::string ("writeLpTermsPerLine")))
  {
    {
      try
      {
        {
          int _8306 = ::mosek::fusion::Utils::Tools::toInt(_8198);
          if (((int)0 <= _8306))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8196.get())->task_put_param(std::string ("MSK_IPAR_WRITE_LP_TERMS_PER_LINE"),_8306);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpTermsPerLine)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8305)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpTermsPerLine)"));
        }
      }
    }
  }
  {}
  if ((_8197 == std::string ("writeLpFullObj")))
  {
    {
      int _8307 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8198);
      if ((_8307 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (writeLpFullObj)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8196.get())->task_put_param(std::string ("MSK_IPAR_WRITE_LP_FULL_OBJ"),_8307);
      return;
    }
  }
  {}
  if ((_8197 == std::string ("logInfeasAna")))
  {
    {
      try
      {
        {
          int _8309 = ::mosek::fusion::Utils::Tools::toInt(_8198);
          if (((int)0 <= _8309))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8196.get())->task_put_param(std::string ("MSK_IPAR_LOG_INFEAS_ANA"),_8309);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logInfeasAna)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8308)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logInfeasAna)"));
        }
      }
    }
  }
  {}
  if ((_8197 == std::string ("licenseWait")))
  {
    {
      int _8310 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8198);
      if ((_8310 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseWait)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8196.get())->task_put_param(std::string ("MSK_IPAR_LICENSE_WAIT"),_8310);
      return;
    }
  }
  {}
  if ((_8197 == std::string ("licenseSuppressExpireWrns")))
  {
    {
      int _8311 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8198);
      if ((_8311 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseSuppressExpireWrns)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8196.get())->task_put_param(std::string ("MSK_IPAR_LICENSE_SUPPRESS_EXPIRE_WRNS"),_8311);
      return;
    }
  }
  {}
  if ((_8197 == std::string ("licensePauseTime")))
  {
    {
      try
      {
        {
          int _8313 = ::mosek::fusion::Utils::Tools::toInt(_8198);
          if ((((int)0 <= _8313) && (_8313 <= (int)1000000)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8196.get())->task_put_param(std::string ("MSK_IPAR_LICENSE_PAUSE_TIME"),_8313);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licensePauseTime)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8312)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licensePauseTime)"));
        }
      }
    }
  }
  {}
  if ((_8197 == std::string ("licenseDebug")))
  {
    {
      int _8314 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8198);
      if ((_8314 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (licenseDebug)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8196.get())->task_put_param(std::string ("MSK_IPAR_LICENSE_DEBUG"),_8314);
      return;
    }
  }
  {}
  if ((_8197 == std::string ("log")))
  {
    {
      try
      {
        {
          int _8316 = ::mosek::fusion::Utils::Tools::toInt(_8198);
          if (((int)0 <= _8316))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8196.get())->task_put_param(std::string ("MSK_IPAR_LOG"),_8316);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (log)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8315)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (log)"));
        }
      }
    }
  }
  {}
  if ((_8197 == std::string ("logExpand")))
  {
    {
      try
      {
        {
          int _8318 = ::mosek::fusion::Utils::Tools::toInt(_8198);
          if (((int)0 <= _8318))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8196.get())->task_put_param(std::string ("MSK_IPAR_LOG_EXPAND"),_8318);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logExpand)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8317)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logExpand)"));
        }
      }
    }
  }
  {}
  if ((_8197 == std::string ("logFile")))
  {
    {
      try
      {
        {
          int _8320 = ::mosek::fusion::Utils::Tools::toInt(_8198);
          if (((int)0 <= _8320))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8196.get())->task_put_param(std::string ("MSK_IPAR_LOG_FILE"),_8320);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logFile)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8319)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logFile)"));
        }
      }
    }
  }
  {}
  if ((_8197 == std::string ("logOrder")))
  {
    {
      try
      {
        {
          int _8322 = ::mosek::fusion::Utils::Tools::toInt(_8198);
          if (((int)0 <= _8322))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8196.get())->task_put_param(std::string ("MSK_IPAR_LOG_ORDER"),_8322);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logOrder)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8321)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (logOrder)"));
        }
      }
    }
  }
  {}
  if ((_8197 == std::string ("simScaling")))
  {
    {
      int _8323 = ::mosek::fusion::p_Parameters::string_to_scalingtype_value(_8198);
      if ((_8323 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simScaling)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8196.get())->task_put_param(std::string ("MSK_IPAR_SIM_SCALING"),_8323);
      return;
    }
  }
  {}
  if ((_8197 == std::string ("simScalingMethod")))
  {
    {
      int _8324 = ::mosek::fusion::p_Parameters::string_to_scalingmethod_value(_8198);
      if ((_8324 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simScalingMethod)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8196.get())->task_put_param(std::string ("MSK_IPAR_SIM_SCALING_METHOD"),_8324);
      return;
    }
  }
  {}
  if ((_8197 == std::string ("simPrimalPhaseoneMethod")))
  {
    {
      try
      {
        {
          int _8326 = ::mosek::fusion::Utils::Tools::toInt(_8198);
          if ((((int)0 <= _8326) && (_8326 <= (int)10)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8196.get())->task_put_param(std::string ("MSK_IPAR_SIM_PRIMAL_PHASEONE_METHOD"),_8326);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalPhaseoneMethod)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8325)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simPrimalPhaseoneMethod)"));
        }
      }
    }
  }
  {}
  if ((_8197 == std::string ("simDualPhaseoneMethod")))
  {
    {
      try
      {
        {
          int _8328 = ::mosek::fusion::Utils::Tools::toInt(_8198);
          if ((((int)0 <= _8328) && (_8328 <= (int)10)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8196.get())->task_put_param(std::string ("MSK_IPAR_SIM_DUAL_PHASEONE_METHOD"),_8328);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualPhaseoneMethod)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8327)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualPhaseoneMethod)"));
        }
      }
    }
  }
  {}
  if ((_8197 == std::string ("simMaxNumSetbacks")))
  {
    {
      try
      {
        {
          int _8330 = ::mosek::fusion::Utils::Tools::toInt(_8198);
          if (((int)0 <= _8330))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8196.get())->task_put_param(std::string ("MSK_IPAR_SIM_MAX_NUM_SETBACKS"),_8330);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simMaxNumSetbacks)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8329)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simMaxNumSetbacks)"));
        }
      }
    }
  }
  {}
  if ((_8197 == std::string ("simHotstart")))
  {
    {
      int _8331 = ::mosek::fusion::p_Parameters::string_to_simhotstart_value(_8198);
      if ((_8331 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simHotstart)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8196.get())->task_put_param(std::string ("MSK_IPAR_SIM_HOTSTART"),_8331);
      return;
    }
  }
  {}
  if ((_8197 == std::string ("simBasisFactorUse")))
  {
    {
      int _8332 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8198);
      if ((_8332 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simBasisFactorUse)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8196.get())->task_put_param(std::string ("MSK_IPAR_SIM_BASIS_FACTOR_USE"),_8332);
      return;
    }
  }
  {}
  if ((_8197 == std::string ("simDegen")))
  {
    {
      int _8333 = ::mosek::fusion::p_Parameters::string_to_simdegen_value(_8198);
      if ((_8333 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDegen)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8196.get())->task_put_param(std::string ("MSK_IPAR_SIM_DEGEN"),_8333);
      return;
    }
  }
  {}
  if ((_8197 == std::string ("simReformulation")))
  {
    {
      int _8334 = ::mosek::fusion::p_Parameters::string_to_simreform_value(_8198);
      if ((_8334 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simReformulation)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8196.get())->task_put_param(std::string ("MSK_IPAR_SIM_REFORMULATION"),_8334);
      return;
    }
  }
  {}
  if ((_8197 == std::string ("simExploitDupvec")))
  {
    {
      int _8335 = ::mosek::fusion::p_Parameters::string_to_simdupvec_value(_8198);
      if ((_8335 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simExploitDupvec)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8196.get())->task_put_param(std::string ("MSK_IPAR_SIM_EXPLOIT_DUPVEC"),_8335);
      return;
    }
  }
  {}
  if ((_8197 == std::string ("simSaveLu")))
  {
    {
      int _8336 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8198);
      if ((_8336 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSaveLu)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8196.get())->task_put_param(std::string ("MSK_IPAR_SIM_SAVE_LU"),_8336);
      return;
    }
  }
  {}
  if ((_8197 == std::string ("simNonSingular")))
  {
    {
      int _8337 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8198);
      if ((_8337 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simNonSingular)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8196.get())->task_put_param(std::string ("MSK_IPAR_SIM_NON_SINGULAR"),_8337);
      return;
    }
  }
  {}
  if ((_8197 == std::string ("simDualCrash")))
  {
    {
      try
      {
        {
          int _8339 = ::mosek::fusion::Utils::Tools::toInt(_8198);
          if (((int)0 <= _8339))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8196.get())->task_put_param(std::string ("MSK_IPAR_SIM_DUAL_CRASH"),_8339);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualCrash)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8338)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simDualCrash)"));
        }
      }
    }
  }
  {}
  if ((_8197 == std::string ("infeasPreferPrimal")))
  {
    {
      int _8340 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8198);
      if ((_8340 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (infeasPreferPrimal)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8196.get())->task_put_param(std::string ("MSK_IPAR_INFEAS_PREFER_PRIMAL"),_8340);
      return;
    }
  }
  {}
  if ((_8197 == std::string ("mioRootRepeatPresolveLevel")))
  {
    {
      try
      {
        {
          int _8342 = ::mosek::fusion::Utils::Tools::toInt(_8198);
          if ((((-(int)1) <= _8342) && (_8342 <= (int)1)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8196.get())->task_put_param(std::string ("MSK_IPAR_MIO_ROOT_REPEAT_PRESOLVE_LEVEL"),_8342);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRootRepeatPresolveLevel)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8341)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRootRepeatPresolveLevel)"));
        }
      }
    }
  }
  {}
  if ((_8197 == std::string ("mioCutCmir")))
  {
    {
      int _8343 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8198);
      if ((_8343 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutCmir)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8196.get())->task_put_param(std::string ("MSK_IPAR_MIO_CUT_CMIR"),_8343);
      return;
    }
  }
  {}
  if ((_8197 == std::string ("mioCutClique")))
  {
    {
      int _8344 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8198);
      if ((_8344 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutClique)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8196.get())->task_put_param(std::string ("MSK_IPAR_MIO_CUT_CLIQUE"),_8344);
      return;
    }
  }
  {}
  if ((_8197 == std::string ("mioCutImpliedBound")))
  {
    {
      int _8345 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8198);
      if ((_8345 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutImpliedBound)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8196.get())->task_put_param(std::string ("MSK_IPAR_MIO_CUT_IMPLIED_BOUND"),_8345);
      return;
    }
  }
  {}
  if ((_8197 == std::string ("mioCutKnapsackCover")))
  {
    {
      int _8346 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8198);
      if ((_8346 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutKnapsackCover)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8196.get())->task_put_param(std::string ("MSK_IPAR_MIO_CUT_KNAPSACK_COVER"),_8346);
      return;
    }
  }
  {}
  if ((_8197 == std::string ("mioCutGmi")))
  {
    {
      int _8347 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8198);
      if ((_8347 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioCutGmi)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8196.get())->task_put_param(std::string ("MSK_IPAR_MIO_CUT_GMI"),_8347);
      return;
    }
  }
  {}
  if ((_8197 == std::string ("presolveLindepRelWorkTrh")))
  {
    {
      try
      {
        {
          int _8349 = ::mosek::fusion::Utils::Tools::toInt(_8198);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8196.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_LINDEP_REL_WORK_TRH"),_8349);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepRelWorkTrh)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8348)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepRelWorkTrh)"));
        }
      }
    }
  }
  {}
  if ((_8197 == std::string ("presolveLindepAbsWorkTrh")))
  {
    {
      try
      {
        {
          int _8351 = ::mosek::fusion::Utils::Tools::toInt(_8198);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8196.get())->task_put_param(std::string ("MSK_IPAR_PRESOLVE_LINDEP_ABS_WORK_TRH"),_8351);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepAbsWorkTrh)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8350)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveLindepAbsWorkTrh)"));
        }
      }
    }
  }
  {}
  if ((_8197 == std::string ("cacheLicense")))
  {
    {
      int _8352 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8198);
      if ((_8352 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (cacheLicense)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8196.get())->task_put_param(std::string ("MSK_IPAR_CACHE_LICENSE"),_8352);
      return;
    }
  }
  {}
  if ((_8197 == std::string ("intpntRegularizationUse")))
  {
    {
      int _8353 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8198);
      if ((_8353 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntRegularizationUse)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8196.get())->task_put_param(std::string ("MSK_IPAR_INTPNT_REGULARIZATION_USE"),_8353);
      return;
    }
  }
  {}
  if ((_8197 == std::string ("simSolveForm")))
  {
    {
      int _8354 = ::mosek::fusion::p_Parameters::string_to_solveform_value(_8198);
      if ((_8354 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSolveForm)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8196.get())->task_put_param(std::string ("MSK_IPAR_SIM_SOLVE_FORM"),_8354);
      return;
    }
  }
  {}
  if ((_8197 == std::string ("simSwitchOptimizer")))
  {
    {
      int _8355 = ::mosek::fusion::p_Parameters::string_to_onoffkey_value(_8198);
      if ((_8355 < (int)0))
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simSwitchOptimizer)"));
        }
      }
      {}
      mosek::fusion::p_Model::_get_impl(_8196.get())->task_put_param(std::string ("MSK_IPAR_SIM_SWITCH_OPTIMIZER"),_8355);
      return;
    }
  }
  {}
  if ((_8197 == std::string ("mioRinsMaxNodes")))
  {
    {
      try
      {
        {
          int _8357 = ::mosek::fusion::Utils::Tools::toInt(_8198);
          if (((-(int)1) <= _8357))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8196.get())->task_put_param(std::string ("MSK_IPAR_MIO_RINS_MAX_NODES"),_8357);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRinsMaxNodes)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8356)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRinsMaxNodes)"));
        }
      }
    }
  }
  {}
  if ((_8197 == std::string ("mioFeaspumpLevel")))
  {
    {
      try
      {
        {
          int _8359 = ::mosek::fusion::Utils::Tools::toInt(_8198);
          if ((((-(int)1) <= _8359) && (_8359 <= (int)2)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8196.get())->task_put_param(std::string ("MSK_IPAR_MIO_FEASPUMP_LEVEL"),_8359);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioFeaspumpLevel)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8358)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioFeaspumpLevel)"));
        }
      }
    }
  }
  {}
  if ((_8197 == std::string ("optimizerMaxTime")))
  {
    {
      try
      {
        {
          double _8361 = ::mosek::fusion::Utils::Tools::toDouble(_8198);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8196.get())->task_put_param(std::string ("MSK_DPAR_OPTIMIZER_MAX_TIME"),_8361);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (optimizerMaxTime)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8360)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (optimizerMaxTime)"));
        }
      }
    }
  }
  {}
  if ((_8197 == std::string ("lowerObjCut")))
  {
    {
      try
      {
        {
          double _8363 = ::mosek::fusion::Utils::Tools::toDouble(_8198);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8196.get())->task_put_param(std::string ("MSK_DPAR_LOWER_OBJ_CUT"),_8363);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (lowerObjCut)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8362)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (lowerObjCut)"));
        }
      }
    }
  }
  {}
  if ((_8197 == std::string ("upperObjCut")))
  {
    {
      try
      {
        {
          double _8365 = ::mosek::fusion::Utils::Tools::toDouble(_8198);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8196.get())->task_put_param(std::string ("MSK_DPAR_UPPER_OBJ_CUT"),_8365);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (upperObjCut)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8364)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (upperObjCut)"));
        }
      }
    }
  }
  {}
  if ((_8197 == std::string ("upperObjCutFiniteTrh")))
  {
    {
      try
      {
        {
          double _8367 = ::mosek::fusion::Utils::Tools::toDouble(_8198);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8196.get())->task_put_param(std::string ("MSK_DPAR_UPPER_OBJ_CUT_FINITE_TRH"),_8367);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (upperObjCutFiniteTrh)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8366)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (upperObjCutFiniteTrh)"));
        }
      }
    }
  }
  {}
  if ((_8197 == std::string ("lowerObjCutFiniteTrh")))
  {
    {
      try
      {
        {
          double _8369 = ::mosek::fusion::Utils::Tools::toDouble(_8198);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8196.get())->task_put_param(std::string ("MSK_DPAR_LOWER_OBJ_CUT_FINITE_TRH"),_8369);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (lowerObjCutFiniteTrh)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8368)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (lowerObjCutFiniteTrh)"));
        }
      }
    }
  }
  {}
  if ((_8197 == std::string ("intpntTolRelGap")))
  {
    {
      try
      {
        {
          double _8371 = ::mosek::fusion::Utils::Tools::toDouble(_8198);
          if ((1.000000e-14 <= _8371))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8196.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_REL_GAP"),_8371);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolRelGap)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8370)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolRelGap)"));
        }
      }
    }
  }
  {}
  if ((_8197 == std::string ("intpntTolStepSize")))
  {
    {
      try
      {
        {
          double _8373 = ::mosek::fusion::Utils::Tools::toDouble(_8198);
          if (((0.000000e+00 <= _8373) && (_8373 <= 1.000000e+00)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8196.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_STEP_SIZE"),_8373);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolStepSize)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8372)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolStepSize)"));
        }
      }
    }
  }
  {}
  if ((_8197 == std::string ("simLuTolRelPiv")))
  {
    {
      try
      {
        {
          double _8375 = ::mosek::fusion::Utils::Tools::toDouble(_8198);
          if (((1.000000e-06 <= _8375) && (_8375 <= 9.999990e-01)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8196.get())->task_put_param(std::string ("MSK_DPAR_SIM_LU_TOL_REL_PIV"),_8375);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simLuTolRelPiv)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8374)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simLuTolRelPiv)"));
        }
      }
    }
  }
  {}
  if ((_8197 == std::string ("intpntTolRelStep")))
  {
    {
      try
      {
        {
          double _8377 = ::mosek::fusion::Utils::Tools::toDouble(_8198);
          if (((1.000000e-04 <= _8377) && (_8377 <= 9.999990e-01)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8196.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_REL_STEP"),_8377);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolRelStep)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8376)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolRelStep)"));
        }
      }
    }
  }
  {}
  if ((_8197 == std::string ("intpntTolPath")))
  {
    {
      try
      {
        {
          double _8379 = ::mosek::fusion::Utils::Tools::toDouble(_8198);
          if (((0.000000e+00 <= _8379) && (_8379 <= 9.999000e-01)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8196.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_PATH"),_8379);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPath)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8378)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPath)"));
        }
      }
    }
  }
  {}
  if ((_8197 == std::string ("intpntTolPfeas")))
  {
    {
      try
      {
        {
          double _8381 = ::mosek::fusion::Utils::Tools::toDouble(_8198);
          if (((0.000000e+00 <= _8381) && (_8381 <= 1.000000e+00)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8196.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_PFEAS"),_8381);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPfeas)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8380)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPfeas)"));
        }
      }
    }
  }
  {}
  if ((_8197 == std::string ("intpntTolDfeas")))
  {
    {
      try
      {
        {
          double _8383 = ::mosek::fusion::Utils::Tools::toDouble(_8198);
          if (((0.000000e+00 <= _8383) && (_8383 <= 1.000000e+00)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8196.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_DFEAS"),_8383);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolDfeas)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8382)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolDfeas)"));
        }
      }
    }
  }
  {}
  if ((_8197 == std::string ("intpntTolMuRed")))
  {
    {
      try
      {
        {
          double _8385 = ::mosek::fusion::Utils::Tools::toDouble(_8198);
          if (((0.000000e+00 <= _8385) && (_8385 <= 1.000000e+00)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8196.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_MU_RED"),_8385);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolMuRed)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8384)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolMuRed)"));
        }
      }
    }
  }
  {}
  if ((_8197 == std::string ("intpntTolInfeas")))
  {
    {
      try
      {
        {
          double _8387 = ::mosek::fusion::Utils::Tools::toDouble(_8198);
          if (((0.000000e+00 <= _8387) && (_8387 <= 1.000000e+00)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8196.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_INFEAS"),_8387);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolInfeas)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8386)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolInfeas)"));
        }
      }
    }
  }
  {}
  if ((_8197 == std::string ("intpntCoTolRelGap")))
  {
    {
      try
      {
        {
          double _8389 = ::mosek::fusion::Utils::Tools::toDouble(_8198);
          if (((0.000000e+00 <= _8389) && (_8389 <= 1.000000e+00)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8196.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_REL_GAP"),_8389);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolRelGap)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8388)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolRelGap)"));
        }
      }
    }
  }
  {}
  if ((_8197 == std::string ("intpntCoTolPfeas")))
  {
    {
      try
      {
        {
          double _8391 = ::mosek::fusion::Utils::Tools::toDouble(_8198);
          if (((0.000000e+00 <= _8391) && (_8391 <= 1.000000e+00)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8196.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_PFEAS"),_8391);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolPfeas)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8390)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolPfeas)"));
        }
      }
    }
  }
  {}
  if ((_8197 == std::string ("intpntCoTolDfeas")))
  {
    {
      try
      {
        {
          double _8393 = ::mosek::fusion::Utils::Tools::toDouble(_8198);
          if (((0.000000e+00 <= _8393) && (_8393 <= 1.000000e+00)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8196.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_DFEAS"),_8393);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolDfeas)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8392)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolDfeas)"));
        }
      }
    }
  }
  {}
  if ((_8197 == std::string ("intpntCoTolMuRed")))
  {
    {
      try
      {
        {
          double _8395 = ::mosek::fusion::Utils::Tools::toDouble(_8198);
          if (((0.000000e+00 <= _8395) && (_8395 <= 1.000000e+00)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8196.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_MU_RED"),_8395);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolMuRed)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8394)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolMuRed)"));
        }
      }
    }
  }
  {}
  if ((_8197 == std::string ("intpntCoTolNearRel")))
  {
    {
      try
      {
        {
          double _8397 = ::mosek::fusion::Utils::Tools::toDouble(_8198);
          if ((1.000000e+00 <= _8397))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8196.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_NEAR_REL"),_8397);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolNearRel)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8396)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolNearRel)"));
        }
      }
    }
  }
  {}
  if ((_8197 == std::string ("intpntCoTolInfeas")))
  {
    {
      try
      {
        {
          double _8399 = ::mosek::fusion::Utils::Tools::toDouble(_8198);
          if (((0.000000e+00 <= _8399) && (_8399 <= 1.000000e+00)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8196.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_CO_TOL_INFEAS"),_8399);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolInfeas)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8398)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntCoTolInfeas)"));
        }
      }
    }
  }
  {}
  if ((_8197 == std::string ("intpntTolPsafe")))
  {
    {
      try
      {
        {
          double _8401 = ::mosek::fusion::Utils::Tools::toDouble(_8198);
          if ((1.000000e-04 <= _8401))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8196.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_PSAFE"),_8401);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPsafe)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8400)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolPsafe)"));
        }
      }
    }
  }
  {}
  if ((_8197 == std::string ("intpntTolDsafe")))
  {
    {
      try
      {
        {
          double _8403 = ::mosek::fusion::Utils::Tools::toDouble(_8198);
          if ((1.000000e-04 <= _8403))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8196.get())->task_put_param(std::string ("MSK_DPAR_INTPNT_TOL_DSAFE"),_8403);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolDsafe)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8402)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (intpntTolDsafe)"));
        }
      }
    }
  }
  {}
  if ((_8197 == std::string ("mioMaxTime")))
  {
    {
      try
      {
        {
          double _8405 = ::mosek::fusion::Utils::Tools::toDouble(_8198);
          if (true)
          {
            {
              mosek::fusion::p_Model::_get_impl(_8196.get())->task_put_param(std::string ("MSK_DPAR_MIO_MAX_TIME"),_8405);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxTime)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8404)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioMaxTime)"));
        }
      }
    }
  }
  {}
  if ((_8197 == std::string ("mioRelGapConst")))
  {
    {
      try
      {
        {
          double _8407 = ::mosek::fusion::Utils::Tools::toDouble(_8198);
          if ((1.000000e-15 <= _8407))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8196.get())->task_put_param(std::string ("MSK_DPAR_MIO_REL_GAP_CONST"),_8407);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRelGapConst)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8406)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioRelGapConst)"));
        }
      }
    }
  }
  {}
  if ((_8197 == std::string ("mioTolRelGap")))
  {
    {
      try
      {
        {
          double _8409 = ::mosek::fusion::Utils::Tools::toDouble(_8198);
          if ((0.000000e+00 <= _8409))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8196.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_REL_GAP"),_8409);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolRelGap)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8408)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolRelGap)"));
        }
      }
    }
  }
  {}
  if ((_8197 == std::string ("mioTolAbsGap")))
  {
    {
      try
      {
        {
          double _8411 = ::mosek::fusion::Utils::Tools::toDouble(_8198);
          if ((0.000000e+00 <= _8411))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8196.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_ABS_GAP"),_8411);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolAbsGap)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8410)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolAbsGap)"));
        }
      }
    }
  }
  {}
  if ((_8197 == std::string ("mioTolAbsRelaxInt")))
  {
    {
      try
      {
        {
          double _8413 = ::mosek::fusion::Utils::Tools::toDouble(_8198);
          if ((1.000000e-09 <= _8413))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8196.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_ABS_RELAX_INT"),_8413);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolAbsRelaxInt)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8412)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolAbsRelaxInt)"));
        }
      }
    }
  }
  {}
  if ((_8197 == std::string ("basisTolX")))
  {
    {
      try
      {
        {
          double _8415 = ::mosek::fusion::Utils::Tools::toDouble(_8198);
          if ((1.000000e-09 <= _8415))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8196.get())->task_put_param(std::string ("MSK_DPAR_BASIS_TOL_X"),_8415);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisTolX)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8414)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisTolX)"));
        }
      }
    }
  }
  {}
  if ((_8197 == std::string ("basisTolS")))
  {
    {
      try
      {
        {
          double _8417 = ::mosek::fusion::Utils::Tools::toDouble(_8198);
          if ((1.000000e-09 <= _8417))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8196.get())->task_put_param(std::string ("MSK_DPAR_BASIS_TOL_S"),_8417);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisTolS)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8416)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisTolS)"));
        }
      }
    }
  }
  {}
  if ((_8197 == std::string ("basisRelTolS")))
  {
    {
      try
      {
        {
          double _8419 = ::mosek::fusion::Utils::Tools::toDouble(_8198);
          if ((0.000000e+00 <= _8419))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8196.get())->task_put_param(std::string ("MSK_DPAR_BASIS_REL_TOL_S"),_8419);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisRelTolS)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8418)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (basisRelTolS)"));
        }
      }
    }
  }
  {}
  if ((_8197 == std::string ("presolveTolX")))
  {
    {
      try
      {
        {
          double _8421 = ::mosek::fusion::Utils::Tools::toDouble(_8198);
          if ((0.000000e+00 <= _8421))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8196.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_X"),_8421);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolX)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8420)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolX)"));
        }
      }
    }
  }
  {}
  if ((_8197 == std::string ("presolveTolS")))
  {
    {
      try
      {
        {
          double _8423 = ::mosek::fusion::Utils::Tools::toDouble(_8198);
          if ((0.000000e+00 <= _8423))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8196.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_S"),_8423);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolS)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8422)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolS)"));
        }
      }
    }
  }
  {}
  if ((_8197 == std::string ("presolveTolAij")))
  {
    {
      try
      {
        {
          double _8425 = ::mosek::fusion::Utils::Tools::toDouble(_8198);
          if ((1.000000e-15 <= _8425))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8196.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_AIJ"),_8425);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolAij)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8424)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolAij)"));
        }
      }
    }
  }
  {}
  if ((_8197 == std::string ("presolveTolAbsLindep")))
  {
    {
      try
      {
        {
          double _8427 = ::mosek::fusion::Utils::Tools::toDouble(_8198);
          if ((0.000000e+00 <= _8427))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8196.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_ABS_LINDEP"),_8427);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolAbsLindep)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8426)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolAbsLindep)"));
        }
      }
    }
  }
  {}
  if ((_8197 == std::string ("presolveTolRelLindep")))
  {
    {
      try
      {
        {
          double _8429 = ::mosek::fusion::Utils::Tools::toDouble(_8198);
          if ((0.000000e+00 <= _8429))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8196.get())->task_put_param(std::string ("MSK_DPAR_PRESOLVE_TOL_REL_LINDEP"),_8429);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolRelLindep)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8428)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (presolveTolRelLindep)"));
        }
      }
    }
  }
  {}
  if ((_8197 == std::string ("simplexAbsTolPiv")))
  {
    {
      try
      {
        {
          double _8431 = ::mosek::fusion::Utils::Tools::toDouble(_8198);
          if ((1.000000e-12 <= _8431))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8196.get())->task_put_param(std::string ("MSK_DPAR_SIMPLEX_ABS_TOL_PIV"),_8431);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simplexAbsTolPiv)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8430)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (simplexAbsTolPiv)"));
        }
      }
    }
  }
  {}
  if ((_8197 == std::string ("mioTolFeas")))
  {
    {
      try
      {
        {
          double _8433 = ::mosek::fusion::Utils::Tools::toDouble(_8198);
          if (((1.000000e-09 <= _8433) && (_8433 <= 1.000000e-03)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8196.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_FEAS"),_8433);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolFeas)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8432)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolFeas)"));
        }
      }
    }
  }
  {}
  if ((_8197 == std::string ("mioTolRelDualBoundImprovement")))
  {
    {
      try
      {
        {
          double _8435 = ::mosek::fusion::Utils::Tools::toDouble(_8198);
          if (((0.000000e+00 <= _8435) && (_8435 <= 1.000000e+00)))
          {
            {
              mosek::fusion::p_Model::_get_impl(_8196.get())->task_put_param(std::string ("MSK_DPAR_MIO_TOL_REL_DUAL_BOUND_IMPROVEMENT"),_8435);
              return;
            }
          }
          else
          {
            {
              throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolRelDualBoundImprovement)"));
            }
          }
        }
      }
      catch (mosek::fusion::ValueConversionError _8434)
      {
        {
          throw ::mosek::fusion::ParameterError(std::string ("Invalid value for parameter (mioTolRelDualBoundImprovement)"));
        }
      }
    }
  }
  {}
  if ((_8197 == std::string ("dataFileName")))
  {
    {
      mosek::fusion::p_Model::_get_impl(_8196.get())->task_put_param(std::string ("MSK_SPAR_DATA_FILE_NAME"),_8198);
      return;
    }
  }
  {}
  if ((_8197 == std::string ("basSolFileName")))
  {
    {
      mosek::fusion::p_Model::_get_impl(_8196.get())->task_put_param(std::string ("MSK_SPAR_BAS_SOL_FILE_NAME"),_8198);
      return;
    }
  }
  {}
  if ((_8197 == std::string ("itrSolFileName")))
  {
    {
      mosek::fusion::p_Model::_get_impl(_8196.get())->task_put_param(std::string ("MSK_SPAR_ITR_SOL_FILE_NAME"),_8198);
      return;
    }
  }
  {}
  if ((_8197 == std::string ("intSolFileName")))
  {
    {
      mosek::fusion::p_Model::_get_impl(_8196.get())->task_put_param(std::string ("MSK_SPAR_INT_SOL_FILE_NAME"),_8198);
      return;
    }
  }
  {}
  if ((_8197 == std::string ("writeLpGenVarName")))
  {
    {
      mosek::fusion::p_Model::_get_impl(_8196.get())->task_put_param(std::string ("MSK_SPAR_WRITE_LP_GEN_VAR_NAME"),_8198);
      return;
    }
  }
  {}
  if ((_8197 == std::string ("remoteAccessToken")))
  {
    {
      mosek::fusion::p_Model::_get_impl(_8196.get())->task_put_param(std::string ("MSK_SPAR_REMOTE_ACCESS_TOKEN"),_8198);
      return;
    }
  }
  {}
  throw ::mosek::fusion::ParameterError(std::string ("Unknown parameter"));
}
int mosek::fusion::p_Parameters::string_to_inftype_value(const std::string & _8436){
  if ((_8436 == std::string ("douType")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8436 == std::string ("intType")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8436 == std::string ("lintType")))
  {
    {
      return (int)2;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_branchdir_value(const std::string & _8437){
  if ((_8437 == std::string ("free")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8437 == std::string ("up")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8437 == std::string ("down")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8437 == std::string ("near")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8437 == std::string ("far")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_8437 == std::string ("rootLp")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_8437 == std::string ("guided")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_8437 == std::string ("pseudocost")))
  {
    {
      return (int)7;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_sensitivitytype_value(const std::string & _8438){
  if ((_8438 == std::string ("basis")))
  {
    {
      return (int)0;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_iinfitem_value(const std::string & _8439){
  if ((_8439 == std::string ("anaProNumCon")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8439 == std::string ("anaProNumConLo")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8439 == std::string ("anaProNumConUp")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_8439 == std::string ("anaProNumConRa")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_8439 == std::string ("anaProNumConEq")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8439 == std::string ("anaProNumConFr")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8439 == std::string ("anaProNumVar")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_8439 == std::string ("anaProNumVarLo")))
  {
    {
      return (int)12;
    }
  }
  {}
  if ((_8439 == std::string ("anaProNumVarUp")))
  {
    {
      return (int)14;
    }
  }
  {}
  if ((_8439 == std::string ("anaProNumVarRa")))
  {
    {
      return (int)13;
    }
  }
  {}
  if ((_8439 == std::string ("anaProNumVarEq")))
  {
    {
      return (int)9;
    }
  }
  {}
  if ((_8439 == std::string ("anaProNumVarFr")))
  {
    {
      return (int)10;
    }
  }
  {}
  if ((_8439 == std::string ("anaProNumVarCont")))
  {
    {
      return (int)8;
    }
  }
  {}
  if ((_8439 == std::string ("anaProNumVarBin")))
  {
    {
      return (int)7;
    }
  }
  {}
  if ((_8439 == std::string ("anaProNumVarInt")))
  {
    {
      return (int)11;
    }
  }
  {}
  if ((_8439 == std::string ("optimizeResponse")))
  {
    {
      return (int)71;
    }
  }
  {}
  if ((_8439 == std::string ("intpntIter")))
  {
    {
      return (int)16;
    }
  }
  {}
  if ((_8439 == std::string ("intpntFactorDimDense")))
  {
    {
      return (int)15;
    }
  }
  {}
  if ((_8439 == std::string ("intpntSolveDual")))
  {
    {
      return (int)18;
    }
  }
  {}
  if ((_8439 == std::string ("mioNodeDepth")))
  {
    {
      return (int)22;
    }
  }
  {}
  if ((_8439 == std::string ("mioNumvar")))
  {
    {
      return (int)48;
    }
  }
  {}
  if ((_8439 == std::string ("mioNumbin")))
  {
    {
      return (int)33;
    }
  }
  {}
  if ((_8439 == std::string ("mioNumint")))
  {
    {
      return (int)42;
    }
  }
  {}
  if ((_8439 == std::string ("mioNumcont")))
  {
    {
      return (int)38;
    }
  }
  {}
  if ((_8439 == std::string ("mioNumcon")))
  {
    {
      return (int)35;
    }
  }
  {}
  if ((_8439 == std::string ("mioNumcone")))
  {
    {
      return (int)36;
    }
  }
  {}
  if ((_8439 == std::string ("mioNumqcones")))
  {
    {
      return (int)46;
    }
  }
  {}
  if ((_8439 == std::string ("mioNumrqcones")))
  {
    {
      return (int)47;
    }
  }
  {}
  if ((_8439 == std::string ("mioNumpexpcones")))
  {
    {
      return (int)44;
    }
  }
  {}
  if ((_8439 == std::string ("mioNumdexpcones")))
  {
    {
      return (int)40;
    }
  }
  {}
  if ((_8439 == std::string ("mioNumppowcones")))
  {
    {
      return (int)45;
    }
  }
  {}
  if ((_8439 == std::string ("mioNumdpowcones")))
  {
    {
      return (int)41;
    }
  }
  {}
  if ((_8439 == std::string ("mioNumconevar")))
  {
    {
      return (int)37;
    }
  }
  {}
  if ((_8439 == std::string ("mioNumbinconevar")))
  {
    {
      return (int)34;
    }
  }
  {}
  if ((_8439 == std::string ("mioNumintconevar")))
  {
    {
      return (int)43;
    }
  }
  {}
  if ((_8439 == std::string ("mioNumcontconevar")))
  {
    {
      return (int)39;
    }
  }
  {}
  if ((_8439 == std::string ("mioPresolvedNumvar")))
  {
    {
      return (int)65;
    }
  }
  {}
  if ((_8439 == std::string ("mioPresolvedNumbin")))
  {
    {
      return (int)50;
    }
  }
  {}
  if ((_8439 == std::string ("mioPresolvedNumint")))
  {
    {
      return (int)59;
    }
  }
  {}
  if ((_8439 == std::string ("mioPresolvedNumcont")))
  {
    {
      return (int)55;
    }
  }
  {}
  if ((_8439 == std::string ("mioPresolvedNumcon")))
  {
    {
      return (int)52;
    }
  }
  {}
  if ((_8439 == std::string ("mioPresolvedNumcone")))
  {
    {
      return (int)53;
    }
  }
  {}
  if ((_8439 == std::string ("mioPresolvedNumqcones")))
  {
    {
      return (int)63;
    }
  }
  {}
  if ((_8439 == std::string ("mioPresolvedNumrqcones")))
  {
    {
      return (int)64;
    }
  }
  {}
  if ((_8439 == std::string ("mioPresolvedNumpexpcones")))
  {
    {
      return (int)61;
    }
  }
  {}
  if ((_8439 == std::string ("mioPresolvedNumdexpcones")))
  {
    {
      return (int)57;
    }
  }
  {}
  if ((_8439 == std::string ("mioPresolvedNumppowcones")))
  {
    {
      return (int)62;
    }
  }
  {}
  if ((_8439 == std::string ("mioPresolvedNumdpowcones")))
  {
    {
      return (int)58;
    }
  }
  {}
  if ((_8439 == std::string ("mioPresolvedNumconevar")))
  {
    {
      return (int)54;
    }
  }
  {}
  if ((_8439 == std::string ("mioPresolvedNumbinconevar")))
  {
    {
      return (int)51;
    }
  }
  {}
  if ((_8439 == std::string ("mioPresolvedNumintconevar")))
  {
    {
      return (int)60;
    }
  }
  {}
  if ((_8439 == std::string ("mioPresolvedNumcontconevar")))
  {
    {
      return (int)56;
    }
  }
  {}
  if ((_8439 == std::string ("mioCliqueTableSize")))
  {
    {
      return (int)20;
    }
  }
  {}
  if ((_8439 == std::string ("mioConstructSolution")))
  {
    {
      return (int)21;
    }
  }
  {}
  if ((_8439 == std::string ("mioNumIntSolutions")))
  {
    {
      return (int)29;
    }
  }
  {}
  if ((_8439 == std::string ("mioObjBoundDefined")))
  {
    {
      return (int)49;
    }
  }
  {}
  if ((_8439 == std::string ("mioNumActiveNodes")))
  {
    {
      return (int)23;
    }
  }
  {}
  if ((_8439 == std::string ("mioNumRelax")))
  {
    {
      return (int)31;
    }
  }
  {}
  if ((_8439 == std::string ("mioNumBranch")))
  {
    {
      return (int)24;
    }
  }
  {}
  if ((_8439 == std::string ("mioTotalNumCuts")))
  {
    {
      return (int)67;
    }
  }
  {}
  if ((_8439 == std::string ("mioNumCmirCuts")))
  {
    {
      return (int)26;
    }
  }
  {}
  if ((_8439 == std::string ("mioNumCliqueCuts")))
  {
    {
      return (int)25;
    }
  }
  {}
  if ((_8439 == std::string ("mioNumImpliedBoundCuts")))
  {
    {
      return (int)28;
    }
  }
  {}
  if ((_8439 == std::string ("mioNumKnapsackCoverCuts")))
  {
    {
      return (int)30;
    }
  }
  {}
  if ((_8439 == std::string ("mioNumGomoryCuts")))
  {
    {
      return (int)27;
    }
  }
  {}
  if ((_8439 == std::string ("mioNumRepeatedPresolve")))
  {
    {
      return (int)32;
    }
  }
  {}
  if ((_8439 == std::string ("mioUserObjCut")))
  {
    {
      return (int)68;
    }
  }
  {}
  if ((_8439 == std::string ("mioRelgapSatisfied")))
  {
    {
      return (int)66;
    }
  }
  {}
  if ((_8439 == std::string ("mioAbsgapSatisfied")))
  {
    {
      return (int)19;
    }
  }
  {}
  if ((_8439 == std::string ("rdProtype")))
  {
    {
      return (int)80;
    }
  }
  {}
  if ((_8439 == std::string ("rdNumcon")))
  {
    {
      return (int)75;
    }
  }
  {}
  if ((_8439 == std::string ("rdNumvar")))
  {
    {
      return (int)79;
    }
  }
  {}
  if ((_8439 == std::string ("rdNumbarvar")))
  {
    {
      return (int)74;
    }
  }
  {}
  if ((_8439 == std::string ("rdNumintvar")))
  {
    {
      return (int)77;
    }
  }
  {}
  if ((_8439 == std::string ("rdNumq")))
  {
    {
      return (int)78;
    }
  }
  {}
  if ((_8439 == std::string ("simDualDegIter")))
  {
    {
      return (int)81;
    }
  }
  {}
  if ((_8439 == std::string ("simDualInfIter")))
  {
    {
      return (int)84;
    }
  }
  {}
  if ((_8439 == std::string ("simDualHotstartLu")))
  {
    {
      return (int)83;
    }
  }
  {}
  if ((_8439 == std::string ("simPrimalIter")))
  {
    {
      return (int)92;
    }
  }
  {}
  if ((_8439 == std::string ("simDualIter")))
  {
    {
      return (int)85;
    }
  }
  {}
  if ((_8439 == std::string ("intpntNumThreads")))
  {
    {
      return (int)17;
    }
  }
  {}
  if ((_8439 == std::string ("simPrimalInfIter")))
  {
    {
      return (int)91;
    }
  }
  {}
  if ((_8439 == std::string ("simPrimalDegIter")))
  {
    {
      return (int)88;
    }
  }
  {}
  if ((_8439 == std::string ("simPrimalHotstart")))
  {
    {
      return (int)89;
    }
  }
  {}
  if ((_8439 == std::string ("simPrimalHotstartLu")))
  {
    {
      return (int)90;
    }
  }
  {}
  if ((_8439 == std::string ("simDualHotstart")))
  {
    {
      return (int)82;
    }
  }
  {}
  if ((_8439 == std::string ("solItrProsta")))
  {
    {
      return (int)98;
    }
  }
  {}
  if ((_8439 == std::string ("solItrSolsta")))
  {
    {
      return (int)99;
    }
  }
  {}
  if ((_8439 == std::string ("solBasProsta")))
  {
    {
      return (int)94;
    }
  }
  {}
  if ((_8439 == std::string ("solBasSolsta")))
  {
    {
      return (int)95;
    }
  }
  {}
  if ((_8439 == std::string ("solItgProsta")))
  {
    {
      return (int)96;
    }
  }
  {}
  if ((_8439 == std::string ("solItgSolsta")))
  {
    {
      return (int)97;
    }
  }
  {}
  if ((_8439 == std::string ("simNumcon")))
  {
    {
      return (int)86;
    }
  }
  {}
  if ((_8439 == std::string ("simNumvar")))
  {
    {
      return (int)87;
    }
  }
  {}
  if ((_8439 == std::string ("optNumcon")))
  {
    {
      return (int)69;
    }
  }
  {}
  if ((_8439 == std::string ("optNumvar")))
  {
    {
      return (int)70;
    }
  }
  {}
  if ((_8439 == std::string ("stoNumARealloc")))
  {
    {
      return (int)100;
    }
  }
  {}
  if ((_8439 == std::string ("rdNumcone")))
  {
    {
      return (int)76;
    }
  }
  {}
  if ((_8439 == std::string ("simSolveDual")))
  {
    {
      return (int)93;
    }
  }
  {}
  if ((_8439 == std::string ("purifyPrimalSuccess")))
  {
    {
      return (int)73;
    }
  }
  {}
  if ((_8439 == std::string ("purifyDualSuccess")))
  {
    {
      return (int)72;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_scopr_value(const std::string & _8440){
  if ((_8440 == std::string ("ent")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8440 == std::string ("exp")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8440 == std::string ("log")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8440 == std::string ("pow")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8440 == std::string ("sqrt")))
  {
    {
      return (int)4;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_startpointtype_value(const std::string & _8441){
  if ((_8441 == std::string ("free")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8441 == std::string ("guess")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8441 == std::string ("constant")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8441 == std::string ("satisfyBounds")))
  {
    {
      return (int)3;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_conetype_value(const std::string & _8442){
  if ((_8442 == std::string ("quad")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8442 == std::string ("rquad")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8442 == std::string ("pexp")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8442 == std::string ("dexp")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8442 == std::string ("ppow")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_8442 == std::string ("dpow")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_8442 == std::string ("zero")))
  {
    {
      return (int)6;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_rescodetype_value(const std::string & _8443){
  if ((_8443 == std::string ("ok")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8443 == std::string ("wrn")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8443 == std::string ("trm")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8443 == std::string ("err")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8443 == std::string ("unk")))
  {
    {
      return (int)4;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_iparam_value(const std::string & _8444){
  if ((_8444 == std::string ("autoUpdateSolInfo")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8444 == std::string ("removeUnusedSolutions")))
  {
    {
      return (int)118;
    }
  }
  {}
  if ((_8444 == std::string ("intpntHotstart")))
  {
    {
      return (int)18;
    }
  }
  {}
  if ((_8444 == std::string ("intpntPurify")))
  {
    {
      return (int)26;
    }
  }
  {}
  if ((_8444 == std::string ("numThreads")))
  {
    {
      return (int)87;
    }
  }
  {}
  if ((_8444 == std::string ("intpntMultiThread")))
  {
    {
      return (int)22;
    }
  }
  {}
  if ((_8444 == std::string ("timingLevel")))
  {
    {
      return (int)152;
    }
  }
  {}
  if ((_8444 == std::string ("mtSpincount")))
  {
    {
      return (int)86;
    }
  }
  {}
  if ((_8444 == std::string ("maxNumWarnings")))
  {
    {
      return (int)60;
    }
  }
  {}
  if ((_8444 == std::string ("optimizer")))
  {
    {
      return (int)97;
    }
  }
  {}
  if ((_8444 == std::string ("biMaxIterations")))
  {
    {
      return (int)8;
    }
  }
  {}
  if ((_8444 == std::string ("licenseTrhExpiryWrn")))
  {
    {
      return (int)34;
    }
  }
  {}
  if ((_8444 == std::string ("logIncludeSummary")))
  {
    {
      return (int)45;
    }
  }
  {}
  if ((_8444 == std::string ("logCutSecondOpt")))
  {
    {
      return (int)41;
    }
  }
  {}
  if ((_8444 == std::string ("logAnaPro")))
  {
    {
      return (int)37;
    }
  }
  {}
  if ((_8444 == std::string ("logResponse")))
  {
    {
      return (int)53;
    }
  }
  {}
  if ((_8444 == std::string ("logLocalInfo")))
  {
    {
      return (int)48;
    }
  }
  {}
  if ((_8444 == std::string ("logBi")))
  {
    {
      return (int)38;
    }
  }
  {}
  if ((_8444 == std::string ("logBiFreq")))
  {
    {
      return (int)39;
    }
  }
  {}
  if ((_8444 == std::string ("biCleanOptimizer")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_8444 == std::string ("intpntMaxNumRefinementSteps")))
  {
    {
      return (int)21;
    }
  }
  {}
  if ((_8444 == std::string ("intpntStartingPoint")))
  {
    {
      return (int)30;
    }
  }
  {}
  if ((_8444 == std::string ("intpntDiffStep")))
  {
    {
      return (int)17;
    }
  }
  {}
  if ((_8444 == std::string ("intpntScaling")))
  {
    {
      return (int)28;
    }
  }
  {}
  if ((_8444 == std::string ("intpntSolveForm")))
  {
    {
      return (int)29;
    }
  }
  {}
  if ((_8444 == std::string ("logIntpnt")))
  {
    {
      return (int)47;
    }
  }
  {}
  if ((_8444 == std::string ("intpntMaxIterations")))
  {
    {
      return (int)19;
    }
  }
  {}
  if ((_8444 == std::string ("intpntOffColTrh")))
  {
    {
      return (int)23;
    }
  }
  {}
  if ((_8444 == std::string ("intpntOrderMethod")))
  {
    {
      return (int)25;
    }
  }
  {}
  if ((_8444 == std::string ("intpntOrderGpNumSeeds")))
  {
    {
      return (int)24;
    }
  }
  {}
  if ((_8444 == std::string ("intpntBasis")))
  {
    {
      return (int)16;
    }
  }
  {}
  if ((_8444 == std::string ("biIgnoreMaxIter")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_8444 == std::string ("biIgnoreNumError")))
  {
    {
      return (int)7;
    }
  }
  {}
  if ((_8444 == std::string ("intpntMaxNumCor")))
  {
    {
      return (int)20;
    }
  }
  {}
  if ((_8444 == std::string ("presolveUse")))
  {
    {
      return (int)108;
    }
  }
  {}
  if ((_8444 == std::string ("presolveLevel")))
  {
    {
      return (int)102;
    }
  }
  {}
  if ((_8444 == std::string ("logPresolve")))
  {
    {
      return (int)52;
    }
  }
  {}
  if ((_8444 == std::string ("presolveLindepUse")))
  {
    {
      return (int)105;
    }
  }
  {}
  if ((_8444 == std::string ("presolveMaxNumPass")))
  {
    {
      return (int)106;
    }
  }
  {}
  if ((_8444 == std::string ("presolveEliminatorMaxNumTries")))
  {
    {
      return (int)101;
    }
  }
  {}
  if ((_8444 == std::string ("presolveEliminatorMaxFill")))
  {
    {
      return (int)100;
    }
  }
  {}
  if ((_8444 == std::string ("presolveMaxNumReductions")))
  {
    {
      return (int)107;
    }
  }
  {}
  if ((_8444 == std::string ("simStabilityPriority")))
  {
    {
      return (int)145;
    }
  }
  {}
  if ((_8444 == std::string ("simPrimalCrash")))
  {
    {
      return (int)134;
    }
  }
  {}
  if ((_8444 == std::string ("logSim")))
  {
    {
      return (int)56;
    }
  }
  {}
  if ((_8444 == std::string ("logSimMinor")))
  {
    {
      return (int)58;
    }
  }
  {}
  if ((_8444 == std::string ("logSimFreq")))
  {
    {
      return (int)57;
    }
  }
  {}
  if ((_8444 == std::string ("simPrimalRestrictSelection")))
  {
    {
      return (int)136;
    }
  }
  {}
  if ((_8444 == std::string ("simPrimalSelection")))
  {
    {
      return (int)137;
    }
  }
  {}
  if ((_8444 == std::string ("simDualRestrictSelection")))
  {
    {
      return (int)126;
    }
  }
  {}
  if ((_8444 == std::string ("simDualSelection")))
  {
    {
      return (int)127;
    }
  }
  {}
  if ((_8444 == std::string ("simMaxIterations")))
  {
    {
      return (int)131;
    }
  }
  {}
  if ((_8444 == std::string ("simHotstartLu")))
  {
    {
      return (int)130;
    }
  }
  {}
  if ((_8444 == std::string ("simRefactorFreq")))
  {
    {
      return (int)138;
    }
  }
  {}
  if ((_8444 == std::string ("simSeed")))
  {
    {
      return (int)143;
    }
  }
  {}
  if ((_8444 == std::string ("mioMode")))
  {
    {
      return (int)75;
    }
  }
  {}
  if ((_8444 == std::string ("logMio")))
  {
    {
      return (int)49;
    }
  }
  {}
  if ((_8444 == std::string ("logMioFreq")))
  {
    {
      return (int)50;
    }
  }
  {}
  if ((_8444 == std::string ("mioMaxNumRelaxs")))
  {
    {
      return (int)72;
    }
  }
  {}
  if ((_8444 == std::string ("mioMaxNumBranches")))
  {
    {
      return (int)71;
    }
  }
  {}
  if ((_8444 == std::string ("mioMaxNumRootCutRounds")))
  {
    {
      return (int)73;
    }
  }
  {}
  if ((_8444 == std::string ("mioMaxNumSolutions")))
  {
    {
      return (int)74;
    }
  }
  {}
  if ((_8444 == std::string ("mioNodeSelection")))
  {
    {
      return (int)77;
    }
  }
  {}
  if ((_8444 == std::string ("mioHeuristicLevel")))
  {
    {
      return (int)70;
    }
  }
  {}
  if ((_8444 == std::string ("mioProbingLevel")))
  {
    {
      return (int)79;
    }
  }
  {}
  if ((_8444 == std::string ("mioCutSelectionLevel")))
  {
    {
      return (int)68;
    }
  }
  {}
  if ((_8444 == std::string ("mioVbDetectionLevel")))
  {
    {
      return (int)85;
    }
  }
  {}
  if ((_8444 == std::string ("mioBranchDir")))
  {
    {
      return (int)61;
    }
  }
  {}
  if ((_8444 == std::string ("mioRootOptimizer")))
  {
    {
      return (int)82;
    }
  }
  {}
  if ((_8444 == std::string ("mioNodeOptimizer")))
  {
    {
      return (int)76;
    }
  }
  {}
  if ((_8444 == std::string ("mioPerspectiveReformulate")))
  {
    {
      return (int)78;
    }
  }
  {}
  if ((_8444 == std::string ("mioPropagateObjectiveConstraint")))
  {
    {
      return (int)80;
    }
  }
  {}
  if ((_8444 == std::string ("mioSeed")))
  {
    {
      return (int)84;
    }
  }
  {}
  if ((_8444 == std::string ("mioConicOuterApproximation")))
  {
    {
      return (int)62;
    }
  }
  {}
  if ((_8444 == std::string ("readKeepFreeCon")))
  {
    {
      return (int)112;
    }
  }
  {}
  if ((_8444 == std::string ("readMpsFormat")))
  {
    {
      return (int)115;
    }
  }
  {}
  if ((_8444 == std::string ("writeMpsFormat")))
  {
    {
      return (int)170;
    }
  }
  {}
  if ((_8444 == std::string ("readMpsWidth")))
  {
    {
      return (int)116;
    }
  }
  {}
  if ((_8444 == std::string ("readDebug")))
  {
    {
      return (int)111;
    }
  }
  {}
  if ((_8444 == std::string ("readLpQuotedNames")))
  {
    {
      return (int)114;
    }
  }
  {}
  if ((_8444 == std::string ("writeDataParam")))
  {
    {
      return (int)157;
    }
  }
  {}
  if ((_8444 == std::string ("writeFreeCon")))
  {
    {
      return (int)158;
    }
  }
  {}
  if ((_8444 == std::string ("writeGenericNames")))
  {
    {
      return (int)159;
    }
  }
  {}
  if ((_8444 == std::string ("writeGenericNamesIo")))
  {
    {
      return (int)160;
    }
  }
  {}
  if ((_8444 == std::string ("writeCompression")))
  {
    {
      return (int)156;
    }
  }
  {}
  if ((_8444 == std::string ("writeMpsInt")))
  {
    {
      return (int)171;
    }
  }
  {}
  if ((_8444 == std::string ("writeLpStrictFormat")))
  {
    {
      return (int)168;
    }
  }
  {}
  if ((_8444 == std::string ("writeLpQuotedNames")))
  {
    {
      return (int)167;
    }
  }
  {}
  if ((_8444 == std::string ("writeLpLineWidth")))
  {
    {
      return (int)166;
    }
  }
  {}
  if ((_8444 == std::string ("writeLpTermsPerLine")))
  {
    {
      return (int)169;
    }
  }
  {}
  if ((_8444 == std::string ("writeLpFullObj")))
  {
    {
      return (int)165;
    }
  }
  {}
  if ((_8444 == std::string ("writePrecision")))
  {
    {
      return (int)172;
    }
  }
  {}
  if ((_8444 == std::string ("writeSolIgnoreInvalidNames")))
  {
    {
      return (int)176;
    }
  }
  {}
  if ((_8444 == std::string ("writeSolHead")))
  {
    {
      return (int)175;
    }
  }
  {}
  if ((_8444 == std::string ("writeSolConstraints")))
  {
    {
      return (int)174;
    }
  }
  {}
  if ((_8444 == std::string ("writeSolVariables")))
  {
    {
      return (int)177;
    }
  }
  {}
  if ((_8444 == std::string ("writeSolBarvariables")))
  {
    {
      return (int)173;
    }
  }
  {}
  if ((_8444 == std::string ("writeBasHead")))
  {
    {
      return (int)154;
    }
  }
  {}
  if ((_8444 == std::string ("writeBasConstraints")))
  {
    {
      return (int)153;
    }
  }
  {}
  if ((_8444 == std::string ("writeBasVariables")))
  {
    {
      return (int)155;
    }
  }
  {}
  if ((_8444 == std::string ("writeIntHead")))
  {
    {
      return (int)163;
    }
  }
  {}
  if ((_8444 == std::string ("writeIntConstraints")))
  {
    {
      return (int)162;
    }
  }
  {}
  if ((_8444 == std::string ("writeIntVariables")))
  {
    {
      return (int)164;
    }
  }
  {}
  if ((_8444 == std::string ("solReadNameWidth")))
  {
    {
      return (int)149;
    }
  }
  {}
  if ((_8444 == std::string ("solReadWidth")))
  {
    {
      return (int)150;
    }
  }
  {}
  if ((_8444 == std::string ("infeasReportAuto")))
  {
    {
      return (int)14;
    }
  }
  {}
  if ((_8444 == std::string ("infeasReportLevel")))
  {
    {
      return (int)15;
    }
  }
  {}
  if ((_8444 == std::string ("infeasGenericNames")))
  {
    {
      return (int)12;
    }
  }
  {}
  if ((_8444 == std::string ("logInfeasAna")))
  {
    {
      return (int)46;
    }
  }
  {}
  if ((_8444 == std::string ("licenseWait")))
  {
    {
      return (int)35;
    }
  }
  {}
  if ((_8444 == std::string ("licenseSuppressExpireWrns")))
  {
    {
      return (int)33;
    }
  }
  {}
  if ((_8444 == std::string ("licensePauseTime")))
  {
    {
      return (int)32;
    }
  }
  {}
  if ((_8444 == std::string ("licenseDebug")))
  {
    {
      return (int)31;
    }
  }
  {}
  if ((_8444 == std::string ("solFilterKeepBasic")))
  {
    {
      return (int)147;
    }
  }
  {}
  if ((_8444 == std::string ("solFilterKeepRanged")))
  {
    {
      return (int)148;
    }
  }
  {}
  if ((_8444 == std::string ("log")))
  {
    {
      return (int)36;
    }
  }
  {}
  if ((_8444 == std::string ("logExpand")))
  {
    {
      return (int)42;
    }
  }
  {}
  if ((_8444 == std::string ("logFile")))
  {
    {
      return (int)44;
    }
  }
  {}
  if ((_8444 == std::string ("logOrder")))
  {
    {
      return (int)51;
    }
  }
  {}
  if ((_8444 == std::string ("logSensitivity")))
  {
    {
      return (int)54;
    }
  }
  {}
  if ((_8444 == std::string ("logSensitivityOpt")))
  {
    {
      return (int)55;
    }
  }
  {}
  if ((_8444 == std::string ("readTaskIgnoreParam")))
  {
    {
      return (int)117;
    }
  }
  {}
  if ((_8444 == std::string ("writeTaskIncSol")))
  {
    {
      return (int)178;
    }
  }
  {}
  if ((_8444 == std::string ("paramReadCaseName")))
  {
    {
      return (int)98;
    }
  }
  {}
  if ((_8444 == std::string ("paramReadIgnError")))
  {
    {
      return (int)99;
    }
  }
  {}
  if ((_8444 == std::string ("solutionCallback")))
  {
    {
      return (int)151;
    }
  }
  {}
  if ((_8444 == std::string ("simScaling")))
  {
    {
      return (int)141;
    }
  }
  {}
  if ((_8444 == std::string ("simScalingMethod")))
  {
    {
      return (int)142;
    }
  }
  {}
  if ((_8444 == std::string ("simPrimalPhaseoneMethod")))
  {
    {
      return (int)135;
    }
  }
  {}
  if ((_8444 == std::string ("simDualPhaseoneMethod")))
  {
    {
      return (int)125;
    }
  }
  {}
  if ((_8444 == std::string ("simMaxNumSetbacks")))
  {
    {
      return (int)132;
    }
  }
  {}
  if ((_8444 == std::string ("simHotstart")))
  {
    {
      return (int)129;
    }
  }
  {}
  if ((_8444 == std::string ("simBasisFactorUse")))
  {
    {
      return (int)122;
    }
  }
  {}
  if ((_8444 == std::string ("simDegen")))
  {
    {
      return (int)123;
    }
  }
  {}
  if ((_8444 == std::string ("simReformulation")))
  {
    {
      return (int)139;
    }
  }
  {}
  if ((_8444 == std::string ("simExploitDupvec")))
  {
    {
      return (int)128;
    }
  }
  {}
  if ((_8444 == std::string ("simSaveLu")))
  {
    {
      return (int)140;
    }
  }
  {}
  if ((_8444 == std::string ("simNonSingular")))
  {
    {
      return (int)133;
    }
  }
  {}
  if ((_8444 == std::string ("simDualCrash")))
  {
    {
      return (int)124;
    }
  }
  {}
  if ((_8444 == std::string ("logStorage")))
  {
    {
      return (int)59;
    }
  }
  {}
  if ((_8444 == std::string ("infeasPreferPrimal")))
  {
    {
      return (int)13;
    }
  }
  {}
  if ((_8444 == std::string ("readLpDropNewVarsInBou")))
  {
    {
      return (int)113;
    }
  }
  {}
  if ((_8444 == std::string ("opfWriteLineLength")))
  {
    {
      return (int)90;
    }
  }
  {}
  if ((_8444 == std::string ("opfWriteHints")))
  {
    {
      return (int)89;
    }
  }
  {}
  if ((_8444 == std::string ("opfWriteParameters")))
  {
    {
      return (int)91;
    }
  }
  {}
  if ((_8444 == std::string ("opfWriteProblem")))
  {
    {
      return (int)92;
    }
  }
  {}
  if ((_8444 == std::string ("opfWriteHeader")))
  {
    {
      return (int)88;
    }
  }
  {}
  if ((_8444 == std::string ("opfWriteSolutions")))
  {
    {
      return (int)96;
    }
  }
  {}
  if ((_8444 == std::string ("opfWriteSolBas")))
  {
    {
      return (int)93;
    }
  }
  {}
  if ((_8444 == std::string ("opfWriteSolItg")))
  {
    {
      return (int)94;
    }
  }
  {}
  if ((_8444 == std::string ("opfWriteSolItr")))
  {
    {
      return (int)95;
    }
  }
  {}
  if ((_8444 == std::string ("ptfWriteTransform")))
  {
    {
      return (int)110;
    }
  }
  {}
  if ((_8444 == std::string ("primalRepairOptimizer")))
  {
    {
      return (int)109;
    }
  }
  {}
  if ((_8444 == std::string ("mioRootRepeatPresolveLevel")))
  {
    {
      return (int)83;
    }
  }
  {}
  if ((_8444 == std::string ("mioCutCmir")))
  {
    {
      return (int)64;
    }
  }
  {}
  if ((_8444 == std::string ("mioCutClique")))
  {
    {
      return (int)63;
    }
  }
  {}
  if ((_8444 == std::string ("mioCutImpliedBound")))
  {
    {
      return (int)66;
    }
  }
  {}
  if ((_8444 == std::string ("mioCutKnapsackCover")))
  {
    {
      return (int)67;
    }
  }
  {}
  if ((_8444 == std::string ("mioCutGmi")))
  {
    {
      return (int)65;
    }
  }
  {}
  if ((_8444 == std::string ("sensitivityType")))
  {
    {
      return (int)121;
    }
  }
  {}
  if ((_8444 == std::string ("presolveLindepRelWorkTrh")))
  {
    {
      return (int)104;
    }
  }
  {}
  if ((_8444 == std::string ("presolveLindepAbsWorkTrh")))
  {
    {
      return (int)103;
    }
  }
  {}
  if ((_8444 == std::string ("sensitivityAll")))
  {
    {
      return (int)119;
    }
  }
  {}
  if ((_8444 == std::string ("logFeasRepair")))
  {
    {
      return (int)43;
    }
  }
  {}
  if ((_8444 == std::string ("cacheLicense")))
  {
    {
      return (int)9;
    }
  }
  {}
  if ((_8444 == std::string ("intpntRegularizationUse")))
  {
    {
      return (int)27;
    }
  }
  {}
  if ((_8444 == std::string ("simSolveForm")))
  {
    {
      return (int)144;
    }
  }
  {}
  if ((_8444 == std::string ("simSwitchOptimizer")))
  {
    {
      return (int)146;
    }
  }
  {}
  if ((_8444 == std::string ("writeIgnoreIncompatibleItems")))
  {
    {
      return (int)161;
    }
  }
  {}
  if ((_8444 == std::string ("checkConvexity")))
  {
    {
      return (int)10;
    }
  }
  {}
  if ((_8444 == std::string ("logCheckConvexity")))
  {
    {
      return (int)40;
    }
  }
  {}
  if ((_8444 == std::string ("autoSortABeforeOpt")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8444 == std::string ("sensitivityOptimizer")))
  {
    {
      return (int)120;
    }
  }
  {}
  if ((_8444 == std::string ("writeXmlMode")))
  {
    {
      return (int)179;
    }
  }
  {}
  if ((_8444 == std::string ("anaSolBasis")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8444 == std::string ("anaSolPrintViolated")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8444 == std::string ("basisSolveUsePlusOne")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_8444 == std::string ("compressStatfile")))
  {
    {
      return (int)11;
    }
  }
  {}
  if ((_8444 == std::string ("mioRinsMaxNodes")))
  {
    {
      return (int)81;
    }
  }
  {}
  if ((_8444 == std::string ("mioFeaspumpLevel")))
  {
    {
      return (int)69;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_orderingtype_value(const std::string & _8445){
  if ((_8445 == std::string ("free")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8445 == std::string ("appminloc")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8445 == std::string ("experimental")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8445 == std::string ("tryGraphpar")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8445 == std::string ("forceGraphpar")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_8445 == std::string ("none")))
  {
    {
      return (int)5;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_uplo_value(const std::string & _8446){
  if ((_8446 == std::string ("lo")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8446 == std::string ("up")))
  {
    {
      return (int)1;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_solsta_value(const std::string & _8447){
  if ((_8447 == std::string ("unknown")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8447 == std::string ("optimal")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8447 == std::string ("primFeas")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8447 == std::string ("dualFeas")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8447 == std::string ("primAndDualFeas")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_8447 == std::string ("primInfeasCer")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_8447 == std::string ("dualInfeasCer")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_8447 == std::string ("primIllposedCer")))
  {
    {
      return (int)7;
    }
  }
  {}
  if ((_8447 == std::string ("dualIllposedCer")))
  {
    {
      return (int)8;
    }
  }
  {}
  if ((_8447 == std::string ("integerOptimal")))
  {
    {
      return (int)9;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_xmlwriteroutputtype_value(const std::string & _8448){
  if ((_8448 == std::string ("row")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8448 == std::string ("col")))
  {
    {
      return (int)1;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_iomode_value(const std::string & _8449){
  if ((_8449 == std::string ("read")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8449 == std::string ("write")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8449 == std::string ("readwrite")))
  {
    {
      return (int)2;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_boundkey_value(const std::string & _8450){
  if ((_8450 == std::string ("lo")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8450 == std::string ("up")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8450 == std::string ("fx")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8450 == std::string ("fr")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8450 == std::string ("ra")))
  {
    {
      return (int)4;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_dparam_value(const std::string & _8451){
  if ((_8451 == std::string ("dataTolCjLarge")))
  {
    {
      return (int)13;
    }
  }
  {}
  if ((_8451 == std::string ("dataTolCHuge")))
  {
    {
      return (int)12;
    }
  }
  {}
  if ((_8451 == std::string ("dataTolAijLarge")))
  {
    {
      return (int)9;
    }
  }
  {}
  if ((_8451 == std::string ("dataTolAijHuge")))
  {
    {
      return (int)8;
    }
  }
  {}
  if ((_8451 == std::string ("dataSymMatTol")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_8451 == std::string ("dataSymMatTolLarge")))
  {
    {
      return (int)7;
    }
  }
  {}
  if ((_8451 == std::string ("dataSymMatTolHuge")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_8451 == std::string ("dataTolBoundInf")))
  {
    {
      return (int)10;
    }
  }
  {}
  if ((_8451 == std::string ("dataTolBoundWrn")))
  {
    {
      return (int)11;
    }
  }
  {}
  if ((_8451 == std::string ("dataTolQij")))
  {
    {
      return (int)14;
    }
  }
  {}
  if ((_8451 == std::string ("dataTolX")))
  {
    {
      return (int)15;
    }
  }
  {}
  if ((_8451 == std::string ("semidefiniteTolApprox")))
  {
    {
      return (int)54;
    }
  }
  {}
  if ((_8451 == std::string ("optimizerMaxTime")))
  {
    {
      return (int)47;
    }
  }
  {}
  if ((_8451 == std::string ("lowerObjCut")))
  {
    {
      return (int)38;
    }
  }
  {}
  if ((_8451 == std::string ("upperObjCut")))
  {
    {
      return (int)57;
    }
  }
  {}
  if ((_8451 == std::string ("upperObjCutFiniteTrh")))
  {
    {
      return (int)58;
    }
  }
  {}
  if ((_8451 == std::string ("lowerObjCutFiniteTrh")))
  {
    {
      return (int)39;
    }
  }
  {}
  if ((_8451 == std::string ("intpntTolRelGap")))
  {
    {
      return (int)35;
    }
  }
  {}
  if ((_8451 == std::string ("intpntTolStepSize")))
  {
    {
      return (int)37;
    }
  }
  {}
  if ((_8451 == std::string ("simLuTolRelPiv")))
  {
    {
      return (int)55;
    }
  }
  {}
  if ((_8451 == std::string ("intpntTolRelStep")))
  {
    {
      return (int)36;
    }
  }
  {}
  if ((_8451 == std::string ("intpntTolPath")))
  {
    {
      return (int)32;
    }
  }
  {}
  if ((_8451 == std::string ("intpntTolPfeas")))
  {
    {
      return (int)33;
    }
  }
  {}
  if ((_8451 == std::string ("intpntTolDfeas")))
  {
    {
      return (int)28;
    }
  }
  {}
  if ((_8451 == std::string ("intpntTolMuRed")))
  {
    {
      return (int)31;
    }
  }
  {}
  if ((_8451 == std::string ("intpntTolInfeas")))
  {
    {
      return (int)30;
    }
  }
  {}
  if ((_8451 == std::string ("intpntCoTolRelGap")))
  {
    {
      return (int)21;
    }
  }
  {}
  if ((_8451 == std::string ("intpntCoTolPfeas")))
  {
    {
      return (int)20;
    }
  }
  {}
  if ((_8451 == std::string ("intpntCoTolDfeas")))
  {
    {
      return (int)16;
    }
  }
  {}
  if ((_8451 == std::string ("intpntCoTolMuRed")))
  {
    {
      return (int)18;
    }
  }
  {}
  if ((_8451 == std::string ("intpntCoTolNearRel")))
  {
    {
      return (int)19;
    }
  }
  {}
  if ((_8451 == std::string ("intpntCoTolInfeas")))
  {
    {
      return (int)17;
    }
  }
  {}
  if ((_8451 == std::string ("intpntQoTolRelGap")))
  {
    {
      return (int)27;
    }
  }
  {}
  if ((_8451 == std::string ("intpntQoTolPfeas")))
  {
    {
      return (int)26;
    }
  }
  {}
  if ((_8451 == std::string ("intpntQoTolDfeas")))
  {
    {
      return (int)22;
    }
  }
  {}
  if ((_8451 == std::string ("intpntQoTolMuRed")))
  {
    {
      return (int)24;
    }
  }
  {}
  if ((_8451 == std::string ("intpntQoTolNearRel")))
  {
    {
      return (int)25;
    }
  }
  {}
  if ((_8451 == std::string ("intpntQoTolInfeas")))
  {
    {
      return (int)23;
    }
  }
  {}
  if ((_8451 == std::string ("intpntTolPsafe")))
  {
    {
      return (int)34;
    }
  }
  {}
  if ((_8451 == std::string ("intpntTolDsafe")))
  {
    {
      return (int)29;
    }
  }
  {}
  if ((_8451 == std::string ("mioMaxTime")))
  {
    {
      return (int)40;
    }
  }
  {}
  if ((_8451 == std::string ("mioRelGapConst")))
  {
    {
      return (int)41;
    }
  }
  {}
  if ((_8451 == std::string ("mioTolRelGap")))
  {
    {
      return (int)46;
    }
  }
  {}
  if ((_8451 == std::string ("mioTolAbsGap")))
  {
    {
      return (int)42;
    }
  }
  {}
  if ((_8451 == std::string ("mioTolAbsRelaxInt")))
  {
    {
      return (int)43;
    }
  }
  {}
  if ((_8451 == std::string ("basisTolX")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8451 == std::string ("basisTolS")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8451 == std::string ("basisRelTolS")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8451 == std::string ("presolveTolX")))
  {
    {
      return (int)52;
    }
  }
  {}
  if ((_8451 == std::string ("presolveTolS")))
  {
    {
      return (int)51;
    }
  }
  {}
  if ((_8451 == std::string ("presolveTolAij")))
  {
    {
      return (int)49;
    }
  }
  {}
  if ((_8451 == std::string ("presolveTolAbsLindep")))
  {
    {
      return (int)48;
    }
  }
  {}
  if ((_8451 == std::string ("presolveTolRelLindep")))
  {
    {
      return (int)50;
    }
  }
  {}
  if ((_8451 == std::string ("simplexAbsTolPiv")))
  {
    {
      return (int)56;
    }
  }
  {}
  if ((_8451 == std::string ("mioTolFeas")))
  {
    {
      return (int)44;
    }
  }
  {}
  if ((_8451 == std::string ("anaSolInfeasTol")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8451 == std::string ("checkConvexityRelTol")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_8451 == std::string ("qcqoReformulateRelDropTol")))
  {
    {
      return (int)53;
    }
  }
  {}
  if ((_8451 == std::string ("mioTolRelDualBoundImprovement")))
  {
    {
      return (int)45;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_sparam_value(const std::string & _8452){
  if ((_8452 == std::string ("dataFileName")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8452 == std::string ("paramReadFileName")))
  {
    {
      return (int)7;
    }
  }
  {}
  if ((_8452 == std::string ("paramWriteFileName")))
  {
    {
      return (int)8;
    }
  }
  {}
  if ((_8452 == std::string ("paramCommentSign")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_8452 == std::string ("debugFileName")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8452 == std::string ("basSolFileName")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8452 == std::string ("itrSolFileName")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_8452 == std::string ("intSolFileName")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8452 == std::string ("solFilterXcLow")))
  {
    {
      return (int)16;
    }
  }
  {}
  if ((_8452 == std::string ("solFilterXcUpr")))
  {
    {
      return (int)17;
    }
  }
  {}
  if ((_8452 == std::string ("solFilterXxLow")))
  {
    {
      return (int)18;
    }
  }
  {}
  if ((_8452 == std::string ("solFilterXxUpr")))
  {
    {
      return (int)19;
    }
  }
  {}
  if ((_8452 == std::string ("readMpsObjName")))
  {
    {
      return (int)10;
    }
  }
  {}
  if ((_8452 == std::string ("readMpsRanName")))
  {
    {
      return (int)11;
    }
  }
  {}
  if ((_8452 == std::string ("readMpsRhsName")))
  {
    {
      return (int)12;
    }
  }
  {}
  if ((_8452 == std::string ("readMpsBouName")))
  {
    {
      return (int)9;
    }
  }
  {}
  if ((_8452 == std::string ("statFileName")))
  {
    {
      return (int)20;
    }
  }
  {}
  if ((_8452 == std::string ("statName")))
  {
    {
      return (int)22;
    }
  }
  {}
  if ((_8452 == std::string ("statKey")))
  {
    {
      return (int)21;
    }
  }
  {}
  if ((_8452 == std::string ("writeLpGenVarName")))
  {
    {
      return (int)23;
    }
  }
  {}
  if ((_8452 == std::string ("sensitivityResFileName")))
  {
    {
      return (int)15;
    }
  }
  {}
  if ((_8452 == std::string ("sensitivityFileName")))
  {
    {
      return (int)14;
    }
  }
  {}
  if ((_8452 == std::string ("mioDebugString")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_8452 == std::string ("remoteAccessToken")))
  {
    {
      return (int)13;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_language_value(const std::string & _8453){
  if ((_8453 == std::string ("eng")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8453 == std::string ("dan")))
  {
    {
      return (int)1;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_solveform_value(const std::string & _8454){
  if ((_8454 == std::string ("free")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8454 == std::string ("primal")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8454 == std::string ("dual")))
  {
    {
      return (int)2;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_dinfitem_value(const std::string & _8455){
  if ((_8455 == std::string ("biTime")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_8455 == std::string ("biPrimalTime")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_8455 == std::string ("biDualTime")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8455 == std::string ("biCleanTime")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8455 == std::string ("biCleanPrimalTime")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8455 == std::string ("biCleanDualTime")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8455 == std::string ("intpntTime")))
  {
    {
      return (int)13;
    }
  }
  {}
  if ((_8455 == std::string ("intpntOrderTime")))
  {
    {
      return (int)10;
    }
  }
  {}
  if ((_8455 == std::string ("intpntPrimalObj")))
  {
    {
      return (int)12;
    }
  }
  {}
  if ((_8455 == std::string ("intpntDualObj")))
  {
    {
      return (int)7;
    }
  }
  {}
  if ((_8455 == std::string ("intpntPrimalFeas")))
  {
    {
      return (int)11;
    }
  }
  {}
  if ((_8455 == std::string ("intpntDualFeas")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_8455 == std::string ("intpntOptStatus")))
  {
    {
      return (int)9;
    }
  }
  {}
  if ((_8455 == std::string ("simTime")))
  {
    {
      return (int)45;
    }
  }
  {}
  if ((_8455 == std::string ("simPrimalTime")))
  {
    {
      return (int)44;
    }
  }
  {}
  if ((_8455 == std::string ("simDualTime")))
  {
    {
      return (int)41;
    }
  }
  {}
  if ((_8455 == std::string ("simObj")))
  {
    {
      return (int)43;
    }
  }
  {}
  if ((_8455 == std::string ("simFeas")))
  {
    {
      return (int)42;
    }
  }
  {}
  if ((_8455 == std::string ("mioTime")))
  {
    {
      return (int)29;
    }
  }
  {}
  if ((_8455 == std::string ("mioRootPresolveTime")))
  {
    {
      return (int)28;
    }
  }
  {}
  if ((_8455 == std::string ("mioRootOptimizerTime")))
  {
    {
      return (int)27;
    }
  }
  {}
  if ((_8455 == std::string ("toConicTime")))
  {
    {
      return (int)89;
    }
  }
  {}
  if ((_8455 == std::string ("mioConstructSolutionObj")))
  {
    {
      return (int)16;
    }
  }
  {}
  if ((_8455 == std::string ("mioObjInt")))
  {
    {
      return (int)23;
    }
  }
  {}
  if ((_8455 == std::string ("mioObjBound")))
  {
    {
      return (int)22;
    }
  }
  {}
  if ((_8455 == std::string ("mioObjRelGap")))
  {
    {
      return (int)24;
    }
  }
  {}
  if ((_8455 == std::string ("mioObjAbsGap")))
  {
    {
      return (int)21;
    }
  }
  {}
  if ((_8455 == std::string ("mioUserObjCut")))
  {
    {
      return (int)30;
    }
  }
  {}
  if ((_8455 == std::string ("mioCmirSeparationTime")))
  {
    {
      return (int)15;
    }
  }
  {}
  if ((_8455 == std::string ("mioCliqueSeparationTime")))
  {
    {
      return (int)14;
    }
  }
  {}
  if ((_8455 == std::string ("mioKnapsackCoverSeparationTime")))
  {
    {
      return (int)20;
    }
  }
  {}
  if ((_8455 == std::string ("mioGmiSeparationTime")))
  {
    {
      return (int)18;
    }
  }
  {}
  if ((_8455 == std::string ("mioImpliedBoundTime")))
  {
    {
      return (int)19;
    }
  }
  {}
  if ((_8455 == std::string ("mioRootCutgenTime")))
  {
    {
      return (int)26;
    }
  }
  {}
  if ((_8455 == std::string ("mioProbingTime")))
  {
    {
      return (int)25;
    }
  }
  {}
  if ((_8455 == std::string ("optimizerTime")))
  {
    {
      return (int)31;
    }
  }
  {}
  if ((_8455 == std::string ("presolveTime")))
  {
    {
      return (int)34;
    }
  }
  {}
  if ((_8455 == std::string ("mioDualBoundAfterPresolve")))
  {
    {
      return (int)17;
    }
  }
  {}
  if ((_8455 == std::string ("presolveEliTime")))
  {
    {
      return (int)32;
    }
  }
  {}
  if ((_8455 == std::string ("presolveLindepTime")))
  {
    {
      return (int)33;
    }
  }
  {}
  if ((_8455 == std::string ("rdTime")))
  {
    {
      return (int)40;
    }
  }
  {}
  if ((_8455 == std::string ("solItrPrimalObj")))
  {
    {
      return (int)84;
    }
  }
  {}
  if ((_8455 == std::string ("solItrPviolcon")))
  {
    {
      return (int)86;
    }
  }
  {}
  if ((_8455 == std::string ("solItrPviolvar")))
  {
    {
      return (int)88;
    }
  }
  {}
  if ((_8455 == std::string ("solItrPviolbarvar")))
  {
    {
      return (int)85;
    }
  }
  {}
  if ((_8455 == std::string ("solItrPviolcones")))
  {
    {
      return (int)87;
    }
  }
  {}
  if ((_8455 == std::string ("solItrDualObj")))
  {
    {
      return (int)69;
    }
  }
  {}
  if ((_8455 == std::string ("solItrDviolcon")))
  {
    {
      return (int)71;
    }
  }
  {}
  if ((_8455 == std::string ("solItrDviolvar")))
  {
    {
      return (int)73;
    }
  }
  {}
  if ((_8455 == std::string ("solItrDviolbarvar")))
  {
    {
      return (int)70;
    }
  }
  {}
  if ((_8455 == std::string ("solItrDviolcones")))
  {
    {
      return (int)72;
    }
  }
  {}
  if ((_8455 == std::string ("solItrNrmXc")))
  {
    {
      return (int)81;
    }
  }
  {}
  if ((_8455 == std::string ("solItrNrmXx")))
  {
    {
      return (int)82;
    }
  }
  {}
  if ((_8455 == std::string ("solItrNrmBarx")))
  {
    {
      return (int)75;
    }
  }
  {}
  if ((_8455 == std::string ("solItrNrmY")))
  {
    {
      return (int)83;
    }
  }
  {}
  if ((_8455 == std::string ("solItrNrmSlc")))
  {
    {
      return (int)76;
    }
  }
  {}
  if ((_8455 == std::string ("solItrNrmSuc")))
  {
    {
      return (int)79;
    }
  }
  {}
  if ((_8455 == std::string ("solItrNrmSlx")))
  {
    {
      return (int)77;
    }
  }
  {}
  if ((_8455 == std::string ("solItrNrmSux")))
  {
    {
      return (int)80;
    }
  }
  {}
  if ((_8455 == std::string ("solItrNrmSnx")))
  {
    {
      return (int)78;
    }
  }
  {}
  if ((_8455 == std::string ("solItrNrmBars")))
  {
    {
      return (int)74;
    }
  }
  {}
  if ((_8455 == std::string ("solBasPrimalObj")))
  {
    {
      return (int)57;
    }
  }
  {}
  if ((_8455 == std::string ("solBasPviolcon")))
  {
    {
      return (int)58;
    }
  }
  {}
  if ((_8455 == std::string ("solBasPviolvar")))
  {
    {
      return (int)59;
    }
  }
  {}
  if ((_8455 == std::string ("solBasDualObj")))
  {
    {
      return (int)46;
    }
  }
  {}
  if ((_8455 == std::string ("solBasDviolcon")))
  {
    {
      return (int)47;
    }
  }
  {}
  if ((_8455 == std::string ("solBasDviolvar")))
  {
    {
      return (int)48;
    }
  }
  {}
  if ((_8455 == std::string ("solBasNrmXc")))
  {
    {
      return (int)54;
    }
  }
  {}
  if ((_8455 == std::string ("solBasNrmXx")))
  {
    {
      return (int)55;
    }
  }
  {}
  if ((_8455 == std::string ("solBasNrmBarx")))
  {
    {
      return (int)49;
    }
  }
  {}
  if ((_8455 == std::string ("solBasNrmY")))
  {
    {
      return (int)56;
    }
  }
  {}
  if ((_8455 == std::string ("solBasNrmSlc")))
  {
    {
      return (int)50;
    }
  }
  {}
  if ((_8455 == std::string ("solBasNrmSuc")))
  {
    {
      return (int)52;
    }
  }
  {}
  if ((_8455 == std::string ("solBasNrmSlx")))
  {
    {
      return (int)51;
    }
  }
  {}
  if ((_8455 == std::string ("solBasNrmSux")))
  {
    {
      return (int)53;
    }
  }
  {}
  if ((_8455 == std::string ("solItgPrimalObj")))
  {
    {
      return (int)63;
    }
  }
  {}
  if ((_8455 == std::string ("solItgPviolcon")))
  {
    {
      return (int)65;
    }
  }
  {}
  if ((_8455 == std::string ("solItgPviolvar")))
  {
    {
      return (int)68;
    }
  }
  {}
  if ((_8455 == std::string ("solItgPviolbarvar")))
  {
    {
      return (int)64;
    }
  }
  {}
  if ((_8455 == std::string ("solItgPviolcones")))
  {
    {
      return (int)66;
    }
  }
  {}
  if ((_8455 == std::string ("solItgPviolitg")))
  {
    {
      return (int)67;
    }
  }
  {}
  if ((_8455 == std::string ("solItgNrmXc")))
  {
    {
      return (int)61;
    }
  }
  {}
  if ((_8455 == std::string ("solItgNrmXx")))
  {
    {
      return (int)62;
    }
  }
  {}
  if ((_8455 == std::string ("solItgNrmBarx")))
  {
    {
      return (int)60;
    }
  }
  {}
  if ((_8455 == std::string ("intpntFactorNumFlops")))
  {
    {
      return (int)8;
    }
  }
  {}
  if ((_8455 == std::string ("qcqoReformulateTime")))
  {
    {
      return (int)37;
    }
  }
  {}
  if ((_8455 == std::string ("qcqoReformulateMaxPerturbation")))
  {
    {
      return (int)36;
    }
  }
  {}
  if ((_8455 == std::string ("qcqoReformulateWorstCholeskyDiagScaling")))
  {
    {
      return (int)39;
    }
  }
  {}
  if ((_8455 == std::string ("qcqoReformulateWorstCholeskyColumnScaling")))
  {
    {
      return (int)38;
    }
  }
  {}
  if ((_8455 == std::string ("primalRepairPenaltyObj")))
  {
    {
      return (int)35;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_compresstype_value(const std::string & _8456){
  if ((_8456 == std::string ("none")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8456 == std::string ("free")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8456 == std::string ("gzip")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8456 == std::string ("zstd")))
  {
    {
      return (int)3;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_variabletype_value(const std::string & _8457){
  if ((_8457 == std::string ("typeCont")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8457 == std::string ("typeInt")))
  {
    {
      return (int)1;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_optimizertype_value(const std::string & _8458){
  if ((_8458 == std::string ("free")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8458 == std::string ("intpnt")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_8458 == std::string ("conic")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8458 == std::string ("primalSimplex")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_8458 == std::string ("dualSimplex")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8458 == std::string ("freeSimplex")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8458 == std::string ("mixedInt")))
  {
    {
      return (int)5;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_scalingmethod_value(const std::string & _8459){
  if ((_8459 == std::string ("pow2")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8459 == std::string ("free")))
  {
    {
      return (int)1;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_mionodeseltype_value(const std::string & _8460){
  if ((_8460 == std::string ("free")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8460 == std::string ("first")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8460 == std::string ("best")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8460 == std::string ("pseudo")))
  {
    {
      return (int)3;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_internal_liinf_value(const std::string & _8461){
  if ((_8461 == std::string ("intpntLenbarvar")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_8461 == std::string ("intpntFactorNumNzBefore")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8461 == std::string ("intpntFactorNumNzAfter")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8461 == std::string ("intpntFactorMlOrderSparseLNz")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8461 == std::string ("intpntFactorGpOrderSparseLNz")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8461 == std::string ("presolveStackSize")))
  {
    {
      return (int)7;
    }
  }
  {}
  if ((_8461 == std::string ("intpntFactorVNz")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_8461 == std::string ("intpntFactorUpdatedVNz")))
  {
    {
      return (int)4;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_rescode_value(const std::string & _8462){
  if ((_8462 == std::string ("ok")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8462 == std::string ("wrnOpenParamFile")))
  {
    {
      return (int)50;
    }
  }
  {}
  if ((_8462 == std::string ("wrnLargeBound")))
  {
    {
      return (int)51;
    }
  }
  {}
  if ((_8462 == std::string ("wrnLargeLoBound")))
  {
    {
      return (int)52;
    }
  }
  {}
  if ((_8462 == std::string ("wrnLargeUpBound")))
  {
    {
      return (int)53;
    }
  }
  {}
  if ((_8462 == std::string ("wrnLargeConFx")))
  {
    {
      return (int)54;
    }
  }
  {}
  if ((_8462 == std::string ("wrnLargeCj")))
  {
    {
      return (int)57;
    }
  }
  {}
  if ((_8462 == std::string ("wrnLargeAij")))
  {
    {
      return (int)62;
    }
  }
  {}
  if ((_8462 == std::string ("wrnZeroAij")))
  {
    {
      return (int)63;
    }
  }
  {}
  if ((_8462 == std::string ("wrnNameMaxLen")))
  {
    {
      return (int)65;
    }
  }
  {}
  if ((_8462 == std::string ("wrnSparMaxLen")))
  {
    {
      return (int)66;
    }
  }
  {}
  if ((_8462 == std::string ("wrnMpsSplitRhsVector")))
  {
    {
      return (int)70;
    }
  }
  {}
  if ((_8462 == std::string ("wrnMpsSplitRanVector")))
  {
    {
      return (int)71;
    }
  }
  {}
  if ((_8462 == std::string ("wrnMpsSplitBouVector")))
  {
    {
      return (int)72;
    }
  }
  {}
  if ((_8462 == std::string ("wrnLpOldQuadFormat")))
  {
    {
      return (int)80;
    }
  }
  {}
  if ((_8462 == std::string ("wrnLpDropVariable")))
  {
    {
      return (int)85;
    }
  }
  {}
  if ((_8462 == std::string ("wrnNzInUprTri")))
  {
    {
      return (int)200;
    }
  }
  {}
  if ((_8462 == std::string ("wrnDroppedNzQobj")))
  {
    {
      return (int)201;
    }
  }
  {}
  if ((_8462 == std::string ("wrnIgnoreInteger")))
  {
    {
      return (int)250;
    }
  }
  {}
  if ((_8462 == std::string ("wrnNoGlobalOptimizer")))
  {
    {
      return (int)251;
    }
  }
  {}
  if ((_8462 == std::string ("wrnMioInfeasibleFinal")))
  {
    {
      return (int)270;
    }
  }
  {}
  if ((_8462 == std::string ("wrnSolFilter")))
  {
    {
      return (int)300;
    }
  }
  {}
  if ((_8462 == std::string ("wrnUndefSolFileName")))
  {
    {
      return (int)350;
    }
  }
  {}
  if ((_8462 == std::string ("wrnSolFileIgnoredCon")))
  {
    {
      return (int)351;
    }
  }
  {}
  if ((_8462 == std::string ("wrnSolFileIgnoredVar")))
  {
    {
      return (int)352;
    }
  }
  {}
  if ((_8462 == std::string ("wrnTooFewBasisVars")))
  {
    {
      return (int)400;
    }
  }
  {}
  if ((_8462 == std::string ("wrnTooManyBasisVars")))
  {
    {
      return (int)405;
    }
  }
  {}
  if ((_8462 == std::string ("wrnLicenseExpire")))
  {
    {
      return (int)500;
    }
  }
  {}
  if ((_8462 == std::string ("wrnLicenseServer")))
  {
    {
      return (int)501;
    }
  }
  {}
  if ((_8462 == std::string ("wrnEmptyName")))
  {
    {
      return (int)502;
    }
  }
  {}
  if ((_8462 == std::string ("wrnUsingGenericNames")))
  {
    {
      return (int)503;
    }
  }
  {}
  if ((_8462 == std::string ("wrnLicenseFeatureExpire")))
  {
    {
      return (int)505;
    }
  }
  {}
  if ((_8462 == std::string ("wrnParamNameDou")))
  {
    {
      return (int)510;
    }
  }
  {}
  if ((_8462 == std::string ("wrnParamNameInt")))
  {
    {
      return (int)511;
    }
  }
  {}
  if ((_8462 == std::string ("wrnParamNameStr")))
  {
    {
      return (int)512;
    }
  }
  {}
  if ((_8462 == std::string ("wrnParamStrValue")))
  {
    {
      return (int)515;
    }
  }
  {}
  if ((_8462 == std::string ("wrnParamIgnoredCmio")))
  {
    {
      return (int)516;
    }
  }
  {}
  if ((_8462 == std::string ("wrnZerosInSparseRow")))
  {
    {
      return (int)705;
    }
  }
  {}
  if ((_8462 == std::string ("wrnZerosInSparseCol")))
  {
    {
      return (int)710;
    }
  }
  {}
  if ((_8462 == std::string ("wrnIncompleteLinearDependencyCheck")))
  {
    {
      return (int)800;
    }
  }
  {}
  if ((_8462 == std::string ("wrnEliminatorSpace")))
  {
    {
      return (int)801;
    }
  }
  {}
  if ((_8462 == std::string ("wrnPresolveOutofspace")))
  {
    {
      return (int)802;
    }
  }
  {}
  if ((_8462 == std::string ("wrnWriteChangedNames")))
  {
    {
      return (int)803;
    }
  }
  {}
  if ((_8462 == std::string ("wrnWriteDiscardedCfix")))
  {
    {
      return (int)804;
    }
  }
  {}
  if ((_8462 == std::string ("wrnDuplicateConstraintNames")))
  {
    {
      return (int)850;
    }
  }
  {}
  if ((_8462 == std::string ("wrnDuplicateVariableNames")))
  {
    {
      return (int)851;
    }
  }
  {}
  if ((_8462 == std::string ("wrnDuplicateBarvariableNames")))
  {
    {
      return (int)852;
    }
  }
  {}
  if ((_8462 == std::string ("wrnDuplicateConeNames")))
  {
    {
      return (int)853;
    }
  }
  {}
  if ((_8462 == std::string ("wrnAnaLargeBounds")))
  {
    {
      return (int)900;
    }
  }
  {}
  if ((_8462 == std::string ("wrnAnaCZero")))
  {
    {
      return (int)901;
    }
  }
  {}
  if ((_8462 == std::string ("wrnAnaEmptyCols")))
  {
    {
      return (int)902;
    }
  }
  {}
  if ((_8462 == std::string ("wrnAnaCloseBounds")))
  {
    {
      return (int)903;
    }
  }
  {}
  if ((_8462 == std::string ("wrnAnaAlmostIntBounds")))
  {
    {
      return (int)904;
    }
  }
  {}
  if ((_8462 == std::string ("wrnQuadConesWithRootFixedAtZero")))
  {
    {
      return (int)930;
    }
  }
  {}
  if ((_8462 == std::string ("wrnRquadConesWithRootFixedAtZero")))
  {
    {
      return (int)931;
    }
  }
  {}
  if ((_8462 == std::string ("wrnExpConesWithVariablesFixedAtZero")))
  {
    {
      return (int)932;
    }
  }
  {}
  if ((_8462 == std::string ("wrnPowConesWithRootFixedAtZero")))
  {
    {
      return (int)933;
    }
  }
  {}
  if ((_8462 == std::string ("wrnNoDualizer")))
  {
    {
      return (int)950;
    }
  }
  {}
  if ((_8462 == std::string ("wrnSymMatLarge")))
  {
    {
      return (int)960;
    }
  }
  {}
  if ((_8462 == std::string ("errLicense")))
  {
    {
      return (int)1000;
    }
  }
  {}
  if ((_8462 == std::string ("errLicenseExpired")))
  {
    {
      return (int)1001;
    }
  }
  {}
  if ((_8462 == std::string ("errLicenseVersion")))
  {
    {
      return (int)1002;
    }
  }
  {}
  if ((_8462 == std::string ("errSizeLicense")))
  {
    {
      return (int)1005;
    }
  }
  {}
  if ((_8462 == std::string ("errProbLicense")))
  {
    {
      return (int)1006;
    }
  }
  {}
  if ((_8462 == std::string ("errFileLicense")))
  {
    {
      return (int)1007;
    }
  }
  {}
  if ((_8462 == std::string ("errMissingLicenseFile")))
  {
    {
      return (int)1008;
    }
  }
  {}
  if ((_8462 == std::string ("errSizeLicenseCon")))
  {
    {
      return (int)1010;
    }
  }
  {}
  if ((_8462 == std::string ("errSizeLicenseVar")))
  {
    {
      return (int)1011;
    }
  }
  {}
  if ((_8462 == std::string ("errSizeLicenseIntvar")))
  {
    {
      return (int)1012;
    }
  }
  {}
  if ((_8462 == std::string ("errOptimizerLicense")))
  {
    {
      return (int)1013;
    }
  }
  {}
  if ((_8462 == std::string ("errFlexlm")))
  {
    {
      return (int)1014;
    }
  }
  {}
  if ((_8462 == std::string ("errLicenseServer")))
  {
    {
      return (int)1015;
    }
  }
  {}
  if ((_8462 == std::string ("errLicenseMax")))
  {
    {
      return (int)1016;
    }
  }
  {}
  if ((_8462 == std::string ("errLicenseMoseklmDaemon")))
  {
    {
      return (int)1017;
    }
  }
  {}
  if ((_8462 == std::string ("errLicenseFeature")))
  {
    {
      return (int)1018;
    }
  }
  {}
  if ((_8462 == std::string ("errPlatformNotLicensed")))
  {
    {
      return (int)1019;
    }
  }
  {}
  if ((_8462 == std::string ("errLicenseCannotAllocate")))
  {
    {
      return (int)1020;
    }
  }
  {}
  if ((_8462 == std::string ("errLicenseCannotConnect")))
  {
    {
      return (int)1021;
    }
  }
  {}
  if ((_8462 == std::string ("errLicenseInvalidHostid")))
  {
    {
      return (int)1025;
    }
  }
  {}
  if ((_8462 == std::string ("errLicenseServerVersion")))
  {
    {
      return (int)1026;
    }
  }
  {}
  if ((_8462 == std::string ("errLicenseNoServerSupport")))
  {
    {
      return (int)1027;
    }
  }
  {}
  if ((_8462 == std::string ("errLicenseNoServerLine")))
  {
    {
      return (int)1028;
    }
  }
  {}
  if ((_8462 == std::string ("errOlderDll")))
  {
    {
      return (int)1035;
    }
  }
  {}
  if ((_8462 == std::string ("errNewerDll")))
  {
    {
      return (int)1036;
    }
  }
  {}
  if ((_8462 == std::string ("errLinkFileDll")))
  {
    {
      return (int)1040;
    }
  }
  {}
  if ((_8462 == std::string ("errThreadMutexInit")))
  {
    {
      return (int)1045;
    }
  }
  {}
  if ((_8462 == std::string ("errThreadMutexLock")))
  {
    {
      return (int)1046;
    }
  }
  {}
  if ((_8462 == std::string ("errThreadMutexUnlock")))
  {
    {
      return (int)1047;
    }
  }
  {}
  if ((_8462 == std::string ("errThreadCreate")))
  {
    {
      return (int)1048;
    }
  }
  {}
  if ((_8462 == std::string ("errThreadCondInit")))
  {
    {
      return (int)1049;
    }
  }
  {}
  if ((_8462 == std::string ("errUnknown")))
  {
    {
      return (int)1050;
    }
  }
  {}
  if ((_8462 == std::string ("errSpace")))
  {
    {
      return (int)1051;
    }
  }
  {}
  if ((_8462 == std::string ("errFileOpen")))
  {
    {
      return (int)1052;
    }
  }
  {}
  if ((_8462 == std::string ("errFileRead")))
  {
    {
      return (int)1053;
    }
  }
  {}
  if ((_8462 == std::string ("errFileWrite")))
  {
    {
      return (int)1054;
    }
  }
  {}
  if ((_8462 == std::string ("errDataFileExt")))
  {
    {
      return (int)1055;
    }
  }
  {}
  if ((_8462 == std::string ("errInvalidFileName")))
  {
    {
      return (int)1056;
    }
  }
  {}
  if ((_8462 == std::string ("errInvalidSolFileName")))
  {
    {
      return (int)1057;
    }
  }
  {}
  if ((_8462 == std::string ("errEndOfFile")))
  {
    {
      return (int)1059;
    }
  }
  {}
  if ((_8462 == std::string ("errNullEnv")))
  {
    {
      return (int)1060;
    }
  }
  {}
  if ((_8462 == std::string ("errNullTask")))
  {
    {
      return (int)1061;
    }
  }
  {}
  if ((_8462 == std::string ("errInvalidStream")))
  {
    {
      return (int)1062;
    }
  }
  {}
  if ((_8462 == std::string ("errNoInitEnv")))
  {
    {
      return (int)1063;
    }
  }
  {}
  if ((_8462 == std::string ("errInvalidTask")))
  {
    {
      return (int)1064;
    }
  }
  {}
  if ((_8462 == std::string ("errNullPointer")))
  {
    {
      return (int)1065;
    }
  }
  {}
  if ((_8462 == std::string ("errLivingTasks")))
  {
    {
      return (int)1066;
    }
  }
  {}
  if ((_8462 == std::string ("errBlankName")))
  {
    {
      return (int)1070;
    }
  }
  {}
  if ((_8462 == std::string ("errDupName")))
  {
    {
      return (int)1071;
    }
  }
  {}
  if ((_8462 == std::string ("errFormatString")))
  {
    {
      return (int)1072;
    }
  }
  {}
  if ((_8462 == std::string ("errInvalidObjName")))
  {
    {
      return (int)1075;
    }
  }
  {}
  if ((_8462 == std::string ("errInvalidConName")))
  {
    {
      return (int)1076;
    }
  }
  {}
  if ((_8462 == std::string ("errInvalidVarName")))
  {
    {
      return (int)1077;
    }
  }
  {}
  if ((_8462 == std::string ("errInvalidConeName")))
  {
    {
      return (int)1078;
    }
  }
  {}
  if ((_8462 == std::string ("errInvalidBarvarName")))
  {
    {
      return (int)1079;
    }
  }
  {}
  if ((_8462 == std::string ("errSpaceLeaking")))
  {
    {
      return (int)1080;
    }
  }
  {}
  if ((_8462 == std::string ("errSpaceNoInfo")))
  {
    {
      return (int)1081;
    }
  }
  {}
  if ((_8462 == std::string ("errReadFormat")))
  {
    {
      return (int)1090;
    }
  }
  {}
  if ((_8462 == std::string ("errMpsFile")))
  {
    {
      return (int)1100;
    }
  }
  {}
  if ((_8462 == std::string ("errMpsInvField")))
  {
    {
      return (int)1101;
    }
  }
  {}
  if ((_8462 == std::string ("errMpsInvMarker")))
  {
    {
      return (int)1102;
    }
  }
  {}
  if ((_8462 == std::string ("errMpsNullConName")))
  {
    {
      return (int)1103;
    }
  }
  {}
  if ((_8462 == std::string ("errMpsNullVarName")))
  {
    {
      return (int)1104;
    }
  }
  {}
  if ((_8462 == std::string ("errMpsUndefConName")))
  {
    {
      return (int)1105;
    }
  }
  {}
  if ((_8462 == std::string ("errMpsUndefVarName")))
  {
    {
      return (int)1106;
    }
  }
  {}
  if ((_8462 == std::string ("errMpsInvConKey")))
  {
    {
      return (int)1107;
    }
  }
  {}
  if ((_8462 == std::string ("errMpsInvBoundKey")))
  {
    {
      return (int)1108;
    }
  }
  {}
  if ((_8462 == std::string ("errMpsInvSecName")))
  {
    {
      return (int)1109;
    }
  }
  {}
  if ((_8462 == std::string ("errMpsNoObjective")))
  {
    {
      return (int)1110;
    }
  }
  {}
  if ((_8462 == std::string ("errMpsSplittedVar")))
  {
    {
      return (int)1111;
    }
  }
  {}
  if ((_8462 == std::string ("errMpsMulConName")))
  {
    {
      return (int)1112;
    }
  }
  {}
  if ((_8462 == std::string ("errMpsMulQsec")))
  {
    {
      return (int)1113;
    }
  }
  {}
  if ((_8462 == std::string ("errMpsMulQobj")))
  {
    {
      return (int)1114;
    }
  }
  {}
  if ((_8462 == std::string ("errMpsInvSecOrder")))
  {
    {
      return (int)1115;
    }
  }
  {}
  if ((_8462 == std::string ("errMpsMulCsec")))
  {
    {
      return (int)1116;
    }
  }
  {}
  if ((_8462 == std::string ("errMpsConeType")))
  {
    {
      return (int)1117;
    }
  }
  {}
  if ((_8462 == std::string ("errMpsConeOverlap")))
  {
    {
      return (int)1118;
    }
  }
  {}
  if ((_8462 == std::string ("errMpsConeRepeat")))
  {
    {
      return (int)1119;
    }
  }
  {}
  if ((_8462 == std::string ("errMpsNonSymmetricQ")))
  {
    {
      return (int)1120;
    }
  }
  {}
  if ((_8462 == std::string ("errMpsDuplicateQElement")))
  {
    {
      return (int)1121;
    }
  }
  {}
  if ((_8462 == std::string ("errMpsInvalidObjsense")))
  {
    {
      return (int)1122;
    }
  }
  {}
  if ((_8462 == std::string ("errMpsTabInField2")))
  {
    {
      return (int)1125;
    }
  }
  {}
  if ((_8462 == std::string ("errMpsTabInField3")))
  {
    {
      return (int)1126;
    }
  }
  {}
  if ((_8462 == std::string ("errMpsTabInField5")))
  {
    {
      return (int)1127;
    }
  }
  {}
  if ((_8462 == std::string ("errMpsInvalidObjName")))
  {
    {
      return (int)1128;
    }
  }
  {}
  if ((_8462 == std::string ("errLpIncompatible")))
  {
    {
      return (int)1150;
    }
  }
  {}
  if ((_8462 == std::string ("errLpEmpty")))
  {
    {
      return (int)1151;
    }
  }
  {}
  if ((_8462 == std::string ("errLpDupSlackName")))
  {
    {
      return (int)1152;
    }
  }
  {}
  if ((_8462 == std::string ("errWriteMpsInvalidName")))
  {
    {
      return (int)1153;
    }
  }
  {}
  if ((_8462 == std::string ("errLpInvalidVarName")))
  {
    {
      return (int)1154;
    }
  }
  {}
  if ((_8462 == std::string ("errLpFreeConstraint")))
  {
    {
      return (int)1155;
    }
  }
  {}
  if ((_8462 == std::string ("errWriteOpfInvalidVarName")))
  {
    {
      return (int)1156;
    }
  }
  {}
  if ((_8462 == std::string ("errLpFileFormat")))
  {
    {
      return (int)1157;
    }
  }
  {}
  if ((_8462 == std::string ("errWriteLpFormat")))
  {
    {
      return (int)1158;
    }
  }
  {}
  if ((_8462 == std::string ("errReadLpMissingEndTag")))
  {
    {
      return (int)1159;
    }
  }
  {}
  if ((_8462 == std::string ("errLpFormat")))
  {
    {
      return (int)1160;
    }
  }
  {}
  if ((_8462 == std::string ("errWriteLpNonUniqueName")))
  {
    {
      return (int)1161;
    }
  }
  {}
  if ((_8462 == std::string ("errReadLpNonexistingName")))
  {
    {
      return (int)1162;
    }
  }
  {}
  if ((_8462 == std::string ("errLpWriteConicProblem")))
  {
    {
      return (int)1163;
    }
  }
  {}
  if ((_8462 == std::string ("errLpWriteGecoProblem")))
  {
    {
      return (int)1164;
    }
  }
  {}
  if ((_8462 == std::string ("errWritingFile")))
  {
    {
      return (int)1166;
    }
  }
  {}
  if ((_8462 == std::string ("errPtfFormat")))
  {
    {
      return (int)1167;
    }
  }
  {}
  if ((_8462 == std::string ("errOpfFormat")))
  {
    {
      return (int)1168;
    }
  }
  {}
  if ((_8462 == std::string ("errOpfNewVariable")))
  {
    {
      return (int)1169;
    }
  }
  {}
  if ((_8462 == std::string ("errInvalidNameInSolFile")))
  {
    {
      return (int)1170;
    }
  }
  {}
  if ((_8462 == std::string ("errLpInvalidConName")))
  {
    {
      return (int)1171;
    }
  }
  {}
  if ((_8462 == std::string ("errOpfPrematureEof")))
  {
    {
      return (int)1172;
    }
  }
  {}
  if ((_8462 == std::string ("errJsonSyntax")))
  {
    {
      return (int)1175;
    }
  }
  {}
  if ((_8462 == std::string ("errJsonString")))
  {
    {
      return (int)1176;
    }
  }
  {}
  if ((_8462 == std::string ("errJsonNumberOverflow")))
  {
    {
      return (int)1177;
    }
  }
  {}
  if ((_8462 == std::string ("errJsonFormat")))
  {
    {
      return (int)1178;
    }
  }
  {}
  if ((_8462 == std::string ("errJsonData")))
  {
    {
      return (int)1179;
    }
  }
  {}
  if ((_8462 == std::string ("errJsonMissingData")))
  {
    {
      return (int)1180;
    }
  }
  {}
  if ((_8462 == std::string ("errArgumentLenneq")))
  {
    {
      return (int)1197;
    }
  }
  {}
  if ((_8462 == std::string ("errArgumentType")))
  {
    {
      return (int)1198;
    }
  }
  {}
  if ((_8462 == std::string ("errNumArguments")))
  {
    {
      return (int)1199;
    }
  }
  {}
  if ((_8462 == std::string ("errInArgument")))
  {
    {
      return (int)1200;
    }
  }
  {}
  if ((_8462 == std::string ("errArgumentDimension")))
  {
    {
      return (int)1201;
    }
  }
  {}
  if ((_8462 == std::string ("errShapeIsTooLarge")))
  {
    {
      return (int)1202;
    }
  }
  {}
  if ((_8462 == std::string ("errIndexIsTooSmall")))
  {
    {
      return (int)1203;
    }
  }
  {}
  if ((_8462 == std::string ("errIndexIsTooLarge")))
  {
    {
      return (int)1204;
    }
  }
  {}
  if ((_8462 == std::string ("errParamName")))
  {
    {
      return (int)1205;
    }
  }
  {}
  if ((_8462 == std::string ("errParamNameDou")))
  {
    {
      return (int)1206;
    }
  }
  {}
  if ((_8462 == std::string ("errParamNameInt")))
  {
    {
      return (int)1207;
    }
  }
  {}
  if ((_8462 == std::string ("errParamNameStr")))
  {
    {
      return (int)1208;
    }
  }
  {}
  if ((_8462 == std::string ("errParamIndex")))
  {
    {
      return (int)1210;
    }
  }
  {}
  if ((_8462 == std::string ("errParamIsTooLarge")))
  {
    {
      return (int)1215;
    }
  }
  {}
  if ((_8462 == std::string ("errParamIsTooSmall")))
  {
    {
      return (int)1216;
    }
  }
  {}
  if ((_8462 == std::string ("errParamValueStr")))
  {
    {
      return (int)1217;
    }
  }
  {}
  if ((_8462 == std::string ("errParamType")))
  {
    {
      return (int)1218;
    }
  }
  {}
  if ((_8462 == std::string ("errInfDouIndex")))
  {
    {
      return (int)1219;
    }
  }
  {}
  if ((_8462 == std::string ("errInfIntIndex")))
  {
    {
      return (int)1220;
    }
  }
  {}
  if ((_8462 == std::string ("errIndexArrIsTooSmall")))
  {
    {
      return (int)1221;
    }
  }
  {}
  if ((_8462 == std::string ("errIndexArrIsTooLarge")))
  {
    {
      return (int)1222;
    }
  }
  {}
  if ((_8462 == std::string ("errInfLintIndex")))
  {
    {
      return (int)1225;
    }
  }
  {}
  if ((_8462 == std::string ("errArgIsTooSmall")))
  {
    {
      return (int)1226;
    }
  }
  {}
  if ((_8462 == std::string ("errArgIsTooLarge")))
  {
    {
      return (int)1227;
    }
  }
  {}
  if ((_8462 == std::string ("errInvalidWhichsol")))
  {
    {
      return (int)1228;
    }
  }
  {}
  if ((_8462 == std::string ("errInfDouName")))
  {
    {
      return (int)1230;
    }
  }
  {}
  if ((_8462 == std::string ("errInfIntName")))
  {
    {
      return (int)1231;
    }
  }
  {}
  if ((_8462 == std::string ("errInfType")))
  {
    {
      return (int)1232;
    }
  }
  {}
  if ((_8462 == std::string ("errInfLintName")))
  {
    {
      return (int)1234;
    }
  }
  {}
  if ((_8462 == std::string ("errIndex")))
  {
    {
      return (int)1235;
    }
  }
  {}
  if ((_8462 == std::string ("errWhichsol")))
  {
    {
      return (int)1236;
    }
  }
  {}
  if ((_8462 == std::string ("errSolitem")))
  {
    {
      return (int)1237;
    }
  }
  {}
  if ((_8462 == std::string ("errWhichitemNotAllowed")))
  {
    {
      return (int)1238;
    }
  }
  {}
  if ((_8462 == std::string ("errMaxnumcon")))
  {
    {
      return (int)1240;
    }
  }
  {}
  if ((_8462 == std::string ("errMaxnumvar")))
  {
    {
      return (int)1241;
    }
  }
  {}
  if ((_8462 == std::string ("errMaxnumbarvar")))
  {
    {
      return (int)1242;
    }
  }
  {}
  if ((_8462 == std::string ("errMaxnumqnz")))
  {
    {
      return (int)1243;
    }
  }
  {}
  if ((_8462 == std::string ("errTooSmallMaxNumNz")))
  {
    {
      return (int)1245;
    }
  }
  {}
  if ((_8462 == std::string ("errInvalidIdx")))
  {
    {
      return (int)1246;
    }
  }
  {}
  if ((_8462 == std::string ("errInvalidMaxNum")))
  {
    {
      return (int)1247;
    }
  }
  {}
  if ((_8462 == std::string ("errNumconlim")))
  {
    {
      return (int)1250;
    }
  }
  {}
  if ((_8462 == std::string ("errNumvarlim")))
  {
    {
      return (int)1251;
    }
  }
  {}
  if ((_8462 == std::string ("errTooSmallMaxnumanz")))
  {
    {
      return (int)1252;
    }
  }
  {}
  if ((_8462 == std::string ("errInvAptre")))
  {
    {
      return (int)1253;
    }
  }
  {}
  if ((_8462 == std::string ("errMulAElement")))
  {
    {
      return (int)1254;
    }
  }
  {}
  if ((_8462 == std::string ("errInvBk")))
  {
    {
      return (int)1255;
    }
  }
  {}
  if ((_8462 == std::string ("errInvBkc")))
  {
    {
      return (int)1256;
    }
  }
  {}
  if ((_8462 == std::string ("errInvBkx")))
  {
    {
      return (int)1257;
    }
  }
  {}
  if ((_8462 == std::string ("errInvVarType")))
  {
    {
      return (int)1258;
    }
  }
  {}
  if ((_8462 == std::string ("errSolverProbtype")))
  {
    {
      return (int)1259;
    }
  }
  {}
  if ((_8462 == std::string ("errObjectiveRange")))
  {
    {
      return (int)1260;
    }
  }
  {}
  if ((_8462 == std::string ("errUndefSolution")))
  {
    {
      return (int)1265;
    }
  }
  {}
  if ((_8462 == std::string ("errBasis")))
  {
    {
      return (int)1266;
    }
  }
  {}
  if ((_8462 == std::string ("errInvSkc")))
  {
    {
      return (int)1267;
    }
  }
  {}
  if ((_8462 == std::string ("errInvSkx")))
  {
    {
      return (int)1268;
    }
  }
  {}
  if ((_8462 == std::string ("errInvSkn")))
  {
    {
      return (int)1274;
    }
  }
  {}
  if ((_8462 == std::string ("errInvSkStr")))
  {
    {
      return (int)1269;
    }
  }
  {}
  if ((_8462 == std::string ("errInvSk")))
  {
    {
      return (int)1270;
    }
  }
  {}
  if ((_8462 == std::string ("errInvConeTypeStr")))
  {
    {
      return (int)1271;
    }
  }
  {}
  if ((_8462 == std::string ("errInvConeType")))
  {
    {
      return (int)1272;
    }
  }
  {}
  if ((_8462 == std::string ("errInvalidSurplus")))
  {
    {
      return (int)1275;
    }
  }
  {}
  if ((_8462 == std::string ("errInvNameItem")))
  {
    {
      return (int)1280;
    }
  }
  {}
  if ((_8462 == std::string ("errProItem")))
  {
    {
      return (int)1281;
    }
  }
  {}
  if ((_8462 == std::string ("errInvalidFormatType")))
  {
    {
      return (int)1283;
    }
  }
  {}
  if ((_8462 == std::string ("errFirsti")))
  {
    {
      return (int)1285;
    }
  }
  {}
  if ((_8462 == std::string ("errLasti")))
  {
    {
      return (int)1286;
    }
  }
  {}
  if ((_8462 == std::string ("errFirstj")))
  {
    {
      return (int)1287;
    }
  }
  {}
  if ((_8462 == std::string ("errLastj")))
  {
    {
      return (int)1288;
    }
  }
  {}
  if ((_8462 == std::string ("errMaxLenIsTooSmall")))
  {
    {
      return (int)1289;
    }
  }
  {}
  if ((_8462 == std::string ("errNonlinearEquality")))
  {
    {
      return (int)1290;
    }
  }
  {}
  if ((_8462 == std::string ("errNonconvex")))
  {
    {
      return (int)1291;
    }
  }
  {}
  if ((_8462 == std::string ("errNonlinearRanged")))
  {
    {
      return (int)1292;
    }
  }
  {}
  if ((_8462 == std::string ("errConQNotPsd")))
  {
    {
      return (int)1293;
    }
  }
  {}
  if ((_8462 == std::string ("errConQNotNsd")))
  {
    {
      return (int)1294;
    }
  }
  {}
  if ((_8462 == std::string ("errObjQNotPsd")))
  {
    {
      return (int)1295;
    }
  }
  {}
  if ((_8462 == std::string ("errObjQNotNsd")))
  {
    {
      return (int)1296;
    }
  }
  {}
  if ((_8462 == std::string ("errArgumentPermArray")))
  {
    {
      return (int)1299;
    }
  }
  {}
  if ((_8462 == std::string ("errConeIndex")))
  {
    {
      return (int)1300;
    }
  }
  {}
  if ((_8462 == std::string ("errConeSize")))
  {
    {
      return (int)1301;
    }
  }
  {}
  if ((_8462 == std::string ("errConeOverlap")))
  {
    {
      return (int)1302;
    }
  }
  {}
  if ((_8462 == std::string ("errConeRepVar")))
  {
    {
      return (int)1303;
    }
  }
  {}
  if ((_8462 == std::string ("errMaxnumcone")))
  {
    {
      return (int)1304;
    }
  }
  {}
  if ((_8462 == std::string ("errConeType")))
  {
    {
      return (int)1305;
    }
  }
  {}
  if ((_8462 == std::string ("errConeTypeStr")))
  {
    {
      return (int)1306;
    }
  }
  {}
  if ((_8462 == std::string ("errConeOverlapAppend")))
  {
    {
      return (int)1307;
    }
  }
  {}
  if ((_8462 == std::string ("errRemoveConeVariable")))
  {
    {
      return (int)1310;
    }
  }
  {}
  if ((_8462 == std::string ("errAppendingTooBigCone")))
  {
    {
      return (int)1311;
    }
  }
  {}
  if ((_8462 == std::string ("errConeParameter")))
  {
    {
      return (int)1320;
    }
  }
  {}
  if ((_8462 == std::string ("errSolFileInvalidNumber")))
  {
    {
      return (int)1350;
    }
  }
  {}
  if ((_8462 == std::string ("errHugeC")))
  {
    {
      return (int)1375;
    }
  }
  {}
  if ((_8462 == std::string ("errHugeAij")))
  {
    {
      return (int)1380;
    }
  }
  {}
  if ((_8462 == std::string ("errDuplicateAij")))
  {
    {
      return (int)1385;
    }
  }
  {}
  if ((_8462 == std::string ("errLowerBoundIsANan")))
  {
    {
      return (int)1390;
    }
  }
  {}
  if ((_8462 == std::string ("errUpperBoundIsANan")))
  {
    {
      return (int)1391;
    }
  }
  {}
  if ((_8462 == std::string ("errInfiniteBound")))
  {
    {
      return (int)1400;
    }
  }
  {}
  if ((_8462 == std::string ("errInvQobjSubi")))
  {
    {
      return (int)1401;
    }
  }
  {}
  if ((_8462 == std::string ("errInvQobjSubj")))
  {
    {
      return (int)1402;
    }
  }
  {}
  if ((_8462 == std::string ("errInvQobjVal")))
  {
    {
      return (int)1403;
    }
  }
  {}
  if ((_8462 == std::string ("errInvQconSubk")))
  {
    {
      return (int)1404;
    }
  }
  {}
  if ((_8462 == std::string ("errInvQconSubi")))
  {
    {
      return (int)1405;
    }
  }
  {}
  if ((_8462 == std::string ("errInvQconSubj")))
  {
    {
      return (int)1406;
    }
  }
  {}
  if ((_8462 == std::string ("errInvQconVal")))
  {
    {
      return (int)1407;
    }
  }
  {}
  if ((_8462 == std::string ("errQconSubiTooSmall")))
  {
    {
      return (int)1408;
    }
  }
  {}
  if ((_8462 == std::string ("errQconSubiTooLarge")))
  {
    {
      return (int)1409;
    }
  }
  {}
  if ((_8462 == std::string ("errQobjUpperTriangle")))
  {
    {
      return (int)1415;
    }
  }
  {}
  if ((_8462 == std::string ("errQconUpperTriangle")))
  {
    {
      return (int)1417;
    }
  }
  {}
  if ((_8462 == std::string ("errFixedBoundValues")))
  {
    {
      return (int)1420;
    }
  }
  {}
  if ((_8462 == std::string ("errTooSmallATruncationValue")))
  {
    {
      return (int)1421;
    }
  }
  {}
  if ((_8462 == std::string ("errInvalidObjectiveSense")))
  {
    {
      return (int)1445;
    }
  }
  {}
  if ((_8462 == std::string ("errUndefinedObjectiveSense")))
  {
    {
      return (int)1446;
    }
  }
  {}
  if ((_8462 == std::string ("errYIsUndefined")))
  {
    {
      return (int)1449;
    }
  }
  {}
  if ((_8462 == std::string ("errNanInDoubleData")))
  {
    {
      return (int)1450;
    }
  }
  {}
  if ((_8462 == std::string ("errNanInBlc")))
  {
    {
      return (int)1461;
    }
  }
  {}
  if ((_8462 == std::string ("errNanInBuc")))
  {
    {
      return (int)1462;
    }
  }
  {}
  if ((_8462 == std::string ("errNanInC")))
  {
    {
      return (int)1470;
    }
  }
  {}
  if ((_8462 == std::string ("errNanInBlx")))
  {
    {
      return (int)1471;
    }
  }
  {}
  if ((_8462 == std::string ("errNanInBux")))
  {
    {
      return (int)1472;
    }
  }
  {}
  if ((_8462 == std::string ("errInvalidAij")))
  {
    {
      return (int)1473;
    }
  }
  {}
  if ((_8462 == std::string ("errSymMatInvalid")))
  {
    {
      return (int)1480;
    }
  }
  {}
  if ((_8462 == std::string ("errSymMatHuge")))
  {
    {
      return (int)1482;
    }
  }
  {}
  if ((_8462 == std::string ("errInvProblem")))
  {
    {
      return (int)1500;
    }
  }
  {}
  if ((_8462 == std::string ("errMixedConicAndNl")))
  {
    {
      return (int)1501;
    }
  }
  {}
  if ((_8462 == std::string ("errGlobalInvConicProblem")))
  {
    {
      return (int)1503;
    }
  }
  {}
  if ((_8462 == std::string ("errInvOptimizer")))
  {
    {
      return (int)1550;
    }
  }
  {}
  if ((_8462 == std::string ("errMioNoOptimizer")))
  {
    {
      return (int)1551;
    }
  }
  {}
  if ((_8462 == std::string ("errNoOptimizerVarType")))
  {
    {
      return (int)1552;
    }
  }
  {}
  if ((_8462 == std::string ("errFinalSolution")))
  {
    {
      return (int)1560;
    }
  }
  {}
  if ((_8462 == std::string ("errFirst")))
  {
    {
      return (int)1570;
    }
  }
  {}
  if ((_8462 == std::string ("errLast")))
  {
    {
      return (int)1571;
    }
  }
  {}
  if ((_8462 == std::string ("errSliceSize")))
  {
    {
      return (int)1572;
    }
  }
  {}
  if ((_8462 == std::string ("errNegativeSurplus")))
  {
    {
      return (int)1573;
    }
  }
  {}
  if ((_8462 == std::string ("errNegativeAppend")))
  {
    {
      return (int)1578;
    }
  }
  {}
  if ((_8462 == std::string ("errPostsolve")))
  {
    {
      return (int)1580;
    }
  }
  {}
  if ((_8462 == std::string ("errOverflow")))
  {
    {
      return (int)1590;
    }
  }
  {}
  if ((_8462 == std::string ("errNoBasisSol")))
  {
    {
      return (int)1600;
    }
  }
  {}
  if ((_8462 == std::string ("errBasisFactor")))
  {
    {
      return (int)1610;
    }
  }
  {}
  if ((_8462 == std::string ("errBasisSingular")))
  {
    {
      return (int)1615;
    }
  }
  {}
  if ((_8462 == std::string ("errFactor")))
  {
    {
      return (int)1650;
    }
  }
  {}
  if ((_8462 == std::string ("errFeasrepairCannotRelax")))
  {
    {
      return (int)1700;
    }
  }
  {}
  if ((_8462 == std::string ("errFeasrepairSolvingRelaxed")))
  {
    {
      return (int)1701;
    }
  }
  {}
  if ((_8462 == std::string ("errFeasrepairInconsistentBound")))
  {
    {
      return (int)1702;
    }
  }
  {}
  if ((_8462 == std::string ("errRepairInvalidProblem")))
  {
    {
      return (int)1710;
    }
  }
  {}
  if ((_8462 == std::string ("errRepairOptimizationFailed")))
  {
    {
      return (int)1711;
    }
  }
  {}
  if ((_8462 == std::string ("errNameMaxLen")))
  {
    {
      return (int)1750;
    }
  }
  {}
  if ((_8462 == std::string ("errNameIsNull")))
  {
    {
      return (int)1760;
    }
  }
  {}
  if ((_8462 == std::string ("errInvalidCompression")))
  {
    {
      return (int)1800;
    }
  }
  {}
  if ((_8462 == std::string ("errInvalidIomode")))
  {
    {
      return (int)1801;
    }
  }
  {}
  if ((_8462 == std::string ("errNoPrimalInfeasCer")))
  {
    {
      return (int)2000;
    }
  }
  {}
  if ((_8462 == std::string ("errNoDualInfeasCer")))
  {
    {
      return (int)2001;
    }
  }
  {}
  if ((_8462 == std::string ("errNoSolutionInCallback")))
  {
    {
      return (int)2500;
    }
  }
  {}
  if ((_8462 == std::string ("errInvMarki")))
  {
    {
      return (int)2501;
    }
  }
  {}
  if ((_8462 == std::string ("errInvMarkj")))
  {
    {
      return (int)2502;
    }
  }
  {}
  if ((_8462 == std::string ("errInvNumi")))
  {
    {
      return (int)2503;
    }
  }
  {}
  if ((_8462 == std::string ("errInvNumj")))
  {
    {
      return (int)2504;
    }
  }
  {}
  if ((_8462 == std::string ("errTaskIncompatible")))
  {
    {
      return (int)2560;
    }
  }
  {}
  if ((_8462 == std::string ("errTaskInvalid")))
  {
    {
      return (int)2561;
    }
  }
  {}
  if ((_8462 == std::string ("errTaskWrite")))
  {
    {
      return (int)2562;
    }
  }
  {}
  if ((_8462 == std::string ("errLuMaxNumTries")))
  {
    {
      return (int)2800;
    }
  }
  {}
  if ((_8462 == std::string ("errInvalidUtf8")))
  {
    {
      return (int)2900;
    }
  }
  {}
  if ((_8462 == std::string ("errInvalidWchar")))
  {
    {
      return (int)2901;
    }
  }
  {}
  if ((_8462 == std::string ("errNoDualForItgSol")))
  {
    {
      return (int)2950;
    }
  }
  {}
  if ((_8462 == std::string ("errNoSnxForBasSol")))
  {
    {
      return (int)2953;
    }
  }
  {}
  if ((_8462 == std::string ("errInternal")))
  {
    {
      return (int)3000;
    }
  }
  {}
  if ((_8462 == std::string ("errApiArrayTooSmall")))
  {
    {
      return (int)3001;
    }
  }
  {}
  if ((_8462 == std::string ("errApiCbConnect")))
  {
    {
      return (int)3002;
    }
  }
  {}
  if ((_8462 == std::string ("errApiFatalError")))
  {
    {
      return (int)3005;
    }
  }
  {}
  if ((_8462 == std::string ("errApiInternal")))
  {
    {
      return (int)3999;
    }
  }
  {}
  if ((_8462 == std::string ("errSenFormat")))
  {
    {
      return (int)3050;
    }
  }
  {}
  if ((_8462 == std::string ("errSenUndefName")))
  {
    {
      return (int)3051;
    }
  }
  {}
  if ((_8462 == std::string ("errSenIndexRange")))
  {
    {
      return (int)3052;
    }
  }
  {}
  if ((_8462 == std::string ("errSenBoundInvalidUp")))
  {
    {
      return (int)3053;
    }
  }
  {}
  if ((_8462 == std::string ("errSenBoundInvalidLo")))
  {
    {
      return (int)3054;
    }
  }
  {}
  if ((_8462 == std::string ("errSenIndexInvalid")))
  {
    {
      return (int)3055;
    }
  }
  {}
  if ((_8462 == std::string ("errSenInvalidRegexp")))
  {
    {
      return (int)3056;
    }
  }
  {}
  if ((_8462 == std::string ("errSenSolutionStatus")))
  {
    {
      return (int)3057;
    }
  }
  {}
  if ((_8462 == std::string ("errSenNumerical")))
  {
    {
      return (int)3058;
    }
  }
  {}
  if ((_8462 == std::string ("errSenUnhandledProblemType")))
  {
    {
      return (int)3080;
    }
  }
  {}
  if ((_8462 == std::string ("errUnbStepSize")))
  {
    {
      return (int)3100;
    }
  }
  {}
  if ((_8462 == std::string ("errIdenticalTasks")))
  {
    {
      return (int)3101;
    }
  }
  {}
  if ((_8462 == std::string ("errAdInvalidCodelist")))
  {
    {
      return (int)3102;
    }
  }
  {}
  if ((_8462 == std::string ("errInternalTestFailed")))
  {
    {
      return (int)3500;
    }
  }
  {}
  if ((_8462 == std::string ("errXmlInvalidProblemType")))
  {
    {
      return (int)3600;
    }
  }
  {}
  if ((_8462 == std::string ("errInvalidAmplStub")))
  {
    {
      return (int)3700;
    }
  }
  {}
  if ((_8462 == std::string ("errInt64ToInt32Cast")))
  {
    {
      return (int)3800;
    }
  }
  {}
  if ((_8462 == std::string ("errSizeLicenseNumcores")))
  {
    {
      return (int)3900;
    }
  }
  {}
  if ((_8462 == std::string ("errInfeasUndefined")))
  {
    {
      return (int)3910;
    }
  }
  {}
  if ((_8462 == std::string ("errNoBarxForSolution")))
  {
    {
      return (int)3915;
    }
  }
  {}
  if ((_8462 == std::string ("errNoBarsForSolution")))
  {
    {
      return (int)3916;
    }
  }
  {}
  if ((_8462 == std::string ("errBarVarDim")))
  {
    {
      return (int)3920;
    }
  }
  {}
  if ((_8462 == std::string ("errSymMatInvalidRowIndex")))
  {
    {
      return (int)3940;
    }
  }
  {}
  if ((_8462 == std::string ("errSymMatInvalidColIndex")))
  {
    {
      return (int)3941;
    }
  }
  {}
  if ((_8462 == std::string ("errSymMatNotLowerTringular")))
  {
    {
      return (int)3942;
    }
  }
  {}
  if ((_8462 == std::string ("errSymMatInvalidValue")))
  {
    {
      return (int)3943;
    }
  }
  {}
  if ((_8462 == std::string ("errSymMatDuplicate")))
  {
    {
      return (int)3944;
    }
  }
  {}
  if ((_8462 == std::string ("errInvalidSymMatDim")))
  {
    {
      return (int)3950;
    }
  }
  {}
  if ((_8462 == std::string ("errInvalidFileFormatForSymMat")))
  {
    {
      return (int)4000;
    }
  }
  {}
  if ((_8462 == std::string ("errInvalidFileFormatForCfix")))
  {
    {
      return (int)4001;
    }
  }
  {}
  if ((_8462 == std::string ("errInvalidFileFormatForRangedConstraints")))
  {
    {
      return (int)4002;
    }
  }
  {}
  if ((_8462 == std::string ("errInvalidFileFormatForFreeConstraints")))
  {
    {
      return (int)4003;
    }
  }
  {}
  if ((_8462 == std::string ("errInvalidFileFormatForCones")))
  {
    {
      return (int)4005;
    }
  }
  {}
  if ((_8462 == std::string ("errInvalidFileFormatForNonlinear")))
  {
    {
      return (int)4010;
    }
  }
  {}
  if ((_8462 == std::string ("errDuplicateConstraintNames")))
  {
    {
      return (int)4500;
    }
  }
  {}
  if ((_8462 == std::string ("errDuplicateVariableNames")))
  {
    {
      return (int)4501;
    }
  }
  {}
  if ((_8462 == std::string ("errDuplicateBarvariableNames")))
  {
    {
      return (int)4502;
    }
  }
  {}
  if ((_8462 == std::string ("errDuplicateConeNames")))
  {
    {
      return (int)4503;
    }
  }
  {}
  if ((_8462 == std::string ("errNonUniqueArray")))
  {
    {
      return (int)5000;
    }
  }
  {}
  if ((_8462 == std::string ("errArgumentIsTooLarge")))
  {
    {
      return (int)5005;
    }
  }
  {}
  if ((_8462 == std::string ("errMioInternal")))
  {
    {
      return (int)5010;
    }
  }
  {}
  if ((_8462 == std::string ("errInvalidProblemType")))
  {
    {
      return (int)6000;
    }
  }
  {}
  if ((_8462 == std::string ("errUnhandledSolutionStatus")))
  {
    {
      return (int)6010;
    }
  }
  {}
  if ((_8462 == std::string ("errUpperTriangle")))
  {
    {
      return (int)6020;
    }
  }
  {}
  if ((_8462 == std::string ("errLauSingularMatrix")))
  {
    {
      return (int)7000;
    }
  }
  {}
  if ((_8462 == std::string ("errLauNotPositiveDefinite")))
  {
    {
      return (int)7001;
    }
  }
  {}
  if ((_8462 == std::string ("errLauInvalidLowerTriangularMatrix")))
  {
    {
      return (int)7002;
    }
  }
  {}
  if ((_8462 == std::string ("errLauUnknown")))
  {
    {
      return (int)7005;
    }
  }
  {}
  if ((_8462 == std::string ("errLauArgM")))
  {
    {
      return (int)7010;
    }
  }
  {}
  if ((_8462 == std::string ("errLauArgN")))
  {
    {
      return (int)7011;
    }
  }
  {}
  if ((_8462 == std::string ("errLauArgK")))
  {
    {
      return (int)7012;
    }
  }
  {}
  if ((_8462 == std::string ("errLauArgTransa")))
  {
    {
      return (int)7015;
    }
  }
  {}
  if ((_8462 == std::string ("errLauArgTransb")))
  {
    {
      return (int)7016;
    }
  }
  {}
  if ((_8462 == std::string ("errLauArgUplo")))
  {
    {
      return (int)7017;
    }
  }
  {}
  if ((_8462 == std::string ("errLauArgTrans")))
  {
    {
      return (int)7018;
    }
  }
  {}
  if ((_8462 == std::string ("errLauInvalidSparseSymmetricMatrix")))
  {
    {
      return (int)7019;
    }
  }
  {}
  if ((_8462 == std::string ("errCbfParse")))
  {
    {
      return (int)7100;
    }
  }
  {}
  if ((_8462 == std::string ("errCbfObjSense")))
  {
    {
      return (int)7101;
    }
  }
  {}
  if ((_8462 == std::string ("errCbfNoVariables")))
  {
    {
      return (int)7102;
    }
  }
  {}
  if ((_8462 == std::string ("errCbfTooManyConstraints")))
  {
    {
      return (int)7103;
    }
  }
  {}
  if ((_8462 == std::string ("errCbfTooManyVariables")))
  {
    {
      return (int)7104;
    }
  }
  {}
  if ((_8462 == std::string ("errCbfNoVersionSpecified")))
  {
    {
      return (int)7105;
    }
  }
  {}
  if ((_8462 == std::string ("errCbfSyntax")))
  {
    {
      return (int)7106;
    }
  }
  {}
  if ((_8462 == std::string ("errCbfDuplicateObj")))
  {
    {
      return (int)7107;
    }
  }
  {}
  if ((_8462 == std::string ("errCbfDuplicateCon")))
  {
    {
      return (int)7108;
    }
  }
  {}
  if ((_8462 == std::string ("errCbfDuplicateVar")))
  {
    {
      return (int)7109;
    }
  }
  {}
  if ((_8462 == std::string ("errCbfDuplicateInt")))
  {
    {
      return (int)7110;
    }
  }
  {}
  if ((_8462 == std::string ("errCbfInvalidVarType")))
  {
    {
      return (int)7111;
    }
  }
  {}
  if ((_8462 == std::string ("errCbfInvalidConType")))
  {
    {
      return (int)7112;
    }
  }
  {}
  if ((_8462 == std::string ("errCbfInvalidDomainDimension")))
  {
    {
      return (int)7113;
    }
  }
  {}
  if ((_8462 == std::string ("errCbfDuplicateObjacoord")))
  {
    {
      return (int)7114;
    }
  }
  {}
  if ((_8462 == std::string ("errCbfDuplicateBcoord")))
  {
    {
      return (int)7115;
    }
  }
  {}
  if ((_8462 == std::string ("errCbfDuplicateAcoord")))
  {
    {
      return (int)7116;
    }
  }
  {}
  if ((_8462 == std::string ("errCbfTooFewVariables")))
  {
    {
      return (int)7117;
    }
  }
  {}
  if ((_8462 == std::string ("errCbfTooFewConstraints")))
  {
    {
      return (int)7118;
    }
  }
  {}
  if ((_8462 == std::string ("errCbfTooFewInts")))
  {
    {
      return (int)7119;
    }
  }
  {}
  if ((_8462 == std::string ("errCbfTooManyInts")))
  {
    {
      return (int)7120;
    }
  }
  {}
  if ((_8462 == std::string ("errCbfInvalidIntIndex")))
  {
    {
      return (int)7121;
    }
  }
  {}
  if ((_8462 == std::string ("errCbfUnsupported")))
  {
    {
      return (int)7122;
    }
  }
  {}
  if ((_8462 == std::string ("errCbfDuplicatePsdvar")))
  {
    {
      return (int)7123;
    }
  }
  {}
  if ((_8462 == std::string ("errCbfInvalidPsdvarDimension")))
  {
    {
      return (int)7124;
    }
  }
  {}
  if ((_8462 == std::string ("errCbfTooFewPsdvar")))
  {
    {
      return (int)7125;
    }
  }
  {}
  if ((_8462 == std::string ("errCbfInvalidExpDimension")))
  {
    {
      return (int)7126;
    }
  }
  {}
  if ((_8462 == std::string ("errCbfDuplicatePowCones")))
  {
    {
      return (int)7130;
    }
  }
  {}
  if ((_8462 == std::string ("errCbfDuplicatePowStarCones")))
  {
    {
      return (int)7131;
    }
  }
  {}
  if ((_8462 == std::string ("errCbfInvalidPower")))
  {
    {
      return (int)7132;
    }
  }
  {}
  if ((_8462 == std::string ("errCbfPowerConeIsTooLong")))
  {
    {
      return (int)7133;
    }
  }
  {}
  if ((_8462 == std::string ("errCbfInvalidPowerConeIndex")))
  {
    {
      return (int)7134;
    }
  }
  {}
  if ((_8462 == std::string ("errCbfInvalidPowerStarConeIndex")))
  {
    {
      return (int)7135;
    }
  }
  {}
  if ((_8462 == std::string ("errCbfUnhandledPowerConeType")))
  {
    {
      return (int)7136;
    }
  }
  {}
  if ((_8462 == std::string ("errCbfUnhandledPowerStarConeType")))
  {
    {
      return (int)7137;
    }
  }
  {}
  if ((_8462 == std::string ("errCbfPowerConeMismatch")))
  {
    {
      return (int)7138;
    }
  }
  {}
  if ((_8462 == std::string ("errCbfPowerStarConeMismatch")))
  {
    {
      return (int)7139;
    }
  }
  {}
  if ((_8462 == std::string ("errCbfInvalidNumberOfCones")))
  {
    {
      return (int)7740;
    }
  }
  {}
  if ((_8462 == std::string ("errCbfInvalidDimensionOfCones")))
  {
    {
      return (int)7741;
    }
  }
  {}
  if ((_8462 == std::string ("errMioInvalidRootOptimizer")))
  {
    {
      return (int)7700;
    }
  }
  {}
  if ((_8462 == std::string ("errMioInvalidNodeOptimizer")))
  {
    {
      return (int)7701;
    }
  }
  {}
  if ((_8462 == std::string ("errToconicConstrQNotPsd")))
  {
    {
      return (int)7800;
    }
  }
  {}
  if ((_8462 == std::string ("errToconicConstraintFx")))
  {
    {
      return (int)7801;
    }
  }
  {}
  if ((_8462 == std::string ("errToconicConstraintRa")))
  {
    {
      return (int)7802;
    }
  }
  {}
  if ((_8462 == std::string ("errToconicConstrNotConic")))
  {
    {
      return (int)7803;
    }
  }
  {}
  if ((_8462 == std::string ("errToconicObjectiveNotPsd")))
  {
    {
      return (int)7804;
    }
  }
  {}
  if ((_8462 == std::string ("errServerConnect")))
  {
    {
      return (int)8000;
    }
  }
  {}
  if ((_8462 == std::string ("errServerProtocol")))
  {
    {
      return (int)8001;
    }
  }
  {}
  if ((_8462 == std::string ("errServerStatus")))
  {
    {
      return (int)8002;
    }
  }
  {}
  if ((_8462 == std::string ("errServerToken")))
  {
    {
      return (int)8003;
    }
  }
  {}
  if ((_8462 == std::string ("errServerProblemSize")))
  {
    {
      return (int)8008;
    }
  }
  {}
  if ((_8462 == std::string ("trmMaxIterations")))
  {
    {
      return (int)10000;
    }
  }
  {}
  if ((_8462 == std::string ("trmMaxTime")))
  {
    {
      return (int)10001;
    }
  }
  {}
  if ((_8462 == std::string ("trmObjectiveRange")))
  {
    {
      return (int)10002;
    }
  }
  {}
  if ((_8462 == std::string ("trmMioNumRelaxs")))
  {
    {
      return (int)10008;
    }
  }
  {}
  if ((_8462 == std::string ("trmMioNumBranches")))
  {
    {
      return (int)10009;
    }
  }
  {}
  if ((_8462 == std::string ("trmNumMaxNumIntSolutions")))
  {
    {
      return (int)10015;
    }
  }
  {}
  if ((_8462 == std::string ("trmStall")))
  {
    {
      return (int)10006;
    }
  }
  {}
  if ((_8462 == std::string ("trmUserCallback")))
  {
    {
      return (int)10007;
    }
  }
  {}
  if ((_8462 == std::string ("trmMaxNumSetbacks")))
  {
    {
      return (int)10020;
    }
  }
  {}
  if ((_8462 == std::string ("trmNumericalProblem")))
  {
    {
      return (int)10025;
    }
  }
  {}
  if ((_8462 == std::string ("trmInternal")))
  {
    {
      return (int)10030;
    }
  }
  {}
  if ((_8462 == std::string ("trmInternalStop")))
  {
    {
      return (int)10031;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_liinfitem_value(const std::string & _8463){
  if ((_8463 == std::string ("mioAnz")))
  {
    {
      return (int)7;
    }
  }
  {}
  if ((_8463 == std::string ("mioPresolvedAnz")))
  {
    {
      return (int)9;
    }
  }
  {}
  if ((_8463 == std::string ("mioSimplexIter")))
  {
    {
      return (int)10;
    }
  }
  {}
  if ((_8463 == std::string ("mioIntpntIter")))
  {
    {
      return (int)8;
    }
  }
  {}
  if ((_8463 == std::string ("biPrimalIter")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_8463 == std::string ("biDualIter")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_8463 == std::string ("biCleanPrimalIter")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8463 == std::string ("biCleanDualIter")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8463 == std::string ("biCleanPrimalDegIter")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8463 == std::string ("biCleanDualDegIter")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8463 == std::string ("intpntFactorNumNz")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_8463 == std::string ("rdNumanz")))
  {
    {
      return (int)11;
    }
  }
  {}
  if ((_8463 == std::string ("rdNumqnz")))
  {
    {
      return (int)12;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_simreform_value(const std::string & _8464){
  if ((_8464 == std::string ("on")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8464 == std::string ("off")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8464 == std::string ("free")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8464 == std::string ("aggressive")))
  {
    {
      return (int)3;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_transpose_value(const std::string & _8465){
  if ((_8465 == std::string ("no")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8465 == std::string ("yes")))
  {
    {
      return (int)1;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_dataformat_value(const std::string & _8466){
  if ((_8466 == std::string ("extension")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8466 == std::string ("mps")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8466 == std::string ("lp")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8466 == std::string ("op")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8466 == std::string ("freeMps")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_8466 == std::string ("task")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_8466 == std::string ("ptf")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_8466 == std::string ("cb")))
  {
    {
      return (int)7;
    }
  }
  {}
  if ((_8466 == std::string ("jsonTask")))
  {
    {
      return (int)8;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_mpsformat_value(const std::string & _8467){
  if ((_8467 == std::string ("strict")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8467 == std::string ("relaxed")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8467 == std::string ("free")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8467 == std::string ("cplex")))
  {
    {
      return (int)3;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_onoffkey_value(const std::string & _8468){
  if ((_8468 == std::string ("on")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8468 == std::string ("off")))
  {
    {
      return (int)0;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_basindtype_value(const std::string & _8469){
  if ((_8469 == std::string ("never")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8469 == std::string ("always")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8469 == std::string ("noError")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8469 == std::string ("ifFeasible")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8469 == std::string ("reservered")))
  {
    {
      return (int)4;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_solitem_value(const std::string & _8470){
  if ((_8470 == std::string ("xc")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8470 == std::string ("xx")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8470 == std::string ("y")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8470 == std::string ("slc")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8470 == std::string ("suc")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_8470 == std::string ("slx")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_8470 == std::string ("sux")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_8470 == std::string ("snx")))
  {
    {
      return (int)7;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_miocontsoltype_value(const std::string & _8471){
  if ((_8471 == std::string ("none")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8471 == std::string ("root")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8471 == std::string ("itg")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8471 == std::string ("itgRel")))
  {
    {
      return (int)3;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_simseltype_value(const std::string & _8472){
  if ((_8472 == std::string ("free")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8472 == std::string ("full")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8472 == std::string ("ase")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8472 == std::string ("devex")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8472 == std::string ("se")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_8472 == std::string ("partial")))
  {
    {
      return (int)5;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_simdupvec_value(const std::string & _8473){
  if ((_8473 == std::string ("on")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8473 == std::string ("off")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8473 == std::string ("free")))
  {
    {
      return (int)2;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_parametertype_value(const std::string & _8474){
  if ((_8474 == std::string ("invalidType")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8474 == std::string ("douType")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8474 == std::string ("intType")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8474 == std::string ("strType")))
  {
    {
      return (int)3;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_prosta_value(const std::string & _8475){
  if ((_8475 == std::string ("unknown")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8475 == std::string ("primAndDualFeas")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8475 == std::string ("primFeas")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8475 == std::string ("dualFeas")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8475 == std::string ("primInfeas")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_8475 == std::string ("dualInfeas")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_8475 == std::string ("primAndDualInfeas")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_8475 == std::string ("illPosed")))
  {
    {
      return (int)7;
    }
  }
  {}
  if ((_8475 == std::string ("primInfeasOrUnbounded")))
  {
    {
      return (int)8;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_objsense_value(const std::string & _8476){
  if ((_8476 == std::string ("minimize")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8476 == std::string ("maximize")))
  {
    {
      return (int)1;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_presolvemode_value(const std::string & _8477){
  if ((_8477 == std::string ("off")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8477 == std::string ("on")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8477 == std::string ("free")))
  {
    {
      return (int)2;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_internal_iinf_value(const std::string & _8478){
  if ((_8478 == std::string ("versionMajor")))
  {
    {
      return (int)95;
    }
  }
  {}
  if ((_8478 == std::string ("versionMinor")))
  {
    {
      return (int)96;
    }
  }
  {}
  if ((_8478 == std::string ("versionRevision")))
  {
    {
      return (int)97;
    }
  }
  {}
  if ((_8478 == std::string ("presolveLindepWork")))
  {
    {
      return (int)60;
    }
  }
  {}
  if ((_8478 == std::string ("presolveLindepPivots")))
  {
    {
      return (int)58;
    }
  }
  {}
  if ((_8478 == std::string ("presolveLindepSkipped")))
  {
    {
      return (int)59;
    }
  }
  {}
  if ((_8478 == std::string ("presolveOutofspace")))
  {
    {
      return (int)80;
    }
  }
  {}
  if ((_8478 == std::string ("presolveBadPrecision")))
  {
    {
      return (int)32;
    }
  }
  {}
  if ((_8478 == std::string ("optObjectiveSense")))
  {
    {
      return (int)30;
    }
  }
  {}
  if ((_8478 == std::string ("optimizer")))
  {
    {
      return (int)31;
    }
  }
  {}
  if ((_8478 == std::string ("intpntFirRefIter")))
  {
    {
      return (int)9;
    }
  }
  {}
  if ((_8478 == std::string ("intpntNumRefSteps")))
  {
    {
      return (int)14;
    }
  }
  {}
  if ((_8478 == std::string ("intpntFactorDim")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8478 == std::string ("intpntFactorSchurNumSingular")))
  {
    {
      return (int)8;
    }
  }
  {}
  if ((_8478 == std::string ("intpntFactorNumDenseA")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_8478 == std::string ("intpntFactorNumDenseADup")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_8478 == std::string ("intpntFactorNumDenseW")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_8478 == std::string ("intpntNumcon")))
  {
    {
      return (int)21;
    }
  }
  {}
  if ((_8478 == std::string ("intpntNumvar")))
  {
    {
      return (int)28;
    }
  }
  {}
  if ((_8478 == std::string ("intpntNumbarvar")))
  {
    {
      return (int)15;
    }
  }
  {}
  if ((_8478 == std::string ("intpntNumblo")))
  {
    {
      return (int)18;
    }
  }
  {}
  if ((_8478 == std::string ("intpntNumbup")))
  {
    {
      return (int)20;
    }
  }
  {}
  if ((_8478 == std::string ("intpntNumbfr")))
  {
    {
      return (int)16;
    }
  }
  {}
  if ((_8478 == std::string ("intpntNumbfx")))
  {
    {
      return (int)17;
    }
  }
  {}
  if ((_8478 == std::string ("intpntNumcone")))
  {
    {
      return (int)22;
    }
  }
  {}
  if ((_8478 == std::string ("intpntNumconevar")))
  {
    {
      return (int)23;
    }
  }
  {}
  if ((_8478 == std::string ("intpntNumbndcone")))
  {
    {
      return (int)19;
    }
  }
  {}
  if ((_8478 == std::string ("intpntNumrqcones")))
  {
    {
      return (int)27;
    }
  }
  {}
  if ((_8478 == std::string ("intpntNumqcones")))
  {
    {
      return (int)26;
    }
  }
  {}
  if ((_8478 == std::string ("intpntNumpexpcones")))
  {
    {
      return (int)24;
    }
  }
  {}
  if ((_8478 == std::string ("intpntNumppowcones")))
  {
    {
      return (int)25;
    }
  }
  {}
  if ((_8478 == std::string ("intpntMinconedim")))
  {
    {
      return (int)13;
    }
  }
  {}
  if ((_8478 == std::string ("intpntMaxconedim")))
  {
    {
      return (int)12;
    }
  }
  {}
  if ((_8478 == std::string ("intpntMaxbarvardim")))
  {
    {
      return (int)11;
    }
  }
  {}
  if ((_8478 == std::string ("presolveNumcon")))
  {
    {
      return (int)69;
    }
  }
  {}
  if ((_8478 == std::string ("presolveNumcfr")))
  {
    {
      return (int)65;
    }
  }
  {}
  if ((_8478 == std::string ("presolveNumcfx")))
  {
    {
      return (int)66;
    }
  }
  {}
  if ((_8478 == std::string ("presolveNumclo")))
  {
    {
      return (int)67;
    }
  }
  {}
  if ((_8478 == std::string ("presolveNumcup")))
  {
    {
      return (int)71;
    }
  }
  {}
  if ((_8478 == std::string ("presolveNumcra")))
  {
    {
      return (int)70;
    }
  }
  {}
  if ((_8478 == std::string ("presolveNumcnl")))
  {
    {
      return (int)68;
    }
  }
  {}
  if ((_8478 == std::string ("presolveNumvar")))
  {
    {
      return (int)73;
    }
  }
  {}
  if ((_8478 == std::string ("presolveNumvfr")))
  {
    {
      return (int)74;
    }
  }
  {}
  if ((_8478 == std::string ("presolveNumvfx")))
  {
    {
      return (int)75;
    }
  }
  {}
  if ((_8478 == std::string ("presolveNumvlo")))
  {
    {
      return (int)76;
    }
  }
  {}
  if ((_8478 == std::string ("presolveNumvup")))
  {
    {
      return (int)79;
    }
  }
  {}
  if ((_8478 == std::string ("presolveNumvra")))
  {
    {
      return (int)78;
    }
  }
  {}
  if ((_8478 == std::string ("presolveNumvnl")))
  {
    {
      return (int)77;
    }
  }
  {}
  if ((_8478 == std::string ("presolveNumnza")))
  {
    {
      return (int)72;
    }
  }
  {}
  if ((_8478 == std::string ("presolveFnumcon")))
  {
    {
      return (int)40;
    }
  }
  {}
  if ((_8478 == std::string ("presolveFnumcfr")))
  {
    {
      return (int)36;
    }
  }
  {}
  if ((_8478 == std::string ("presolveFnumcfx")))
  {
    {
      return (int)37;
    }
  }
  {}
  if ((_8478 == std::string ("presolveFnumclo")))
  {
    {
      return (int)38;
    }
  }
  {}
  if ((_8478 == std::string ("presolveFnumcup")))
  {
    {
      return (int)42;
    }
  }
  {}
  if ((_8478 == std::string ("presolveFnumcra")))
  {
    {
      return (int)41;
    }
  }
  {}
  if ((_8478 == std::string ("presolveFnumcnl")))
  {
    {
      return (int)39;
    }
  }
  {}
  if ((_8478 == std::string ("presolveFnumvar")))
  {
    {
      return (int)44;
    }
  }
  {}
  if ((_8478 == std::string ("presolveFnumvfr")))
  {
    {
      return (int)45;
    }
  }
  {}
  if ((_8478 == std::string ("presolveFnumvfx")))
  {
    {
      return (int)46;
    }
  }
  {}
  if ((_8478 == std::string ("presolveFnumvlo")))
  {
    {
      return (int)47;
    }
  }
  {}
  if ((_8478 == std::string ("presolveFnumvup")))
  {
    {
      return (int)50;
    }
  }
  {}
  if ((_8478 == std::string ("presolveFnumvra")))
  {
    {
      return (int)49;
    }
  }
  {}
  if ((_8478 == std::string ("presolveFnumvnl")))
  {
    {
      return (int)48;
    }
  }
  {}
  if ((_8478 == std::string ("presolveFnumnza")))
  {
    {
      return (int)43;
    }
  }
  {}
  if ((_8478 == std::string ("presolveNumElimns")))
  {
    {
      return (int)62;
    }
  }
  {}
  if ((_8478 == std::string ("presolveEliNumTries")))
  {
    {
      return (int)35;
    }
  }
  {}
  if ((_8478 == std::string ("presolveEliNumFreedCon")))
  {
    {
      return (int)33;
    }
  }
  {}
  if ((_8478 == std::string ("presolveEliNumFreedConTotal")))
  {
    {
      return (int)34;
    }
  }
  {}
  if ((_8478 == std::string ("presolveLindepNumTries")))
  {
    {
      return (int)56;
    }
  }
  {}
  if ((_8478 == std::string ("presolveLindepNum")))
  {
    {
      return (int)55;
    }
  }
  {}
  if ((_8478 == std::string ("presolveForceConNum")))
  {
    {
      return (int)51;
    }
  }
  {}
  if ((_8478 == std::string ("presolveForceConNumVar")))
  {
    {
      return (int)52;
    }
  }
  {}
  if ((_8478 == std::string ("presolveForceVarNum")))
  {
    {
      return (int)53;
    }
  }
  {}
  if ((_8478 == std::string ("presolveForceVarNumCon")))
  {
    {
      return (int)54;
    }
  }
  {}
  if ((_8478 == std::string ("presolvePivOnConNum")))
  {
    {
      return (int)81;
    }
  }
  {}
  if ((_8478 == std::string ("presolveNumDouBlocks")))
  {
    {
      return (int)61;
    }
  }
  {}
  if ((_8478 == std::string ("presolveNumSimplifiedDouBlocks")))
  {
    {
      return (int)64;
    }
  }
  {}
  if ((_8478 == std::string ("presolveSizeSimplifiedDouBlocks")))
  {
    {
      return (int)82;
    }
  }
  {}
  if ((_8478 == std::string ("presolveNumQuadConeOrthoTrans")))
  {
    {
      return (int)63;
    }
  }
  {}
  if ((_8478 == std::string ("intpntFactorNum")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8478 == std::string ("intpntFactorNumSolve")))
  {
    {
      return (int)7;
    }
  }
  {}
  if ((_8478 == std::string ("simPrimalHotstartNumBasics")))
  {
    {
      return (int)92;
    }
  }
  {}
  if ((_8478 == std::string ("simPrimalHotstartBasisRank")))
  {
    {
      return (int)91;
    }
  }
  {}
  if ((_8478 == std::string ("simDualHotstartNumBasics")))
  {
    {
      return (int)84;
    }
  }
  {}
  if ((_8478 == std::string ("simDualHotstartBasisRank")))
  {
    {
      return (int)83;
    }
  }
  {}
  if ((_8478 == std::string ("intpntGpOrderEmployed")))
  {
    {
      return (int)10;
    }
  }
  {}
  if ((_8478 == std::string ("numLuFactorizations")))
  {
    {
      return (int)29;
    }
  }
  {}
  if ((_8478 == std::string ("simPrimalTrust")))
  {
    {
      return (int)94;
    }
  }
  {}
  if ((_8478 == std::string ("simDualTrust")))
  {
    {
      return (int)86;
    }
  }
  {}
  if ((_8478 == std::string ("simPrimalNumSetbacks")))
  {
    {
      return (int)93;
    }
  }
  {}
  if ((_8478 == std::string ("simDualNumSetbacks")))
  {
    {
      return (int)85;
    }
  }
  {}
  if ((_8478 == std::string ("simNumDupvec")))
  {
    {
      return (int)89;
    }
  }
  {}
  if ((_8478 == std::string ("simNumPrimalBoundswaps")))
  {
    {
      return (int)90;
    }
  }
  {}
  if ((_8478 == std::string ("simNumDualBoundswaps")))
  {
    {
      return (int)87;
    }
  }
  {}
  if ((_8478 == std::string ("simNumDualIntegerPivots")))
  {
    {
      return (int)88;
    }
  }
  {}
  if ((_8478 == std::string ("biPrimalInfo")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8478 == std::string ("biDualInfo")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8478 == std::string ("presolveLindepNumTruncTries")))
  {
    {
      return (int)57;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_simdegen_value(const std::string & _8479){
  if ((_8479 == std::string ("none")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8479 == std::string ("free")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8479 == std::string ("aggressive")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8479 == std::string ("moderate")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8479 == std::string ("minimum")))
  {
    {
      return (int)4;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_checkconvexitytype_value(const std::string & _8480){
  if ((_8480 == std::string ("none")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8480 == std::string ("simple")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8480 == std::string ("full")))
  {
    {
      return (int)2;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_scalingtype_value(const std::string & _8481){
  if ((_8481 == std::string ("free")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8481 == std::string ("none")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8481 == std::string ("moderate")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8481 == std::string ("aggressive")))
  {
    {
      return (int)3;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_problemitem_value(const std::string & _8482){
  if ((_8482 == std::string ("var")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8482 == std::string ("con")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8482 == std::string ("cone")))
  {
    {
      return (int)2;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_value_value(const std::string & _8483){
  if ((_8483 == std::string ("maxStrLen")))
  {
    {
      return (int)1024;
    }
  }
  {}
  if ((_8483 == std::string ("licenseBufferLength")))
  {
    {
      return (int)21;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_purify_value(const std::string & _8484){
  if ((_8484 == std::string ("none")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8484 == std::string ("primal")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8484 == std::string ("dual")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8484 == std::string ("primalDual")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8484 == std::string ("auto")))
  {
    {
      return (int)4;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_internal_dinf_value(const std::string & _8485){
  if ((_8485 == std::string ("sensitivityPrimalTime")))
  {
    {
      return (int)78;
    }
  }
  {}
  if ((_8485 == std::string ("sensitivityDualTime")))
  {
    {
      return (int)77;
    }
  }
  {}
  if ((_8485 == std::string ("intpntGfeas")))
  {
    {
      return (int)55;
    }
  }
  {}
  if ((_8485 == std::string ("intpntMu")))
  {
    {
      return (int)62;
    }
  }
  {}
  if ((_8485 == std::string ("intpntInitIterTime")))
  {
    {
      return (int)57;
    }
  }
  {}
  if ((_8485 == std::string ("intpntFactorTime")))
  {
    {
      return (int)53;
    }
  }
  {}
  if ((_8485 == std::string ("intpntInitSearchTime")))
  {
    {
      return (int)58;
    }
  }
  {}
  if ((_8485 == std::string ("intpntFormSearchTime")))
  {
    {
      return (int)54;
    }
  }
  {}
  if ((_8485 == std::string ("intpntUpdateTime")))
  {
    {
      return (int)67;
    }
  }
  {}
  if ((_8485 == std::string ("intpntFactorSetupTime")))
  {
    {
      return (int)46;
    }
  }
  {}
  if ((_8485 == std::string ("intpntFactorSchurTime")))
  {
    {
      return (int)40;
    }
  }
  {}
  if ((_8485 == std::string ("intpntFactorHatSchurTime")))
  {
    {
      return (int)37;
    }
  }
  {}
  if ((_8485 == std::string ("intpntFactorHatSchurPushTime")))
  {
    {
      return (int)36;
    }
  }
  {}
  if ((_8485 == std::string ("intpntFactorHatSchurPullTime")))
  {
    {
      return (int)34;
    }
  }
  {}
  if ((_8485 == std::string ("intpntFactorBarSchurTime")))
  {
    {
      return (int)14;
    }
  }
  {}
  if ((_8485 == std::string ("intpntFactorBarSchurDeTabTime")))
  {
    {
      return (int)11;
    }
  }
  {}
  if ((_8485 == std::string ("intpntFactorBarSchurSpTabTime")))
  {
    {
      return (int)13;
    }
  }
  {}
  if ((_8485 == std::string ("intpntFactorSparseLTime")))
  {
    {
      return (int)50;
    }
  }
  {}
  if ((_8485 == std::string ("intpntFactorSparseLUpdateLastTime")))
  {
    {
      return (int)52;
    }
  }
  {}
  if ((_8485 == std::string ("intpntFactorSparseLFactorLastTime")))
  {
    {
      return (int)48;
    }
  }
  {}
  if ((_8485 == std::string ("intpntFactorDenseLTime")))
  {
    {
      return (int)29;
    }
  }
  {}
  if ((_8485 == std::string ("intpntFactorDenseTime")))
  {
    {
      return (int)30;
    }
  }
  {}
  if ((_8485 == std::string ("intpntFactorDenseDotaTime")))
  {
    {
      return (int)17;
    }
  }
  {}
  if ((_8485 == std::string ("intpntFactorDenseDotaSolveTime")))
  {
    {
      return (int)16;
    }
  }
  {}
  if ((_8485 == std::string ("intpntFactorDenseDotatdotaTime")))
  {
    {
      return (int)19;
    }
  }
  {}
  if ((_8485 == std::string ("intpntFactorDenseDotlInitTime")))
  {
    {
      return (int)26;
    }
  }
  {}
  if ((_8485 == std::string ("intpntFactorDenseDotlFactorTime")))
  {
    {
      return (int)25;
    }
  }
  {}
  if ((_8485 == std::string ("intpntIterNonCorrectorFlops")))
  {
    {
      return (int)59;
    }
  }
  {}
  if ((_8485 == std::string ("intpntIterOneCorrectorFlops")))
  {
    {
      return (int)60;
    }
  }
  {}
  if ((_8485 == std::string ("intpntSolveTime")))
  {
    {
      return (int)66;
    }
  }
  {}
  if ((_8485 == std::string ("intpntIterRefTime")))
  {
    {
      return (int)61;
    }
  }
  {}
  if ((_8485 == std::string ("intpntSolveSparseLTime")))
  {
    {
      return (int)65;
    }
  }
  {}
  if ((_8485 == std::string ("intpntSolveDenseLTime")))
  {
    {
      return (int)64;
    }
  }
  {}
  if ((_8485 == std::string ("intpntFactorSetupFlops")))
  {
    {
      return (int)42;
    }
  }
  {}
  if ((_8485 == std::string ("intpntFactorSetupHatSchurFlops")))
  {
    {
      return (int)44;
    }
  }
  {}
  if ((_8485 == std::string ("intpntFactorSchurFlops")))
  {
    {
      return (int)39;
    }
  }
  {}
  if ((_8485 == std::string ("intpntFactorHatSchurFlops")))
  {
    {
      return (int)32;
    }
  }
  {}
  if ((_8485 == std::string ("intpntFactorHatSchurPushFlops")))
  {
    {
      return (int)35;
    }
  }
  {}
  if ((_8485 == std::string ("intpntFactorHatSchurPullFlops")))
  {
    {
      return (int)33;
    }
  }
  {}
  if ((_8485 == std::string ("intpntFactorBarSchurFlops")))
  {
    {
      return (int)12;
    }
  }
  {}
  if ((_8485 == std::string ("intpntFactorSparseLFlops")))
  {
    {
      return (int)49;
    }
  }
  {}
  if ((_8485 == std::string ("intpntFactorMlOrderSparseLFlops")))
  {
    {
      return (int)38;
    }
  }
  {}
  if ((_8485 == std::string ("intpntFactorGpOrderSparseLFlops")))
  {
    {
      return (int)31;
    }
  }
  {}
  if ((_8485 == std::string ("intpntFactorSparseLUpdateLastFlops")))
  {
    {
      return (int)51;
    }
  }
  {}
  if ((_8485 == std::string ("intpntFactorSparseLFactorLastFlops")))
  {
    {
      return (int)47;
    }
  }
  {}
  if ((_8485 == std::string ("intpntFactorDenseLFlops")))
  {
    {
      return (int)28;
    }
  }
  {}
  if ((_8485 == std::string ("intpntFactorDenseFlops")))
  {
    {
      return (int)27;
    }
  }
  {}
  if ((_8485 == std::string ("intpntFactorDenseDotaFlops")))
  {
    {
      return (int)15;
    }
  }
  {}
  if ((_8485 == std::string ("intpntFactorDenseDotatdotaFlops")))
  {
    {
      return (int)18;
    }
  }
  {}
  if ((_8485 == std::string ("intpntFactorDenseDotlFactor_initFlops")))
  {
    {
      return (int)23;
    }
  }
  {}
  if ((_8485 == std::string ("intpntFactorDenseDotlFactorFlops")))
  {
    {
      return (int)24;
    }
  }
  {}
  if ((_8485 == std::string ("intpntFactorDenseDotl11FactorFlops")))
  {
    {
      return (int)20;
    }
  }
  {}
  if ((_8485 == std::string ("intpntFactorDenseDotl21FactorFlops")))
  {
    {
      return (int)21;
    }
  }
  {}
  if ((_8485 == std::string ("intpntFactorDenseDotl22FactorFlops")))
  {
    {
      return (int)22;
    }
  }
  {}
  if ((_8485 == std::string ("presolveAcoltTime")))
  {
    {
      return (int)68;
    }
  }
  {}
  if ((_8485 == std::string ("presolveSetupTime")))
  {
    {
      return (int)73;
    }
  }
  {}
  if ((_8485 == std::string ("presolveCheckproTime")))
  {
    {
      return (int)69;
    }
  }
  {}
  if ((_8485 == std::string ("presolveDupconTime")))
  {
    {
      return (int)70;
    }
  }
  {}
  if ((_8485 == std::string ("presolveDupvarTime")))
  {
    {
      return (int)71;
    }
  }
  {}
  if ((_8485 == std::string ("presolveFinalTime")))
  {
    {
      return (int)72;
    }
  }
  {}
  if ((_8485 == std::string ("presolveSubDomvarTime")))
  {
    {
      return (int)74;
    }
  }
  {}
  if ((_8485 == std::string ("presolveSubRelaxTime")))
  {
    {
      return (int)75;
    }
  }
  {}
  if ((_8485 == std::string ("primalSimplexInftime")))
  {
    {
      return (int)76;
    }
  }
  {}
  if ((_8485 == std::string ("dualSimplexInftime")))
  {
    {
      return (int)10;
    }
  }
  {}
  if ((_8485 == std::string ("intpntGpOrderSavedFlops")))
  {
    {
      return (int)56;
    }
  }
  {}
  if ((_8485 == std::string ("intpntFactorSetupDetectDenseTime")))
  {
    {
      return (int)41;
    }
  }
  {}
  if ((_8485 == std::string ("intpntFactorSetupMlOrderTime")))
  {
    {
      return (int)45;
    }
  }
  {}
  if ((_8485 == std::string ("intpntFactorSetupGpOrderTime")))
  {
    {
      return (int)43;
    }
  }
  {}
  if ((_8485 == std::string ("biCrashTime")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8485 == std::string ("biCrashLuTime")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8485 == std::string ("biFactorTime")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_8485 == std::string ("biFactorWork")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_8485 == std::string ("biPrimalDone")))
  {
    {
      return (int)7;
    }
  }
  {}
  if ((_8485 == std::string ("biDualDone")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8485 == std::string ("simPrimalObj")))
  {
    {
      return (int)82;
    }
  }
  {}
  if ((_8485 == std::string ("simPrimalFeas")))
  {
    {
      return (int)81;
    }
  }
  {}
  if ((_8485 == std::string ("simDualObj")))
  {
    {
      return (int)80;
    }
  }
  {}
  if ((_8485 == std::string ("simDualFeas")))
  {
    {
      return (int)79;
    }
  }
  {}
  if ((_8485 == std::string ("biPrimalObj")))
  {
    {
      return (int)9;
    }
  }
  {}
  if ((_8485 == std::string ("biDualObj")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_8485 == std::string ("biPrimalFeas")))
  {
    {
      return (int)8;
    }
  }
  {}
  if ((_8485 == std::string ("biDualFeas")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8485 == std::string ("intpntPurifyTime")))
  {
    {
      return (int)63;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_stakey_value(const std::string & _8486){
  if ((_8486 == std::string ("unk")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8486 == std::string ("bas")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8486 == std::string ("supbas")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8486 == std::string ("low")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8486 == std::string ("upr")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_8486 == std::string ("fix")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_8486 == std::string ("inf")))
  {
    {
      return (int)6;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_problemtype_value(const std::string & _8487){
  if ((_8487 == std::string ("lo")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8487 == std::string ("qo")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8487 == std::string ("qcqo")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8487 == std::string ("conic")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8487 == std::string ("mixed")))
  {
    {
      return (int)4;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_simhotstart_value(const std::string & _8488){
  if ((_8488 == std::string ("none")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8488 == std::string ("free")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8488 == std::string ("statusKeys")))
  {
    {
      return (int)2;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_miomode_value(const std::string & _8489){
  if ((_8489 == std::string ("ignored")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8489 == std::string ("satisfied")))
  {
    {
      return (int)1;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_nametype_value(const std::string & _8490){
  if ((_8490 == std::string ("gen")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8490 == std::string ("mps")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8490 == std::string ("lp")))
  {
    {
      return (int)2;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_soltype_value(const std::string & _8491){
  if ((_8491 == std::string ("bas")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8491 == std::string ("itr")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8491 == std::string ("itg")))
  {
    {
      return (int)2;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_feature_value(const std::string & _8492){
  if ((_8492 == std::string ("pts")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8492 == std::string ("pton")))
  {
    {
      return (int)1;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_streamtype_value(const std::string & _8493){
  if ((_8493 == std::string ("log")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8493 == std::string ("msg")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8493 == std::string ("err")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8493 == std::string ("wrn")))
  {
    {
      return (int)3;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_symmattype_value(const std::string & _8494){
  if ((_8494 == std::string ("sparse")))
  {
    {
      return (int)0;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_mark_value(const std::string & _8495){
  if ((_8495 == std::string ("lo")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8495 == std::string ("up")))
  {
    {
      return (int)1;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_intpnthotstart_value(const std::string & _8496){
  if ((_8496 == std::string ("none")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8496 == std::string ("primal")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8496 == std::string ("dual")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8496 == std::string ("primalDual")))
  {
    {
      return (int)3;
    }
  }
  {}
  return (-(int)1);
}
int mosek::fusion::p_Parameters::string_to_callbackcode_value(const std::string & _8497){
  if ((_8497 == std::string ("beginRootCutgen")))
  {
    {
      return (int)22;
    }
  }
  {}
  if ((_8497 == std::string ("imRootCutgen")))
  {
    {
      return (int)76;
    }
  }
  {}
  if ((_8497 == std::string ("endRootCutgen")))
  {
    {
      return (int)51;
    }
  }
  {}
  if ((_8497 == std::string ("beginOptimizer")))
  {
    {
      return (int)12;
    }
  }
  {}
  if ((_8497 == std::string ("endOptimizer")))
  {
    {
      return (int)41;
    }
  }
  {}
  if ((_8497 == std::string ("beginPresolve")))
  {
    {
      return (int)13;
    }
  }
  {}
  if ((_8497 == std::string ("updatePresolve")))
  {
    {
      return (int)88;
    }
  }
  {}
  if ((_8497 == std::string ("imPresolve")))
  {
    {
      return (int)70;
    }
  }
  {}
  if ((_8497 == std::string ("endPresolve")))
  {
    {
      return (int)42;
    }
  }
  {}
  if ((_8497 == std::string ("beginIntpnt")))
  {
    {
      return (int)9;
    }
  }
  {}
  if ((_8497 == std::string ("intpnt")))
  {
    {
      return (int)79;
    }
  }
  {}
  if ((_8497 == std::string ("imIntpnt")))
  {
    {
      return (int)62;
    }
  }
  {}
  if ((_8497 == std::string ("endIntpnt")))
  {
    {
      return (int)38;
    }
  }
  {}
  if ((_8497 == std::string ("beginConic")))
  {
    {
      return (int)1;
    }
  }
  {}
  if ((_8497 == std::string ("conic")))
  {
    {
      return (int)27;
    }
  }
  {}
  if ((_8497 == std::string ("imConic")))
  {
    {
      return (int)57;
    }
  }
  {}
  if ((_8497 == std::string ("endConic")))
  {
    {
      return (int)30;
    }
  }
  {}
  if ((_8497 == std::string ("primalSimplex")))
  {
    {
      return (int)81;
    }
  }
  {}
  if ((_8497 == std::string ("dualSimplex")))
  {
    {
      return (int)28;
    }
  }
  {}
  if ((_8497 == std::string ("beginBi")))
  {
    {
      return (int)0;
    }
  }
  {}
  if ((_8497 == std::string ("imBi")))
  {
    {
      return (int)56;
    }
  }
  {}
  if ((_8497 == std::string ("endBi")))
  {
    {
      return (int)29;
    }
  }
  {}
  if ((_8497 == std::string ("beginPrimalBi")))
  {
    {
      return (int)14;
    }
  }
  {}
  if ((_8497 == std::string ("imPrimalBi")))
  {
    {
      return (int)71;
    }
  }
  {}
  if ((_8497 == std::string ("updatePrimalBi")))
  {
    {
      return (int)89;
    }
  }
  {}
  if ((_8497 == std::string ("endPrimalBi")))
  {
    {
      return (int)43;
    }
  }
  {}
  if ((_8497 == std::string ("beginDualBi")))
  {
    {
      return (int)2;
    }
  }
  {}
  if ((_8497 == std::string ("imDualBi")))
  {
    {
      return (int)58;
    }
  }
  {}
  if ((_8497 == std::string ("updateDualBi")))
  {
    {
      return (int)85;
    }
  }
  {}
  if ((_8497 == std::string ("endDualBi")))
  {
    {
      return (int)31;
    }
  }
  {}
  if ((_8497 == std::string ("beginSimplexBi")))
  {
    {
      return (int)24;
    }
  }
  {}
  if ((_8497 == std::string ("imSimplexBi")))
  {
    {
      return (int)78;
    }
  }
  {}
  if ((_8497 == std::string ("beginPrimalSimplexBi")))
  {
    {
      return (int)19;
    }
  }
  {}
  if ((_8497 == std::string ("updatePrimalSimplexBi")))
  {
    {
      return (int)91;
    }
  }
  {}
  if ((_8497 == std::string ("endPrimalSimplexBi")))
  {
    {
      return (int)48;
    }
  }
  {}
  if ((_8497 == std::string ("beginDualSimplexBi")))
  {
    {
      return (int)6;
    }
  }
  {}
  if ((_8497 == std::string ("updateDualSimplexBi")))
  {
    {
      return (int)87;
    }
  }
  {}
  if ((_8497 == std::string ("endDualSimplexBi")))
  {
    {
      return (int)35;
    }
  }
  {}
  if ((_8497 == std::string ("endSimplexBi")))
  {
    {
      return (int)53;
    }
  }
  {}
  if ((_8497 == std::string ("beginMio")))
  {
    {
      return (int)11;
    }
  }
  {}
  if ((_8497 == std::string ("imMio")))
  {
    {
      return (int)65;
    }
  }
  {}
  if ((_8497 == std::string ("newIntMio")))
  {
    {
      return (int)80;
    }
  }
  {}
  if ((_8497 == std::string ("endMio")))
  {
    {
      return (int)40;
    }
  }
  {}
  if ((_8497 == std::string ("beginSimplex")))
  {
    {
      return (int)23;
    }
  }
  {}
  if ((_8497 == std::string ("beginDualSimplex")))
  {
    {
      return (int)5;
    }
  }
  {}
  if ((_8497 == std::string ("imDualSimplex")))
  {
    {
      return (int)60;
    }
  }
  {}
  if ((_8497 == std::string ("updateDualSimplex")))
  {
    {
      return (int)86;
    }
  }
  {}
  if ((_8497 == std::string ("endDualSimplex")))
  {
    {
      return (int)34;
    }
  }
  {}
  if ((_8497 == std::string ("beginPrimalSimplex")))
  {
    {
      return (int)18;
    }
  }
  {}
  if ((_8497 == std::string ("imPrimalSimplex")))
  {
    {
      return (int)73;
    }
  }
  {}
  if ((_8497 == std::string ("updatePrimalSimplex")))
  {
    {
      return (int)90;
    }
  }
  {}
  if ((_8497 == std::string ("endPrimalSimplex")))
  {
    {
      return (int)47;
    }
  }
  {}
  if ((_8497 == std::string ("endSimplex")))
  {
    {
      return (int)52;
    }
  }
  {}
  if ((_8497 == std::string ("beginInfeasAna")))
  {
    {
      return (int)8;
    }
  }
  {}
  if ((_8497 == std::string ("endInfeasAna")))
  {
    {
      return (int)37;
    }
  }
  {}
  if ((_8497 == std::string ("imPrimalSensivity")))
  {
    {
      return (int)72;
    }
  }
  {}
  if ((_8497 == std::string ("imDualSensivity")))
  {
    {
      return (int)59;
    }
  }
  {}
  if ((_8497 == std::string ("imMioIntpnt")))
  {
    {
      return (int)67;
    }
  }
  {}
  if ((_8497 == std::string ("imMioPrimalSimplex")))
  {
    {
      return (int)68;
    }
  }
  {}
  if ((_8497 == std::string ("imMioDualSimplex")))
  {
    {
      return (int)66;
    }
  }
  {}
  if ((_8497 == std::string ("beginPrimalSetupBi")))
  {
    {
      return (int)17;
    }
  }
  {}
  if ((_8497 == std::string ("endPrimalSetupBi")))
  {
    {
      return (int)46;
    }
  }
  {}
  if ((_8497 == std::string ("beginDualSetupBi")))
  {
    {
      return (int)4;
    }
  }
  {}
  if ((_8497 == std::string ("endDualSetupBi")))
  {
    {
      return (int)33;
    }
  }
  {}
  if ((_8497 == std::string ("beginPrimalSensitivity")))
  {
    {
      return (int)16;
    }
  }
  {}
  if ((_8497 == std::string ("endPrimalSensitivity")))
  {
    {
      return (int)45;
    }
  }
  {}
  if ((_8497 == std::string ("beginDualSensitivity")))
  {
    {
      return (int)3;
    }
  }
  {}
  if ((_8497 == std::string ("endDualSensitivity")))
  {
    {
      return (int)32;
    }
  }
  {}
  if ((_8497 == std::string ("beginLicenseWait")))
  {
    {
      return (int)10;
    }
  }
  {}
  if ((_8497 == std::string ("endLicenseWait")))
  {
    {
      return (int)39;
    }
  }
  {}
  if ((_8497 == std::string ("imLicenseWait")))
  {
    {
      return (int)63;
    }
  }
  {}
  if ((_8497 == std::string ("beginQcqoReformulate")))
  {
    {
      return (int)20;
    }
  }
  {}
  if ((_8497 == std::string ("endQcqoReformulate")))
  {
    {
      return (int)49;
    }
  }
  {}
  if ((_8497 == std::string ("imQoReformulate")))
  {
    {
      return (int)74;
    }
  }
  {}
  if ((_8497 == std::string ("beginToConic")))
  {
    {
      return (int)25;
    }
  }
  {}
  if ((_8497 == std::string ("endToConic")))
  {
    {
      return (int)54;
    }
  }
  {}
  if ((_8497 == std::string ("beginFullConvexityCheck")))
  {
    {
      return (int)7;
    }
  }
  {}
  if ((_8497 == std::string ("endFullConvexityCheck")))
  {
    {
      return (int)36;
    }
  }
  {}
  if ((_8497 == std::string ("imFullConvexityCheck")))
  {
    {
      return (int)61;
    }
  }
  {}
  if ((_8497 == std::string ("beginPrimalRepair")))
  {
    {
      return (int)15;
    }
  }
  {}
  if ((_8497 == std::string ("endPrimalRepair")))
  {
    {
      return (int)44;
    }
  }
  {}
  if ((_8497 == std::string ("beginRead")))
  {
    {
      return (int)21;
    }
  }
  {}
  if ((_8497 == std::string ("imRead")))
  {
    {
      return (int)75;
    }
  }
  {}
  if ((_8497 == std::string ("endRead")))
  {
    {
      return (int)50;
    }
  }
  {}
  if ((_8497 == std::string ("beginWrite")))
  {
    {
      return (int)26;
    }
  }
  {}
  if ((_8497 == std::string ("endWrite")))
  {
    {
      return (int)55;
    }
  }
  {}
  if ((_8497 == std::string ("readOpfSection")))
  {
    {
      return (int)83;
    }
  }
  {}
  if ((_8497 == std::string ("imLu")))
  {
    {
      return (int)64;
    }
  }
  {}
  if ((_8497 == std::string ("imOrder")))
  {
    {
      return (int)69;
    }
  }
  {}
  if ((_8497 == std::string ("imSimplex")))
  {
    {
      return (int)77;
    }
  }
  {}
  if ((_8497 == std::string ("readOpf")))
  {
    {
      return (int)82;
    }
  }
  {}
  if ((_8497 == std::string ("writeOpf")))
  {
    {
      return (int)92;
    }
  }
  {}
  if ((_8497 == std::string ("solvingRemote")))
  {
    {
      return (int)84;
    }
  }
  {}
  return (-(int)1);
}
void mosek::fusion::p_Parameters::destroy(){}void mosek::fusion::Parameters::destroy() { mosek::fusion::p_Parameters::_get_impl(this)->destroy(); }